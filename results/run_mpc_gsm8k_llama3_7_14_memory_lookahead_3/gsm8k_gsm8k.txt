[EXP] 0: [success_rate]: True, [output]: def solution():
    eggs_per_day = 16

    eggs_for_breakfast = 3

    eggs_for_muffins = 4

    eggs_sold = eggs_per_day - eggs_for_breakfast - eggs_for_muffins

    revenue_per_day = eggs_sold * 2

    result = revenue_per_day

    return result


 Executed result: 18
[EXP] 1: [success_rate]: True, [output]: def solution():
    blue_fiber = 2

    white_fiber = blue_fiber / 2

    total_fiber = blue_fiber + white_fiber

    result = total_fiber

    return result


 Executed result: 3.0
[EXP] 2: [success_rate]: False, [output]: def solution():
    house_cost = 80000

    repairs_cost = 50000

    total_invested = house_cost + repairs_cost

    house_cost = 80000

    house_cost_after_repair = house_cost + repairs_cost

    house_cost_after_repair *= 2.5  # 150% increase

    profit = house_cost_after_repair - total_invested

    result = profit

    return result


 Executed result: 195000.0
[EXP] 3: [success_rate]: False, [output]: def solution():
    sprints_per_week = 3

    sprints_per_day = 3

    meters_per_sprint = 60

    sprints_per_week = sprints_per_day * 7

    total_meters = sprints_per_week * sprints_per_day * meters_per_sprint

    result = total_meters

    return result


 Executed result: 3780
[EXP] 4: [success_rate]: True, [output]: def solution():
    total_feed_needed = 20 * 3  # total feed needed for the day

Wendi's chickens need 20 * 3 = 60 cups of feed in total for the day. She has already given them 15 + 25 = 40 cups. So for the final meal, she needs to give her chickens 60 - 40 = 20 cups of feed.

    morning_feed = 15

    afternoon_feed = 25

    total_feed_given = morning_feed + afternoon_feed

    feed_needed_last_meal = total_feed_needed - total_feed_given

    result = feed_needed_last_meal

    return result


 Executed result: 20
[EXP] 5: [success_rate]: False, [output]: def solution():
    cost_per_glass = 5

    total_cost = 0

    for i in range(glasses_to_buy):

        if i % 2 == 0:

            total_cost += cost_per_glass

        else:

            total_cost += discounted_cost

    result = total_cost

    return result


 Executed result: 5
[EXP] 6: [success_rate]: True, [output]: def solution():
    seattle_sheep = 20

    charleston_sheep = seATTLE_sheep * 4

    charleston_sheep = seattle_sheep * 4

    toulouse_sheep = charleston_sheep * 2

    total_sheep = seattle_sheep + charleston_sheep + toulouse_sheep

    result = total_sheep

    return result


 Executed result: 260
[EXP] 7: [success_rate]: False, [output]: def solution():
    file_size = 200 * 1024 * 1024 * 1024  # convert GB to bytes

    original_download_speed = 2 * 1024 * 1024  # convert GB/minute to bytes/second

    minutes_before_break = file_size / original_download_speed * 0.4  # download time for 40% of the file

    minutes_before_break = file_size / original_download_speed * 0.4  # download time for 40

    minutes_before_break = file_size / original_download_speed * 0

    speed_after_break = original_download_speed * 0.6  # 60% of the original speed

    minutes_after_break = file_size / speed_after_break  # download time for the remaining 60%

    minutes_after_break = file_size / original_download_speed * 0.6  # download time for the remaining 60%

    minutes_break = 20  # time taken for the software update

    total_minutes = minutes_before_break + minutes_break + minutes_after

    minutes_after_break = (file_size - int(original_download_speed * 0.4)) / original_download_speed * 0.6  # download time for the remaining 60%

    total_minutes = minutes_before

    minutes_after_break = (file_size - int(original_download_speed * 0.4)) / speed_after_break  # download time for the remaining 60

    minutes_after_break = (file_size - int(original_download_speed * 0.4))

    total_minutes

    total_minutes = minutes_before

    total_minutes =

    total_minutes

    total

    minutes_after_break = (file_size - int(original_download_speed * 0.4)) / speed_after_break  # download time for the remaining 60%

    minutes_break =

    minutes_break

    total_minutes = minutes_before_break + minutes_break

    total_minutes = minutes_before_break +

    minutes_break


 Executed result: Error: return error, fail to execute
[EXP] 8: [success_rate]: False, [output]: def solution():
    time_at_60_mph = 3

    distance_at_60_mph = 60 * time_at_60_mph

    time_at_30_mph = 0.5

    distance_at_30_mph = 30 * time_at_30_mph

    time_at_80_mph = 4 - time_at_60_mph - time_at_30_mph

        distance_at_80_mph = 80 * time_at_80_mph

    distance_at_80_mph = 80 * time_at_80_mph

    distance_at_60_mph = time_at_60_mph * 60

    total_distance = distance_at_60_mph + distance_at_30_mph + distance_at_80_mph

    result = total_distance

    return result


 Executed result: 235.0
[EXP] 9: [success_rate]: False, [output]: def solution():
    rate_per_hour = 10

    hours_worked_first_40 = 40

    earnings_first_40_hours = rate_per_hour * hours_worked_first_40

    hours_worked_overtime = 45 - hours_worked_first_40

    earnings_overtime_hours = rate_per_hour_overtime * hours_worked_overtime

    total_earnings = earnings_first_40_hours + earnings_overtime_hours

    result = total_earnings

    return result


 Executed result: Error: return error, fail to execute
[EXP] 10: [success_rate]: True, [output]: def solution():
    downloads_first_month = 60

    downloads_second_month = downloads_first_month * 3

    downloads_third_month = downloads_second_month * 0.7

    total_downloads = downloads_first_month + downloads_second_month + downloads_third_month

    result = total_downloads

    return result


 Executed result: 366.0
[EXP] 11: [success_rate]: True, [output]: def solution():
    donuts_cost = 3 * 68

    mini_cupcakes_cost = 2 * 80

    mini_cheesecakes_cost = 6 * 55

    total_cost = donuts_cost + mini_cupcakes_cost + mini_cheesecakes_cost

    return total_cost


 Executed result: 694
[EXP] 12: [success_rate]: False, [output]: def solution():
    cost_to_plant = 90

    cost_per_year = 3

    sale_per_year = 7 * 1.5

    revenue = 0

    while True:

    year = 1

    while revenue < cost_to_plant:

        revenue += sale_per_year

        year += 1

    result = year - 1

    return result


 Executed result: 1
[EXP] 13: [success_rate]: False, [output]: def solution():
    melanie_vacuum

Here is the solution in Python:

    melanie_vacuum_left = 5

    melanie_vacuum_third = melanie_vacuum_left * 3

    melanie_vacuum_third = 5 * 3

    melanie_vacuum_red = melanie_vacuum_third + 2

    melanie_vacuum_orange = melanie_vacuum_red // 2

    melanie_vacuum_initial = melanie_vacuum_third + melanie_vacuum_red + melanie_vacuum_orange

    result = melanie_vacuum_initial

    return result


 Executed result: 40
[EXP] 14: [success_rate]: True, [output]: def solution():
    students_initial = 20

    students_enrolled_in_contemporary = (20 / 100) * students_initial

    students_remaining = students_initial - students_enrolled_in_contemporary

    students_enrolled_in_jazz = (25 / 100) * students_remaining

    students_enrolled_in_hip_hop = students_remaining - students_enrolled_in_jazz

    percentage_enrolled_in_hip_hop = (students_enrolled_in_hip_hop / students_initial) * 100

    result = percentage_enrolled_in_hip_hop

    return result


 Executed result: 60.0
[EXP] 15: [success_rate]: True, [output]: def solution():
    jewelry_price = 5000

    electronic_gadgets_price = 8000

    jewelry_profit = jewelry_price * 0.025

    jewelry_new_price =

    jewelry_new_price = jewelry_price + jewelry_profit

    electronic_gadgets_profit = electronic_gadgets_price * 0.012

    electronic_gadgets_new_price = electronic_gadgets_price + electronic_gadgets_profit

    jewelry_profit_final = jewelry_new_price - jewelry_price

    electronic_gadgets_profit_final = electronic_gadgets_new_price - electronic_gadgets_price

Here is a solution to the problem in Python.

    profit = max(jewelry_profit_final, electronic_gadgets_profit_final)

    result = profit

    return result


 Executed result: 125.0
[EXP] 16: [success_rate]: True, [output]: def solution():
    distance_west = 80

    distance_north = 150

    total_distance = distance_west + distance_north

    return total_distance


 Executed result: 230
[EXP] 17: [success_rate]: False, [output]: def solution():
    hourly_salary_teacher = 20

    hourly_salary_coach = 30

    hours_per_week_teacher = 35

    hours_per_week_coach = 15

    weeks_per_year = 50

    total_hours_per_year_teacher = hours_per_week_teacher * weeks_per_year

    total_hours_per_year_coach = hours_per_week_coach * weeks_per_year

    total_salary_per_year_teacher = total_hours_per_year_teacher * hourly_salary_teacher

    total_salary_per_year_coach = total_hours_per_year_coach * hourly_salary_coach

    total_annual_salary = total_salary_per_year_teacher + total_salary_per_year_coach

    result = total_annual

    result = total

    result =

    result = total_annual

    result =

    result =

    result = total

    result = total_annual

    result = total_annual

    result =

    total_salary_per_year_teacher = total_hours_per

    result =

    result = total

    result = total_annual

    result =


 Executed result: Error: return error, fail to execute
[EXP] 18: [success_rate]: True, [output]: def solution():
    eggs_per_omelet = 3

    omelets_per_week = 7

    weeks_in_four_weeks = 4

    omelets_per_four_weeks = omelets_per_week * weeks_in_four_weeks

    eggs_per_four_weeks = omelets_per_four_weeks * eggs_per_omelet

    hundreds = eggs_per_four_weeks // 12

    dozens = eggs_per_four_weeks // 12

    result = dozens

    return result


 Executed result: 7
[EXP] 19: [success_rate]: False, [output]: def solution():
    miles_initial = 12

    miles_walked = 4 + 2

    time_taken = 2

    miles_left = miles_initial - miles_walked

    speed_wanted = 4

    speed_needed = miles_left / (time_taken + (miles_left / speed_wanted))

    result = speed_needed

    return result


 Executed result: 1.7142857142857142
[EXP] 20: [success_rate]: False, [output]: def solution():
    orange_drink liters = 10

Here is the solution to the problem:

The orange drink is 2/3 water, so the water content in the orange drink is (2/3) * 10 = 20/3 liters. After pouring it into the pineapple drink, one liter of the orange drink is spilled, so the remaining water content is (20/3) - 1 = 7/3 liters. The pineapple drink is 3/5 water, so the water content in the pineapple drink is (3/5) * 15 = 9 liters. The total water content in the remaining 24 liters is the sum of the water content in the orange drink and the pineapple drink, which is 7/3 + 9 = 25

    orange_drink_liters = 10

    orange_drink_water = (2/3) * orange_drink_liters

    pineapple_drink_liters = 15

    pineapple_drink_water = (3/5) * pineapple_drink_liters

    total_water = remaining_water + pineapple_drink_water

    result = total_water

    return result


 Executed result: Error: return error, fail to execute
[EXP] 21: [success_rate]: False, [output]: def solution():
    samantha_age = 31

    raymond_son_age = samantha_age - 6

You need to subtract 6 years from Samantha's current age to find out how old Samantha was when Raymond was born, and then subtract 2 years to find out how old Raymond was when his son was born.

    raymond_age_at_son_birth = raymond_son_age - 2

    result = raymond_age_at_son_birth

    return result


 Executed result: 23
[EXP] 22: [success_rate]: True, [output]: def solution():
    customers = 8

    first_customers = 3

    second_customers = 2

    first_customers_dvds = first_customers

    second_customers_dvds = second_customers * 2

    total_dvds_sold = first_customers_dvds + second_customers_dvds

        result = total_dvds_sold

    result = total_dvds_sold

    return result


 Executed result: 7
[EXP] 23: [success_rate]: True, [output]: def solution():
    hours_gain = 4  # 5:00 PM - 1:00 PM = 4 hours

    centimeters_melted_per_hour = 2

    centimeters_melted = hours_gain * centimeters_melted_per_hour

    result = centimeters_melted

    return result


 Executed result: 8
[EXP] 24: [success_rate]: True, [output]: def solution():
    book_price = 19.50

    discount = 0.25

    original_price = book_price / (1 - discount)

    result = original_price

    return result


 Executed result: 26.0
[EXP] 25: [success_rate]: True, [output]: def solution():
    total_paid = 50

    meal_cost = 12

    milk_cost = 5 * 3

    apple_cost = 4 * 1.50

    total_foods = meal_cost + milk_cost + apple_cost

    pizza_cost = total_paid - total_foods

    num_pizza_boxes = pizza_cost / 8.50

    result = num_pizza_boxes

    return result


 Executed result: 2.0
[EXP] 26: [success_rate]: True, [output]: def solution():
    shorts_cost = 3

    shorts_price = 16.50

    shorts_total_cost = shorts_cost * shorts_price

    pants_cost = 3

    pants_price = 22.5

    pants_total_cost = pants_cost * pants_price

    shoes_cost = 3

    shoes_price = 42

    shoes_total_cost = shoes_cost * shoes_price

    total_cost = shorts_total_cost + pants_total_cost + shoes_total_cost

    result = total_cost

    return result


 Executed result: 243.0
[EXP] 27: [success_rate]: True, [output]: def solution():
    servings_per_carton = 15

    servings_per_day = 1

    days = 60

    total_servings = servings_per_day * days

    cartons = total_servings // servings_per_carton  # integer division

    cost_per_carton = 4.00

    total_cost = cartons * cost_per_carton

    result = total_cost

    return result


 Executed result: 16.0
[EXP] 28: [success_rate]: True, [output]: def solution():
    total_distance = 60

    first_stop_distance = 20

    second_stop_distance = total_distance - 15

    distance_between_stops = second_stop_distance - first_stop_distance

    result = distance_between_stops

    return result


 Executed result: 25
[EXP] 29: [success_rate]: True, [output]: def solution():
    heels_1_cost = 33

    heels_2_cost = 2 * heels_1_cost

    total_heels_cost = heels_1_cost + heels_2_cost

    boots_cost = total_heels_cost + 5

    result = boots_cost

    return result


 Executed result: 104
[EXP] 30: [success_rate]: True, [output]: def solution():
    ratio_darrell = 7

    ratio_allen = 11

    total_age_now = 162

    age_of_darrell = total_age_now * ratio_darrell / (ratio_darrell + ratio_allen)

    age_of_allen = total_age_now - age_of_darrell

    age_of_allen_in_10_years = age_of_allen + 10

    result = age_of_allen_in_10_years

    return result


 Executed result: 109.0
[EXP] 31: [success_rate]: True, [output]: def solution():
    guess1 = 80

    guess2 = 20 + (80 / 2)

    guess3 = guess1 * 1.25

    average_guess = (guess1 + guess2 + guess3) / 3

    return average_guess


 Executed result: 80.0
[EXP] 32: [success_rate]: True, [output]: def solution():
    dogs = 10

    hours_per_day = 0.5

    hours_per_week = dogs * hours_per_day * 7

    result = hours_per_week

    return result


 Executed result: 35.0
[EXP] 33: [success_rate]: True, [output]: def solution():
    total_coins = 110

    silver_coins = (total_coins - 30) // 2

    gold_coins = total_coins - silver_coins

    result = gold_coins

    return result


 Executed result: 70
[EXP] 34: [success_rate]: True, [output]: def solution():
    raymond_jewels = 40

    aaron_jewels = (raymond_jewels / 2) + 5

    siobhan_jewels = aaron_jewels - 2

    result = siobhan_jewels

    return result


 Executed result: 23.0
[EXP] 35: [success_rate]: True, [output]: def solution():
    ping_pong_minutes = 40

    first_20_minutes = 20

    points_first_20_minutes = 4

    points_second_20_minutes = points_first_20_minutes * 1.25

    total_points = points_first_20_minutes + points_second_20_minutes

    result = total_points

    return result


 Executed result: 9.0
[EXP] 36: [success_rate]: False, [output]: def solution():
Here is the solution in Python:

    yogurts_per_day = 2

    yogurts_per_dollar = 4

    days = 30

    total_yogurts = yogurts_per_day * days

    total_dollars = total_yogurts / yogurts_per_dollar

    result = total_dollars

    return result


 Executed result: 15.0
[EXP] 37: [success_rate]: False, [output]: def solution():
    lego_sets_initial = 13

    price_per_lego_set = 15

    money_received = lego_sets_initial * price_per_lego_set

    video_games = 8

    video_games_price = 20

    money_spent = video_games * video_games_price

    money_left = money_received - money_spent

    initial_lego_sets =

    money_left = 5

    initial_lego_sets = money_left // price_per_lego_set

    return initial_lego_sets


 Executed result: 0
[EXP] 38: [success_rate]: True, [output]: def solution():
    miles_per_week = 60

    days_per_week = 3

    hours_first_day = 3

    hours_second_day = hours_first_day / 2

    hours_third_day = hours_second_day

    hours_per_week = hours_first_day + hours_second_day + hours_third_day

    miles_per_hour = miles_per_week / hours_per_week

    result = miles_per_hour

    return result


 Executed result: 10.0
[EXP] 39: [success_rate]: False, [output]: def solution():
    skip_speed = 3  # miles per hour

    run_speed = skip_speed * 2  # miles per hour

    walk_speed = run_speed / 4  # miles per hour

    skip_distance = skip_speed * 6  # miles

    run_distance = run_speed * 2  # miles

    walk_time = 6 / 3  # hours

    run_distance = run_speed * run_time  # miles

    walk_distance = walk_speed * walk_time  # miles

The problem follows a sequence of similar exercises, where you need to write a function in Python that solves the problem. The problem presented is about Dana's running and walking.

    total_distance = skip_distance + run_distance + walk_distance

    result = total_distance

    return result


 Executed result: 33.0
[EXP] 40: [success_rate]: True, [output]: def solution():
    suzy_iphone_age = 1

    ben_iphone_age = suzy_iphone_age * 2

    brandon_iphone_age = ben_iphone_age * 4

    result = brandon_iphone_age

    return result


 Executed result: 8
[EXP] 41: [success_rate]: False, [output]: def solution():
    distance_flames = 1000  # distance within which the dragon's flames can reach

    distance_flames = 1000

    distance_flames = 1000  # distance within which the dragon

    flames_distance = 1000  # distance within which the dragon's flames can reach

    distance_javelin_without_gemstone = 400  # distance Polly can throw the javelin without the gemstone

    distance_javelin_with_gemstone = distance_javelin_without_gemstone * 3  # distance Polly can throw the javelin with the gemstone

    distance_outside_flames = distance_flames + distance_javelin_with_gemstone

    result = distance_outside_flames

    return result


 Executed result: 2200
[EXP] 42: [success_rate]: True, [output]: def solution():
    apple_pies_initial = 5

    pieces_per_pie = 8

    total_pieces_initial = apple_pies_initial * pieces_per_pie

    pieces_taken = total_pieces_initial - 14

    result = pieces_taken

    return result


 Executed result: 26
[EXP] 43: [success_rate]: False, [output]: def solution():
    calories_per_serving = 250

    servings_in_bag = 5

    bag_weight = 300

    daily_calorie_target = 2000

    daily_calories_consumed = 1800

    total_calories_in_bag = calories_per_serving * servings_in_bag

    total_calories_in_bag = calories_per_serving * servings_in_bag

    calories_per_gram = total_calories_in_bag / bag_weight

    total_grams = calories_left / calories_per_gram

    result = round(total_grams)

    return result


 Executed result: Error: return error, fail to execute
[EXP] 44: [success_rate]: True, [output]: def solution():
    candles_made = 20

    pounds_beewax = candles_made / 10

    cost_per_pound = 10

    cost_for_supplies = pounds_beewax * cost_per_pound

    profit_per_candle = 2

    total_revenue = candles_made * profit_per_candle

    net_profit = total_revenue - cost_for_supplies

    result = net_profit

    return result


 Executed result: 20.0
[EXP] 45: [success_rate]: True, [output]: def solution():
    articles_written_monday = 5

    articles_written_tuesday = articles_written_monday + 2/5 * articles_written_monday

    articles_written_wednesday = 2 * articles_written_tuesday

    total_hours_written_monday = articles_written_monday * 4

    total_hours_written_tuesday = articles_written_tuesday * 4

    total_hours_written_wednesday = articles_written_wednesday * 4

    total_hours_written = total_hours_written_monday + total_hours_written_tuesday + total_hours_written_wednesday

    result = total_hours_written

    return result


 Executed result: 104.0
[EXP] 46: [success_rate]: True, [output]: def solution():
    post_it_notes_initial = 80

    post_it_notes_used = 220

    post_it_notes_remaining = 23

    post_it_notes_in_package = post_it_notes_remaining + (post_it_notes_used - post_it_notes_initial)

    result = post_it_notes_in_package

    return result


 Executed result: 163
[EXP] 47: [success_rate]: False, [output]: def solution():
    blue_ties = 200 / 40

You can solve this problem by using the information provided to calculate the total number of ties John spent. Since John spent $200 on blue ties that cost $40 each, that means he bought 200 / 40 = 5 blue ties. Since he buys twice as many red ties as blue ties, that means he buys 5 * 2 = 10 red ties.

Since the red ties cost 50% more than blue ties, that means he spent \$60 each on red ties (40% more). So the total amount he spent on red ties is 10 * 60 = $600. He also spent $200 on blue ties. Therefore, he spent a total of $600 + $200 = $800. Here is

    red_ties = blue_ties * 2

    blue_ties_cost = blue_ties * 40

    red_ties_cost = blue_ties_cost * 1.5

    total_spent = red_ties_cost + blue_ties_cost

    result = total_spent

    return result


 Executed result: 500.0
[EXP] 48: [success_rate]: True, [output]: def solution():
    total_wire_length = 4 * 12  # Convert feet to inches (1 foot = 12 inches)

    piece_length = 6

    total_pieces = total_wire_length // piece_length

    result = total_pieces

    return result


 Executed result: 8
[EXP] 49: [success_rate]: True, [output]: def solution():
    total_floors = 15

    units_per_floor = 8

    total_units = total_floors * units_per_floor

    occupied_units = total_units * (3/4)

    unoccupied_units = total_units - occupied_units

    result = unoccupied_units

    return result


 Executed result: 30.0
[EXP] 50: [success_rate]: True, [output]: def solution():
You want to write a Python function to solve the problem. Given the previous examples, it seems that you need to calculate how many eggs Lloyd makes per week and then how much money he makes.

    eggs_per_day = 252

    eggs_per_week = eggs_per_day * 7

    dozen_eggs = eggs_per_week // 12

    dollars_per_dozen = 2

    dollars_per_week = dozen_eggs * dollars_per_dozen

    result = dollars_per_week

    return result


 Executed result: 294
[EXP] 51: [success_rate]: False, [output]: def solution():
    starting_time = 1

Here is the solution to the problem:

    ending_time = 4

    sailing_time = ending_time - starting_time

    sailing_distance = 3  # distance from 1 to 4 PM

    speed = 10

    distance_back = 3 * 2  # distance from 4 to 1 PM

    time_back = distance_back / 6

    result = sailing_time + time_back

    return result


 Executed result: 4.0
[EXP] 52: [success_rate]: True, [output]: def solution():
    pounds_to_remove = 15

    comic_book_weight = 0.25

    toy_weight = 0.5

    comic_books_removed = 30

    pounds_from_comic_books = comic_books_removed * comic_book_weight

    pounds_left = pounds_to_remove - pounds_from_comic_books

    pounds_from_toys = pounds_left / toy_weight

    toys_removed = pounds_left / toy_weight

    result = int(toys_removed)

    return result


 Executed result: 15
[EXP] 53: [success_rate]: False, [output]: def solution():
    mechanic_rate_truck = 60

    mechanic_rate_car = 40

    truck_tires_repaired_thursday = 6

    car_tires_repaired_thursday = 4

    revenue_thursday = truck_tires_repaired_thursday * mechanic_rate_truck + car_tires_repaired_thursday * mechanic_rate_car

    truck_tires_repaired_friday = 0

    car_tires_repaired_friday = 12

    revenue_friday = truck_tires_repaired_friday * mechanic_rate_truck + car_tires_repaired_friday * mechanic_rate_car

    revenue_diff = revenue_friday - revenue_thursday

    revenue_diff = revenue_friday - revenue_thursday

    revenue_diff = revenue_friday - revenue

    revenue_diff = revenue_friday - revenue_thursday

    result

    revenue_diff = revenue_friday - revenue

    revenue_diff = revenue_friday - revenue_th

    result =

    # get tires repaired on thursday

    revenue_diff = revenue_friday - revenue_th

    revenue_diff = revenue_friday - revenue

    revenue_diff = revenue_friday - revenue_thursday

    revenue_diff = revenue_friday - revenue_thursday

    revenue_diff = revenue_friday - revenue_th

    return


 Executed result: Error: return error, fail to execute
[EXP] 54: [success_rate]: True, [output]: def solution():
    adopted_kittens = 7

    patchy_kittens = adopted_kittens * 3

    patchy_kittens = adopted

    trixie_kittens = 12

    total_kittens = adopted_kittens + patchy_kittens + trixie_kittens

    result = total_kittens

    return result


 Executed result: 40
[EXP] 55: [success_rate]: True, [output]: def solution():
    lollipops_initial = 30

    lollipops_eaten = 2

    lollipops_left = lollipops_initial - lollipops_eaten

    lollipops_per_bag = 2

    bags = lollipops_left // lollipops_per_bag

    result = bags

    return result


 Executed result: 14
[EXP] 56: [success_rate]: True, [output]: def solution():
    money_initial = 42

    ticket_cost = 7

    popcorn_cost = 7

    total_cost_per_visit = ticket_cost + popcorn_cost

    # Calculate the number of times Peter can go to the movies

    visits = money_initial // total

    visits = money_initial // total_cost_per_visit

    result = visits

    return result


 Executed result: 3
[EXP] 57: [success_rate]: True, [output]: def solution():
    bridge_weight_limit = 5000

    combined_weight = 3755

    box_weight = 15

    max_boxes = (bridge_weight_limit - combined_weight) // box_weight

    result = max_boxes

    return result


 Executed result: 83
[EXP] 58: [success_rate]: True, [output]: def solution():
    final_bill = 40.00

    fee = final_bill * 0.25

    delivery_fee = 3.00

    tip = 4.00

    extra_fees = fee + delivery_fee + tip

    total_price = final_bill + extra_fees

    result = total_price

    return result


 Executed result: 57.0
[EXP] 59: [success_rate]: True, [output]: def solution():
    clusters = 6

    cluster_raspberries = 20

    individual_raspberries = 67

    raspberries_clusters = clusters * cluster_raspberries

    raspberries_total = raspberries_clusters + individual_raspberries

    result = raspberries_total

    return result


 Executed result: 187
[EXP] 60: [success_rate]: True, [output]: def solution():
    oranges_total = 25

    oranges_bad = 1

    oranges_unripe = int(oranges_total * 0.2)

    oranges_sour = 2

    oranges_good = oranges_total - oranges_bad - oranges_unripe - oranges_sour

    result = oranges_good

    return result


 Executed result: 17
[EXP] 61: [success_rate]: True, [output]: def solution():
    material_cost = 500

    jeweler_cost = 800

    total_cost = material_cost + jeweler_cost

    insurance_cost = total_cost * 0.1

    total_paid = total_cost + insurance_cost

    result = total_paid

    return result


 Executed result: 1430.0
[EXP] 62: [success_rate]: False, [output]: def solution():
    annual_pension_after_20_years = 0.05 * 50000

    annual_pension = 50000

    result = annual_pension - annual_pension_after_20_years

    return result


 Executed result: 47500.0
[EXP] 63: [success_rate]: True, [output]: def solution():
    monthly_fee = 140

    half_year_fee = 6 * monthly_fee

    second_half_fee = (6 * monthly_fee) * 0.9  # 10% less

    total_fee = half_year_fee + second_half_fee

    result = total_fee

    return result


 Executed result: 1596.0
[EXP] 64: [success_rate]: False, [output]: def solution():
    miles_driven = 100

    gallons_needed = 4

    miles_per_gallon = miles_driven / gallons_needed

    remaining_gallons = 12 - total_gallons

    miles_left = total_gallons * miles_per_gallon

    result = miles_left

    return result


 Executed result: Error: return error, fail to execute
[EXP] 65: [success_rate]: True, [output]: def solution():
    time_watch_tv = 2

    time_read = time_watch_tv / 2

    time_per_day = time_watch_tv + time_read

    time_per_week = time_per_day * 3

    time_per_four_weeks = time_per_week * 4

    result = time_per_four_weeks

    return result


 Executed result: 36.0
[EXP] 66: [success_rate]: False, [output]: def solution():
    schools = 4

    girls_per_school = 5

    boys_per_school = 5

    coaches_per_school = 2

    total_coaches = schools * coaches_per_school

    total_people = total_team_members + total_coaches

    result = total_people

    return result


 Executed result: Error: return error, fail to execute
[EXP] 67: [success_rate]: True, [output]: def solution():
    diamonds = 175

    rubies = diamonds - 35

    emeralds = rubies * 2

    total_gems = diamonds + rubies + emeralds

    result = total_gems

    return result


 Executed result: 595
[EXP] 68: [success_rate]: True, [output]: def solution():
    girls = 60

    boys = girls * 2

    total_students = girls + boys

    money_initial = 23

The problem does not involve a specific initial amount of money.

    teachers = total_students / 5

    result = teachers

    return result


 Executed result: 36.0
[EXP] 69: [success_rate]: True, [output]: def solution():
    weekly_allowance = 5

    weeks = 8

    total_allowance = weekly_allowance * weeks

    total_money = 100

    money_initial = total_money - total_allowance

    result = money_initial

    return result


 Executed result: 60
[EXP] 70: [success_rate]: True, [output]: def solution():
    dance_classes_per_day = 5

    num_days = 5  # weekdays

    saturday_classes = 8

    total_classes = num_days * dance_classes_per_day + saturday_classes

    students_per_class = 15

    students_total = total_classes * students_per_class

    money_per_student = 15.00

    money_total = students_total * money_per_student

    result = money_total

    return result


 Executed result: 7425.0
[EXP] 71: [success_rate]: True, [output]: def solution():
    recipe1_instructions = 20

    recipe2_instructions = 2 * recipe1_instructions

    total_instructions = recipe1_instructions + recipe2_instructions

    result = total_instructions

    return result


 Executed result: 60
[EXP] 72: [success_rate]: True, [output]: def solution():
    brownies_sold = 43

    cheesecakes_sold = 23

    brownie_price = 3

    cheesecake_price = 4

    brownie_revenue = brownies_sold * brownie_price

    cheesecake_revenue = cheesecakes_sold * cheesecake_price

    total_revenue = brownie_revenue + cheesecake_revenue

    result = total_revenue

    return result


 Executed result: 221
[EXP] 73: [success_rate]: True, [output]: def solution():
    phones_initial = 5

    phone_cost = 150

    total_cost = phones_initial * phone_cost

    interest = total_cost * 0.02

    total_payment = total_cost + interest

    payment_per_month = total_payment / 3

    result = payment_per_month

    return result


 Executed result: 255.0
[EXP] 74: [success_rate]: False, [output]: def solution():
    marigold_price = 2.74

    petunia_price = 1.87

    petunia_rounded_price = round(petunia_price)

    begonia_price = 2.12

    begonia_rounded_price = round(begonia_price)

    marigolds_sold = 12

    marigolds_profit = marigolds_sold * round(marigold_price)

    petunias_sold = 9

    petunias_profit = petunias_sold * petunia_rounded_price

    begonias_sold = 17

    begonias_profit = begonias_sold * round(begonia

    petunias_profit = petunias_sold * round(petunia_price)

    begonias_profit = begonias_sold * round(begonia_price)

    total_profit = marigolds_profit + petunias_profit + begonias_profit

    result = total_profit

    result

    begonias_profit = begonias_sold * begonia

    marigolds_profit = marigolds_sold * marigold_price_rounded

    petunias_profit = petunias_sold * petunia_rounded

    begonias_sold = 

    petunias_profit = petunias_sold * petunia

    beg

    petunias_profit = petunias_sold * petunia_rounded_price

    begonias_sold = 

    marigolds_profit = marigolds_sold * marigold_rounded_price


 Executed result: Error: return error, fail to execute
[EXP] 75: [success_rate]: False, [output]: def solution():
    square_footage_top = 16

    square_footage_bottom_to_top = [square_footage_top]

    n = 4

    for i in range(1, n):

        square_footage_bottom_to_top.append(square_footage_top // (2**i))

    average_square_footage = sum(square_footage_bottom_to_top) / n

    result = average_square_footage

    return result


 Executed result: 7.5
[EXP] 76: [success_rate]: True, [output]: def solution():
    cups_per_day_initial = 1

    days_initial = 180

    cups_per_day_later = 2

    cups_per_day = cups_per_day_later

    days_later = 365 - days_initial

    total_cups_initial = cups_per_day_initial * days_initial

    total_cups_later = cups_per_day_later * days_later

    total_cups_in_a_year = total_cups_initial + total_cups_later

    bags_of_food_per_cup = 110

    bags_of_food_in_a_year = total_cups_in_a_year / bags_of_food_per_cup

    result = bags_of_food_in_a_year

    result = round(bags_of_food

    result = round(bags_of_food_in_a_year)

    return result


 Executed result: 5
[EXP] 77: [success_rate]: True, [output]: def solution():
    sarah_laundry = 400

    david_laundry = sarah_laundry / 4

    raymond_laundry = sarah_laundry / 2

    difference = raymond_laundry - david_laundry

    result = difference

    return difference


 Executed result: 100.0
[EXP] 78: [success_rate]: False, [output]: def solution():
Here is the solution in Python:

```

    cost_per_package_of_3 = 2.50

    cost_per_package_of_2 = 1

    cost_per_flower_of_3 = cost_per_package_of_3 / 3

    cost_per_flower_of_2 = cost_per_package_of_2 / 2

    total_flowers = 18

    cost_3 = total_flowers // 3 * 3 * cost_per_flower_of_3 + (total_flowers % 3) * cost_per_flower_of_3

    cost_3 = (total_flowers // 3) * 3 * cost_per_flower_of_3 + (total_flowers % 3) * cost_per_flower_of_3

    cost_2 = total_flowers * cost_per_flower_of_2

    cost_saved = cost_2 - cost_3

    cost_saved = cost_2 - cost

    result = cost_saved

    cost_saved = cost_2 - cost

    result =

    cost_saved = cost_2 - cost_3

    cost_saved = cost_2 - cost

    cost_saved = cost_2

    cost_saved = cost_2 - cost_3

    cost.saved = cost_2 - cost_3

    cost_saved = cost_2 - cost

    cost_saved = cost_2 - cost

    cost_saved = cost_2 - cost

    cost_saved = cost_2 - cost_3

    result =


 Executed result: Error: return error, fail to execute
[EXP] 79: [success_rate]: True, [output]: def solution():
        cost_initial = 100

        discount = cost_initial * 0.3

    cost_initial = 100

    discount = cost_initial * 0.3

    cost_discounted = cost_initial - discount

    result = cost_discounted

    return result


 Executed result: 70.0
[EXP] 80: [success_rate]: True, [output]: def solution():
    water_initial = 24

    water_taken_by_girls = 2 * (1/6) * water_initial

    water_taken_by_boy = 6

    water_left = water_initial - water_taken_by_girls - water_taken_by_boy

    result = water_left

    return result


 Executed result: 10.0
[EXP] 81: [success_rate]: True, [output]: def solution():
    stickers_initial = 10

    stickers_bought = 21

    stickers_birthday = 23

    total_stickers = stickers_initial + stickers_bought + stickers_birthday

    stickers_given = 9

    stickers_used = 28

    stickers_left = total_stickers - stickers_given - stickers_used

    result = stickers_left

    return result


 Executed result: 17
[EXP] 82: [success_rate]: True, [output]: def solution():
    grace_weight = 125

    alex_weight = 4 * grace_weight - 2

    combined_weight = grace_weight + alex_weight

    result = combined_weight

    return result


 Executed result: 623
[EXP] 83: [success_rate]: True, [output]: def solution():
    rose_bushes = 3

    roses_per_bush = 25

    thorns_per_rose = 8

    total_thorns = rose_bushes * roses_per_bush * thorns_per_rose

    result = total_thorns

    return result


 Executed result: 600
[EXP] 84: [success_rate]: False, [output]: def solution():
    games_total = 22

    games_won = (games_total / 2) + 8

    games_lost = games_total - games_won

    return games_won


 Executed result: 19.0
[EXP] 85: [success_rate]: True, [output]: def solution():
    age_initial = 23

    age_now = 34

    vacations_per_year = 4

    years_traveled = age_now - age_initial

    total_blocks = years_traveled * vacations_per_year

    result = total_blocks

    return result


 Executed result: 44
[EXP] 86: [success_rate]: True, [output]: def solution():
    alarm_rings_first_time = 4

    alarm_rings_second_time = alarm_rings_first_time * 3

    alarm_rings_third_time = alarm_rings_second_time // 2

    total_alarm_rings = alarm_rings_first_time + alarm_rings_second_time + alarm_rings_third_time

    result = total_alarm_rings

    return result


 Executed result: 22
[EXP] 87: [success_rate]: False, [output]: def solution():
    initial_salary = 600

    salary_increase = initial_salary * 0.1

    salary_after_five

    salary_after_five_years = initial_salary * (1 + salary_increase) ** 5

    salary_after_eight_years = salary_after_five_years * (1 + salary_increase) ** 3

    result = salary_after_eight_years

    return result


 Executed result: 1.150243877983686e+17
[EXP] 88: [success_rate]: False, [output]: def solution():
    harald_sales = x

    harald_sales = 0

    marilyn_sales = 10 * harald_sales

    total_sales = harald_sales + marilyn_sales

    har

    harald_sales = (total_sales * 1) / 11

    result = harald_sales

    return result


 Executed result: 0.0
[EXP] 89: [success_rate]: False, [output]: def solution():
    invited_guests = 16

    gift_bags_per_guest = 0.75

    guests_not_attending = 16 * 0.25  # 1/4 of attendees don't show up

    total_gift_bags = guests_attending * gift_bags_per_guest

    gift_bag_cost = 2

    total_cost = total_gift_bags * gift_bag_cost

    result = total_cost

    return result


 Executed result: Error: return error, fail to execute
[EXP] 90: [success_rate]: True, [output]: def solution():
    adult_eats = 10

    child_eats = adult_eats / 2

    total_adults = 20

    total_children = 5

    total_eaten_by_adults = total_adults * adult_eats

    total_eaten_by_children = total_children * child_eats

    total_eaten = total_eaten_by_adults + total_eaten_by_children

    result = total_eaten

    return result


 Executed result: 225.0
[EXP] 91: [success_rate]: True, [output]: def solution():
    cindy_pets = 4

    marcia_pets = cindy_pets + 2

    jan_pets = marcia_pets * 3

    total_pets = cindy_pets + marcia_pets + jan_pets

    result = total_pets

    return result


 Executed result: 28
[EXP] 92: [success_rate]: True, [output]: def solution():
    james_age = 10

    corey_age = james_age + 1

    amy_age = corey_age - 2

    jackson_age = amy_age - 5

    result = jackson_age

    return result


 Executed result: 4
[EXP] 93: [success_rate]: True, [output]: def solution():
    lee_time = 38

    lee_speed = 400 / lee_time

    gerald_original_time = lee_time + 2

    gerald_original_speed = 400 / gerald_original_time

    gerald_speed = gerald_original_speed * 1.1

    gerald_improved_time = 400 / gerald_speed

    result = gerald_improved_time

    return result


 Executed result: 36.36363636363637
[EXP] 94: [success_rate]: True, [output]: def solution():
    dogs = 60

    cats = dogs * 2

    pets = dogs + cats

    rabbits = pets - 12

    total_pets = pets + rabbits

    result = total_pets

    return result


 Executed result: 348
[EXP] 95: [success_rate]: True, [output]: def solution():
    total_students = 200

You can now provide more details.

    boys = total_students * 2 / 5

    girls = total_students - boys

    girls_in_girl_scout = girls * 2 / 3

    girls_not_in_girl_scout = girls - girls_in_girl_scout

    result = girls_not_in_girl_scout

    return result


 Executed result: 40.0
[EXP] 96: [success_rate]: True, [output]: def solution():
    harry_slept_hours = 9

    james_slept_hours = (2/3) * harry_slept_hours

    harry_slept_more_hours = harry_slept_hours - james_slept_hours

    result = harry_slept_more_hours

    return result


 Executed result: 3.0
[EXP] 97: [success_rate]: False, [output]: def solution():
    cans_of_tomatoes = 32 / 16

    tomatoes_per_can = 3

    total_tomatoes = cans_of_tomatoes * tomatoes_per_can

    result = total_tomatoes

    return result


 Executed result: 6.0
[EXP] 98: [success_rate]: True, [output]: def solution():
    cars_initial = 30

    cars_exit = 5

    cars_drive_through = cars_initial - cars_exit

    cars_drive_through_first_15_minutes = cars_drive_through - 20

    result = cars_drive_through_first_15_minutes

    return result


 Executed result: 5
[EXP] 99: [success_rate]: True, [output]: def solution():
    potted_plants_received = 18

    potted_plants_initial = 2 * 40

    total_potted_plants = potted_plants_initial + potted_plants_received

    potted_plants_given = 40

    potted_plants_left = total_potted_plants - potted_plants_given

    result = potted_plants_left

    return result


 Executed result: 58
