[EXP] 0: [success_rate]: True, [answer]: 2, [output]: import sympy as sp

import numpy as np

def solution():

    x = sp.symbols('x')

    expr = 2 / (x**2 + x - 6)

    simplified_expr = sp.simplify(expr)

    roots = sp.solve(simplified_expr.as_numer_denom()[1], x)

    result = len(roots)

    return result


 Executed result: 2
[EXP] 1: [success_rate]: True, [answer]: 10, [output]: def solution():

    one_twenty_percentage_of_30 = 1.2 * 30

    one_thirty_percentage_of_20 = 1.3 * 20

    difference = abs(one_twenty_percentage_of_30 - one_thirty_percentage_of_20)

    result = "{:.2f}".format(difference)

    return result


 Executed result: 10.00
[EXP] 2: [success_rate]: False, [answer]: \frac{9}{7}, [output]: from sympy import symbols, solve

def solution():

    x = symbols('x')

    equation = x + ceil(x) - 23/7

    solution = solve(equation, x)

    result = str(solution[0])

    return result


 Executed result: Error: return error, fail to execute
[EXP] 3: [success_rate]: True, [answer]: i, [output]: import cmath

def solution():

    i = cmath.sqrt(-1)

    result = i**5 + 1/i**25 + i**45

    return result


 Executed result: 1j
[EXP] 4: [success_rate]: False, [answer]: 4, [output]: def solution():

    equation = 2**8 == 4**x

    from sympy import solve

    x = solve(equation, x)

    result = x[0]

    return result


 Executed result: Error: return error, fail to execute
[EXP] 5: [success_rate]: True, [answer]: 402, [output]: def solution():

    a = 6

    d = 4

    n = 100

    result = a + (n - 1) * d

    return result


 Executed result: 402
[EXP] 6: [success_rate]: False, [answer]: [-2,7], [output]: import sympy as sp

from sympy import symbols, solve

def solution():

    x = symbols('x')

    inequality = x**2 - 5*x - 4 <= 10

    solutions = solve(inequality, x)

    result = '({} , {})'.format(min(solutions), max(solutions))

    return result


 Executed result: Error: return error, fail to execute
[EXP] 7: [success_rate]: True, [answer]: 7, [output]: import math

def solution():

    principal = 1000

    amount = 1225

    time = 3

    rate = ((amount / principal) ** (1 / time) - 1) * 100

    result = "{:.0f}".format(rate)

    return result


 Executed result: 7
[EXP] 8: [success_rate]: False, [answer]: 4,6,14,15, [output]: from itertools import permutations

def solution():

    for a, b, c, d in permutations(range(1, 30)):

        if a + b == 10 and a + c == 18 and a + d == 19 and b + c == 20 and b + d == 21 and c + d == 29:

            return str(a) + ', ' + str(b) + ', ' + str(c) + ', ' + str(d)


 Executed result: Error: return error, fail to execute
[EXP] 9: [success_rate]: False, [answer]: -\frac{1}{8}, [output]: import numpy as np

from sympy import symbols, Eq, solve

from sympy.solvers.solveset import solveset

def solution():

    x = symbols('x')

    equation = Eq(abs(5*x - 1), abs(3*x + 2))

    solution = solveset(equation)

    result = float(next(iter(solution)))

    return result


 Executed result: Error: return error, fail to execute
[EXP] 10: [success_rate]: False, [answer]: \frac{x+2}{7}, [output]: import sympy as sp

def solution():

    x = sp.symbols('x')

    f = 7*x + 5

    g = x - 1

    h = f(g)

    h_inv = sp.solve(h - x, x)[0]

    result = sp.latex(h_inv)

    return result


 Executed result: Error: return error, fail to execute
[EXP] 11: [success_rate]: False, [answer]: -15, [output]: def solution():

    sum = 0

    for i in range(-6, 8):

        if abs(i) + 1 > 7 and abs(i+1) <= 7:

            sum += i

    result = sum

    return result


 Executed result: 0
[EXP] 12: [success_rate]: True, [answer]: 10, [output]: import math

def solution():

    x = -8

    y = 6

    distance = math.sqrt(x**2 + y**2)

    result = distance

    return result


 Executed result: 10.0
[EXP] 13: [success_rate]: True, [answer]: 8, [output]: def solution():

    x1 = 1

    y1 = 4

    x2 = 1

    y2 = 10

    x_mid = (x1 + x2) / 2

    y_mid = (y1 + y2) / 2

    result = x_mid + y_mid

    return result


 Executed result: 8.0
[EXP] 14: [success_rate]: False, [answer]: 75, [output]: import numpy as np

import math

def solution():

    A = np.array([0, 7])

    B = np.array([1, 0])

    C = np.array([12, -2])

    D = np.array([7, 8])

    # Calculate the diagonals

    diagonal1 = np.linalg.norm(A - D)

    diagonal2 = np.linalg.norm(B - C)

    # Calculate the area

    area = 0.5 * diagonal1 * diagonal2

    result = "{:.2f}".format(area)

    return result


 Executed result: 39.53
[EXP] 15: [success_rate]: False, [answer]: \frac{11}{2}, [output]: import math

import numpy as np

from sympy import symbols, simplify

def solution():

    x = symbols('x')

    expr = (x - 3)**2 - (x - 8)**2

    simplified_expr = simplify(expr)

    # Simplifying the expression

    simplified_expr = str(simplified_expr)

    # Finding the roots of the expression

    roots = np.roots(simplified_expr)

    # Filtering the roots to get the real roots

    real_roots = [root for root in roots if root.imag == 0]

    # Finding the smallest real root

    smallest_root = min(real_roots)

    result = smallest_root

    return result


 Executed result: Error: return error, fail to execute
[EXP] 16: [success_rate]: True, [answer]: -25, [output]: def solution():

    x = -10

    if x < -3:

        result = 3 * x + 5

    else:

        result = 7 - 4 * x

    return result


 Executed result: -25
[EXP] 17: [success_rate]: False, [answer]: 8, [output]: import math

from sympy import symbols

from sympy.simplify import simplify

import numpy as np

def solution():

    A = symbols('A')

    B = symbols('B')

    C = symbols('C')

    equation = (A * B ** 0.5) / C - 9 / (2 * 3 ** 0.5)

    equation = simplify(equation)

    equation = equation.subs(A * B ** 0.5, 9 / (2 * 3 ** 0.5) * C)

    equation = equation.subs(B, 36)

    equation = equation.subs(C, 4)

    result = A + B + C

    return result


 Executed result: A + B + C
[EXP] 18: [success_rate]: True, [answer]: 3, [output]: def solution():

    t = 'treeks'

    s = 'squigs'

    g = 'goolee'

    t_to_s = 3

    t_to_g = 1

    s_to_g = 1

    t_to_s_to_g = t_to_s * s_to_g

    t_to_g_to_s = t_to_g * s_to_g

    t_to_s_to_g_to_s = t_to_s_to_g / t_to_g_to_s

    result = t_to_s_to_g_to_s

    return result


 Executed result: 3.0
[EXP] 19: [success_rate]: True, [answer]: 187.5, [output]: def solution():

    original_calories = 125

    original_ounces = 8

    new_ounces = 12

    new_calories = (original_calories / original_ounces) * new_ounces

    result = "{:.2f}".format(new_calories)

    return result


 Executed result: 187.50
[EXP] 20: [success_rate]: False, [answer]: 18, [output]: import sympy as sp

def solution():

    n = 0

    for m in range(1, 20):

        roots = sp.solve(m*x - n, x)

        if all(isinstance(root, int) and root > 0 and sp.isprime(root) for root in roots):

            n += 1

    result = n

    return result


 Executed result: 1
[EXP] 21: [success_rate]: False, [answer]: 40, [output]: import math

def solution():

    initial_price = 1.25

    years = 12

    for _ in range(years // 3):

        initial_price *= 2

    result = initial_price

    return result


 Executed result: 20.0
[EXP] 22: [success_rate]: True, [answer]: 5, [output]: import sympy as sp

def solution():

    x = sp.symbols('x')

    expr = (17**6 - 17**5) / 16 - 17**x

    simplified_expr = sp.solve(expr, x)

    result = simplified_expr[0]

    return result


 Executed result: 5.00000000000000
[EXP] 23: [success_rate]: True, [answer]: 8, [output]: def solution():

    initial_pressure = 4

    initial_volume = 3.67

    final_volume = 1.835

    constant = initial_pressure * initial_volume

    new_pressure = constant / final_volume

    result = "{:.2f}".format(new_pressure)

    return result


 Executed result: 8.00
[EXP] 24: [success_rate]: True, [answer]: 3125, [output]: def solution():

    a = 5

    result = a**3 * a**2

    return result


 Executed result: 3125
[EXP] 25: [success_rate]: False, [answer]: [0,\infty), [output]: import numpy as np

import math

def solution():

    x = np.linspace(-10, 10, 400)

    y = [math.sqrt(i**2) for i in x]

    min_y = min(y)

    max_y = max(y)

    result = r'[{},{]}'.format(min_y, max_y)

    return result


 Executed result: Error: return error, fail to execute
[EXP] 26: [success_rate]: False, [answer]: 0.5, [output]: from sympy import symbols, solve

import numpy as np

from sympy import Eq, Poly

from sympy.abc import x

def solution():

    x = symbols('x')

    expr = Eq(Poly(x**2 + 3*x - 15, x), 14)

    solutions = solve(expr, x)

    result = sum(solutions)

    return result


 Executed result: Error: return error, fail to execute
[EXP] 27: [success_rate]: False, [answer]: 12,10,6, [output]: import numpy as np

from sympy import symbols, simplify

from sympy.solvers import solve

def solution():

    x = symbols('x')

    c = symbols('c')

    equation = x**2 - 7*x + c

    roots = solve(equation, x)

    for root in roots:

        if isinstance(root, (int, float)):

                for r in roots:

                    if isinstance(r, (int, float)):

                        if r > 0 and r.is_integer:

                            equation = equation.subs(c, r)

                            result = ', '.join(map(str, sorted([int(r) for r in set([int(r) for r in roots if isinstance(r, (int, float)) and r > 0 and r.is_integer])])))

                            return result


 Executed result: None
[EXP] 28: [success_rate]: True, [answer]: 5, [output]: from sympy import symbols, solve

def solution():

    x = symbols('x')

    equation = x**2 - 5*x + 9

    solutions = solve(equation)

    a = solutions[0]

    b = solutions[1]

    result = (a - 1) * (b - 1)

    return result


 Executed result: (3/2 - sqrt(11)*I/2)*(3/2 + sqrt(11)*I/2)
[EXP] 29: [success_rate]: False, [answer]: 16, [output]: import sympy as sp

import numpy as np

from sympy import symbols

from sympy import simplify

def solution():

    x = symbols('x')

    b = symbols('b')

    equation = x**2 + b*x + 48

    roots = sp.solve(equation, x)

    ratio = 3/1

    ratio_root1 = roots[0]

    ratio_root2 = roots[1]

    equation1 = ratio_root1**2 + b*ratio_root1 + 48

    equation2 = ratio_root2**2 + b*ratio_root2 + 48

    equation1 = simplify(equation1)

    equation2 = simplify(equation2)

        equation1_value = equation1.subs({x: ratio_root1, b: equation})

        equation1 = ratio_root1**2 + i*ratio_root1 + 48

        equation2_value = equation2.subs({x: ratio_root2, b: equation})

        equation2 = ratio_root2**2 + i*ratio_root2 + 48

        equation2 = ratio_root2**2 + i*ratio_root2 + 48

    equation1_value = simplify(equation1_value)

    equation2_value = simplify(equation2_value)

    b_value = equation1_value - equation2_value

    result = b_value

    return result


 Executed result: 0
[EXP] 30: [success_rate]: True, [answer]: 2300, [output]: import numpy as np

def solution():

    # Create the coefficient matrix

    A = np.array([[8, 2], [14, 3]])

    # Create the constant matrix

    b = np.array([932, 1402])

    # Solve the system of equations

    x = np.linalg.solve(A, b)

    # Calculate the cost of 1 pound of feathers and 1 ounce of gold

    cost_per_pound_of_feathers = x[0]

    cost_per_ounce_of_gold = x[1]

    # Calculate the cost of 5 pounds of feathers and 5 ounces of gold

    total_cost = 5 * cost_per_pound_of_feathers + 5 * cost_per_ounce_of_gold

    result = "${:.2f}".format(total_cost)

    return result


 Executed result: $2300.00
[EXP] 31: [success_rate]: True, [answer]: 5, [output]: import numpy as np

from sympy import symbols, simplify

def solution():

    x, y = symbols('x y')

    expr = x**2 + 8*x + y**2 - 6*y

    simplified_expr = simplify(expr)

    # Completing the square

    simplified_expr = simplified_expr - 4**2

    simplified_expr = simplified_expr - 3**2

    # Factoring the expression

    simplified_expr = simplify(simplified_expr)

    # Extracting the radius

    radius = (4**2 + 3**2)**0.5

    result = float(radius)

    return result


 Executed result: 5.0
[EXP] 32: [success_rate]: True, [answer]: 105, [output]: import itertools

def solution():

    elements = [1, 2, 3, 4, 5, 6]

    sums = [sum(pair) for pair in itertools.combinations(elements, 2)]

    total_sum = sum(sums)

    result = total_sum

    return result


 Executed result: 105
[EXP] 33: [success_rate]: False, [answer]: -13.5, [output]: import numpy as np

from scipy.stats import linregress

import decimal

def solution():

    x = [2, p, p+2]

    y = [-5, -14, -17]

    slope, intercept, r_value, p_value, std_err = linregress(x, y)

    b1 = slope

    b0 = intercept

    new_x = 13

    new_y = b0 + b1 * new_x

    q = new_y

    p_q = p + q

    result = "{:.1f}".format(p_q)

    return result


 Executed result: Error: return error, fail to execute
[EXP] 34: [success_rate]: False, [answer]: \frac{243}{625}, [output]: import math

def solution():

    # First term

    a = 125 / 9

    # Common ratio

    r = a / (a / 3)

    # Eighth term

    a8 = a * (r ** 7)

    result = a8

    return result


 Executed result: 30375.0
[EXP] 35: [success_rate]: False, [answer]: 2, [output]: import sympy as sp

def solution():

    n = sp.symbols('n')

    equation = (9**(18*n)) == (27**(24))

    solution = sp.solve(equation, n)

    result = solution[0]

    return result


 Executed result: Error: return error, fail to execute
[EXP] 36: [success_rate]: False, [answer]: (-\sqrt{3},\sqrt{3}), [output]: import sympy as sp

def solution():

    x = sp.symbols('x')

    inequality = -4 < x**4 + 4*x**2 < 21

    solution = sp.solve(inequality, x)

    result = '({:.2f}, {:.2f})'.format(min(solution), max(solution))

    return result


 Executed result: Error: return error, fail to execute
[EXP] 37: [success_rate]: False, [answer]: 23, [output]: from sympy import symbols, simplify

from math import sqrt

def solution():

    x = symbols('x')

    expr = sqrt(2) + 1/sqrt(2) + sqrt(3) + 1/sqrt(3)

    simplified_expr = simplify(expr)

    a = int(simplified_expr.as_numer_denom()[0][0])

    b = int(simplified_expr.as_numer_denom()[0][1])

    c = int(simplified_expr.as_numer_denom()[1])

    result = a + b + c

    return result


 Executed result: Error: return error, fail to execute
[EXP] 38: [success_rate]: False, [answer]: 49, [output]: import numpy as np

from sympy import symbols, solve

def solution():

    x, y = symbols('x y')

    equation = x**2 + y**2 - 14*x - 48*y

    solution = solve(equation, y)

    max_y = max(solution)

    result = "{:.2f}".format(max_y)

    return result


 Executed result: Error: return error, fail to execute
[EXP] 39: [success_rate]: True, [answer]: 2x^9-8x^7+9x^6-16x^5-12x^4+9x^3-24x^2, [output]: from sympy import symbols, expand

def solution():

    x = symbols('x')

    expr = (2*x**5 + 3*x**2)*(x**4 - 4*x**2 + 3*x - 8)

    result = expand(expr)

    return str(result)


 Executed result: 2*x**9 - 8*x**7 + 9*x**6 - 16*x**5 - 12*x**4 + 9*x**3 - 24*x**2
[EXP] 40: [success_rate]: False, [answer]: (-\infty,-8)\cup(8,\infty), [output]: import sympy as sp

from sympy import symbols

from sympy.solvers import solve

def solution():

    x = symbols('x')

    m = symbols('m')

    expr = 2*x**2 + m*x + 8

    roots = solve(expr, x)

    if len(roots) == 2:

        if roots[0].is_real and roots[1].is_real:

            return str(min(roots[0].evalf() + m, roots[1].evalf() + m)) + ' < m < ' + str(max(roots[0].evalf() + m, roots[1].evalf() + m))


 Executed result: None
