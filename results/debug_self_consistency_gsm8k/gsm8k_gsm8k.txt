[EXP] 0: [success_rate]: True, [output]: 
def solution():
    eggs_per_day = 16
    eggs_for_breakfast = 3
    eggs_for_muffins = 4
    eggs_sold = eggs_per_day - eggs_for_breakfast - eggs_for_muffins
    money_per_egg = 2
    money_made = eggs_sold * money_per_egg
    result = money_made
    return result

 Executed result: 18
[EXP] 1: [success_rate]: True, [output]: 
def solution():
    blue_fiber = 2
    white_fiber = blue_fiber / 2
    total_fiber = blue_fiber + white_fiber
    result = total_fiber
    return result

 Executed result: 3.0
[EXP] 2: [success_rate]: False, [output]: 
def solution():
    house_price = 80000
    repairs = 50000
    total_cost = house_price + repairs
    value_of_house_after_repair = total_cost * 3.5 / 2  # 150% increase
    profit = value_of_house_after_repair - total_cost
    result = profit
    return result

 Executed result: 97500.0
[EXP] 3: [success_rate]: True, [output]: 
def solution():
    sprints_per_week = 3
    sprints_per_day = 3
    meters_per_sprint = 60
    total_meters_per_day = sprints_per_day * meters_per_sprint
    total_meters_per_week = total_meters_per_day * sprints_per_week
    result = total_meters_per_week
    return result

 Executed result: 540
[EXP] 4: [success_rate]: True, [output]: 
def solution():
    cups_feed_morning = 15
    cups_feed_afternoon = 25
    cups_feed_per_chicken = 3
    chickens = 20
    cups_feed_morning_per_chicken = cups_feed_morning / chickens
    cups_feed_afternoon_per_chicken = cups_feed_afternoon / chickens
    cups_feed_morning_left = cups_feed_morning_per_chicken * chickens
    cups_feed_afternoon_left = cups_feed_afternoon_per_chicken * chickens
    cups_feed_last_meal = (cups_feed_per_chicken * chickens) - (cups_feed_morning_left + cups_feed_afternoon_left)
    result = cups_feed_last_meal
    return result

 Executed result: 20.0
[EXP] 5: [success_rate]: True, [output]: 
def solution():
    cost_per_glass = 5
    cost_per_second_glass = 0.6 * cost_per_glass
    total_glasses = 16
    total_glasses_second_cost = total_glasses // 2
    glasses_first_cost = total_glasses - total_glasses_second_cost
    cost_first_glasses = glasses_first_cost * cost_per_glass
    cost_second_glasses = total_glasses_second_cost * cost_per_second_glass
    total_cost = cost_first_glasses + cost_second_glasses
    result = total_cost
    return result

 Executed result: 64.0
[EXP] 6: [success_rate]: True, [output]: 
def solution():
    seattle_sheep = 20
    charleston_sheep = seattle_sheep * 4
    toulouse_sheep = charleston_sheep * 2
    total_sheep = seattle_sheep + charleston_sheep + toulouse_sheep
    result = total_sheep
    return result

 Executed result: 260
[EXP] 7: [success_rate]: False, [output]: 
def solution():
    file_size = 200  # in GB
    download_rate = 2  # in GB/minute
    fraction_complete = 0.4  # fraction of the file downloaded before the restart
    minutes_restart = 20  # in minutes

    # Calculate the time taken to download the file initially
    time_initial = file_size / download_rate

    # Calculate the time taken to download the fraction of the file before the restart
    time_before_restart = time_initial * fraction_complete

    # Calculate the time taken to restart the computer
    time_restart = minutes_restart

    # Calculate the time taken to download the remaining part of the file
    time_remaining = time_initial - time_before_restart - time_restart

    # Calculate the total time taken to download the file
    time_total = time_before_restart + time_restart + time_remaining

    result = time_total
    return result

 Executed result: 100.0
[EXP] 8: [success_rate]: False, [output]: 
def solution():
    # Drive for 3 hours at 60 mph
    distance_driven = 3 * 60
    # Stay still for 2 hours
    time_standstill = 2
    # Drive at 30 mph for 0.5 hours
    distance_standstill = 0.5 * 30
    # Drive at 80 mph for 1.5 hours
    distance_last = 1.5 * 80
    # Calculate total distance driven
    total_distance = distance_driven + distance_standstill + distance_last
    result = total_distance
    return result

 Executed result: 315.0
[EXP] 9: [success_rate]: True, [output]: 
def solution():
    regular_hours = 40
    overtime_hours = 45 - regular_hours
    regular_rate = 10
    overtime_rate = regular_rate * 1.2
    regular_earnings = regular_hours * regular_rate
    overtime_earnings = overtime_hours * overtime_rate
    total_earnings = regular_earnings + overtime_earnings
    result = total_earnings
    return result

 Executed result: 460.0
[EXP] 10: [success_rate]: True, [output]: 
def solution():
    downloads_first_month = 60
    downloads_second_month = downloads_first_month * 3
    downloads_third_month = downloads_second_month * 0.7  # 30% reduction
    total_downloads = downloads_first_month + downloads_second_month + downloads_third_month
    result = total_downloads
    return result

 Executed result: 366.0
[EXP] 11: [success_rate]: True, [output]: 
def solution():
    donuts_per_dozen = 3
    donuts_cost_per_dozen = 68
    donuts_total_cost = donuts_per_dozen * donuts_cost_per_dozen

    mini_cupcakes_per_dozen = 2
    mini_cupcakes_cost_per_dozen = 80
    mini_cupcakes_total_cost = mini_cupcakes_per_dozen * mini_cupcakes_cost_per_dozen

    mini_cheesecakes_per_dozen = 6
    mini_cheesecakes_cost_per_dozen = 55
    mini_cheesecakes_total_cost = mini_cheesecakes_per_dozen * mini_cheesecakes_cost_per_dozen

    total_cost = donuts_total_cost + mini_cupcakes_total_cost + mini_cheesecakes_total_cost
    result = total_cost
    return result

 Executed result: 694
[EXP] 12: [success_rate]: False, [output]: 
def solution():
    tree_cost = 90
    lemons_per_year = 7
    lemon_price = 1.5
    watering_cost = 3
    total_income_per_year = lemons_per_year * lemon_price
    total_cost_per_year = watering_cost
    years_to_break_even = tree_cost / (total_income_per_year - total_cost_per_year)
    result = int(years_to_break_even)
    return result

 Executed result: 12
[EXP] 13: [success_rate]: False, [output]: 
def solution():
    vacuum_cleaners_left = 5
    vacuum_cleaners_sold_to_orange_house = vacuum_cleaners_left
    vacuum_cleaners_sold_to_red_house = 2
    vacuum_cleaners_sold_at_green_house = vacuum_cleaners_left - vacuum_cleaners_sold_to_red_house - vacuum_cleaners_sold_to_orange_house
    vacuum_cleaners_initial = vacuum_cleaners_sold_at_green_house * 3
    result = vacuum_cleaners_initial
    return result

 Executed result: -6
[EXP] 14: [success_rate]: True, [output]: 
def solution():
    students_initial = 20
    students_enrolled_contemporary = 20 / 100 * students_initial
    students_remaining = students_initial - students_enrolled_contemporary
    students_enrolled_jazz = 25 / 100 * students_remaining
    students_remaining = students_remaining - students_enrolled_jazz
    students_enrolled_hip_hop = students_remaining
    percentage_hip_hop = (students_enrolled_hip_hop / students_initial) * 100
    result = percentage_hip_hop
    return result

 Executed result: 60.0
[EXP] 15: [success_rate]: False, [output]: 
def solution():
    purchase_plan1 = 5000
    purchase_plan2 = 8000
    percent_increase_plan1 = 0.025
    percent_increase_plan2 = 0.012
    
    profit_plan1 = purchase_plan1 * percent_increase_plan1
    profit_plan2 = purchase_plan2 * percent_increase_plan2
    
    profit_plan1 = purchase_plan1 + profit_plan1
    profit_plan2 = purchase_plan2 + profit_plan2
    
    if profit_plan1 > profit_plan2:
        result = profit_plan1
    else:
        result = profit_plan2
    
    return result

 Executed result: 8096.0
[EXP] 16: [success_rate]: False, [output]: 
def solution():
    distance_west = 80
    distance_north = 150
    distance_total = distance_west + distance_north
    # The distance covered by each train is the same, so we can divide the total distance by 2
    distance_per_train = distance_total / 2
    result = distance_per_train
    return result

 Executed result: 115.0
[EXP] 17: [success_rate]: True, [output]: 
def solution():
    hourly_wage_teacher = 20
    hourly_wage_coach = 30
    hours_per_week_teacher = 35
    hours_per_week_coach = 15
    weeks_per_year = 50
    total_hours_per_year_teacher = hours_per_week_teacher * weeks_per_year
    total_hours_per_year_coach = hours_per_week_coach * weeks_per_year
    total_salary_per_year_teacher = total_hours_per_year_teacher * hourly_wage_teacher
    total_salary_per_year_coach = total_hours_per_year_coach * hourly_wage_coach
    total_salary_per_year = total_salary_per_year_teacher + total_salary_per_year_coach
    result = total_salary_per_year
    return result

 Executed result: 57500
[EXP] 18: [success_rate]: False, [output]: 
def solution():
    eggs_per_omelet = 3
    omelets_per_day = 1
    days_in_a_week = 7
    weeks = 4
    total_eggs_per_week = eggs_per_omelet * omelets_per_day
    total_eggs_per_four_weeks = total_eggs_per_week * weeks
    total_eggs_per_four_weeks_in_dozen = total_eggs_per_four_weeks / 12
    result = total_eggs_per_four_weeks_in_dozen
    return result

 Executed result: 1.0
[EXP] 19: [success_rate]: False, [output]: 
def solution():
    miles_walked = 4
    time_taken = 1
    miles_next = 2
    total_miles_walked = miles_walked + miles_next
    total_time_taken = time_taken + 1
    average_speed_wanted = 4
    miles_left = 12 - total_miles_walked
    time_left = miles_left / average_speed_wanted
    time_taken_total = total_time_taken + time_left
    speed_needed = miles_left / time_left
    result = speed_needed
    return result

 Executed result: 4.0
[EXP] 20: [success_rate]: False, [output]: 
def solution():
    orange_drink_initial = 10
    orange_drink_water = 2/3
    orange_drink_water_amount = orange_drink_initial * orange_drink_water
    orange_drink_spilled = 1
    water_spilled = orange_drink_water_amount - orange_drink_spilled
    pineapple_drink = 15
    pineapple_drink_water = 3/5
    pineapple_drink_water_amount = pineapple_drink * pineapple_drink_water
    total_water = water_spilled + pineapple_drink_water_amount
    result = total_water
    return result

 Executed result: 14.666666666666666
[EXP] 21: [success_rate]: False, [output]: 
def solution():
    raymond_age = 31
    raymond_son_age = raymond_age - 6
    raymond_son_birth_year = raymond_son_age - 23
    result = raymond_son_birth_year
    return result

 Executed result: 2
[EXP] 22: [success_rate]: True, [output]: 
def solution():
    customers = 8
    first_customers = 3
    second_customers = 2
    last_customers = 3
    dvd_sold = first_customers * 1 + second_customers * 2
    result = dvd_sold
    return result

 Executed result: 7
[EXP] 23: [success_rate]: True, [output]: 
def solution():
    candle_height_initial = 10  # assuming the candle is 10 centimeters tall
    duration = 4  # 5:00 PM - 1:00 PM = 4 hours
    decrease_per_hour = 2  # the candle melts by 2 centimeters per hour
    decrease_total = duration * decrease_per_hour
    candle_height_after = candle_height_initial - decrease_total
    result = candle_height_initial - candle_height_after
    return result

 Executed result: 8
[EXP] 24: [success_rate]: True, [output]: 
def solution():
    discounted_price = 19.50
    discount = 0.25
    original_price = discounted_price / (1 - discount)
    result = original_price
    return result

 Executed result: 26.0
[EXP] 25: [success_rate]: True, [output]: 
def solution():
    total_cost = 50
    cost_of_chicken = 12
    cost_of_milk = 5 * 3
    cost_of_apples = 4 * 1.5
    total_cost_without_pizza = cost_of_chicken + cost_of_milk + cost_of_apples
    cost_of_pizza = total_cost - total_cost_without_pizza
    number_of_boxes = cost_of_pizza / 8.5
    result = number_of_boxes
    return result

 Executed result: 2.0
[EXP] 26: [success_rate]: True, [output]: 
def solution():
    shorts_cost = 16.50
    pants_cost = 22.50
    shoes_cost = 42
    shorts_purchased = 3
    pants_purchased = 3
    shoes_purchased = 3
    total_cost_shorts = shorts_cost * shorts_purchased
    total_cost_pants = pants_cost * pants_purchased
    total_cost_shoes = shoes_cost * shoes_purchased
    total_cost = total_cost_shorts + total_cost_pants + total_cost_shoes
    result = total_cost
    return result

 Executed result: 243.0
[EXP] 27: [success_rate]: False, [output]: 
def solution():
    servings_per_carton = 15
    cost_per_carton = 4.0
    servings_consumed = 60
    cartons_needed = math.ceil(servings_consumed / servings_per_carton)
    total_cost = cartons_needed * cost_per_carton
    return total_cost

 Executed result: Error: return error, fail to execute
[EXP] 28: [success_rate]: True, [output]: 
def solution():
    total_distance = 60
    first_stop_distance = 20
    second_stop_distance = total_distance - 15
    distance_between_stops = second_stop_distance - first_stop_distance
    result = distance_between_stops
    return result

 Executed result: 25
[EXP] 29: [success_rate]: True, [output]: 
def solution():
    heels1 = 33
    heels2 = heels1 * 2
    total_heels = heels1 + heels2
    boots = total_heels + 5
    result = boots
    return result

 Executed result: 104
[EXP] 30: [success_rate]: False, [output]: 
def solution():
    ratio_of_ages = 7 / 11
    sum_of_ages = 162
    allen_age = sum_of_ages * ratio_of_ages / (ratio_of_ages + 1)
    allen_age_in_10_years = allen_age + 10
    result = allen_age_in_10_years
    return result

 Executed result: 73.0
[EXP] 31: [success_rate]: False, [output]: 
def solution():
    first_guess = 80
    second_guess = 80 + 20
    third_guess = first_guess * 1.25
    total_guesses = first_guess + second_guess + third_guess
    average_guess = total_guesses / 3
    result = average_guess
    return result

 Executed result: 93.33333333333333
[EXP] 32: [success_rate]: True, [output]: 
def solution():
    dogs = 10
    time_per_dog = 0.5
    time_per_week = dogs * time_per_dog * 7
    result = time_per_week
    return result

 Executed result: 35.0
[EXP] 33: [success_rate]: False, [output]: 
def solution():
    coins_initial = 110
    gold_coins = 30
    silver_coins = gold_coins - 30
    total_coins = gold_coins + silver_coins
    if coins_initial != total_coins:
        return "The initial number of coins does not match the total number of coins."
    gold_coins = coins_initial - silver_coins
    result = gold_coins
    return result

 Executed result: The initial number of coins does not match the total number of coins.
[EXP] 34: [success_rate]: True, [output]: 
def solution():
    raymonds_jewels = 40
    aarons_jewels = raymonds_jewels / 2 + 5
    siobhans_jewels = aarons_jewels - 2
    result = siobhans_jewels
    return result

 Executed result: 23.0
[EXP] 35: [success_rate]: False, [output]: 
def solution():
    minutes_played = 40
    points_first_half = 20
    points_second_half = points_first_half + (points_first_half * 0.25)
    total_points = points_first_half + points_second_half
    result = total_points
    return result

 Executed result: 45.0
[EXP] 36: [success_rate]: True, [output]: 
def solution():
    yogurts_per_day = 2
    yogurts_per_package = 4
    cost_per_package = 5.00
    days = 30
    
    yogurts_consumed = yogurts_per_day * days
    packages_consumed = -(-yogurts_consumed // yogurts_per_package)  # -(-a // b) is a trick to perform ceiling division in Python
    cost = packages_consumed * cost_per_package
    
    result = cost
    return result

 Executed result: 75.0
[EXP] 37: [success_rate]: False, [output]: 
def solution():
    lego_sets_initial = 13
    lego_price = 15
    video_games = 8
    video_game_price = 20
    lego_money = lego_sets_initial * lego_price
    video_games_cost = video_games * video_game_price
    money_left = lego_money - video_games_cost
    result = lego_sets_initial - (lego_money - money_left) // lego_price
    return result

 Executed result: 3
[EXP] 38: [success_rate]: False, [output]: 
def solution():
    miles_per_week = 60
    days_per_week = 3
    hours_per_day = [3, 1.5, 1.5]
    total_hours_per_week = sum(hours_per_week)
    miles_per_hour = miles_per_week / total_hours_per_week
    result = miles_per_hour
    return result

 Executed result: Error: return error, fail to execute
[EXP] 39: [success_rate]: False, [output]: 
def solution():
    running_speed = 3 * 4
    walking_speed = 3 / 2
    total_distance = 0
    running_time = 2  # Two-thirds of the time
    walking_time = 4  # One-third of the time
    
    running_distance = running_time * running_speed
    walking_distance = walking_time * walking_speed
    
    total_distance = running_distance + walking_distance
    
    result = total_distance
    
    return result

 Executed result: 30.0
[EXP] 40: [success_rate]: True, [output]: 
def solution():
    suzy_iphone_age = 1
    ben_iphone_age = suzy_iphone_age * 2
    brandon_iphone_age = ben_iphone_age * 4
    result = brandon_iphone_age
    return result

 Executed result: 8
[EXP] 41: [success_rate]: False, [output]: 
def solution():
    dragon_range = 1000
    javelin_range_without_gemstone = 400
    javelin_range_with_gemstone = javelin_range_without_gemstone * 3
    distance_from_dragon = javelin_range_with_gemstone + dragon_range
    result = distance_from_dragon
    return result

 Executed result: 2200
[EXP] 42: [success_rate]: True, [output]: 
def solution():
    apple_pies = 5
    pieces_per_pie = 8
    total_pieces = apple_pies * pieces_per_pie
    remaining_pieces = 14
    pieces_taken = total_pieces - remaining_pieces
    result = pieces_taken
    return result

 Executed result: 26
[EXP] 43: [success_rate]: False, [output]: 
def solution():
    bag_calories_per_serving = 250
    bag_weight = 300
    num_servings = 5
    daily_calorie_target = 2000
    daily_calories_consumed = 1800
    remaining_calories = daily_calorie_target - daily_calories_consumed
    calories_per_gram = bag_calories_per_serving / num_servings
    grams_consumable = remaining_calories / calories_per_gram
    result = min(grams_consumable, bag_weight)
    return result

 Executed result: 4.0
[EXP] 44: [success_rate]: False, [output]: 
def solution():
    beeswax_cost = 10.00
    candles_per_pound = 10
    profit_per_candle = 2.00
    total_candles = 20
    total_cost = beeswax_cost
    total_profit = 0
    
    for i in range(total_candles):
        total_cost += beeswax_cost
        total_profit += profit_per_candle
    
    net_profit = total_profit - total_cost
    result = net_profit
    return result

 Executed result: -170.0
[EXP] 45: [success_rate]: True, [output]: 
def solution():
    articles_monday = 5
    articles_tuesday = articles_monday + 2/5 * articles_monday
    articles_wednesday = 2 * articles_tuesday
    total_articles = articles_monday + articles_tuesday + articles_wednesday
    hours_per_article = 4
    total_hours = total_articles * hours_per_article
    result = total_hours
    return result

 Executed result: 104.0
[EXP] 46: [success_rate]: True, [output]: 
def solution():
    post_it_notes_initial = 80
    post_it_notes_used = 220
    post_it_notes_remaining = 23
    post_it_notes_in_package = post_it_notes_remaining + post_it_notes_used
    result = post_it_notes_in_package - post_it_notes_initial
    return result

 Executed result: 163
[EXP] 47: [success_rate]: True, [output]: 
def solution():
    blue_ties_cost = 40
    blue_ties_spent = 200 / blue_ties_cost
    blue_ties = blue_ties_spent
    red_ties = blue_ties * 2
    red_ties_cost = blue_ties_cost * 1.5
    red_ties_spent = red_ties * red_ties_cost
    total_spent = blue_ties * blue_ties_cost + red_ties * red_ties_cost
    result = total_spent
    return result

 Executed result: 800.0
[EXP] 48: [success_rate]: True, [output]: 
def solution():
    wire_initial = 4  # feet
    wire_per_piece = 0.5  # feet
    pieces = wire_initial / wire_per_piece
    result = pieces
    return result

 Executed result: 8.0
[EXP] 49: [success_rate]: True, [output]: 
def solution():
    floors = 15
    units_per_floor = 8
    occupied_units = (3 / 4) * floors * units_per_floor
    total_units = floors * units_per_floor
    unoccupied_units = total_units - occupied_units
    result = unoccupied_units
    return result

 Executed result: 30.0
[EXP] 50: [success_rate]: True, [output]: 
def solution():
    eggs_per_day = 252
    eggs_per_dozen = 12
    price_per_dozen = 2
    total_eggs_per_week = eggs_per_day * 7
    total_dozen_eggs_per_week = total_eggs_per_week // eggs_per_dozen
    total_money_per_week = total_dozen_eggs_per_week * price_per_dozen
    result = total_money_per_week
    return result

 Executed result: 294
[EXP] 51: [success_rate]: False, [output]: 
def solution():
    travel_time_to_destination = (4 - 1) * 60  # 3 hours
    distance_to_destination = 10 * 3  # 30 miles
    travel_time_back = distance_to_destination / 6  # 5 hours
    total_time = travel_time_to_destination + travel_time_back
    result = total_time
    return result

 Executed result: 185.0
[EXP] 52: [success_rate]: True, [output]: 
def solution():
    total_weight_to_remove = 15
    comic_book_weight = 1 / 4
    toy_weight = 1 / 2
    comic_books_removed = 30
    total_weight_removed = comic_books_removed * comic_book_weight
    weight_left_to_remove = total_weight_to_remove - total_weight_removed
    toys_to_remove = weight_left_to_remove / toy_weight
    result = toys_to_remove
    return result

 Executed result: 15.0
[EXP] 53: [success_rate]: False, [output]: python
def solution():
    revenue_thursday = 0
    revenue_friday = 0
    
    # calculate revenue on Thursday
    revenue_thursday += 6 * 60  # 6 truck tires
    revenue_thursday += 4 * 40  # 4 car tires
    
    # calculate revenue on Friday
    revenue_friday += 12 * 40  # 12 car tires
    
    # calculate the difference in revenue
    revenue_difference = revenue_friday - revenue_thursday
    
    result = revenue_difference
    return result

 Executed result: -40
[EXP] 54: [success_rate]: True, [output]: 
def solution():
    adopted_kittens = 7
    patchy_kittens = 3 * adopted_kittens
    trixie_kittens = 12
    total_kittens = adopted_kittens + patchy_kittens + trixie_kittens
    result = total_kittens
    return result

 Executed result: 40
[EXP] 55: [success_rate]: True, [output]: 
def solution():
    lollipops_initial = 30
    lollipops_eaten = 2
    lollipops_left = lollipops_initial - lollipops_eaten
    lollipops_per_bag = 2
    bags = lollipops_left // lollipops_per_bag
    result = bags
    return result

 Executed result: 14
[EXP] 56: [success_rate]: True, [output]: 
def solution():
    ticket_cost = 7
    popcorn_cost = 7
    total_cost = ticket_cost + popcorn_cost
    money_available = 42
    num_times = money_available // total_cost
    result = num_times
    return result

 Executed result: 3
[EXP] 57: [success_rate]: False, [output]: 
def solution():
    bridge_weight_limit = 5000
    truck_weight_with_driver = 3755
    box_weight = 15
    total_weight_with_boxes = truck_weight_with_driver
    max_boxes = 0
    for i in range(3755, 5001):
        if total_weight_with_boxes + i * box_weight <= bridge_weight_limit:
            max_boxes = i
        else:
            break
    result = max_boxes
    return result

 Executed result: 0
[EXP] 58: [success_rate]: True, [output]: 
def solution():
    bill = 40.00
    fee = bill * 0.25
    delivery_fees = 3.00
    total_fees = fee + delivery_fees
    total_cost = bill + total_fees
    tip = 4.00
    final_cost = total_cost + tip
    result = final_cost
    return result

 Executed result: 57.0
[EXP] 59: [success_rate]: True, [output]: 
def solution():
    clusters = 6
    fruits_per_cluster = 20
    individual_fruits = 67
    total_fruits = clusters * fruits_per_cluster
    total_fruits += individual_fruits
    result = total_fruits
    return result

 Executed result: 187
[EXP] 60: [success_rate]: True, [output]: python
def solution():
    oranges_initial = 25
    oranges_bad = 1
    oranges_unripe = int(0.2 * oranges_initial)
    oranges_sour = 2
    oranges_good = oranges_initial - oranges_bad - oranges_unripe - oranges_sour
    result = oranges_good
    return result

 Executed result: 17
[EXP] 61: [success_rate]: True, [output]: 
def solution():
    cost_of_material = 500
    cost_of_jeweler = 800
    total_cost = cost_of_material + cost_of_jeweler
    insurance_cost = total_cost * 0.1
    total_cost_with_insurance = total_cost + insurance_cost
    result = total_cost_with_insurance
    return result

 Executed result: 1430.0
[EXP] 62: [success_rate]: False, [output]: 
def solution():
    annual_pension = 50000
    years_worked = 30
    years_entitled = 10
    pension_increased = annual_pension * (years_entitled / 100)
    result = annual_pension + pension_increased
    return result

 Executed result: 55000.0
[EXP] 63: [success_rate]: True, [output]: 
def solution():
    initial_amount = 140
    half_year = 140 * 6  # 6 months
    reduced_amount = initial_amount * 0.9  # 10% less
    full_year = half_year + (reduced_amount * 6)  # 6 months
    result = full_year
    return result

 Executed result: 1596.0
[EXP] 64: [success_rate]: False, [output]: Python
def solution():
    miles_driven = 100
    gallons_used = 4
    gallons_capacity = 12
    total_gallons = gallons_capacity - gallons_used
    miles_per_gallon = miles_driven / gallons_used
    miles_on_single_tank = total_gallons * miles_per_gallon
    result = miles_on_single_tank
    return result

 Executed result: 200.0
[EXP] 65: [success_rate]: False, [output]: 
def solution():
    hours_per_day = 2 + 0.5
    hours_per_week = hours_per_day * 3
    hours_per_four_weeks = hours_per_week * 4
    result = hours_per_four_weeks
    return result

 Executed result: 30.0
[EXP] 66: [success_rate]: False, [output]: 
def solution():
    schools = 4
    girls_teams = 2
    boys_teams = 2
    girls_players = 5
    boys_players = 5
    coaches = 2
    total_players = schools * (girls_teams + boys_teams) * (girls_players + boys_players)
    total_coaches = schools * coaches
    total_people = total_players + total_coaches
    result = total_people
    return result

 Executed result: 168
[EXP] 67: [success_rate]: True, [output]: 
def solution():
    diamonds = 175
    rubies = diamonds - 35
    emeralds = 2 * rubies
    total_gems = diamonds + rubies + emeralds
    result = total_gems
    return result

 Executed result: 595
[EXP] 68: [success_rate]: True, [output]: 
def solution():
    girls = 60
    boys = girls * 2
    total_students = girls + boys
    students_per_teacher = 5
    teachers = total_students // students_per_teacher
    result = teachers
    return result

 Executed result: 36
[EXP] 69: [success_rate]: True, [output]: 
def solution():
    total_money = 100
    weekly_allowance = 5
    weeks = 8
    money_received = weekly_allowance * weeks
    money_initial = total_money - money_received
    result = money_initial
    return result

 Executed result: 60
[EXP] 70: [success_rate]: True, [output]: 
def solution():
    classes_per_day = 5
    days_in_a_week = 5
    classes_on_saturday = 8
    classes_in_a_week = classes_per_day * days_in_a_week + classes_on_saturday
    students_per_class = 15
    money_per_student = 15.00
    money_per_class = students_per_class * money_per_student
    total_money = classes_in_a_week * money_per_class
    result = total_money
    return result

 Executed result: 7425.0
[EXP] 71: [success_rate]: True, [output]: 
def solution():
    recipe1_instructions = 20
    recipe2_instructions = recipe1_instructions * 2
    total_instructions = recipe1_instructions + recipe2_instructions
    result = total_instructions
    return result

 Executed result: 60
[EXP] 72: [success_rate]: True, [output]: 
def solution():
    brownies_sold = 43
    cheesecakes_sold = 23
    brownie_price = 3
    cheesecake_price = 4
    total_revenue = (brownies_sold * brownie_price) + (cheesecakes_sold * cheesecake_price)
    result = total_revenue
    return result

 Executed result: 221
[EXP] 73: [success_rate]: True, [output]: 
def solution():
    cell_phones = 5
    cost_per_cell = 150
    total_cost = cell_phones * cost_per_cell
    interest_rate = 0.02
    months = 3
    
    monthly_cost = (total_cost * (1 + interest_rate)) / months
    
    result = monthly_cost
    return result

 Executed result: 255.0
[EXP] 74: [success_rate]: False, [output]: 
def solution():
    marigolds = 12
    petunias = 9
    begonias = 17
    marigold_price = 2.74
    petunia_price = 1.87
    begonia_price = 2.12

    marigold_receipt = round(marigolds * marigold_price)
    petunia_receipt = round(petunias * petunia_price)
    begonia_receipt = round(begonias * begonia_price)

    total_receipt = marigold_receipt + petunia_receipt + begonia_receipt
    result = total_receipt
    return result

 Executed result: 86
[EXP] 75: [success_rate]: False, [output]: 
def solution():
    square_footage_top = 16
    levels = 4
    square_footage_levels = [square_footage_top]
    for i in range(1, levels):
        square_footage_levels.append(square_footage_levels[i-1] / 2)
    average_square_footage = sum(square_footage_levels) / levels
    result = average_square_footage
    return result

 Executed result: 7.5
[EXP] 76: [success_rate]: True, [output]: def solution():
    cups_per_day = 0
    for i in range(1, 181):
        cups_per_day += 1
    for i in range(181, 366):
        cups_per_day += 2
    cups_total = cups_per_day
    bags_needed = cups_total // 110
    result = bags_needed
    return result

 Executed result: 5
[EXP] 77: [success_rate]: True, [output]: 
def solution():
    sarah_laundry = 400
    sarah_does_four_times_more_than_david = sarah_laundry / 4
    david_laundry = sarah_does_four_times_more_than_david
    raymond_laundry = sarah_laundry / 2
    difference = raymond_laundry - david_laundry
    result = difference
    return result

 Executed result: 100.0
[EXP] 78: [success_rate]: True, [output]: 
def solution():
    flowers_at_2_50 = 18 // 3 * 2.5
    flowers_at_1 = 18 / 2 * 1
    cost_at_2_50 = flowers_at_2_50
    cost_at_1 = flowers_at_1
    cost_saved = cost_at_2_50 - cost_at_1
    result = cost_saved
    return result

 Executed result: 6.0
[EXP] 79: [success_rate]: True, [output]: 
def solution():
    cost_initial = 100
    discount = 0.3
    discount_amount = cost_initial * discount
    cost_after_discount = cost_initial - discount_amount
    result = cost_after_discount
    return result

 Executed result: 70.0
[EXP] 80: [success_rate]: True, [output]: 
def solution():
    water_initial = 24
    water_taken_by_girls = 2 * (1/6) * water_initial
    water_taken_by_boy = 6
    water_left = water_initial - water_taken_by_girls - water_taken_by_boy
    result = water_left
    return result

 Executed result: 10.0
[EXP] 81: [success_rate]: True, [output]: 
def solution():
    stickers_initial = 10
    stickers_bought = 21
    stickers_birthday = 23
    total_stickers = stickers_initial + stickers_bought + stickers_birthday
    stickers_given = 9
    stickers_used = 28
    stickers_left = total_stickers - stickers_given - stickers_used
    result = stickers_left
    return result

 Executed result: 17
[EXP] 82: [success_rate]: True, [output]: 
def solution():
    grace_weight = 125
    alex_weight = 4 * grace_weight - 2
    combined_weight = grace_weight + alex_weight
    result = combined_weight
    return result

 Executed result: 623
[EXP] 83: [success_rate]: True, [output]: 
def solution():
    rose_bushes = 3
    roses_per_bush = 25
    thorns_per_rose = 8
    total_roses = rose_bushes * roses_per_bush
    total_thorns = total_roses * thorns_per_rose
    result = total_thorns
    return result

 Executed result: 600
[EXP] 84: [success_rate]: False, [output]: 
def solution():
    games_total = 22
    games_lost = games_total - games_won
    result = games_won
    return result

 Executed result: Error: return error, fail to execute
[EXP] 85: [success_rate]: True, [output]: 
def solution():
    age_of_gene = 34
    age_at_first_vacation = 23
    years_vacationed = age_of_gene - age_at_first_vacation
    years_per_vacation = 4
    quilt_blocks_per_year = 1
    total_quilt_blocks = years_vacationed * years_per_vacation * quilt_blocks_per_year
    result = total_quilt_blocks
    return result

 Executed result: 44
[EXP] 86: [success_rate]: False, [output]: 
def solution():
    alarm_rings_per_day = 3
    first_time_rings = 4
    second_time_rings = first_time_rings * 3
    third_time_rings = second_time_rings // 2
    total_rings = first_time_rings + second_time_rings + third_time_rings
    total_rings_per_day = total_rings
    total_rings_all_days = total_rings_per_day * alarm_rings_per_day
    result = total_rings_all_days
    return result

 Executed result: 66
[EXP] 87: [success_rate]: False, [output]: 
def solution():
    salary_initial = 600
    increase_percentage = 0.1
    years_of_service = 5
    years_to_go = 3

    salary_after_five_years = salary_initial * (1 + increase_percentage) ** years_of_service
    salary_after_eight_years = salary_after_five_years * (1 + increase_percentage) ** years_to_go

    result = salary_after_eight_years
    return result

 Executed result: 1286.153286000001
[EXP] 88: [success_rate]: False, [output]: 
def solution():
    harald_sales = 0
    marilyn_sales = 0
    total_sales = 88000
    marilyn_sales = total_sales * 9 // 10
    harald_sales = total_sales - marilyn_sales
    result = harald_sales
    return result

 Executed result: 8800
[EXP] 89: [success_rate]: True, [output]: 
def solution():
    invited_guests = 16
    gift_bags_per_guest = 0.75
    gift_bags = gift_bags_per_guest * invited_guests
    cost_per_gift_bag = 2
    total_cost = gift_bags * cost_per_gift_bag
    result = total_cost
    return result

 Executed result: 24.0
[EXP] 90: [success_rate]: True, [output]: 
def solution():
    adults = 20
    kids = 5
    adult_eats = 10
    kid_eats = adult_eats / 2
    total_eats = adults * adult_eats + kids * kid_eats
    result = total_eats
    return result

 Executed result: 225.0
[EXP] 91: [success_rate]: True, [output]: 
def solution():
    cindy_pets = 4
    marcia_pets = cindy_pets + 2
    jan_pets = marcia_pets * 3
    total_pets = cindy_pets + marcia_pets + jan_pets
    result = total_pets
    return result

 Executed result: 28
[EXP] 92: [success_rate]: True, [output]: 
def solution():
    james_age = 10
    corey_age = james_age + 1
    amy_age = corey_age - 2
    jackson_age = amy_age - 5
    result = jackson_age
    return result

 Executed result: 4
[EXP] 93: [success_rate]: False, [output]: 
def solution():
    lee_time = 38
    lee_improvement = 2
    gerald_improvement = 10 / 100
    gerald_time = lee_time - lee_improvement
    gerald_time_improved = gerald_time * (1 + gerald_improvement)
    result = gerald_time_improved
    return result

 Executed result: 39.6
[EXP] 94: [success_rate]: True, [output]: 
def solution():
    dogs = 60
    cats = dogs * 2
    total_pets = dogs + cats
    rabbits = total_pets - 12
    result = dogs + cats + rabbits
    return result

 Executed result: 348
[EXP] 95: [success_rate]: True, [output]: 
def solution():
    total_students = 200
    fraction_boys = 2/5
    fraction_girls = 1 - fraction_boys
    total_boys = int(total_students * fraction_boys)
    total_girls = int(total_students * fraction_girls)
    fraction_girls_scout = 2/3
    total_girls_scout = int(total_girls * fraction_girls_scout)
    total_girls_not_scout = total_girls - total_girls_scout
    result = total_girls_not_scout
    return result

 Executed result: 40
[EXP] 96: [success_rate]: True, [output]: 
def solution():
    harry_hours = 9
    james_hours = 2/3 * harry_hours
    harry_hours_more = harry_hours - james_hours
    result = harry_hours_more
    return result

 Executed result: 3.0
[EXP] 97: [success_rate]: True, [output]: 
def solution():
    sauce_ounces = 32
    can_volume = 16
    can_contents = 3
    can_contents_per_ounce = can_contents / can_volume
    total_can_contents = sauce_ounces * can_contents_per_ounce
    total_tomatoes = total_can_contents * 2
    result = total_tomatoes
    return result

 Executed result: 12.0
[EXP] 98: [success_rate]: True, [output]: 
def solution():
    cars_initial = 30
    cars_left = 5
    cars_driven_through_in_15_minutes = cars_initial - cars_left
    cars_driven_through_remaining_15_minutes = 20
    cars_driven_through_first_15_minutes = cars_driven_through_in_15_minutes - cars_driven_through_remaining_15_minutes
    result = cars_driven_through_first_15_minutes
    return result

 Executed result: 5
[EXP] 99: [success_rate]: True, [output]: 
def solution():
    potted_plants_received = 18
    potted_plants_initial = 2 * 40
    total_potted_plants = potted_plants_initial + potted_plants_received
    potted_plants_given = 40
    potted_plants_left = total_potted_plants - potted_plants_given
    result = potted_plants_left
    return result

 Executed result: 58
