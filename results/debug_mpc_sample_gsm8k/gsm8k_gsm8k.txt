[EXP] 0: [success_rate]: True, [output]: def solution():
    eggs_per_day = 16

    eggs_eaten = 3

    eggs_baked = 4

    total_eggs = eggs_per_day - (eggs_eaten + eggs_baked)

    total_money = total_eggs * 2

    result = total_money

    return result


 Executed result: 18
[EXP] 1: [success_rate]: True, [output]: def solution():
    blue_fiber = 2

    white_fiber = blue_fiber / 2

    total_fiber = blue_fiber + white_fiber

    result = total_fiber

    return result


 Executed result: 3.0
[EXP] 2: [success_rate]: False, [output]: def solution():
    house_price = 80000

    repairs_cost = 50000

    total_cost = house_price + repairs_cost

    increased_value = total_cost * 2.5

    profit = increased_value - total_cost

    result = profit

    return result


 Executed result: 195000.0
[EXP] 3: [success_rate]: True, [output]: def solution():
    sprints_per_week = 3

    sprints_per_sprint = 3

    meters_per_sprint = 60

    total_meters = sprints_per_week * sprints_per_sprint * meters_per_sprint

    result = total_meters

    return result


 Executed result: 540
[EXP] 4: [success_rate]: False, [output]: def solution():
    num_chickens = 20

    cups_feed_morning = 15

    cups_feed_afternoon = 25

    total_cups_feed = cups_feed_morning + cups_feed_afternoon

    total_cups_per_chicken = total_cups_feed / num_chickens

    total_cups_feed_third_meal = total_cups_per_chicken * num_chickens

    result = total_cups_feed_third_meal

    return result


 Executed result: 40.0
[EXP] 5: [success_rate]: True, [output]: def solution():
    total_cost = 0

    for i in range(16):

        if i % 2 == 0:

            cost = 5

        else:

            cost = 5 * 0.6

        total_cost += cost

    result = total_cost

    return result


 Executed result: 64.0
[EXP] 6: [success_rate]: True, [output]: def solution():
    seattle_sheep = 20

    charleston_sheep = seattle_sheep * 4

    toulouse_sheep = charleston_sheep * 2

    total_sheep = seattle_sheep + charleston_sheep + toulouse_sheep

    result = total_sheep

    return result


 Executed result: 260
[EXP] 7: [success_rate]: False, [output]: def solution():
    file_size = 200 * 1024 * 1024 * 1024  # convert GB to bytes

    speed = 2 * 1024 * 1024  # convert GB/minute to bytes/minute

    download_time_before_restart = file_size / speed * 0.6  # download 60% of the file

    restart_time = 20 * 60  # convert minutes to seconds

    download_time_after_restart = file_size / speed

    total_download_time = download_time_before_restart + restart_time + download_time_after_restart

    result = total_download_time

    return result


 Executed result: 165040.0
[EXP] 8: [success_rate]: False, [output]: def solution():
    time_drive_to_turn_around = 3

    speed_drive_to_turn_around = 60

    distance_drive_to_turn_around = time_drive_to_turn_around * speed_drive_to_turn_around

    time_getting_home = 4

    time_stuck_in_traffic = 2

    speed_half_hour = 30

    time_last_half_hour = 0.5

    speed_last_half_hour = 80

    time_left = time_getting_home - time_stuck_in_traffic - time_last_half_hour

    distance_stuck_in_traffic = 0

    distance_half_hour = time_half_hour * speed_half_hour

    distance_last_half_hour = time_left * speed_last_half_hour

    distance_from_home = distance_drive_to_turn_around + distance_stuck_in_traffic + distance_half_hour + distance_last_half_hour

    result = distance_from_home

    return result


 Executed result: Error: return error, fail to execute
[EXP] 9: [success_rate]: True, [output]: def solution():
    regular_rate = 10

    regular_hours = 40

    overtime_rate = regular_rate * 1.2

    overtime_hours = 45 - 40

    regular_pay = regular_rate * regular_hours

    overtime_pay = overtime_rate * overtime_hours

    total_pay = regular_pay + overtime_pay

    result = total_pay

    return result


 Executed result: 460.0
[EXP] 10: [success_rate]: True, [output]: def solution():
    downloads_first_month = 60

    downloads_second_month = downloads_first_month * 3

    downloads_third_month = downloads_second_month * 0.7

    total_downloads = downloads_first_month + downloads_second_month + downloads_third_month

    result = total_downloads

    return result


 Executed result: 366.0
[EXP] 11: [success_rate]: True, [output]: def solution():
    donuts_cost = 3 * 68

    cupcakes_cost = 2 * 80

    cheesecakes_cost = 6 * 55

    total_cost = donuts_cost + cupcakes_cost + cheesecakes_cost

    result = total_cost

    return result


 Executed result: 694
[EXP] 12: [success_rate]: False, [output]: def solution():
    tree_cost = 90

    cost_per_year = 3

    profit_per_lemon = 1.5

    lemons_per_year = 7

    profit_per_year = lemons_per_year * profit_per_lemon

    net_income_per_year = profit_per_year - cost_per_year

    years = 0

    while tree_cost > net_income_per_year:

        tree_cost -= net_income_per_year

        years += 1

    result = years

    return result


 Executed result: 11
[EXP] 13: [success_rate]: False, [output]: def solution():
    vacuum_cleaners_left = 5

    vacuum_cleaners_sold_to_orange = vacuum_cleaners_left

    vacuum_cleaners_sold_to_red = 2

    vacuum_cleaners_initial = 0

        if vacuum_cleaners_left == 5:

            vacuum_cleaners_sold_to_orange = vacuum_cleaners_initial - vacuum_cleaners_sold_to_green_house - vacuum_cleaners_sold_to_red

    result = vacuum_cleaners_initial

    return result


 Executed result: 0
[EXP] 14: [success_rate]: True, [output]: def solution():
    students = 20

    students_enrolled_contemporary = 0.2 * students

    students_remaining = students - students_enrolled_contemporary

    students_enrolled_jazz = 0.25 * students_remaining

    students_enrolled_hiphop = students_remaining - students_enrolled_jazz

    percentage_hiphop = (students_enrolled_hiphop / students) * 100

    result = percentage_hiphop

    return result


 Executed result: 60.0
[EXP] 15: [success_rate]: False, [output]: def solution():
    plan_a_worth = 5000

    plan_b_worth = 8000

    plan_a_rate_of_return = 0.025


 Executed result: None
[EXP] 16: [success_rate]: True, [output]: def solution():
    distance_west = 80

    distance_north = 150

    distance_total = distance_west + distance_north

    result = distance_total

    return result


 Executed result: 230
