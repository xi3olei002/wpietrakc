[EXP] 0: [success_rate]: False, [answer]: 2, [output]: import numpy as np

import matplotlib.pyplot as plt

from sympy import symbols, Eq, solve

import math

def solution():

    x = symbols('x')

    expr = 2/(x**2+x-6)

    asymptotes = solve(Eq(expr, 0), x)

    result = len(asymptotes)

    return result


 Executed result: 0
[EXP] 1: [success_rate]: True, [answer]: 10, [output]: def solution():

    difference = (1.2 * 30) - (1.3 * 20)

    result = "{:.2f}".format(difference)

    return result


 Executed result: 10.00
[EXP] 2: [success_rate]: False, [answer]: \frac{9}{7}, [output]: from sympy import symbols, ceiling

def solution():

    x = symbols('x')

    equation = ceiling(x) + x - 23/7

    sol = solve(equation, x)

    result = sol[0]

    return result


 Executed result: Error: return error, fail to execute
[EXP] 3: [success_rate]: True, [answer]: i, [output]: import math

import cmath

def solution():

    i = complex(0,1)

    result = i**5 + 1/i**25 + i**45

    return str(result)


 Executed result: 1j
[EXP] 4: [success_rate]: False, [answer]: 4, [output]: import sympy as sp

def solution():

    x = sp.symbols('x')

    equation = 2**8 == 4**x

    simplified_equation = sp.solve(equation, x)

    result = simplified_equation[0]

    return result


 Executed result: Error: return error, fail to execute
[EXP] 5: [success_rate]: True, [answer]: 402, [output]: def solution():

    a = 6

    d = 4

    n = 100

    result = a + (n - 1) * d

    return result


 Executed result: 402
[EXP] 6: [success_rate]: False, [answer]: [-2,7], [output]: import numpy as np

from sympy import symbols, solve

def solution():

    x = symbols('x')

    inequality = x**2 - 5*x - 4 <= 10

    solution = solve(inequality, x)

    result = str(solution)

    return result


 Executed result: x) & (x <
[EXP] 7: [success_rate]: True, [answer]: 7, [output]: import math

from sympy import symbols, Eq, solve

import numpy as np

def solution():

    P = 1000  # initial investment

    A = 1225  # final amount

    t = 3  # time in years

    r = symbols('r')

    equation = Eq(P * (1 + r) ** t, A)

    result = solve(equation, r)[0]

    result = result * 100

    result = "{:.0f}".format(result)

    return result


 Executed result: 7
[EXP] 8: [success_rate]: False, [answer]: 4,6,14,15, [output]: def solution():

    for a in range(-10, 11):

        for b in range(-10, 11):

            if a + b == 10:

                for c in range(-10, 11):

                    for d in range(-10, 11):

                        if a + c == 18 and a + d == 19 and b + c == 20 and b + d == 21 and c + d == 29:

                            return f"{min(a, b, c, d)} , {a if a < min(a, b, c, d) else b if b < min(a, b, c, d) else c if c < min(a, b, c, d) else d} , {b if b < min(a, b, c, d) and b != min(a, b, c, d) else c if c < min(a, b, c, d) and c != min(a, b, c, d) else d} , {c if c < min(a, b, c, d) and c != min(a, b, c, d) and c != b if b < min(a, b, c, d) and b != min(a, b, c, d) else d} , {d}"


 Executed result: Error: return error, fail to execute
[EXP] 9: [success_rate]: False, [answer]: -\frac{1}{8}, [output]: import numpy as np

from scipy.optimize import fmin

import math

def solution():

    # Function to be minimized

    def func(x):

        return abs(5*x - 1) - abs(3*x + 2)


 Executed result: None
[EXP] 10: [success_rate]: False, [answer]: \frac{x+2}{7}, [output]: import sympy as sp

x = sp.symbols('x')

f = sp.sympify('7*x + 5')

g = sp.sympify('x - 1')

h = f(g)

h_inv = sp.solve(h - x, x)[0]

result = sp.latex(h_inv)

return result


 Executed result: Error: return error, fail to execute
[EXP] 11: [success_rate]: False, [answer]: -15, [output]: import numpy as np

import sympy as sp

def solution():

    x = sp.symbols('x')

    inequality1 = abs(x) + 1 > 7

    inequality2 = abs(x + 1) <= 7

    combined_inequality = sp.And(inequality1, inequality2)

    solution_set = sp.solve(combined_inequality, x)

    result = sum(solution_set)

    return result


 Executed result: Error: return error, fail to execute
[EXP] 12: [success_rate]: True, [answer]: 10, [output]: import math

def solution():

    x = -8

    y = 6

    distance = math.sqrt(x**2 + y**2)

    result = distance

    return result


 Executed result: 10.0
[EXP] 13: [success_rate]: True, [answer]: 8, [output]: import numpy as np

def solution():

    x1, y1 = 1, 4

    x2, y2 = 1, 10

    midpoint_x = (x1 + x2) / 2

    midpoint_y = (y1 + y2) / 2

    result = midpoint_x + midpoint_y

    return result


 Executed result: 8.0
[EXP] 14: [success_rate]: False, [answer]: 75, [output]: import math

def solution():

    A = (0, 7)

    B = (1, 0)

    C = (12, -2)

    D = (7, 8)

    # Calculating the diagonals

    diagonal1 = math.sqrt((A[0] - C[0])**2 + (A[1] - C[1])**2)

    diagonal2 = math.sqrt((B[0] - D[0])**2 + (B[1] - D[1])**2)

    # Calculate the area

    area = 0.5 * diagonal1 * diagonal2

    # Formatting the result in LaTeX

    result = r'{}\,\text{cm}^2'.format(area)

    return result


 Executed result: Error: return error, fail to execute
[EXP] 15: [success_rate]: False, [answer]: \frac{11}{2}, [output]: import numpy as np

import math

def solution():

    # Define the function

    def g(x):

        return math.sqrt((x-3)**2 - (x-8)**2)


 Executed result: None
[EXP] 16: [success_rate]: True, [answer]: -25, [output]: def solution():

    x = -10

    if x < -3:

        result = 3 * x + 5

    else:

        result = 7 - 4 * x

    return result


 Executed result: -25
[EXP] 17: [success_rate]: False, [answer]: 8, [output]: import math

import sympy as sp

from sympy.simplify import simplify

def solution():

    A = sp.symbols('A')

    B = sp.symbols('B')

    C = sp.symbols('C')

    eqn = simplify(A*sp.sqrt(B)/C - 9/(2*sp.sqrt(3)))

    factors = sp.factor(eqn)

    A_value, B_value, C_value = sp.solve(factors, (A, B, C))

    A_value = A_value[0].evalf()

    B_value = B_value[0].evalf()

    C_value = C_value[0].evalf()

    result = A_value + B_value + C_value

    return result


 Executed result: Error: return error, fail to execute
[EXP] 18: [success_rate]: False, [answer]: 3, [output]: from sympy import symbols, Eq, solve

import fractions

def solution():

    x = symbols('x')

    treeks = x

    squigs = 3 * treeks / 10

    goolees = treeks / 10

    equation = Eq(2 * treeks + goolees, squigs)

    solution = solve(equation, x)[0]

    result = fractions.Fraction(solution).limit_denominator()

    return str(result)


 Executed result: 0
[EXP] 19: [success_rate]: True, [answer]: 187.5, [output]: def solution():

    ounces_1 = 8

    calories_1 = 125

    ounces_2 = 12

    calories_2 = (calories_1 / ounces_1) * ounces_2

    result = "{:.2f}".format(calories_2)

    return result


 Executed result: 187.50
[EXP] 20: [success_rate]: False, [answer]: 18, [output]: import sympy as sp

def solution():

    m = sp.symbols('m')

    n = sp.symbols('n')

    x = sp.symbols('x')

    equation = x**2 - m*x + n

    for i in range(2, 20):

        roots = sp.solve(equation.subs(m, i), x)

        if all(isinstance(root, int) and root > 0 and sp.isprime(root) for root in roots):

            print(n.subs(m, i))

    result = len(set(n.subs(m, i) for i in range(2, 20) if all(isinstance(root, int) and root > 0 and sp.isprime(root) for root in sp.solve((x**2 - i*x + n).subs(n, i), x))))

    return result


 Executed result: 0
[EXP] 21: [success_rate]: True, [answer]: 40, [output]: import math

def solution():

    original_price = 1.25

    initial_offer = 2 * original_price

    price_doubled_every_3_years = initial_offer

    years_passed = 3

    years_to_pass = 12

    times_doubled = math.floor(years_to_pass / 3)

    for i in range(times_doubled):

        price_doubled_every_3_years *= 2

    remaining_years = years_to_pass % 3

    remaining_price = price_doubled_every_3_years * (2 ** (remaining_years / 3))

    result = "{:.2f}".format(remaining_price)

    return result


 Executed result: 40.00
[EXP] 22: [success_rate]: False, [answer]: 5, [output]: import sympy as sp

def solution():

    x = sp.symbols('x')

    expr = sp.sympify("(17**6 - 17**5)/16 == 17**x")

    simplified_expr = sp.solve(expr, x)

    result = simplified_expr[0]

    return result


 Executed result: Error: return error, fail to execute
[EXP] 23: [success_rate]: True, [answer]: 8, [output]: import math

def solution():

    P1 = 4  # kPa

    V1 = 3.67  # liter

    V2 = 1.835  # liter

    k = P1 * V1

    P2 = k / V2

    result = P2

    return "{:.2f} kPa".format(result)


 Executed result: 8.00 kPa
[EXP] 24: [success_rate]: True, [answer]: 3125, [output]: def solution():

    a = 5

    expression = a**3 * a**2

    result = expression

    return result


 Executed result: 3125
[EXP] 25: [success_rate]: False, [answer]: [0,\infty), [output]: import sympy as sym

from sympy import symbols, sympify

def solution():

    x = symbols('x')

    f = sympify("sqrt(x**2)")

    result = sym.solve(f - x, x)

    result = r"[-{}, {}]".format(min(result), max(result))

    return result


 Executed result: []
[EXP] 26: [success_rate]: True, [answer]: 0.5, [output]: import sympy as sp

from sympy import symbols

from sympy.solvers import solve

def solution():

    x = symbols('x')

    equation = sp.Eq((2*x+5)*(x-3), 14)

    solutions = solve(equation, x)

    sum_of_solutions = sum(solutions)

    return sum_of_solutions


 Executed result: 1/2
[EXP] 27: [success_rate]: False, [answer]: 12,10,6, [output]: import numpy as np

def solution():

    c = [i for i in range(1,33) if np.roots([1, -7, i])[0].real == np.roots([1, -7, i])[1].real]

    result = ','.join(map(str, sorted(c, reverse=True)))

    return result


 Executed result: 32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13
[EXP] 28: [success_rate]: True, [answer]: 5, [output]: import sympy as sp

def solution():

    x = sp.symbols('x')

    expr = x**2 - 5*x + 9

    roots = sp.solve(expr, x)

    a, b = roots

    result = (a - 1) * (b - 1)

    return str(result)


 Executed result: (3/2 - sqrt(11)*I/2)*(3/2 + sqrt(11)*I/2)
[EXP] 29: [success_rate]: False, [answer]: 16, [output]: from sympy import symbols, solve

import numpy as np

def solution():

    x = symbols('x')

    b = symbols('b')

    equation = x**2 + b*x - 48

    roots = solve(equation, x)

    if roots[0]/roots[1] == 3:

                biggest_b = b_val

        result = biggest_b

    else:

    return result


 Executed result: Error: return error, fail to execute
[EXP] 30: [success_rate]: False, [answer]: 2300, [output]: import numpy as np

def solution():

    # Create a system of linear equations

    x, y = np.array([8, 2]), np.array([14, 3])

    a, b = np.array([932, 1402])

    # Calculate the cost per pound of feathers

    cost_per_feather = (a[0] - a[1]) / (x[0] - x[1])

    # Calculate the cost per ounce of gold

    cost_per_gold = (a[1] - a[0]) / (y[1] - y[0])

    # Calculate the cost of five pounds of feathers and five ounces of gold

    cost = 5 * cost_per_feather + 5 * cost_per_gold

    # Format the result in LaTeX

    result = r'${}{}'.format(cost, 'dollars')

    return result


 Executed result: Error: return error, fail to execute
[EXP] 31: [success_rate]: True, [answer]: 5, [output]: import numpy as np

from sympy import symbols, simplify

def solution():

    x, y = symbols('x y')

    expr = x**2 + 8*x + y**2 - 6*y

    simplified_expr = simplify(expr)

    # Complete the square

    a1 = 8 / (2 * 2)

    b1 = a1**2

    a2 = -6 / (2 * 1)

    b2 = a2**2

    simplified_expr = simplified_expr - (b1 + b2)

    radius = np.sqrt(b1 + b2)

    result = r'{}\sqrt{{}}'.format(radius, radius)

    return result


 Executed result: 3.605551275463989\sqrt{}
[EXP] 32: [success_rate]: True, [answer]: 105, [output]: import itertools

import math

from sympy import symbols, simplify

from numpy import array

def solution():

    x = symbols('x')

    elements = list(itertools.combinations([1,2,3,4,5,6],2))

    sums = [sum(i) for i in elements]

    total_sum = sum(sums)

    return total_sum


 Executed result: 105
[EXP] 33: [success_rate]: False, [answer]: -13.5, [output]: import numpy as np

from scipy.stats import linregress

def solution():

    x = np.array([2, p, p + 2])

    y = np.array([-5, -14, -17])

    slope, intercept, r_value, p_value, std_err = linregress(x, y)

    new_x = 13

    new_y = slope * new_x + intercept

    result = new_y

    result = "{:.1f}".format(result)

    return result


 Executed result: Error: return error, fail to execute
[EXP] 34: [success_rate]: False, [answer]: \frac{243}{625}, [output]: import sympy as sp

from sympy.abc import x

def solution():

    r = 5/3

    a = 125/9

    T8 = a * r**7

    result = sp.simplify(T8)

    return result


 Executed result: 496.145150637606
[EXP] 35: [success_rate]: False, [answer]: 2, [output]: import sympy as sp

from sympy import solve

from sympy.abc import n

from functools import reduce

from operator import mul

from math import log

def solution():

    n = sp.symbols('n')

    equation = sp.Eq(9**18*n, 27**24)

    result = solve(equation, n)

    return result[0]


 Executed result: 150094635296999121
[EXP] 36: [success_rate]: False, [answer]: (-\sqrt{3},\sqrt{3}), [output]: import sympy as sp

def solution():

    x = sp.symbols('x')

    inequality = -4 < x**4 + 4*x**2 < 21

    solution = sp.solve((inequality))

    inequality_interval = "{}, {}".format(min(solution), max(solution))

    return inequality_interval


 Executed result: Error: return error, fail to execute
[EXP] 37: [success_rate]: False, [answer]: 23, [output]: import sympy

from sympy import symbols, simplify

def solution():

    x = symbols('x')

    expr = sympy.sqrt(2) + 1/sympy.sqrt(2) + sympy.sqrt(3) + 1/sympy.sqrt(3)

    simplified_expr = simplify(expr)

    a = int(simplified_expr.content) if simplified_expr.content is not None else int(0)

    b = int(simplified_expr.as_numer_denom()[1][1].as_numer_denom()[1] if len(simplified_expr.as_numer_denom()) > 1 else int(0))

    c = int(simplified_expr.as_numer_denom()[0])

    result = a + b + c

    return result


 Executed result: Error: return error, fail to execute
[EXP] 38: [success_rate]: False, [answer]: 49, [output]: import numpy as np

from sympy import symbols, solve

from sympy.solvers import solve

x, y = symbols('x y')

expr = x**2 + y**2 - 14*x - 48*y

sol = solve((x**2 + y**2 - 14*x - 48*y), (x,y))

max_y = max(sol[0][1].evalf())

result = "{:.2f}".format(max_y)

return result


 Executed result: Error: return error, fail to execute
[EXP] 39: [success_rate]: True, [answer]: 2x^9-8x^7+9x^6-16x^5-12x^4+9x^3-24x^2, [output]: from sympy import symbols, expand

def solution():

    x = symbols('x')

    expr = (2*x**5 + 3*x**2)*(x**4 - 4*x**2 + 3*x - 8)

    result = expand(expr)

    return result


 Executed result: 2*x**9 - 8*x**7 + 9*x**6 - 16*x**5 - 12*x**4 + 9*x**3 - 24*x**2
[EXP] 40: [success_rate]: False, [answer]: (-\infty,-8)\cup(8,\infty), [output]: import numpy as np

from sympy import symbols, Eq, solve

x = symbols('x')

def solution():

    m = symbols('m')

    eq = Eq(2*x**2 + m*x + 8, 0)

    roots = solve(eq, x)

    if len(roots) == 2:

        if roots[0] != roots[1]:

            m_values = []

            for root in roots:

                m_values.append(-2 * root)

            m_values.sort()

            result = f'({m_values[0]}, {m_values[1]})'

        else:

            result = 'No solution'

    else:

        result = 'No solution'

    return result


 Executed result: No solution
[EXP] 41: [success_rate]: True, [answer]: 0, [output]: import numpy as np

def solution():

    a = 4

    b = (12 - 3 * a) / 2

    result = b

    return result


 Executed result: 0.0
[EXP] 42: [success_rate]: False, [answer]: 2, [output]: import sympy as sp

from sympy import symbols

def solution():

    x = symbols('x')

    equation = abs(x - 1) - 7

    equation = sp.Eq(equation, 0)

    solution = sp.solve(equation, x)

    return solution


 Executed result: Error: return error, fail to execute
