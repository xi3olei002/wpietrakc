[EXP] 0: [success_rate]: True, [output]: def solution():
    eggs_per_day = 16

    eggs_eaten = 3

    eggs_baked = 4

    total_eggs = eggs_per_day - (eggs_eaten + eggs_baked)

    total_money = total_eggs * 2

    result = total_money

    return result


 Executed result: 18
[EXP] 1: [success_rate]: True, [output]: def solution():
    blue_fiber = 2

    white_fiber = blue_fiber / 2

    total_fiber = blue_fiber + white_fiber

    result = total_fiber

    return result


 Executed result: 3.0
[EXP] 2: [success_rate]: False, [output]: def solution():
    house_price = 80000

    repairs_cost = 50000

    total_cost = house_price + repairs_cost

    increased_value = total_cost * 2.5

    profit = increased_value - total_cost

    result = profit

    return result


 Executed result: 195000.0
[EXP] 3: [success_rate]: True, [output]: def solution():
    sprints_per_week = 3

    sprints_per_sprint = 3

    meters_per_sprint = 60

    total_meters = sprints_per_week * sprints_per_sprint * meters_per_sprint

    result = total_meters

    return result


 Executed result: 540
[EXP] 4: [success_rate]: False, [output]: def solution():
    num_chickens = 20

    cups_feed_morning = 15

    cups_feed_afternoon = 25

    total_cups_feed = cups_feed_morning + cups_feed_afternoon

    total_cups_per_chicken = total_cups_feed / num_chickens

    total_cups_feed_third_meal = total_cups_per_chicken * num_chickens

    result = total_cups_feed_third_meal

    return result


 Executed result: 40.0
[EXP] 5: [success_rate]: True, [output]: def solution():
    total_cost = 0

    for i in range(16):

        if i % 2 == 0:

            cost = 5

        else:

            cost = 5 * 0.6

        total_cost += cost

    result = total_cost

    return result


 Executed result: 64.0
[EXP] 6: [success_rate]: True, [output]: def solution():
    seattle_sheep = 20

    charleston_sheep = seattle_sheep * 4

    toulouse_sheep = charleston_sheep * 2

    total_sheep = seattle_sheep + charleston_sheep + toulouse_sheep

    result = total_sheep

    return result


 Executed result: 260
[EXP] 7: [success_rate]: False, [output]: def solution():
    file_size = 200 * 1024 * 1024 * 1024  # convert GB to bytes

    speed = 2 * 1024 * 1024  # convert GB/minute to bytes/minute

    download_time_before_restart = file_size / speed * 0.6  # download 60% of the file

    restart_time = 20 * 60  # convert minutes to seconds

    download_time_after_restart = file_size / speed

    total_download_time = download_time_before_restart + restart_time + download_time_after_restart

    result = total_download_time

    return result


 Executed result: 165040.0
[EXP] 8: [success_rate]: False, [output]: def solution():
    time_drive_to_turn_around = 3

    speed_drive_to_turn_around = 60

    distance_drive_to_turn_around = time_drive_to_turn_around * speed_drive_to_turn_around

    time_getting_home = 4

    time_stuck_in_traffic = 2

    speed_half_hour = 30

    time_last_half_hour = 0.5

    speed_last_half_hour = 80

    time_left = time_getting_home - time_stuck_in_traffic - time_last_half_hour

    distance_stuck_in_traffic = 0

    distance_half_hour = time_half_hour * speed_half_hour

    distance_last_half_hour = time_left * speed_last_half_hour

    distance_from_home = distance_drive_to_turn_around + distance_stuck_in_traffic + distance_half_hour + distance_last_half_hour

    result = distance_from_home

    return result


 Executed result: Error: return error, fail to execute
[EXP] 9: [success_rate]: True, [output]: def solution():
    regular_rate = 10

    regular_hours = 40

    overtime_rate = regular_rate * 1.2

    overtime_hours = 45 - 40

    regular_pay = regular_rate * regular_hours

    overtime_pay = overtime_rate * overtime_hours

    total_pay = regular_pay + overtime_pay

    result = total_pay

    return result


 Executed result: 460.0
[EXP] 10: [success_rate]: True, [output]: def solution():
    downloads_first_month = 60

    downloads_second_month = downloads_first_month * 3

    downloads_third_month = downloads_second_month * 0.7

    total_downloads = downloads_first_month + downloads_second_month + downloads_third_month

    result = total_downloads

    return result


 Executed result: 366.0
[EXP] 11: [success_rate]: True, [output]: def solution():
    donuts_cost = 3 * 68

    cupcakes_cost = 2 * 80

    cheesecakes_cost = 6 * 55

    total_cost = donuts_cost + cupcakes_cost + cheesecakes_cost

    result = total_cost

    return result


 Executed result: 694
[EXP] 12: [success_rate]: False, [output]: def solution():
    tree_cost = 90

    cost_per_year = 3

    profit_per_lemon = 1.5

    lemons_per_year = 7

    profit_per_year = lemons_per_year * profit_per_lemon

    net_income_per_year = profit_per_year - cost_per_year

    years = 0

    while tree_cost > net_income_per_year:

        tree_cost -= net_income_per_year

        years += 1

    result = years

    return result


 Executed result: 11
[EXP] 13: [success_rate]: False, [output]: def solution():
    vacuum_cleaners_left = 5

    vacuum_cleaners_sold_to_orange = vacuum_cleaners_left

    vacuum_cleaners_sold_to_red = 2

    vacuum_cleaners_initial = 0

        if vacuum_cleaners_left == 5:

            vacuum_cleaners_sold_to_orange = vacuum_cleaners_initial - vacuum_cleaners_sold_to_green_house - vacuum_cleaners_sold_to_red

    result = vacuum_cleaners_initial

    return result


 Executed result: 0
[EXP] 14: [success_rate]: True, [output]: def solution():
    students = 20

    students_enrolled_contemporary = 0.2 * students

    students_remaining = students - students_enrolled_contemporary

    students_enrolled_jazz = 0.25 * students_remaining

    students_enrolled_hiphop = students_remaining - students_enrolled_jazz

    percentage_hiphop = (students_enrolled_hiphop / students) * 100

    result = percentage_hiphop

    return result


 Executed result: 60.0
[EXP] 15: [success_rate]: True, [output]: def solution():
    plan_a_worth = 5000

    plan_b_worth = 8000

    plan_a_rate_of_return = 0.025

    plan_b_rate_of_return = 0.012

    plan_a_profit = plan_a_worth * plan_a_rate_of_return

    plan_b_profit = plan_b_worth * plan_b_rate_of_return

    if plan_a_profit > plan_b_profit:

        result = plan_a_profit

    return result


 Executed result: 125.0
[EXP] 16: [success_rate]: True, [output]: def solution():
    distance_west = 80

    distance_north = 150

    train_distance = distance_west + distance_north

    result = train_distance

    return result


 Executed result: 230
[EXP] 17: [success_rate]: True, [output]: def solution():
    hourly_salary_teacher = 20

    hourly_salary_coach = 30

    hours_per_week_teacher = 35

    hours_per_week_coach = 15

    weeks_per_year = 50

    annual_salary_teacher = hourly_salary_teacher * hours_per_week_teacher * weeks_per_year

    annual_salary_coach = hourly_salary_coach * hours_per_week_coach * weeks_per_year

    annual_salary = annual_salary_teacher + annual_salary_coach

    result = annual_salary

    return result


 Executed result: 57500
[EXP] 18: [success_rate]: True, [output]: def solution():
    eggs_per_omelet = 3

    omelets_per_week = 7

    weeks = 4

    eggs_per_week = eggs_per_omelet * omelets_per_week

    total_eggs = eggs_per_week * weeks

    dozens_eggs = total_eggs // 12

    result = dozens_eggs

    return result


 Executed result: 7
[EXP] 19: [success_rate]: False, [output]: def solution():
    miles_trail = 12

    miles_walked = 4 + 2 = 6

    time_taken = 2

    speed_wanted = 4

    speed_needed = (miles_trail - miles_walked) / (time_taken + ((miles_trail - miles_walked) / speed_wanted))

    result = speed_needed

    return result


 Executed result: Error: return error, fail to execute
[EXP] 20: [success_rate]: True, [output]: def solution():
    liters_orange_drink = 10

    water_content_orange_drink = 2/3

    water_orange_drink = liters_orange_drink * water_content_orange_drink

    liters_pineapple_drink = 15

    water_content_pineapple_drink = 3/5

    water_pineapple_drink = liters_pineapple_drink * water_content_pineapple_drink

    water_total = water_orange_drink + water_pineapple_drink

    liters_spilled = 1

    water_spilled = liters_spilled * 2/3

    water_left = water_total - water_spilled

    result = water_left

    return result


 Executed result: 15.0
[EXP] 21: [success_rate]: False, [output]: def solution():
    samantha_age = 31

    age_difference = samantha_age - 23

    son_birth_year = 23 - age_difference - 6

    result = son_birth_year

    return result


 Executed result: 9
[EXP] 22: [success_rate]: True, [output]: def solution():
    customers = 8

    DVDs_sold_first_3 = 3 * 1

    DVDs_sold_next_2 = 2 * 2

    DVDs_sold_last_3 = 0

    total_DVDs_sold = DVDs_sold_first_3 + DVDs_sold_next_2 + DVDs_sold_last_3

    result = total_DVDs_sold

    return result


 Executed result: 7
[EXP] 23: [success_rate]: True, [output]: def solution():
    hours_burned = 4

    centimeters_melted_per_hour = 2

    centimeters_melted = hours_burned * centimeters_melted_per_hour

    result = centimeters_melted

    return result


 Executed result: 8
[EXP] 24: [success_rate]: True, [output]: def solution():
    discount = 0.25

    original_price = 19.50 / (1 - discount)

    result = original_price

    return result


 Executed result: 26.0
[EXP] 25: [success_rate]: True, [output]: def solution():
    total_cost = 50

    meal_cost = 12

    milk_cost = 5 * 3

    apple_cost = 4 * 1.5

    total_without_pizza = meal_cost + milk_cost + apple_cost

    pizza_cost = total_cost - total_without_pizza

    num_pizza_boxes = pizza_cost / 8.5

    result = num_pizza_boxes

    return result


 Executed result: 2.0
[EXP] 26: [success_rate]: True, [output]: def solution():
    shorts_cost = 3 * 16.50

    pants_cost = 3 * 22.50

    shoes_cost = 3 * 42

    total_cost = shorts_cost + pants_cost + shoes_cost

    result = total_cost

    return result


 Executed result: 243.0
[EXP] 27: [success_rate]: True, [output]: def solution():
    days = 60

    servings_per_carton = 15

    cost_per_carton = 4.00

    servs_per_day = 1

    servs_total = days * servs_per_day

    cartons_total = servs_total / servings_per_carton

    cost_total = cartons_total * cost_per_carton

    result = cost_total

    return result


 Executed result: 16.0
[EXP] 28: [success_rate]: False, [output]: def solution():
    total_distance = 60

    first_stop_distance = 20

    second_stop_distance = total_distance - (total_distance - first_stop_distance - 15)

    distance_between_stops = second_stop_distance - first_stop_distance

    result = distance_between_stops

    return result


 Executed result: 15
[EXP] 29: [success_rate]: True, [output]: def solution():
    one_heels = 33

    other_heels = one_heels * 2

    total_heels = one_heels + other_heels

    boots = total_heels + 5

    result = boots

    return result


 Executed result: 104
[EXP] 30: [success_rate]: True, [output]: def solution():
    ratio_darrell_to_allen = 7

    ratio_allen_to_darrell = 11

    total_age_now = 162

    darrell_age_now = total_age_now * ratio_darrell_to_allen / (ratio_darrell_to_allen + ratio_allen_to_darrell)

    allen_age_now = total_age_now - darrell_age_now

    allen_age_in_10_years = allen_age_now + 10

    result = allen_age_in_10_years

    return result


 Executed result: 109.0
[EXP] 31: [success_rate]: False, [output]: def solution():
    friend1_guess = 80

    friend2_guess = friend1_guess + (friend1_guess // 2)

    friend3_guess = friend1_guess + (friend1_guess * 0.25)

    average_guess = (friend1_guess + friend2_guess + friend3_guess) / 3

    result = average_guess

    return result


 Executed result: 100.0
[EXP] 32: [success_rate]: True, [output]: def solution():
    dogs = 10

    time_per_dog = 0.5

    time_per_day = dogs * time_per_dog

    time_per_week = time_per_day * 7

    result = time_per_week

    return result


 Executed result: 35.0
[EXP] 33: [success_rate]: False, [output]: def solution():
    total_coins = 110

    gold_coins = total_coins * 2 / 3

    silver_coins = gold_coins - 30

    result = gold_coins

    return result


 Executed result: 73.33333333333333
[EXP] 34: [success_rate]: True, [output]: def solution():
    raymonds_jewels = 40

    aaron_jewels = (raymonds_jewels / 2) + 5

    siobhan_jewels = aaron_jewels - 2

    result = siobhan_jewels

    return result


 Executed result: 23.0
[EXP] 35: [success_rate]: True, [output]: def solution():
    minutes_played = 40

    points_in_first_20_minutes = 4

    points_in_second_20_minutes = points_in_first_20_minutes * 1.25

    total_points = points_in_first_20_minutes + points_in_second_20_minutes

    result = total_points

    return result


 Executed result: 9.0
[EXP] 36: [success_rate]: True, [output]: def solution():
    yogurts_per_day = 2

    yogurts_per_dollar = 4

    yogurts_in_month = yogurts_per_day * 30

    yogurts_cost = yogurts_in_month // yogurts_per_dollar

    cost = yogurts_cost * 5

    result = cost

    return result


 Executed result: 75
[EXP] 37: [success_rate]: False, [output]: def solution():
    lego_sets_initial = 13

    lego_set_price = 15

    total_money_collected = lego_set_price * lego_sets_initial

    video_game_price = 20

    video_games_bought = 8

    money_spent_on_video_games = video_games_bought * video_game_price

    money_left = total_money_collected - money_spent_on_video_games - 5

    result = lego_sets_initial

    return result


 Executed result: 13
[EXP] 38: [success_rate]: True, [output]: def solution():
    miles_per_week = 60

    days_per_week = 3

    hours_per_day = [3, 3/2, 3/2]

    total_hours = sum(hours_per_day)

    speed = miles_per_week / total_hours

    result = speed

    return result


 Executed result: 10.0
[EXP] 39: [success_rate]: False, [output]: def solution():
    speed_skip = 3

    speed_run = speed_skip * 4

    speed_walk = speed_run / 4

    running_time = 6 / 3

    walking_time = 6 - running_time

    running_distance = running_time * speed_run

    walking_distance = walking_time * speed_walk

    total_distance = running_distance + walking_distance

    result = total_distance

    return result


 Executed result: 36.0
[EXP] 40: [success_rate]: True, [output]: def solution():
    suzy_phone_age = 1

    ben_phone_age = suzy_phone_age * 2

    brandon_phone_age = ben_phone_age * 4

    result = brandon_phone_age

    return result


 Executed result: 8
[EXP] 41: [success_rate]: False, [output]: def solution():
    dragon_range = 1000

    javelin_range_without_gemstone = 400

    javelin_range_with_gemstone = javelin_range_without_gemstone * 3

    safe_distance = dragon_range + javelin_range_with_gemstone

    result = safe_distance

    return result


 Executed result: 2200
[EXP] 42: [success_rate]: True, [output]: def solution():
    pies_initial = 5

    pie_pieces_per_pie = 8

    total_pieces_initial = pies_initial * pie_pieces_per_pie

    pieces_taken = total_pieces_initial - 14

    result = pieces_taken

    return result


 Executed result: 26
[EXP] 43: [success_rate]: True, [output]: def solution():
    daily_calorie_target = 2000

    daily_calories_consumed = 1800

    remaining_calories_to_consume = daily_calorie_target - daily_calories_consumed

    calorie_per_serving = 250

    total_calories_in_a_bag = 5 * calorie_per_serving

    weight_of_per_calorie = 300 / total_calories_in_a_bag

    weight_of_remaining_calories = remaining_calories_to_consume * weight_of_per_calorie

    result = weight_of_remaining_calories

    return result


 Executed result: 48.0
[EXP] 44: [success_rate]: False, [output]: def solution():
    beeswax_cost = 10

    candles_per_pound = 10

    weight_of_beeswax = 1

            for k in range(candles_per_pound-int(10-candles_made%10)):

    cost = beeswax_cost + candles_made

    revenue = candles_made * 2

    net_profit = revenue - cost

    result = net_profit

    return result


 Executed result: Error: return error, fail to execute
[EXP] 45: [success_rate]: False, [output]: def solution():
    articles_monday = 5

    articles_tuesday = 2/5 * articles_monday

    articles_wednesday = 2 * articles_tuesday

    total_articles = articles_monday + articles_tuesday + articles_wednesday

    time_per_article = 4

    total_hours = total_articles * time_per_article

    result = total_hours

    return result


 Executed result: 44.0
[EXP] 46: [success_rate]: False, [output]: def solution():
    postit_notes_initial = 80

    cups_of_coffee = 220

    postit_notes_used = cups_of_coffee

    postit_notes_remaining = postit_notes_initial - postit_notes_used - 23

    package_postit_notes = postit_notes_remaining

    result = package_postit_notes

    return result


 Executed result: -163
[EXP] 47: [success_rate]: True, [output]: def solution():
    blue_ties_cost = 40

    blue_ties_spent = 200 / blue_ties_cost

    blue_ties = blue_ties_spent

    red_ties = blue_ties * 2

    red_ties_cost = blue_ties_cost * 1.5

    red_ties_spent = red_ties * red_ties_cost

    result = red_ties_spent + 200

    return result


 Executed result: 800.0
[EXP] 48: [success_rate]: True, [output]: def solution():
    total_wire = 4

    wire_length = 6

    wire_length_in_inches = 6

    total_pieces = total_wire * 12

    wire_pieces = total_pieces // wire_length_in_inches

    result = wire_pieces

    return result


 Executed result: 8
[EXP] 49: [success_rate]: True, [output]: def solution():
    total_floors = 15

    units_per_floor = 8

    total_units = total_floors * units_per_floor

    occupied_units = (total_units * 3) // 4

    unoccupied_units = total_units - occupied_units

    result = unoccupied_units

    return result


 Executed result: 30
[EXP] 50: [success_rate]: True, [output]: def solution():
    eggs_per_day = 252

    eggs_per_week = eggs_per_day * 7

    eggs_per_dozen = 12

    price_per_dozen = 2

    total_eggs_per_week = eggs_per_week

    total_eggs_per_week_dozen = total_eggs_per_week // eggs_per_dozen

    total_eggs_per_week_dollars = total_eggs_per_week_dozen * price_per_dozen

    result = total_eggs_per_week_dollars

    return result


 Executed result: 294
[EXP] 51: [success_rate]: False, [output]: def solution():
    # time in hours that Tom's ship travels from 1 to 4 PM

    time_forward = 3

    distance_forward = time_forward * 10  # distance travelled at 10 mph

    # time in hours it takes to travel back at 6 mph

    time_backward = distance_forward / 6

    result = time_forward + time_backward

    return result


 Executed result: 8.0
[EXP] 52: [success_rate]: True, [output]: def solution():
    weight_to_remove = 15

    comic_book_weight = 0.25

    toy_weight = 0.5

    comics_removed = 30

    weight_removed_from_comics = comics_removed * comic_book_weight

    weight_remaining = weight_to_remove - weight_removed_from_comics

    toys_to_remove = weight_remaining / toy_weight

    result = toys_to_remove

    return result


 Executed result: 15.0
[EXP] 53: [success_rate]: False, [output]: def solution():
    rate_truck_tire = 60

    rate_car_tire = 40

    truck_tires_repaired_thursday = 6

    car_tires_repaired_thursday = 4

    total_revenue_thursday = rate_truck_tire * truck_tires_repaired_thursday + rate_car_tire * car_tires_repaired_thursday

    car_tires_repaired_friday = 12

    total_revenue_friday = rate_car_tire * car_tires_repaired_friday

    higher_revenue = total_revenue_friday - total_revenue_thursday

    result = higher_revenue

    return result


 Executed result: -40
[EXP] 54: [success_rate]: True, [output]: def solution():
    kittens_adopted = 7

    patchy_kittens = kittens_adopted * 3

    trixie_kittens = 12

    total_kittens = kittens_adopted + patchy_kittens + trixie_kittens

    result = total_kittens

    return result


 Executed result: 40
[EXP] 55: [success_rate]: True, [output]: def solution():
    lollipops_initial = 30

    lollipops_eaten = 2

    lollipops_left = lollipops_initial - lollipops_eaten

    lollipops_per_bag = 2

    bags = lollipops_left // lollipops_per_bag

    result = bags

    return result


 Executed result: 14
[EXP] 56: [success_rate]: True, [output]: def solution():
    peter_money = 42

    ticket_cost = 7

    popcorn_cost = 7

    total_cost = ticket_cost + popcorn_cost

    num_times = peter_money // total_cost

    result = num_times

    return result


 Executed result: 3
[EXP] 57: [success_rate]: True, [output]: def solution():
    bridge_limit = 5000

    truck_weight = 3755

    box_weight = 15

    max_boxes = (bridge_limit - truck_weight) // box_weight

    result = max_boxes

    return result


 Executed result: 83
[EXP] 58: [success_rate]: True, [output]: def solution():
	bill = 40.00

	fee = bill * 0.25

_fee = 3.00

	tip = 4.00

	bill_with_fee = bill + fee + _fee

	bill_with_tip = bill_with_fee + tip

	result = bill_with_tip

	return result


 Executed result: 57.0
[EXP] 59: [success_rate]: True, [output]: def solution():
    clusters = 6

    cluster_fruit = 20

    individual_fruit = 67

    total_fruit = clusters * cluster_fruit + individual_fruit

    result = total_fruit

    return result


 Executed result: 187
[EXP] 60: [success_rate]: True, [output]: def solution():
    oranges_total = 25

    oranges_bad = 1

    oranges_unripe = int(oranges_total * 0.20)

    oranges_sour = 2

    oranges_good = oranges_total - oranges_bad - oranges_unripe - oranges_sour

    result = oranges_good

    return result


 Executed result: 17
[EXP] 61: [success_rate]: True, [output]: def solution():
    material_cost = 500

    jeweler_cost = 800

    total_cost = material_cost + jeweler_cost

    insurance_cost = total_cost * 0.1

    total_paid = total_cost + insurance_cost

    result = total_paid

    return result


 Executed result: 1430.0
[EXP] 62: [success_rate]: False, [output]: def solution():
    years_worked = 30

    annual_pension = 50000

    years_before_20 = 20

    value_of_pension = annual_pension * years_worked

    percentage_annual_pension = (5 / 100) * value_of_pension

    pension_after_20_years = annual_pension + percentage_annual_pension

    result = pension_after_20_years

    return result


 Executed result: 125000.0
[EXP] 63: [success_rate]: True, [output]: def solution():
    monthly_fee = 140

    half_year_fee = monthly_fee * 6

    second_half_fee = monthly_fee * 0.9 * 6

    total_fee = half_year_fee + second_half_fee

    result = total_fee

    return result


 Executed result: 1596.0
[EXP] 64: [success_rate]: False, [output]: def solution():
    miles_driven = 100

    gallons_consumed = 4

    total_gallons = 12

    gallons_left = total_gallons - gallons_consumed

    miles_per_gallon = miles_driven / gallons_consumed

    total_miles = gallons_left * miles_per_gallon

    result = total_miles

    return result


 Executed result: 200.0
[EXP] 65: [success_rate]: False, [output]: def solution():
    hours_watching_tv = 2

    hours_reading = 0.5

    hours_per_day = hours_watching_tv + hours_reading

    days_per_week = 3

    hours_per_week = hours_per_day * days_per_week

    weeks = 4

    total_hours = hours_per_week * weeks

    result = total_hours

    return result


 Executed result: 30.0
[EXP] 66: [success_rate]: True, [output]: def solution():
    schools = 4

    girls_per_school = 5

    boys_per_school = 5

    coaches_per_school = 2

    total_players = schools * (girls_per_school + boys_per_school)

    total_coaches = schools * coaches_per_school

    total_people = total_players + total_coaches

    result = total_people

    return result


 Executed result: 48
[EXP] 67: [success_rate]: True, [output]: def solution():
    diamonds = 175

    rubies = diamonds - 35

    emeralds = rubies * 2

    total_gems = diamonds + rubies + emeralds

    result = total_gems

    return result


 Executed result: 595
[EXP] 68: [success_rate]: True, [output]: def solution():
    girls = 60

    boys = girls * 2

    children = girls + boys

    students_per_teacher = 5

    teachers = children // students_per_teacher

    result = teachers

    return result


 Executed result: 36
[EXP] 69: [success_rate]: True, [output]: def solution():
    weekly_allowance = 5

    weeks = 8

    total_received = weekly_allowance * weeks

    total_money = 100

    money_initial = total_money - total_received

    result = money_initial

    return result


 Executed result: 60
[EXP] 70: [success_rate]: True, [output]: def solution():
    classes_per_day = 5

    days_in_week = 5  # weekdays

    saturday_classes = 8

    total_classes_per_week = classes_per_day * days_in_week + saturday_classes

    students_per_class = 15

    price_per_student = 15

    total_students = total_classes_per_week * students_per_class

    total_revenue = total_students * price_per_student

    result = total_revenue

    return result


 Executed result: 7425
[EXP] 71: [success_rate]: True, [output]: def solution():
    recipe1_instructions = 20

    recipe2_instructions = recipe1_instructions * 2

    total_instructions = recipe1_instructions + recipe2_instructions

    result = total_instructions

    return result


 Executed result: 60
[EXP] 72: [success_rate]: True, [output]: def solution():
    brownies = 43

    cheesecakes = 23

    brownie_cost = 3

    cheesecake_cost = 4

    total_brownie_revenue = brownies * brownie_cost

    total_cheesecake_revenue = cheesecakes * cheesecake_cost

    total_revenue = total_brownie_revenue + total_cheesecake_revenue

    result = total_revenue

    return result


 Executed result: 221
[EXP] 73: [success_rate]: True, [output]: def solution():
    phones_initial = 5

    cost_per_phone = 150

    total_cost = phones_initial * cost_per_phone

    interest_rate = 0.02

    total_interest = total_cost * interest_rate

    monthly_rate = (total_cost + total_interest) / 3

    result = monthly_rate

    return result


 Executed result: 255.0
[EXP] 74: [success_rate]: True, [output]: def solution():
    marigolds_price = 2.74

    petunias_price = 1.87

    begonias_price = 2.12

    marigolds_sold = 12

    petunias_sold = 9

    begonias_sold = 17

    marigolds_income = marigolds_sold * round(marigolds_price)

    petunias_income = petunias_sold * round(petunias_price)

    begonias_income = begonias_sold * round(begonias_price)

    total_income = marigolds_income + petunias_income + begonias_income

    result = total_income

    return result


 Executed result: 88
[EXP] 75: [success_rate]: False, [output]: def solution():
    square_footage_top = 16

    square_footage_bottom = square_footage_top

    for i in range(1, 3):

        square_footage_bottom = square_footage_bottom * 2

    average_square_footage = (square_footage_top + square_footage_bottom) / 4

    result = average_square_footage

    return result


 Executed result: 20.0
[EXP] 76: [success_rate]: True, [output]: def solution():
    cups_per_day = 1

    days_first_part = 180

    cups_per_day_after_180 = 2

    cups_per_year = 365

    cups_per_year_first_part = cups_per_day * days_first_part

    cups_per_year_after_180 = cups_per_day_after_180 * (cups_per_year - days_first_part)

    total_cups_per_year = cups_per_year_first_part + cups_per_year_after_180

    cups_per_bag = 110

    bags_per_year = total_cups_per_year / cups_per_bag

    result = bags_per_year

    return result


 Executed result: 5.0
[EXP] 77: [success_rate]: True, [output]: def solution():
    sarah_laundry = 400

    david_laundry = sarah_laundry / 4

    raymond_laundry = sarah_laundry / 2

    difference = raymond_laundry - david_laundry

    result = difference

    return result


 Executed result: 100.0
[EXP] 78: [success_rate]: False, [output]: def solution():
    package1_cost = 2.50

    package1_flowers = 3

    package2_cost = 1

    package2_flowers = 2

    better_package_cost = package1_cost

    better_package_flowers = package1_flowers

    if 18 % package2_flowers == 0:

    cost_saved = package1_cost * better_package_flowers - better_package_cost

    else:

    return cost_saved


 Executed result: 5.0
[EXP] 79: [success_rate]: True, [output]: def solution():
    groomer_cost = 100

    discount = 0.3

    discount_amount = discount * groomer_cost

    final_cost = groomer_cost - discount_amount

    result = final_cost

    return result


 Executed result: 70.0
[EXP] 80: [success_rate]: True, [output]: def solution():
    water_initial = 24

    water_given_to_girls = 2 * 1/6 * water_initial

    water_left_after_giving_to_girls = water_initial - water_given_to_girls

    water_taken_by_boy = 6

    water_left = water_left_after_giving_to_girls - water_taken_by_boy

    result = water_left

    return result


 Executed result: 10.0
[EXP] 81: [success_rate]: True, [output]: def solution():
    stickers_initial = 10

    stickers_from_store = 21

    stickers_birthday = 23

    total_stickers = stickers_initial + stickers_from_store + stickers_birthday

    stickers_given_sister = 9

    stickers_used_card = 28

    stickers_left = total_stickers - stickers_given_sister - stickers_used_card

    result = stickers_left

    return result


 Executed result: 17
[EXP] 82: [success_rate]: True, [output]: def solution():
    grace_weight = 125

    alex_weight = 4 * grace_weight - 2

    combined_weight = grace_weight + alex_weight

    result = combined_weight

    return result


 Executed result: 623
[EXP] 83: [success_rate]: True, [output]: def solution():
    rose_bushes = 3

    roses_per_bush = 25

    thorns_per_rose = 8

    total_thorns = rose_bushes * roses_per_bush * thorns_per_rose

    result = total_thorns

    return result


 Executed result: 600
[EXP] 84: [success_rate]: False, [output]: def solution():
    games_played = 22

    games_won = games_played / 2

    games_lost = games_won - 8

    result = games_won

    return result


 Executed result: 11.0
[EXP] 85: [success_rate]: True, [output]: def solution():
    age_initial = 23

    age_now = 34

    years_vacationed = age_now - age_initial

    vacations_per_year = 4

    total_vacations = years_vacationed * vacations_per_year

    total_blocks = total_vacations

    result = total_blocks

    return result


 Executed result: 44
[EXP] 86: [success_rate]: True, [output]: def solution():
    alarm_rings_first = 4

    alarm_rings_second = alarm_rings_first * 3

    alarm_rings_third = alarm_rings_second / 2

    total_alarm_rings = alarm_rings_first + alarm_rings_second + alarm_rings_third

    result = total_alarm_rings

    return result


 Executed result: 22.0
[EXP] 87: [success_rate]: False, [output]: def solution():
    initial_salary = 600

    increase_percentage = 0.10

    years_of_service = 5

    increase_multiple = (1 + increase_percentage) ** years_of_service

    salary_after_five_years = initial_salary * increase_multiple

    increase_percentage_per_year = increase_percentage / (1 + increase_percentage)

    increase_per_year = salary_after_five_years * increase_percentage_per_year

    salary_after_eight_years = salary_after_five_years + increase_per_year * 3

    result = salary_after_eight_years

    return result


 Executed result: 1229.8440000000005
[EXP] 88: [success_rate]: False, [output]: def solution():
    combined_sold = 88000

    marilyn_sold = 0.1 * combined_sold

    harald_sold = combined_sold - marilyn_sold

    result = harald_sold

    return result


 Executed result: 79200.0
[EXP] 89: [success_rate]: True, [output]: def solution():
    guests_invited = 16

    gift_bags_needed = guests_invited * 0.75

    cost_of_gift_bag = 2

    total_cost = gift_bags_needed * cost_of_gift_bag

    result = total_cost

    return result


 Executed result: 24.0
[EXP] 90: [success_rate]: True, [output]: def solution():
    adult_dinosaurs = 20

    child_dinosaurs = 5

    adult_consumption = 10

    child_consumption = adult_consumption / 2

    total_consumption = adult_dinosaurs * adult_consumption + child_dinosaurs * child_consumption

    result = total_consumption

    return result


 Executed result: 225.0
[EXP] 91: [success_rate]: True, [output]: def solution():
    cindy_pets = 4

    marcia_pets = cindy_pets + 2

    jan_pets = marcia_pets * 3

    total_pets = cindy_pets + marcia_pets + jan_pets

    result = total_pets

    return result


 Executed result: 28
[EXP] 92: [success_rate]: True, [output]: def solution():
    age_james = 10

    age_corey = age_james + 1

    age_amy = age_corey - 2

    age_jackson = age_amy - 5

    result = age_jackson

    return result


 Executed result: 4
[EXP] 93: [success_rate]: False, [output]: def solution():
    lee_time = 38

    lees_time_difference = 2

    gerald_time_baseline = lee_time - lees_time_difference

    gerald_time_improvement_percentage = 10

    gerald_time_improvement = (gerald_time_baseline * gerald_time_improvement_percentage) / 100

    gerald_time_improved = gerald_time_baseline - gerald_time_improvement

    result = gerald_time_improved

    return result


 Executed result: 32.4
[EXP] 94: [success_rate]: True, [output]: def solution():
    dogs = 60

    cats = dogs * 2

    pets = dogs + cats

    rabbits = pets - 12

    total_pets = dogs + cats + rabbits

    result = total_pets

    return result


 Executed result: 348
[EXP] 95: [success_rate]: True, [output]: def solution():
    total_students = 200

    boys_in_class = total_students * 2 / 5

    total_girls = total_students - boys_in_class

    girls_in_scout = total_girls * 2 / 3

    girls_not_in_scout = total_girls - girls_in_scout

    result = girls_not_in_scout

    return result


 Executed result: 40.0
[EXP] 96: [success_rate]: True, [output]: def solution():
    harry_hours_slept = 9

    james_hours_slept = 2/3 * harry_hours_slept

    difference = harry_hours_slept - james_hours_slept

    result = difference

    return result


 Executed result: 3.0
[EXP] 97: [success_rate]: True, [output]: def solution():
    can_size = 16

    volume_loss = 0.5

    total_volume = 32

    total_cans = total_volume / (can_size * (1 - volume_loss))

    tomatoes_per_can = 3

    total_tomatoes = total_cans * tomatoes_per_can

    result = total_tomatoes

    return result


 Executed result: 12.0
[EXP] 98: [success_rate]: False, [output]: def solution():
    cars_initial = 30

    cars_exit = 5

    cars_driven_first_15_minutes = cars_initial - cars_exit

    cars_driven_rest_15_minutes = 20

    total_cars_driven = cars_driven_first_15_minutes + cars_driven_rest_15_minutes

    cars_driven_first_15_minutes = total_cars_driven - cars_driven_rest_15_minutes

    result = cars_driven_first_15_minutes

    return result


 Executed result: 25
[EXP] 99: [success_rate]: False, [output]: def solution():
    plants_received = 18

    plants_initial = 2

    num_ledges = 40

    plants_given = plants_initial * num_ledges

    plants_total = plants_received + plants_given

    plants_left = plants_total - plants_given

    result = plants_left

    return result


 Executed result: 18
