[EXP] 0: [success_rate]: True, [answer]: 2, [output]: import numpy as np

import matplotlib.pyplot as plt

def solution():

    x = np.linspace(-10, 10, 400)

    y = 2 / (x**2 + x - 6)

    plt.plot(x, y)

    plt.grid(True)

    plt.axhline(0, color='black')

    plt.axvline(0, color='black')

    plt.axvline(-2, color='red', linestyle='--')

    plt.axvline(3, color='red', linestyle='--')

    plt.show()

    result = 2

    return result


 Executed result: 2
[EXP] 1: [success_rate]: True, [answer]: 10, [output]: def solution():

    difference = 1.2 * 30 - 1.3 * 20

    result = "{:.2f}".format(difference)

    return result


 Executed result: 10.00
[EXP] 2: [success_rate]: False, [answer]: \frac{9}{7}, [output]: def solution():

    import sympy as sp

    x = sp.symbols('x')

    equation = sp.Eq(sp.ceiling(x) + x, 23/7)

    solution = sp.solve(equation, x)

    result = str(solution[0])

    return result


 Executed result: Error: return error, fail to execute
[EXP] 3: [success_rate]: True, [answer]: i, [output]: import cmath

import math

def solution():

    result = cmath.exp(cmath.pi * complex(0, 1) * 5j) + complex(0, 1)**(-25) + cmath.exp(cmath.pi * complex(0, 1) * 15j)

    result = "{:.3f}".format(result.real) + " + " + "{:.3f}".format(result.imag) + "i"

    return result


 Executed result: 0.000 + -1.000i
[EXP] 4: [success_rate]: False, [answer]: 4, [output]: def solution():

    x = 3

    result = x

    return result


 Executed result: 3
[EXP] 5: [success_rate]: True, [answer]: 402, [output]: def solution():

    a = 6

    d = 4

    n = 100

    last_term = a + (n - 1) * d

    result = last_term

    return result


 Executed result: 402
[EXP] 6: [success_rate]: False, [answer]: [-2,7], [output]: import numpy as np

from sympy import symbols, solve

x = symbols('x')

expr = x**2 - 5*x - 4 - 10

result = solve(expr, solve-for='x')

if result > 0:

    result = '{} \\leq x \\leq {}'.format(result[0], result[1])

else:

    result = '{}'.format(result)

return result


 Executed result: Error: return error, fail to execute
[EXP] 7: [success_rate]: False, [answer]: 7, [output]: import math

import numpy as np

from scipy.optimize import fsolve

def solution():

    # Define the function to be solved

    def func(r):

        return 1000*(1+r)**3 - 1225


 Executed result: None
[EXP] 8: [success_rate]: False, [answer]: 4,6,14,15, [output]: from itertools import permutations

def solution():

    for a, b, c, d in permutations(range(1, 11)):

        if a + b == 10 and a + c == 18 and a + d == 19 and b + c == 20 and b + d == 21 and c + d == 29:

            return "{}, {}, {}, {}".format(a, b, c, d)


 Executed result: Error: return error, fail to execute
[EXP] 9: [success_rate]: False, [answer]: -\frac{1}{8}, [output]: import numpy as np

from sympy import solve

from sympy import symbols

from sympy import simplify

from sympy.parsing.sympy_parser import parse_expr

def solution():

    x = symbols('x')

    expr = abs(5*x - 1) - abs(3*x + 2)

    result = solve(simplify(expr), x)[0]

    return result


 Executed result: Error: return error, fail to execute
[EXP] 10: [success_rate]: False, [answer]: \frac{x+2}{7}, [output]: from sympy import symbols, sympify

def solution():

    x = symbols('x')

    f = sympify('7*x + 5')

    g = sympify('x - 1')

    h = f(g)

    h_inverse = h.solve_for_func('x')

    result = str(h_inverse)

    return result


 Executed result: Error: return error, fail to execute
[EXP] 11: [success_rate]: False, [answer]: -15, [output]: import numpy as np

import sympy as sp

from sympy import symbols

def solution():

    x = symbols('x')

    expr1 = abs(x) + 1 > 7

    expr2 = abs(x+1) <= 7

    total = 0

    for i in range(-7, 8):

        if eval(str(expr1.subs(x, i))) and eval(str(expr2.subs(x, i))):

            total += i

    result = total

    return result


 Executed result: -7
[EXP] 12: [success_rate]: True, [answer]: 10, [output]: import math

def solution():

    x = -8

    y = 6

    distance = math.sqrt(x**2 + y**2)

    result = distance

    return result


 Executed result: 10.0
[EXP] 13: [success_rate]: True, [answer]: 8, [output]: import numpy as np

import math

def solution():

    x1, y1 = 1, 4

    x2, y2 = 1, 10

    # Midpoint

    x = (x1 + x2) / 2

    y = (y1 + y2) / 2

    # Sum of the coordinates

    result = x + y

    return result


 Executed result: 8.0
[EXP] 14: [success_rate]: False, [answer]: 75, [output]: import numpy as np

import math

def solution():

    A = np.array([0, 7])

    B = np.array([1, 0])

    C = np.array([12, -2])

    D = np.array([7, 8])

    # Diagonal 1

    diagonal1 = A - B

    # Diagonal 2

    diagonal2 = C - D

    # Calculate the area

    area = 0.5 * np.linalg.norm(diagonal1) * np.linalg.norm(diagonal2)

    result = float(area)

    return result


 Executed result: 39.528470752104745
[EXP] 15: [success_rate]: False, [answer]: \frac{11}{2}, [output]: import math

def solution():

    result = 8

    return result


 Executed result: 8
[EXP] 16: [success_rate]: True, [answer]: -25, [output]: def solution():

    x = -10

    if x < -3:

        result = 3*x + 5

    else:

        result = 7 - 4*x

    return result


 Executed result: -25
[EXP] 17: [success_rate]: False, [answer]: 8, [output]: import math

import sympy as sp

def solution():

    A = 9 * 2

    B = 3 * 3

    C = 2 * 2

    result = A + B + C

    return result


 Executed result: 31
[EXP] 18: [success_rate]: False, [answer]: 3, [output]: import sympy as sp

from sympy import symbols, Eq

from sympy.solvers import solve

from sympy import Fraction

from sympy import Integer

import re

def solution():

    treeks, squigs, goolee = symbols('treeks squigs goolee', integer=True)

    equation1 = Eq(treeks * 10, squigs * 3 + goolee)

    equation2 = Eq(treeks * 2 + goolee, squigs)

    solution = solve((equation1, equation2), (squigs, goolee), complex=False)

    solution = int(solution[0][1] / solution[0][0])

    return str(solution)


 Executed result: Error: return error, fail to execute
[EXP] 19: [success_rate]: True, [answer]: 187.5, [output]: def solution():

    calories_per_fluid_ounce = 125 / 8

    calories_in_12_fluid_ounces = calories_per_fluid_ounce * 12

    result = calories_in_12_fluid_ounces

    return result


 Executed result: 187.5
