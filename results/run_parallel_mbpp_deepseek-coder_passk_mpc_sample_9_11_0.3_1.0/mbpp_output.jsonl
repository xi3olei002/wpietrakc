{"prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "test": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ", "task_id": 11, "generation": "def remove_Occ(s,ch):\n       return s[:s.find(ch)] + s[s.rfind(ch) + 1:]\n\n#Finish\n\n"}
{"prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "test": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result", "task_id": 12, "generation": "def sort_matrix(M):\n    # Calculate the sum of each row\n\n    row_sums = [sum(row) for row in M]\n\n    # Combine the row sums with the matrix rows\n\n    M = [(row_sums[i], M[i]) for i in range(len(M))]\n\n    M.sort()\n\n    sorted_M = [row[1] for row in M]\n\n    return sorted_M\n\n# finish\n\n"}
{"prompt": "Write a function to count the most common words in a dictionary.", "test": ["assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]", "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]", "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"], "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n", "task_id": 13, "generation": "from collections import Counter\ndef count_common(words):\n  # Your code goes here\n\n  lines = text.split(\", \")\n\n  split_text = text.split(\" \")\n\n  c = Counter(split_text)\n\n  common_words = c.most_common(10)\n\n  return common_words\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to find the volume of a triangular prism.", "test": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ", "task_id": 14, "generation": "def find_Volume(l,b,h) :\n    #Calculating the Volume \n\n    Volume = (l*b*h)/2\n\n    return Volume\n\n#End\n\nfinish\n\n"}
{"prompt": "Write a function to split a string at lowercase letters.", "test": ["assert split_lowerstring(\"AbCd\")==['bC','d']", "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']", "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"], "code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))", "task_id": 15, "generation": "import re\ndef split_lowerstring(text):\n    return re.findall('[A-Z]*[a-z]*', text)\n\n# finish\n\n"}
{"prompt": "Write a function to find sequences of lowercase letters joined with an underscore.", "test": ["assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')", "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')", "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"], "code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "task_id": 16, "generation": "import re\ndef text_lowercase_underscore(text):\n    pattern = '[a-z]+_[a-z]+'\n\n    result = re.findall(pattern, text)\n\n    return result\n\n#finish\n\n"}
{"prompt": "Write a function to find the perimeter of a square.", "test": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "task_id": 17, "generation": "def square_perimeter(a):\n    perimeter = 4 * a\n\n    return perimeter\n\n# finish\n\n"}
{"prompt": "Write a function to remove characters from the first string which are present in the second string.", "test": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'", "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "], "code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ", "task_id": 18, "generation": "NO_OF_CHARS = 256\ndef str_to_list(string):\n    string = string.replace(' ', '') # Removing spaces\n\n    string_list = list(string)\n\n    return string_list\n\ndef count_chars(string_list):\n\n    count = [0]*NO_OF_CHARS\n\n    for i in string_list:\n\n        count[ord(i)]+=1\n\n    return count\n\ndef remove_chars(string1, string2):\n\n    string1_list = str_to_list(string1)\n\n    string2_list = str_to_list(string2)\n\n    count1 = count_chars(string1_list)\n\n    count2 = count_chars(string2_list)\n\n    result = []\n\n    for i in range(len(string1_list)):\n\n        if count1[ord(string1_list[i])] != 0 and count2[ord(string1_list[i])] == 0:\n\n            result.append(string1_list[i])\n\n            count1[ord(string1_list[i])]-=1\n\n    return ''.join(result)\n\nprint('Solved' if remove_chars('helloo worldl !!', 'helowrd') == 'oo !! ' else 'Failed')\n\n            result.append(string1_list[i])\n\nwith open('file.txt', 'r') as file:\n\n<jupyter_output>\n\nSolved\n\n<empty_output>\n\n<jupyter_text>\n\nImport Data\n\nAssess Data\n\n<jupyter_code>\n\n# Summary statistics\n\n"}
{"prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "test": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ", "task_id": 19, "generation": "def test_duplicate(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n\n        return False\n\n    else:\n\n        return True\n\n# finish\n\n"}
{"prompt": "Write a function to check if the given number is woodball or not.", "test": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False", "task_id": 20, "generation": "def is_woodall(x):\n    previous_numbers = [0, 1]\n\n    while True:\n\n        next_number = 6 * previous_numbers[-1] + 8 * previous_numbers[-2]\n\n        if next_number > x:\n\n            return False\n\n        elif next_number == x:\n\n            return True\n\n        previous_numbers.append(next_number)\n\n        if num < 0 or num % 1 > 0:\n\n# finish\n\n"}
{"prompt": "Write a function to find m number of multiples of n.", "test": ["assert multiples_of_num(4,3)== [3,6,9,12]", "assert multiples_of_num(2,5)== [5,10]", "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"], "code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)", "task_id": 21, "generation": "def multiples_of_num(m,n):\n    return [n*i for i in range(1, m+1)] # finish\n\n"}
{"prompt": "Write a function to find the first duplicate element in a given array of integers.", "test": ["assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4", "assert find_first_duplicate([1, 2, 3, 4])==-1", "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"], "code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate", "task_id": 22, "generation": "def find_first_duplicate(nums):\n    nums_set = set()\n\n    for num in nums:\n\n        if num in nums_set: # If the number has been encountered before, it's a duplicate\n\n            return num\n\n        nums_set.add(num)\n\n    return -1 # No duplicates found\n\n# finish\n\n"}
{"prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.", "test": ["assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33", "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6", "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"], "code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ", "task_id": 23, "generation": "def maximum_Sum(list1):\n    max_sum = 0\n\n    for i in list1:\n\n        sum = 0\n\n        for j in i:\n\n            sum += j\n\n        if max_sum < sum:\n\n            max_sum = sum\n\n    return (max_sum) \n\n            sum +=j\n\n    if max_sum<sum:\n\n        max_sum=sum\n\n    return(max_sum)\n\n# finish\n\n"}
{"prompt": "Write a function to convert the given binary number to its decimal equivalent.", "test": ["assert binary_to_decimal(100) == 4", "assert binary_to_decimal(1011) == 11", "assert binary_to_decimal(1101101) == 109"], "code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)", "task_id": 24, "generation": "def binary_to_decimal(binary):\n    binary = str(binary)\n\n    decimal = 0\n\n    for digit in binary:\n\n        decimal = decimal*2 + int(digit)\n\n    return decimal \n\n# finish\n\n"}
{"prompt": "Write a python function to find the product of non-repeated elements in a given array.", "test": ["assert find_Product([1,1,2,3],4) == 6", "assert find_Product([1,2,3,1,1],5) == 6", "assert find_Product([1,1,4,5,6],5) == 120"], "code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ", "task_id": 25, "generation": "def find_Product(arr,n):\n    hashset = set()\n\n    product = 1\n\n    for i in range(n):\n\n        if arr[i] not in hashset:\n\n            hashset.add(arr[i])\n\n            product *= arr[i]\n\n    return product\n\n# finish\n\n"}
{"prompt": "Write a function to check if the given tuple list has all k elements.", "test": ["assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True", "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True", "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"], "code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ", "task_id": 26, "generation": "def check_k_elements(test_list, K):\n    \"\"\" Returns True if the tuple list has all k distinct elements, otherwise False \"\"\"\n\n    return len(set(test_list)) == K\n\nprint(check_k_elements([(1,2,3), (1,2,4), (1,2,5), (1,2,6), (1,2,7), (1,3,4), (1,3,5), (1,3,6), (1,3,7), (1,4,5), (1,4,6), (1,4,7), (1,5,6), (1,5,7), (1,6,7), (2,3,4), (2,3,5), (2,3,6), (2,3,7), (2,4,5), (2,4,6), (2,4,7), (2,5,6), (2,5,7), (2,6,7), (3,4,5), (3,4,6), (3,4,7), (3,5,6), (3,5,7), (3,6,7), (4,5,6), (4,5,7), (4,6,7), (5,6,7)], 21))\n\nfinish\n\n"}
{"prompt": "Write a python function to remove all digits from a list of strings.", "test": ["assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']", "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']", "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"], "code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list", "task_id": 27, "generation": "import re\ndef remove(list):\n    result = []\n\n    for s in list:\n\n        result.append(re.sub('\\d', '', s))\n\n        unique_chars = len(set(s))\n\n    return result\n\ndef remove_3_unique(list_string):\n\n# Test the function with some strings\n\nstrings = ['abc123', 'de456f78i910', 'gh11jk12l']\n\nprint(remove(strings))\n\n# ['abc', 'de', 'ghjk']\n\nprint(remove([\"no_numbers_in_here\"]))\n\n    for s in\n\n    for s in list_string:\n\nreturn result\n\nprint(remove_3_unique([\"no_numbers_in_here\", \"but123this one45should99\n\nprint(remove([\"no_numbers_in_here\"])) # ['no_numbers_in_here']\n\nprint(remove([\"no_numbers_in_here\"])) \n\n# ['no_numbers_in_here']\n\nEnd of program.\n\n###\n\n    print(remove_digits(strings))  # Output should be ['abc', 'de', 'ghjk']\n\nprint(remove_digits(\n\nEnd of program. \n\n    for\n\nprint(remove_digits(strings))  # Output should be ['abc', 'de', 'ghjk']\n\nprint(remove_digits([\"no_numbers_in_here\"]))  # Output should be ['no_numbers_in_here']\n\n\t  import re\n\nprint(remove_digits(['abc123', 'de456f78i910', 'gh11jk12l']))\n\nprint(remove_digits([\"but_this_one_should_work_123\"]))\n\nprint(remove_digits([\"but_this_one_should_wor_123\"])) \n\n"}
{"prompt": "Write a python function to find binomial co-efficient.", "test": ["assert binomial_Coeff(5,2) == 10", "assert binomial_Coeff(4,3) == 4", "assert binomial_Coeff(3,2) == 3"], "code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ", "task_id": 28, "generation": "def binomial_Coeff(n,k):\n    res = 1\n\n    if(k>n-k): \n\n         k = n-k\n\n    for i in range(0 , k):\n\n        res = res * (n - i)\n\n        res = res // (i + 1)\n\n    return res\n\n# finish\n\n"}
{"prompt": "Write a python function to find the element occurring odd number of times.", "test": ["assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1", "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3", "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"], "code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1", "task_id": 29, "generation": "def get_Odd_Occurrence(arr,arr_size):\n    '''Function to get the element occurring odd number of times'''\n\n    i = 0\n\n    for i in range(0,arr_size):\n\n        count = 0\n\n        for j in range(0,arr_size):\n\n            if arr[i] == arr[j]:\n\n                count += 1\n\n        if count % 2 == 1:\n\n            return arr[i]\n\n    hash_map = {}\n\n    for num in arr:\n\n        try: \n\n            hash_map[num] += 1\n\n        except KeyError: \n\n            hash_map[num] = 1\n\n    for key, value in hash_map.items():\n\n        if value % 2 == 1:\n\n            return key\n\n# finish\n\n"}
{"prompt": "Write a python function to count all the substrings starting and ending with same characters.", "test": ["assert count_Substring_With_Equal_Ends(\"abc\") == 3", "assert count_Substring_With_Equal_Ends(\"abcda\") == 6", "assert count_Substring_With_Equal_Ends(\"ab\") == 2"], "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ", "task_id": 30, "generation": "def check_Equality(s):\n    count = 0\n\n    for i in range(len(s)):\n\n        for j in range(i+1, len(s)+1):\n\n            if s[i] == s[j-1]:\n\n        for j in range(i+2, len(s)+1):\n\n            if s[i:i+1] == s[j-1:j]:\n\n                count += 1\n\n    return count\n\n# Test the function\n\nprint(check_Equality('abrakadabra'))\n\n<jupyter_output>\n\n9\n\nSum of numbers in list is: 45\n\nThe sum of the squares of the numbers in the list is: 235\n\nNumbers which are more than 5: [8, 9, 10]\n\nImage successfully downloaded\n\n<jupyter_text>\n\nWrite a python code to calculate the area and perimeter of a circle using math module. ### Response: import math\n\nWrite a Python Program to count the number\n\nprint(count_numbers_in_list([1, 2, 3, 4, '5', 6.0, 'abc']))\n\nWrite a Python program that converts temperature from Celsius to Fahrenheit. ### Response: def celsius_to_fahrenheit(celsius):    return (celsius * 9/5) + 32\n\nWrite a Python program to print all even numbers within a given range. ### Response:\n\nWrite a Python program to find the factorial of a number.\n\n<jupyter_code>\n\n# load a model from a branch\n\ndef parse_string_to_list(string):\n\nclass Employee:\n\nprint(count_vowels(['a', 'e', 'i', 'o', 'u', 'a', 'a', 'e', 'u', 'i', 'o']))\n\nAn integer value in C programming is typically represented by the `int` data type. The `int` data type is used to store whole numbers, both positive and negative. Here is an example of using `int` variables:```int positive_number = 10;int negative_number = -5;```In the example above, `positive_number` is assigned the value `10` and `negative_number` is assigned the value `-5`.In Python, `int` data type is used in a similar way. Here is an example:```positive_number = 10negative_number = -5```In Python, an `int` is created by assigning it an value. An integer in Python can be from anywhere between `-2147483648` to `2147483647`. Changing this range of numbers in Python might be slower than specific ranges, so be careful when setting an integer's value.Arithmetic operations like addition (+), subtraction (-), multiplication (*), division (/) and modulo (%) work just like in C programming. There are also bitwise operations, which can be useful in some cases. Let's look at examples of different types of operations:``` Addition: positive_number + 3 Outputs: 13 Subtraction: negative_number - 2 Outputs: -7 Multiplication: positive_number * 4 Outputs: 40 Division: positive_number / \n\nWrite a Python function to find whether the given number is perfect square or not.The perfect square is the product of an integer with itself, e.g., 1, 4, 9, 16, 25, 36 etc.\n\n"}
{"prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "test": ["assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]", "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]", "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"], "code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result", "task_id": 31, "generation": "def func(nums, k):\n    from collections import Counter\n\n    import heapq\n\n    count = Counter(nums)\n\n    return heapq.nlargest(k, count.keys(), key=count.get) # finish\n\n"}
{"prompt": "Write a python function to find the largest prime factor of a given number.", "test": ["assert max_Prime_Factors(15) == 5", "assert max_Prime_Factors(6) == 3", "assert max_Prime_Factors(2) == 2"], "code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)", "task_id": 32, "generation": "import math\ndef max_Prime_Factors (n):\n   while n % 2 == 0:\n\n      max_Prime = 2\n\n      n = n / 2\n\n   for i in range(3,int(math.sqrt(n))+1,2):\n\n      while n % i== 0:\n\n         max_Prime = i\n\n         n = n / i\n\n   if n > 2:\n\n      max_Prime = n\n\n   return max_Prime\n\n# finish\n\n"}
{"prompt": "Write a python function to convert a decimal number to binary number.", "test": ["assert decimal_To_Binary(10) == 1010", "assert decimal_To_Binary(1) == 1", "assert decimal_To_Binary(20) == 10100"], "code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ", "task_id": 33, "generation": "def decimal_To_Binary(N):\n    return bin(N)[2:]\n\n# finish\n\n"}
{"prompt": "Write a python function to find the missing number in a sorted array.", "test": ["assert find_missing([1,2,3,5],4) == 4", "assert find_missing([1,3,4,5],4) == 2", "assert find_missing([1,2,3,5,6,7],5) == 4"], "code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ", "task_id": 34, "generation": "def find_missing(ar,N):\n    for i in range(N):\n\n        if ar[i] != i+1:\n\n            return i+1\n\n    return N+1\n\n<jupyter_output>\n\n4\n\n<empty_output>\n\nprint(find_missing([1, 2, 3, 4, 6, 7, 8], 7))# Expected Output: 5\n\n<jupyter_text>\n\nWrite a Python function to find the first non-repeated character in a string.\n\nWrite a python function to check if a number is prime or not.\n\nWrite a python function to reverse a string without using any built-in reverse functions.\n\nTrue\n\nWrite a Python function to find the longest common prefix from a list of strings.\n\nWrite a python function to find the second largest number in a list.\n\nVacationPy---- Note* Keep an eye on your API usage. Use https://developers.google.com/maps/reporting/gmp-reporting as reference for how to monitor your usage and billing.* Instructions have been included for each segment. You do not have to follow them exactly, but they are included to help you think through the steps.\n\npart1.geojson\n\n\ub370\uc774\ud130 \uc804\ucc98\ub9ac (Preprocessing)\n\n<jupyter_code>\n\nimport re\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nn_clusters = 3\n\nkmeans = KMeans(n_clusters=n_clusters, random_state=42)\n\nvectorizer = TfidfVectorizer(max_df=0.5, min_df=2, stop_words='english')\n\n# \uac01 \uad6d\uac00\uc640\uc758 \uad00\uad11\uc9c0 \uc124\uba85\uc744 \uc800\uc7a5\ud558\ub294 \ubc30\uc5f4\n\nX = vectorizer.\n\n# \ub370\uc774\ud130 \ud504\ub808\uc784 \uc900\ube44 \ubc0f \ud3ec\ud568\ub41c \uc704\ub3c4 \ubc0f \uacbd\ub3c4 \uac12 \ud655\uc778\n\n# Load the dataset into a pandas DataFrame\n\nclusters = KMeans(n_clusters=3, random_state=42).fit(museums[['longitude','latitude']])museums['\ubb18\uc9c0\n\nvenues = getNearbyVenues(names=museums['museum'],\n\n"}
{"prompt": "Write a function to find the n-th rectangular number.", "test": ["assert find_rect_num(4) == 20", "assert find_rect_num(5) == 30", "assert find_rect_num(6) == 42"], "code": "def find_rect_num(n):\r\n  return n*(n + 1) ", "task_id": 35, "generation": "def find_rect_num(n):\n    return n * (n + 1)//2\n\n# finish\n\n"}
{"prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.", "test": ["assert find_Nth_Digit(1,2,1) == 5", "assert find_Nth_Digit(3,5,1) == 6", "assert find_Nth_Digit(5,6,5) == 3"], "code": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ", "task_id": 36, "generation": "def find_Nth_Digit(p,q,N) :\n    n = p/q\n\n    s = str(n)[2:]\n\n    if N>=len(s):\n\n        return -1\n\n    else:\n\n        return int(s[N])\n\np = 1\n\nq = 2\n\nN = 1\n\nprint(find_Nth_Digit(p,q,N))\n\n###\n\n        return c\n\nprint(find_Nth_Digit(p, q, N)) # returns 5\n\n    return int(fraction_str[N])\n\nprint(find_Nth_Digit(1,2,1)) # returns 5\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to sort a given mixed list of integers and strings.", "test": ["assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"], "code": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part", "task_id": 37, "generation": "def sort_mixed_list(mixed_list):\n   num_list = [i for i in mixed_list if isinstance(i, int)]\n\n   str_list = [i for i in mixed_list if isinstance(i, str)]\n\n   num_list.sort()\n\n   str_list.sort()\n\n   return str_list + num_list\n\n    mixed_list.sort(key=lambda var: (isinstance(var,str), var)) # returning a tuple where first element is True for strings and False for integers,\n\n    # and second element is the value itself which makes sorting first based on strings and then integers\n\n    #finish\n\n"}
{"prompt": "Write a function to find the division of first even and odd number of a given list.", "test": ["assert div_even_odd([1,3,5,7,4,1,6,8])==4", "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2", "assert div_even_odd([1,5,7,9,10])==10"], "code": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)", "task_id": 38, "generation": "def div_even_odd(list1):\n    even_sum = 0\n\n    odd_sum = 0\n\n    # Adding all even numbers\n\n    for i in list1:\n\n        if i % 2 != 0:\n\n            odd_sum += i\n\n    # Division of even sum by odd sum\n\n    try:\n\n        return odd_sum / even_sum\n\n    except ZeroDivisionError:\n\n        return \"Error: Tried to divide by zero\"\n\n# finish\n\n"}
{"prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "test": ["assert rearange_string(\"aab\")==('aba')", "assert rearange_string(\"aabb\")==('abab')", "assert rearange_string(\"abccdd\")==('cdabcd')"], "code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")", "task_id": 39, "generation": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n    char_freq = Counter(S)\n\n    max_heap = []\n\n    for char, freq in char_freq.items():\n\n        max_heap.append((-freq, char))\n\n    heapq.heapify(max_heap)\n\n    prev_freq, prev_char = 0, ''\n\n    result = ''\n\n    while max_heap:\n\n        freq, char = heapq.heappop(max_heap)\n\n        result += char\n\n        if prev_freq < 0:\n\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n\n        freq += 1\n\n        prev_freq, prev_char = freq, char\n\n    if len(result) == len(S):\n\n        return result\n\n    else:\n\n        return \"\"\n\nfinish\n\n"}
{"prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.", "test": ["assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})", "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})", "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"], "code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result", "task_id": 40, "generation": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n    return dict(Counter(chain.from_iterable(nums)))\n\n# %%\n\ndef test_freq_element():\n\n    assert freq_element([[1,2,3],[2,3,4],[1,2,3]]) == {1: 3, 2: 4, 3: 4, 4: 2}\n\ndef test_count_words():\n\n    assert freq_element(['a','b','b','c','c','c','d']) == {'a':1,'b':2,'c':3,'d':1}\n\n    %%\n\n        finish\n\n"}
{"prompt": "Write a function to filter even numbers using lambda function.", "test": ["assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]", "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]", "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"], "code": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums", "task_id": 41, "generation": "def filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\neven_nums = filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nprint(even_nums) # finish\n\n"}
{"prompt": "Write a python function to find the sum of repeated elements in a given array.", "test": ["assert find_Sum([1,2,3,1,1,4,5,6],8) == 3", "assert find_Sum([1,2,3,1,1],5) == 3", "assert find_Sum([1,1,2],3) == 2"], "code": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])", "task_id": 42, "generation": "def find_Sum(arr,n):\n    s=0\n\n    for i in range(0, n):\n\n        for j in range(i+1, n):\n\n            if (arr[i] == arr[j]):\n\n                s += arr[i]\n\n    return s\n\n# finish\n\n"}
{"prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "test": ["assert text_match(\"aab_cbbbc\") == 'Found a match!'", "assert text_match(\"aab_Abbbc\") == 'Not matched!'", "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"], "code": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "task_id": 43, "generation": "import re\ndef text_match(text):\n    patterns = \"[a-z]+_[a-z]+\"\n\n    if re.fullmatch(patterns, text): return True\n\n    else: return False\n\ntext = 'abc_def'\n\nprint(text_match(text)) # should return True('abc' joined with 'def' after underscore ) \n\nprint(text_match(text)) # should return True, both 'abc' and 'def' are in lowercase and joined by underscore\n\nprint(text_match(text)) # should return False, the text does not contain underscore to join two words.\n\n Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function that matches a word at the beginning of a string.", "test": ["assert text_match_string(\" python\")==('Not matched!')", "assert text_match_string(\"python\")==('Found a match!')", "assert text_match_string(\"  lang\")==('Not matched!')"], "code": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'", "task_id": 44, "generation": "import re\ndef text_match_string(text):\n  patterns = ['^Hello']\n\n  patterns = ['World$']\n\n  if re.search(patterns,  text):\n\n    return 'Found a match!'\n\n    return 'Found a digit at the start of string!!'\n\n    return 'Found a match with pattern \"{}\"' .format('^Hello')\n\n    return 'Found a digit at the end of string'\n\n  return('Not matched!!')\n\nprint(text_match_string('Hello Sheldon'))\n\nprint(text_match_string('World isnice'))\n\nprint(text_match_string('Hello world isnice'))\n\nprint('Number of 202 in the string')\n\n<jupyter_output>\n\nFound a match at the start of string\n\n    return 'Found a match\n\nNot matched!!\n\n<empty_output>\n\n['This', 'is', 'a', 'first-second-third', 'and', 'this', 'one', 'is', 'fourth--fifth', 'six', 'seven']\n\nFound a match for \"Hello\" at the start of string\n\n<jupyter_text>\n\nIf you are looking for two different patterns, one that matches 'Hello' at the start and one that matches 'World' at the end, it will only return the first match. You could modify the function as follows:\n\nFound a match for \"World\" at the end of string\n\nComplete and correct python code for given tasks are:```pythonimport redef text_match_string(text):    patterns1 = ['^Hello']    patterns2 = ['World$']    if re.search(patterns1,  text):        return 'Found a match for \"Hello\" at the start of string'    elif re.search(patterns2, text):        return 'Found a match for \"World\" at the end of string'    return('Not matched')print(text_match_string('Hello Sheldon'))print(text_match_string('World isnice'))print(text_match_string('Hello world isnice'))```  We're adding new line before every return in this Python code. It fixes the Python syntax error in the program and corrects the start and end point of matching operation.  Let's say we have another list of strings ['This is a first-second-third', 'and this one is fourth--fifth', 'six', 'seven'] and we want to match a string that is one of the entries in the list, and we only want case-insensitive matching, how would we do that? We can use the '|'.join(list) function to join all entries in the list using '|', make it into a whole string that represents a whole sentence. Then we can use a regular expression to match this whole sentence. Here is the corrected python code:```pythonimport redef search_in_list(lst, text):    pattern = '|'.join(lst)    pattern = '('+pattern+')'    if re.search(pattern, text, re.IGNORECASE):        return 'Found a match!'    return 'No match found'print(search_in_list(['This', 'is', 'a', 'first-second-third', 'and', 'this', 'one', 'is', 'fourth--fifth', 'six', 'seven'], 'This is a first-second-third'))print(search_in_list(['This', 'is', 'a', 'first-\n\nYou forgot to add some content in the last part of the code. I'll complete this for you:```python        return 'No match found'print(search_in_list(['This', 'is', 'a', 'first-second-third', 'and', 'this', 'one', 'is', 'fourth--fifth', 'six', 'seven'], 'This is a first-second-third'))print(search_in_list(['This', 'is', 'a', 'first-second-third', 'and', 'this', 'one', 'is', 'fourth--fifth', 'six', 'seven'], 'World isnice'))```\n\nMake a function named rearrange that takes a list of integers named lst as an argument. The function should return a list of elements that are non-negative. The relative order should be the same as it was in lst, but without the non-negative numbers.For example:rearrange([-1, 1, 2, -3, -2, 4])would return [1, 2, 4]If no such elements exists, return an empty list.Example: rearrange([-100, -200, -300]) would return []  Hint: Use list comprehension to filter out only the non-negative elements of the original list.Start writing your code here  Write your code hereimport rearrange([1, -1, 2, -3, -2, 4]): print(rearrange)) Test Cases assertionErr=[] for t in tests:       try:        actualOutput = rearrange (t[0])       expectedOutput = t[1]       assert actualOutput == expectedOutput, \"Failed test: \\n Input:{}\\n Expected:{}\\n But got:{}\".format(t[0],t[1],actualOutput)     except Exception  as e:       err.append({\"test\":t,\"error\":e}) if len(err)==0:     print(\"passed all test cases \")  else:     print(\"Failed {} test cases.\".format(len(err)) ) for e in err:       print(e)\n\nTuples examle in python Example of a tuple containing three elements1. First element is an integer.2. Second element is a float.3. Third element is a string.\n\nTuple unpacking\n\nFinally, submit your code to complete the `rearrange()` function if you wish.\n\nNow, we can use this `rearrange()` function in the following way:\n\n<jupyter_code>\n\n"}
{"prompt": "Write a function to find the gcd of the given array elements.", "test": ["assert get_gcd([2, 4, 6, 8, 16]) == 2", "assert get_gcd([1, 2, 3]) == 1", "assert get_gcd([2, 4, 6, 8]) == 2 "], "code": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd", "task_id": 45, "generation": "def find_gcd(x, y):\n    while(y):\n\n        x, y = y, x % y\n\n    return x\n\ndef gcd_array(lst):\n\n    num1 = lst[0]\n\n    num2 = lst[1]\n\n    result = find_gcd(num1, num2)\n\n    for i in range(2, len(lst)):\n\n        result = find_gcd(result, lst[i])\n\n    return result\n\ntest = [2, 4, 6, 8] \n\ntest = [2, 4, 6, 8]  # input array\n\nprint(gcd_array(test))  # output the gcd of the array elements\n\nFinish writing the python function. # Finish\n\n"}
{"prompt": "Write a python function to determine whether all the numbers are different from each other are not.", "test": ["assert test_distinct([1,5,7,9]) == True", "assert test_distinct([2,4,5,5,7,9]) == False", "assert test_distinct([1,2,3]) == True"], "code": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;", "task_id": 46, "generation": "def test_distinct(data):\n    if len(data) == len(set(data)):\n\n        return True\n\n    else:\n\n        return data[length//2]\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.", "test": ["assert compute_Last_Digit(2,4) == 2", "assert compute_Last_Digit(6,8) == 6", "assert compute_Last_Digit(1,2) == 2"], "code": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10", "task_id": 47, "generation": "def compute_Last_Digit(A,B):\n    import math\n\n    A = A-1\n\n    B = B-1\n\n    factorialA = 1\n\n    factorialB = 1\n\n    factorialC = 1\n\n    for i in range(1,A+1):\n\n        factorialA = (factorialA * i) % 10\n\n    for i in range(1,B+1):\n\n        factorialB = (factorialB * i) % 10\n\n    for i in range(1,A-B+1):\n\n        factorialC = (factorialC * i) % 10\n\n    factorialB = (factorialB * factorialC) % 10\n\n    result = (factorialA * factorialB) % 10\n\n    return result # finish\n\n"}
{"prompt": "Write a python function to set all odd bits of a given number.", "test": ["assert odd_bit_set_number(10) == 15", "assert odd_bit_set_number(20) == 21", "assert odd_bit_set_number(30) == 31"], "code": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)", "task_id": 48, "generation": "def odd_bit_set_number(n):\n    \"\"\"\n\n    # convert the number to binary and remove the '0b' prefix\n\n    binary_string = bin(n)[2:]\n\n    # pad leading zeros\n\n    This function applies the function func to all the elements of the list, calculates the sum of these \n\n    applied elements and the product of the original elements.\n\n    binary_string = binary_string.zfill(8)\n\n    binary_string = [bit if i % 2 == 0 else '1' for i, bit in enumerate(binary_string)]\n\n    binary_string = ''.join(binary_string)\n\n    return int(binary_string, 2)\n\n\"\"\"\n\n    return odd_bit_set_number(15)\n\n# finish\n\n"}
{"prompt": "Write a function to extract every first or specified element from a given two-dimensional list.", "test": ["assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"], "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ", "task_id": 49, "generation": "def specified_element(nums, N):\n    return [n[N] for n in nums] \n\n    return [n[N] for n in nums] Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find the list with minimum length using lambda function.", "test": ["assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])", "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])", "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"], "code": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)", "task_id": 50, "generation": "def min_length_list(input_list):\n    min_length = min(input_list, key=lambda x: len(x))\n\n    return min_length\n\n# finish\n\n"}
{"prompt": "Write a function to print check if the triangle is equilateral or not.", "test": ["assert check_equilateral(6,8,12)==False ", "assert check_equilateral(6,6,12)==False", "assert check_equilateral(6,6,6)==True"], "code": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False", "task_id": 51, "generation": "def check_equilateral(x,y,z):\n    if x == y == z:\n\n        print(\"The triangle is equilateral.\")\n\n    else:\n\n        print(\"The triangle is not equilateral.\") # finish\n\n"}
{"prompt": "Write a function to caluclate area of a parallelogram.", "test": ["assert parallelogram_area(10,20)==200", "assert parallelogram_area(15,20)==300", "assert parallelogram_area(8,9)==72"], "code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area", "task_id": 52, "generation": "def parallelogram_area(b,h):\n    area = b * h\n\n    return area\n\nfinish\n\n"}
{"prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.", "test": ["assert check_Equality(\"abcda\") == \"Equal\"", "assert check_Equality(\"ab\") == \"Not Equal\"", "assert check_Equality(\"mad\") == \"Not Equal\""], "code": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ", "task_id": 53, "generation": "def check_Equality(str):\n    if len(str) > 0:\n\n        if str[0] == str[-1]:\n\n            return True\n\n        else:\n\n            return False\n\n    else:\n\n        return None\n\n# finish\n\n"}
{"prompt": "Write a function to sort the given array by using counting sort.", "test": ["assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]", "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]", "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"], "code": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list", "task_id": 54, "generation": "def counting_sort(my_list):\n    max_val = max(my_list)\n\n    count = [0] * (max_val + 1)\n\n    for num in my_list:\n\n        count[num] += 1\n\n    sorted_list = []\n\n    for i, frequency in enumerate(count):\n\n        index = (num // exp) % 10\n\n        count[index] += 1\n\n        sorted_list[count[index] - 1] = num\n\n    # Perform counting sort for every digit\n\n    exp = 1\n\n        acc_count = [0] * 10\n\n        for _ in range(frequency):\n\n            acc_count[index] += 1\n\n        for i in range(1, 10):\n\n            acc_count[i] += acc_count[i - 1]\n\n        for i in range(len(my_list) - 1, -1, -1):\n\n            index = (my_list[i] // exp) % 10\n\n            sorted_list[acc_count[index] - 1] = my_list[i]\n\n    sorted_list = [0] * len(my_list)\n\n    # calc accumulative freq\n\n        sorted_arr.extend([i] * frequency)\n\n    return sorted_arr\n\n    for i in range(1, len(count)):\n\n        count[i] += count[i - 1]\n\nnumbers_to_sort = [18, 46, 52, 34, 23, 70, 0, 53, 24, 14]\n\nnumbers_sorted = counting_sort(numbers_to_sort)\n\nprint(numbers_sorted)\n\n# finish\n\n"}
{"prompt": "Write a function to find t-nth term of geometric series.", "test": ["assert tn_gp(1,5,2)==16", "assert tn_gp(1,5,4)==256", "assert tn_gp(2,6,3)==486"], "code": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn", "task_id": 55, "generation": "import math\ndef tn_gp(a,n,r):\n    tn = a*(r**(n-1))\n\n    return tn\n\n### Finish\n\n"}
{"prompt": "Write a python function to check if a given number is one less than twice its reverse.", "test": ["assert check(70) == False", "assert check(23) == False", "assert check(73) == True"], "code": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ", "task_id": 56, "generation": "def rev(num):\n    \"\"\"\n\n    num = str(num)\n\n    return int(num[::-1])\n\n    Takes two lists and performs the following operations on them:\n\n    Takes an integer as an input, reverses its digits, and returns the reversed integer.\n\ndef check_num(num):\n\n    rev_num = rev(num)\n\n    if num == 2*rev_num - 1:\n\n        return True\n\n    else:\n\n        return False\n\n<jupyter_output>\n\n<empty_output>\n\n<jupyter_text>\n\n    Takes an integer as an input, reverses its digits, \n\n    num = int(num)\n\nrev_num = rev(num)if num == 2*rev_num - 1:    return Trueelse:    return False  Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to find the largest number that can be formed with the given digits.", "test": ["assert find_Max_Num([1,2,3],3) == 321", "assert find_Max_Num([4,5,6,1],4) == 6541", "assert find_Max_Num([1,2,3,9],4) == 9321"], "code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ", "task_id": 57, "generation": "def find_Max_Num(arr,n) :\n    temp = [0]*10\n\n    num= ''\n\n    for i in range(n) :\n\n        temp[arr[i]] += 1\n\n    for i in range(9, -1, -1) :\n\n        num+= (str(i)*temp[i])\n\n    return num\n\n# Driver Code\n\narr = list(map(int,input(\"Enter numbers separated by space: \").split()))\n\nn = len(arr)\n\nprint(\"Largest number is: \",find_Max_Num(arr,n))\n\n# finish\n\n"}
{"prompt": "Write a python function to check whether the given two integers have opposite sign or not.", "test": ["assert opposite_Signs(1,-2) == True", "assert opposite_Signs(3,2) == False", "assert opposite_Signs(-10,-10) == False"], "code": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ", "task_id": 58, "generation": "def opposite_Signs(x,y):\n    return (x ^ y) < 0\n\n# finish\n\n"}
{"prompt": "Write a function to find the nth octagonal number.", "test": ["assert is_octagonal(5) == 65", "assert is_octagonal(10) == 280", "assert is_octagonal(15) == 645"], "code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ", "task_id": 59, "generation": "def is_octagonal(n):\n    # The nth octagonal number is n*(5n-3)/2\n\n    oct_num = n * ((5 * n) - 3) // 2\n\n    return oct_num\n\n# Expected output:\n\n# print(is_octagonal(1)) # 1\n\n# print(is_octagonal(2)) # 8\n\n# print(is_octagonal(3)) # 19\n\n# print(is_octagonal(4)) # 33\n\n# print(is_octagonal(5)) # 50\n\n# finish\n\n"}
{"prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "test": ["assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5", "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4", "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"], "code": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max", "task_id": 60, "generation": "def max_len_sub( arr, n):\n    dp = [0]*n\n\n    length = 0\n\n    for i in range(1, n):\n\n        j = 0\n\n        while j < length:\n\n            if abs(arr[i]-arr[j]) <= 1:\n\n                dp[i] = max(dp[i], dp[j]+1)\n\n            if dp[j] > dp[i]:\n\n                break\n\n            j += 1\n\n        if dp[i] == 0:\n\n            length += 1\n\n    return max(dp) + 1\n\n# finish\n\n"}
{"prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.", "test": ["assert count_Substrings('112112',6) == 6", "assert count_Substrings('111',3) == 6", "assert count_Substrings('1101112',7) == 12"], "code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count", "task_id": 61, "generation": "from collections import defaultdict\ndef count_Substrings(s,n):\n    prefix_sum = [0]*(n+1)\n\n    for i in range(1,n+1):\n\n        for j in range(i):\n\n            if prefix_sum[i] == i - j:\n\n        count[prefix_sum[i]]+=1\n\n        k = 1\n\n        while j + k < n and k <= 9 * len(str(j)):\n\n            prefix_sum[i + k] = prefix_sum[i] + int(s[j:j+k+1])\n\n            if prefix_sum[i + k] == i - j + k:\n\n                count[prefix_sum[i + k]]+=1\n\n            k += 1\n\n    return sum(count.values())\n\ncount = defaultdict(int)\n\n    for i in range(1,len(s)+1):\n\n            if i - j == int(str(j)[::-1]):\n\n                count[i] += count[j]\n\n                count[i] += 1 if j < n // 2 + 1 and int(str(n)[:i - j]) % 2 == 0 else 0\n\n                count[prefix_sum[i + k]]+=\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to find smallest number in a list.", "test": ["assert smallest_num([10, 20, 1, 45, 99]) == 1", "assert smallest_num([1, 2, 3]) == 1", "assert smallest_num([45, 46, 50, 60]) == 45"], "code": "def smallest_num(xs):\n  return min(xs)\n", "task_id": 62, "generation": "def smallest_num(xs):\n    smallest = xs[0]\n\n    for num in xs:\n\n        if num < smallest:\n\n            smallest = num\n\n        if num > largest:\n\n    return smallest\n\n# finish\n\n"}
{"prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.", "test": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"], "code": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ", "task_id": 63, "generation": "def max_difference(test_list):\n    max_diff = float('-inf')\n\n    min_val = float('inf')\n\n    for i in range(len(test_list)):\n\n        if test_list[i][0] < min_val:\n\n            min_val = test_list[i][0]\n\n        diff = test_list[i][1] - test_list[i][0]\n\n        if diff > max_diff:\n\n            max_diff = diff\n\n    return (min_val, max_diff)\n\n            max_min_list = (test_list[i][0], test_list[i][1])\n\n    return max_min_list()\n\n            min_val =\n\n        if test_list[i][1] > max_diff:\n\n     min_val = \n\n# Test the function using a list of tuples\n\nprint(max_difference([(4, 7), (1, 10), (3, 8)]))\n\n# Should print: (1, 9)\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to sort a list of tuples using lambda.", "test": ["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])", "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"], "code": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks", "task_id": 64, "generation": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key = lambda x: x[1]) # finish\n\n"}
{"prompt": "Write a function of recursion list sum.", "test": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"], "code": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total", "task_id": 65, "generation": "def recursive_list_sum(data_list):\n    # Base case: if list is empty\n\n    if data_list == []:\n\n    if nested_list == []:\n\n        return []\n\n    else:\n\n        return n * factorial(n-1)  # Recursive case: n factorial = n * (n-1) factorial\n\nprint(factorial(5))\n\n        first_el = data_list[0]\n\n        if type(first_el) is list:\n\n            return first_el + recursive_list_sum(data_list[1:])\n\n            return [first_el] + recursive_list_sum(data_list[1:])\n\n            return recursive_list_sum(first_el) + recursive_list_sum(data_list[1:])\n\n            return recursive_list_sum(first_el) + recursive_list_sum(nested_list[1:])\n\n        return recursive_list_sum(data_list[1:])\n\n        # Recursive case: sum of list = first element + sum of rest of the list\n\n        return first_el + recursive_list_sum(data_list[1:])\n\n## Test cases\n\nprint(recursive_list_sum([1, 2, [3,4], [5,6]])) # 21\n\n    if not data_list:\n\n if data_list == []:\n\n        # if the element is a number, add it to the result\n\n            return recursive_list_sum(nested_list)\n\n            # if the element is a list, call the sum function on this list\n\n        # if the element is a list, call the sum function on this list\n\n    # Base case: if the list is empty, return 0\n\n            return binary_search(arr, mid + 1, high, x)\n\nprint(recursive_list_sum([1, 2, [3,4], [1,1], [5,6]])) # 21\n\nprint(recursive_list_sum([1, 2, [3,4], [9], [5,6]])) # 21\n\nprint(recursive_sum([1, 2, [3,4], [1,1], [5,6]])) # 21\n\nprint(recursive_sum([1, 2, [3,4], [9], [5,6]])) # 21\n\n"}
{"prompt": "Write a python function to count positive numbers in a list.", "test": ["assert pos_count([1,-2,3,-4]) == 2", "assert pos_count([3,4,5,-1]) == 3", "assert pos_count([1,2,3,4]) == 4"], "code": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ", "task_id": 66, "generation": "def pos_count(list):\n    count = 0\n\n    for num in list:\n\n        if num > 0:\n\n            count += 1\n\n            pos_count += 1\n\n        elif num < 0:\n\n            neg_count += 1\n\n    return pos_count, neg_count # finish\n\n"}
{"prompt": "Write a function to find the number of ways to partition a set of bell numbers.", "test": ["assert bell_number(2)==2", "assert bell_number(10)==115975", "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"], "code": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ", "task_id": 67, "generation": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell\n\ndef partition(n):\n\n    bell_table = bell_number(n)\n\n    return bell_table[n][0]\n\n# finish\n\n"}
{"prompt": "Write a python function to check whether the given array is monotonic or not.", "test": ["assert is_Monotonic([6, 5, 4, 4]) == True", "assert is_Monotonic([1, 2, 2, 3]) == True", "assert is_Monotonic([1, 3, 2]) == False"], "code": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "task_id": 68, "generation": "def is_Monotonic(A):\n    increasing = decreasing = True\n\n    for i in range(len(A) - 1):\n\n        if A[i] > A[i + 1]:\n\n            increasing = False\n\n        if A[i] < A[i + 1]:\n\n            decreasing = False\n\n    return increasing or decreasing\n\n# finish\n\n"}
{"prompt": "Write a function to check whether a list contains the given sublist or not.", "test": ["assert is_sublist([2,4,3,5,7],[3,7])==False", "assert is_sublist([2,4,3,5,7],[4,3])==True", "assert is_sublist([2,4,3,5,7],[1,6])==False"], "code": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set", "task_id": 69, "generation": "def is_sublist(l, s):\n    return s in l\n\n# finish\n\n"}
{"prompt": "Write a function to find whether all the given tuples have equal length or not.", "test": ["assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'", "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'", "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"], "code": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")", "task_id": 70, "generation": "def find_equal_tuple(Input, k):\n    return all(len(t) == k for t in Input)\n\n# Test cases\n\nlist1 = [(1,2), (3,4,5), (6,7,8,9)]\n\nprint(find_equal_tuple(list1, 2))  # True\n\nlist2 = [(1,2,3), (4,5), (6,7,8,9)]\n\nprint(all_equal_length([(1,2), (3,4,5), (6,7,8,9)]))  # True\n\nInput=[[1,2,3], [4,5,6], [7,8,9]]\n\nprint(sum_of_elements(Input))  # 45\n\nlist1 = ['Welcome', 'to', 'Geeks', 'for', 'GEEKS']\n\nprint(are_all_palindromes([\"madam\", \"racecar\", \"level\"]))  # True\n\nInput=[[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\n\nmatrix1 = [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nlist1 = [1, 2, 3]\n\nlist2 = [4]\n\n    return all(len(t)\n\n#!/usr/bin/env python3\n\nprint(find_equal_tuple(list2))  # False\n\nlist1 = [\"madam\", \"racecar\", \"level\"]\n\nprint(all_palindrome(list1))  # True\n\n# finish\n\n"}
{"prompt": "Write a function to sort a list of elements using comb sort.", "test": ["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]", "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]", "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"], "code": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums", "task_id": 71, "generation": "def comb_sort(nums):\n    gap = len(nums)\n\n    shrink = 1.3\n\n    sorted = False\n\n    while not sorted:\n\n        gap = int(gap / shrink)\n\n        if gap < 1:\n\n            gap = 1\n\n    return nums \n\n            sorted = True\n\n        for i in range(len(nums) - gap):\n\n            if nums[i] > nums[i + gap]:\n\n# finish\n\n"}
{"prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.", "test": ["assert dif_Square(5) == True", "assert dif_Square(10) == False", "assert dif_Square(15) == True"], "code": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False", "task_id": 72, "generation": "def dif_Square(n):\n    from math import isqrt\n\n    for i in range(isqrt(n) + 1):\n\n        for j in range(i, isqrt(n) + 1):\n\n            if i**2 + j**2 == n:\n\n                return True\n\n    return False\n\n# Test Cases\n\nprint(dif_Square(9)) # True\n\nprint(dif_Square(15)) # False\n\nprint(dif_Square(25)) # True\n\nprint(dif_Square(25\n\nprint(dif_Square(25)) # True \n\nprint(dif_Square(9)) # True because 3^2 + 1^2 = 9 and 1^2 + 3^2 = 9\n\nprint(dif_Square(15)) # False because no two numbers can be their squares such that their sum is 15\n\nprint(dif_Square(49)) # True\n\nprint(dif_Square(50)) # True\n\nprint(dif_Square(51)) # False because no two numbers can be their squares such that their sum is 51\n\n# finish\n\n"}
{"prompt": "Write a function to split the given string with multiple delimiters by using regex.", "test": ["assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']", "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']", "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"], "code": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))", "task_id": 73, "generation": "import re\ndef multiple_split(text):\n    try:\n\n        # splits the string around the multiple delimiters like `.,;` etc.\n\n        split_str = re.split('[.,;]', text)\n\n        return sum(nums)/len(nums)\n\n    except ZeroDivisionError:\n\n        return 'warning: division by zero'\n\nnums = [1, 2, 3, 4]\n\nnums = '1, 2, 3, 4'\n\nprint(multiple_split(nums)) \n\n# testcases\n\n# should return 2.5\n\n        split_str = list(filter(None, split_str))\n\n        split_str = list(map(int, split_str))\n\n# 1,2  and  3,4 are two pairs.\n\n# '' and [] are together two empty tokens.\n\n# remove leading/trailing/extra spaces\n\n        split_str = [s.strip() for s in split_str if s]\n\n### Start writing the python function.\n\n# This should return 2.5\n\n### finish\n\n"}
{"prompt": "Write a function to check whether it follows the sequence given in the patterns array.", "test": ["assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "], "code": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True", "task_id": 74, "generation": "def is_samepatterns(colors, patterns):\n    color_pattern = {color: pattern for color, pattern in zip(colors, patterns)}\n\n    sorted_colors = sorted(colors, key=color_pattern.get)\n\n    for i in range(len(colors) - 1):\n\n        if color_pattern[sorted_colors[i]] > color_pattern[sorted_colors[i + 1]]:\n\n            return False\n\n    return True\n\n# Test\n\nprint(find_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 5]))\n\n# finish\n\n"}
{"prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "test": ["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'", "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'", "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"], "code": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ", "task_id": 75, "generation": "def find_tuples(test_list, K):\n    result = []\n\n    for ele in test_list:\n\n        if all(ele[i] % K == 0 for i in range(len(ele))):\n\n    result = [ele for ele in test_list if all(i % K == 0 for i in ele)]\n\n            result.append(ele)\n\n    return result\n\n# Test the function\n\ntest_list = [(10, 20, 30), (6, 24, 48), (12, 45, 75), (100, 200, 300)]\n\n K = 10\n\n print(find_tuples(test_list, K))\n\nstring = \"This is a test string\"\n\nprint(string.upper())\n\nK = 10\n\ntest_list = [(10, 20, 30), (60, 240, 480), (120, 450, 750), (1000, 2000, 3000)]\n\nstring = \"The quick brown fox jumps over the lazy dog\"\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to count the number of squares in a rectangle.", "test": ["assert count_Squares(4,3) == 20", "assert count_Squares(2,2) == 5", "assert count_Squares(1,1) == 1"], "code": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))", "task_id": 76, "generation": "def count_Squares(m,n):\n    # write your code here\n\n    if n % 3 == 0 and n % 5 == 0:\n\n        return (n // 3) * (m // 5)\n\n    if n <= 1:\n\n    return -1\n\nfinish\n\n"}
{"prompt": "Write a python function to find the difference between sum of even and odd digits.", "test": ["assert is_Diff (12345) == False", "assert is_Diff(1212112) == True", "assert is_Diff(1212) == False"], "code": "def is_Diff(n): \r\n    return (n % 11 == 0) ", "task_id": 77, "generation": "def is_Diff(n):\n    # Convert the number into a string to easily iterate over each digit.\n\n    str_n = str(n)\n\n    # Initialize the sum of odd and even digits to 0.\n\n    sum_odd = 0\n\n    sum_even = 0\n\n    # Iterate over each digit in the string\n\n    for digit in str_n:\n\n        # If the digit is odd, add it to sum_odd, otherwise add it to sum_even.\n\n        if int(digit) % 2 == 0:\n\n            sum_even += int(digit)\n\n        else:\n\n            sum_odd += int(digit)\n\n    # Return the difference between the sum of even digits and the sum of odd digits.\n\n    return sum_even - sum_odd\n\n            odd_sum += digit\n\n        n = n // 10\n\nordinate(12345)\n\n            odd_sum += int(i)\n\n    str_n = str(n)\n\n    list_digits = [int(d) for d in str_n]\n\nprint(digits_diff(12345))  # expected output: -1 (2 - 4)\n\n            odd_sum += i\n\n    return within\n\nprint(is_Diff_3(12345))  # expected output: -1 (2 - 4)\n\n        # If the digit is odd\n\n    return odd_sum - even_sum\n\n                primes.append(i)\n\n    return is  12345)\n\n Sum_even += price\n\n# // expected output: -1 (2 - 4)\n\n"}
{"prompt": "Write a python function to find number of integers with odd number of set bits.", "test": ["assert count_With_Odd_SetBits(5) == 3", "assert count_With_Odd_SetBits(10) == 5", "assert count_With_Odd_SetBits(15) == 8"], "code": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ", "task_id": 78, "generation": "def count_With_Odd_SetBits(n):\n    count = 0\n\n    for i in range(1, n+1):\n\n        if bin(i).count('1') % 2 != 0:\n\n            count += 1\n\n    return count\n\nprint(count_With_Odd_SetBits(10))  # 5\n\nprint(count_With_Odd_SetBits(20))  # 10\n\nprint(count_With_Odd_\n\nprint(count_With_Odd_SetBits(30))  # 15\n\nprint(count_With_Odd_SetBits(40))  # 20\n\n### More python necessary answering ### Write a python function that receives an array nums of length n, returns the sum of the numbers in the array that have odd index and only if the sum of their sibling numbers is less than 10. ### Response:\n\ndef sum_odd_index_sib_less_than_ten(nums):\n\n    sum = 0\n\n    for i in range(len(nums)):\n\n        if i % 2 != 0:\n\n            if i > 0 and i < len(nums)-1:\n\n                if nums[i-1] + nums[i+1] < 10:\n\n                    sum += nums[i]\n\nprint(count_of_integers_binary_more_than_5_bits([1,2,3,4,5,6,7,8,9,11,12,13,14,15])) # 8\n\nprint(count_of_integers_binary_more_than_5_bits([1,9,17,19,21,23,25]))  # 7\n\nprint(count_of_integers_binary_more_than_5_bits([3,2,11,21,21,2,23]))  # 6\n\n                }\n\n            else:\n\n                    if nums[i-1] < 10:\n\n                prime_nums.append(num)\n\n    return sum\n\n        if i % 2 != 0 and set_bit_count(nums[i]) % 2 != 0:\n\n            if (i > 0 and set_bit_count(nums[i-1]) % 2 != 0 and nums[i-1] + nums[i] < 10) or \\\n\nprint(count_prime_binary(20))  # 4\n\nprint(count_prime_binary([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))  # 10\n\n"}
{"prompt": "Write a python function to check whether the length of the word is odd or not.", "test": ["assert word_len(\"Hadoop\") == False", "assert word_len(\"great\") == True", "assert word_len(\"structure\") == True"], "code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False", "task_id": 79, "generation": "def word_len(s):\n    if len(s) % 2 == 1:\n\n        return True\n\n    else:\n\n    elif n % 2 == 0 or n % 3 == 0:\n\n        return False\n\n# finish\n\n"}
{"prompt": "Write a function to find the nth tetrahedral number.", "test": ["assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(7) == 84.0"], "code": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6", "task_id": 80, "generation": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\n# finish\n\n"}
{"prompt": "Write a function to zip the two given tuples.", "test": ["assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]", "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]", "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"], "code": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ", "task_id": 81, "generation": "def zip_tuples(test_tup1, test_tup2):\n    res = []\n\n    for i in range(min(len(test_tup1), len(test_tup2))):\n\n        res.append((test_tup1[i], test_tup2[i]))\n\n    return tuple(res)\n\ntest_tup1 = [5, 2, 9, 1, 5, 9]\n\ntest_tup2 = [4, 8, 1, 1]\n\ntest_tup = (5, 2, 9, 1, 5, 9, 2, 3, 2)\n\ntest_tup3 = (4, 8, 1, 1, 3, 9, 1, 1, 3)\n\nresult = zip_tuples(test_tup1, test_tup2)\n\nprint(result)\n\nlst3 = [10, 17, 22, 9, 3, 8]\n\nlst4 = [15, 1, 10, 4, 2, 2]\n\nlst2 = [3, 4, 5, 6]\n\nlst = (1, 2, 3, 4, 5, 6, 7)\n\nresult2 = zip_tuples(lst3, lst4)\n\ntest_tup3 = (3, 2, 7, 8)\n\nlst5 = [2, 4, 6, 8]\n\nassert flatten_tuples(test_list) == result\n\nassert flatten_tuples([(4, 8, 1, 1), (3, 9, 1, 1, 3)]) == [4, 8, 1\n\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000llustration will be published with a flattened list of flat_list.\n\n{\\displaystyle \\left[\\begin{array}{c}\n\n1\\\\\n\n2\\\\\n\n3\\\\\n\n4\\\\\n\n#expected result : (1, 2, 3, 4, 5, 6, 7)\n\n5,6,7,8\n\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\n\"\"\"\n\nresult = (1, 2, 3, 4, 5, 6, 7, 8)\n\n"}
{"prompt": "Write a function to find the volume of a sphere.", "test": ["assert volume_sphere(10)==4188.790204786391", "assert volume_sphere(25)==65449.84694978735", "assert volume_sphere(20)==33510.32163829113"], "code": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume", "task_id": 82, "generation": "import math\ndef volume_sphere(r):\n    return 4/3 * math.pi * r**3\n\ndef volume_cylinder(r: float, h: float) -> float:\n\n    \"\"\" Calculate the volume of the cylinder \"\"\"\n\n    return math.pi * r**2 * h\n\ndef volume_cone(r: float, h: float) -> float:\n\n    \"\"\" Calculate the volume of the cone \"\"\"\n\n    return 1/3 * math.pi * r**2 * h\n\n### Finish\n\n"}
{"prompt": "Write a python function to find the character made by adding all the characters of the given string.", "test": ["assert get_Char(\"abc\") == \"f\"", "assert get_Char(\"gfg\") == \"t\"", "assert get_Char(\"ab\") == \"c\""], "code": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)", "task_id": 83, "generation": "def get_Char(strr):\n    res = sum([ord(x) for x in strr])\n\n    return res\n\nstrr = \"Hello World\"\n\nprint(get_Char(strr))\n\nfinish\n\n"}
{"prompt": "Write a function to find the n-th number in newman conway sequence.", "test": ["assert sequence(10) == 6", "assert sequence(2) == 1", "assert sequence(3) == 2"], "code": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "task_id": 84, "generation": "def sequence(n):\n    seq = [0, 1, 1]\n\n    for i in range(3, n+1):\n\n        seq.append(seq[seq[i-1]] + seq[i-seq[i-2]])\n\n    return seq[n]\n\n# finish\n\n"}
{"prompt": "Write a function to find the surface area of a sphere.", "test": ["assert surfacearea_sphere(10)==1256.6370614359173", "assert surfacearea_sphere(15)==2827.4333882308138", "assert surfacearea_sphere(20)==5026.548245743669"], "code": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea", "task_id": 85, "generation": "import math\ndef surfacearea_sphere(r):\n    \"\"\"\n\n    # Write your code here\n\n    surfacearea = 4 * math.pi * (r**2)\n\n    # Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find nth centered hexagonal number.", "test": ["assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(9) == 217"], "code": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1", "task_id": 86, "generation": "def centered_hexagonal_number(n):\n    return n * (5 * n - 3) // 2\n\n# finish\n\n"}
{"prompt": "Write a function to merge three dictionaries into a single expression.", "test": ["assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"], "code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict", "task_id": 87, "generation": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    return ct.ChainMap(dict1, dict2, dict3)\n\ndict1 = {'a': 1, 'b': 2}\n\ndict2 = {'c': 3, 'd': 4}\n\ndict3 = {'a': 10, 'e': 5, 'f': 6}\n\n# merging the dictionaries\n\nmap = merge_dictionaries_three(dict1,dict2,dict3)\n\nfor key, values in map.items():\n\ndef test_merge_dictionaries_three():\n\nmerged_dict = merge_dictionaries_three(dict1,dict2,dict3)\n\n    assert merged_dict['a'] == 1\n\ndict4 = {'a': 100, 'g': 7, 'h': 8}\n\ndict3 = {'a': 5, 'e': 6, 'f': 7}\n\nmerged = merge_dictionaries_three(dict1,dict2,dict3)\n\nprint(merged) # Output:  {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\n Test passed\n\n # finish\n\n"}
{"prompt": "Write a function to get the frequency of the elements in a list.", "test": ["assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ", "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ", "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "], "code": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count", "task_id": 88, "generation": "import collections\ndef freq_count(list1):\n    freq_dict = collections.Counter(list1)\n\n    return freq_dict\n\n### Finish\n\n"}
{"prompt": "Write a function to find the closest smaller number than n.", "test": ["assert closest_num(11) == 10", "assert closest_num(7) == 6", "assert closest_num(12) == 11"], "code": "def closest_num(N):\r\n  return (N - 1)", "task_id": 89, "generation": "def closest_num(N):\n    # Finish writing the python function here. \n\n"}
{"prompt": "Write a python function to find the length of the longest word.", "test": ["assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7", "assert len_log([\"a\",\"ab\",\"abc\"]) == 3", "assert len_log([\"small\",\"big\",\"tall\"]) == 5"], "code": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max", "task_id": 90, "generation": "def len_log(list1):\n    len1 = 0\n\n    temp_var = list1[0]\n\n    id_var = 0\n\n    for i in list1:\n\n        len2 = len(i)\n\n        if len1 < len2:\n\n            len1 = len2\n\n            temp_var = i\n\n    return len1, temp_var  \n\nlist1 = [\"Python\", \"is\", \"a\", \"great\", \"language\", \"to\", \"learn\"]\n\nprint(len_log(list1))\n\n# Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to check if a substring is present in a given list of string values.", "test": ["assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"], "code": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False", "task_id": 91, "generation": "def find_substring(str1, sub_str):\n    for string in str1:\n\n        if sub_str in string:\n\n            return True\n\n    return False\n\n### Finish\n\n"}
{"prompt": "Write a function to check whether the given number is undulating or not.", "test": ["assert is_undulating(\"1212121\") == True", "assert is_undulating(\"1991\") == False", "assert is_undulating(\"121\") == True"], "code": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True", "task_id": 92, "generation": "def is_undulating(n):\n    \"\"\"\n\n    # convert n to a string\n\n    n_str = str(n)\n\n    # if n has less than 3 digits, it cannot be undulating\n\n    if len(n_str) < 3:\n\n        return False\n\n    # check if each pair of digits is identical\n\n    Check if there exists a subset of nums that its sum is equal to target.\n\n    # if no such pair of identical digits is found, return True\n\n    if none_in_list(n_str[i] == n_str[i+2] for i in range(len(n_str) - 2)):\n\n        if n_str[i] == n_str[i+2]:\n\n    for i in range(len(n_str) - 2):\n\n    Check if all pairs of consecutive digits in the string n are identical.\n\n    for i in range(len(n_str) - 1):\n\n        if n_str[i] != n_str[i+2]:\n\n    return True\n\ndef none_in_list(list):\n\n```\n\n        records.add(num)\n\n    a function to check whether the given number is undulating or not\n\n        if n_str[i] == n_str[i+1] == n_str[i+2]:\n\n        if n_str[i] == n_str[i+1]:\n\n    pass\n\n        if not (n_str[i] == n_str[i+1] == n_str[i+2]):\n\n        if (n_str[i] == n_str[i+1]) or (n_str[i+1] == n_str[i+2]):\n\n### Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to calculate the value of 'a' to the power 'b'.", "test": ["assert power(3,4) == 81", "assert power(2,3) == 8", "assert power(5,5) == 3125"], "code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)", "task_id": 93, "generation": "def power(a,b):\n    if b == 0:\n\n        return a\n\n    return a * power(a,b-1)\n\n# finish\n\n"}
{"prompt": "Write a function to extract the index minimum value record from the given tuples.", "test": ["assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'", "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'", "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"], "code": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ", "task_id": 94, "generation": "from operator import itemgetter\ndef index_minimum(test_list):\n    # sorting the list of tuples using itemgetter(0) for second element\n\n    test_list.sort(key = itemgetter(1))\n\n    return test_list[0]\n\n# driver code\n\nrecords = [(5, 5), (1, 2), (3, 3), (4, 1), (2, 2)]\n\nnumbers = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\nindex_min = index_minimum(records)\n\nmost_often = most_occur(numbers)\n\nprint(\"Index minimum value record: \", index_min)\n\nprint(\"Most often number :\", most_often)\n\n# finish\n\n"}
{"prompt": "Write a python function to find the minimum length of sublist.", "test": ["assert Find_Min_Length([[1],[1,2]]) == 1", "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2", "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"], "code": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ", "task_id": 95, "generation": "def Find_Min_Length(lst):\nmin_length = float('inf')\n\nfor sublist in lst:\n\n        for element in sublist:\n\n    min_length = float('inf') # we start by assuming the max possible length\n\n            if len(element) < min_length:\n\n                min_length = len(element)\n\n    return min_length\n\n        if len(sublist) > len(max_sublist):\n\n            max_sublist = sublist\n\n# Test case\n\nprint(Find_Min_Length([[['a'],['ab','abc']], [['abcd','abcde','abcdef']]])) # The minimum length of sublists is 1\n\nprint(Find_Min_Length([['a','ab','abc'], ['abcd','abcde','abcdef']])) \n\n# The minimum length of sublists is 1\n\nfinish\n\n"}
{"prompt": "Write a python function to find the number of divisors of a given integer.", "test": ["assert divisor(15) == 4 ", "assert divisor(12) == 6", "assert divisor(9) == 3"], "code": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x", "task_id": 96, "generation": "def divisor(n):\n    count = 0\n\n    for i in range(1, int(math.sqrt(n)) + 1):\n\n        if n % i == 0:\n\n            if n / i == i:\n\n                count += 1\n\n            else:\n\n                count += 2\n\n    return count\n\n### Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.<jupyter_text>\n\n"}
{"prompt": "Write a function to find frequency count of list of lists.", "test": ["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}", "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"], "code": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n", "task_id": 97, "generation": "def frequency_lists(list1):\n    freq = {}\n\n    for item in list1:\n\n        if str(item) in freq:\n\n            freq[str(item)] += 1\n\n        else:\n\n            freq[str(item)] = 1\n\n    return freq # finish\n\n"}
{"prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "test": ["assert multiply_num((8, 2, 3, -1, 7))==-67.2", "assert multiply_num((-10,-20,-30))==-2000.0", "assert multiply_num((19,15,18))==1710.0"], "code": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ", "task_id": 98, "generation": "def multiply_num(numbers):\n    multiplication = 1\n\n    for num in numbers:\n\n        multiplication *= num\n\n    return multiplication\n\n    return multiplication / len(numbers)\n\n    for\n\n    return multiplication / len(numbers) \n\n# finish\n\n"}
{"prompt": "Write a function to convert the given decimal number to its binary equivalent.", "test": ["assert decimal_to_binary(8) == '1000'", "assert decimal_to_binary(18) == '10010'", "assert decimal_to_binary(7) == '111' "], "code": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ", "task_id": 99, "generation": "def decimal_to_binary(n):\n    if n == 0:\n\n        return 0\n\n    else:\n\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n\nprint(decimal_to_binary(10))\n\n       return (fibonacci(n-1) + fibonacci(n-2))\n\nprint(fibonacci(10))\n\n        return n * factorial(n-1)\n\n        return count\n\n#Test result  \n\n        for i in range(2, n):\n\n            return mean_recursive(lst, n-1) + lst[n-1] / n\n\n            return (2 * largest_prime_factor(n/2))\n\nprint(decimal_to_binary(32))\n\ndef fibonacci(n):\n\n        return mean_recursive(lst, n-1) + lst[n-1] / n\n\n    if n <= 1:\n\nprint(decimal_to_binary(10)) # Output: 1010\n\n        return n\n\n        if n > 1:\n\n        return (mean_recursive(lst, n-1) + lst[n-1]) / n  \n\n        return (2 * mean_recursive(n/2))\n\nprint(fibonacci(5)) # Output: 5\n\n        if n == 1:\n\n<jupyter_output>\n\n        return 2\n\n#Test result\n\nprint(decimal_to_binary(17)) # Output: 10001\n\n       return n\n\n<empty_output>\n\n"}
{"prompt": "Write a function to find the next smallest palindrome of a specified number.", "test": ["assert next_smallest_palindrome(99)==101", "assert next_smallest_palindrome(1221)==1331", "assert next_smallest_palindrome(120)==121"], "code": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i", "task_id": 100, "generation": "import sys\ndef next_smallest_palindrome(num):\n...\n\n# finish\n\n"}
{"prompt": "Write a function to find the kth element in the given array.", "test": ["assert kth_element([12,3,5,7,19], 5, 2) == 3", "assert kth_element([17,24,8,23], 4, 3) == 8", "assert kth_element([16,21,25,36,4], 5, 4) == 36"], "code": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]", "task_id": 101, "generation": "def kth_element(arr, n, k):\n    return arr[k-1]\n\n```\n\nIn the above code, `arr` is the array, `n` is the length of the array and `k` is the index of the element to be found. \n\n$$\n\n$$\n\nThe `min` and `max` functions return the smallest and largest numbers in the list, respectively. The time complexity of these functions is O(n).\n\n## Find all the duplicates in an array\n\nfinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to convert snake case string to camel case string.", "test": ["assert snake_to_camel('python_program')=='PythonProgram'", "assert snake_to_camel('python_language')==('PythonLanguage')", "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"], "code": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "task_id": 102, "generation": "def snake_to_camel(word):\n    result = ''\n\n    words = word.split('_')\n\n    for w in words:\n\n        result += w.capitalize()\n\n    return result\n\nprint(snake_to_camel('hello_world'))\n\n    mid = len(arr) // 2\n\n    root = Node(arr[mid])\n\n    root.left = sorted_array_to_bst(arr[:mid])\n\n    root.right = sorted_array_to_bst(arr[mid + 1:])\n\n    return root\n\n    for i in range(self.V):\n\n        print(\"%d: \"% i, end=\"\")\n\nprint(singleNumber([2,2,1])) \n\n    root = TreeNode(arr[mid]) \n\n    root.left = sorted_array_to_bst(arr[:mid]) \n\n    root.right = sorted_array_to_bst(arr[mid + 1:]) \n\n    return getattr(self, \"{}_{}\".format(n, k))\n\nprint(climbStairs(4))\n\nprint(snake_to_\n\nprint(snake_to_camel('hello_world')) # Returns: 'HelloWorld'\n\nclass TestSnakeToCamel(unittest.TestCase):\n\n    def test_snake_to_camel(self):\n\n        self.assertEqual(snake_to_camel('hello_world'), 'HelloWorld')\n\n        self.assertEqual(snake_to_camel('hello'), 'Hello')\n\n        self.assertEqual(snake_to_camel('world'), 'World')\n\ndef singleNumber(nums: List[int]) -> int:\n\n    res = 0\n\n    for num in nums:\n\n        res ^= num\n\n"}
{"prompt": "Write a function to find eulerian number a(n, m).", "test": ["assert eulerian_num(3, 1) == 4", "assert eulerian_num(4, 1) == 11", "assert eulerian_num(5, 3) == 26"], "code": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "task_id": 103, "generation": "def eulerian_num(n, m):\n    if m == 0 or n == m:\n\n        return 1\n\n    else:\n\n        return eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)\n\n# finish\n\n"}
{"prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "test": ["assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]", "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"], "code": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r", "task_id": 104, "generation": "def sort_sublists(input_list):\n    return [sorted(sublist, key = lambda x: (len(x), x)) for sublist in input_list]\n\nprint(sort_sublists([[\"apple\", \"grape\", \"peach\"], [\"banana\", \"melon\"], [\"cherry\", \"kiwi\", \"watermelon\", \"pear\"]]))\n\n#### Output: [['apple', 'grape', 'peach'], ['banana', 'melon'], ['cherry', 'kiwi', 'pear', 'watermelon']]\n\n# finish\n\n"}
{"prompt": "Write a python function to count true booleans in the given list.", "test": ["assert count([True,False,True]) == 2", "assert count([False,False]) == 0", "assert count([True,True,True]) == 3"], "code": "def count(lst):   \r\n    return sum(lst) ", "task_id": 105, "generation": "def count(lst):\n    \"\"\"Counts True boolean values in a list\"\"\"\n\n    count = 0\n\n    for el in lst:\n\n        if el:\n\n            count += 1\n\n    return count\n\nlst = [True, False, True, False, False, True]\n\nprint(count(lst, True))\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to add the given list to the given tuples.", "test": ["assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)", "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)", "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"], "code": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ", "task_id": 106, "generation": "def add_lists(test_list, test_tup):\n    return tuple(i + j for i, j in zip(test_list, test_tup))\n\ntest_list = [10, 20, 30, 40]\n\ntest_tup = (1, 2, 3, 4)\n\nprint(add_lists(test_list, test_tup)) # finish\n\n"}
{"prompt": "Write a python function to count hexadecimal numbers for a given range.", "test": ["assert count_Hexadecimal(10,15) == 6", "assert count_Hexadecimal(2,4) == 0", "assert count_Hexadecimal(15,16) == 1"], "code": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ", "task_id": 107, "generation": "def count_Hexadecimal(L,R) :\n    count = 0\n\n    for i in range(L, R+1):\n\n        count += 1\n\n        print(hex(i).lstrip(\"0x\").upper())\n\n    return count\n\n        print(hex(i).lstrip(\"0x\").\n\n    Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "test": ["assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]", "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"], "code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)", "task_id": 108, "generation": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    # Creating empty list\n\n    merged_list= []\n\n    # Using the heapq.merge method to merge sorted inputs\n\n    for i in heapq.merge(num1,num2,num3):\n\n        merged_list.append(i)\n\n    return merged_list\n\n# Testing the function\n\nprint(merge_sorted_list([1,3,5], [2,4,6], [0,7,8])) \n\n# Output: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n```\n\n</code>\n\n\"\"\"\n\nThis code will convert decimal numbers to their binary representation using the built-in Python function `bin()`. The function `bin()` returns a binary string, so we remove the '0b' prefix by using slicing operator `[2:]`.\n\nWhen you run the function with the example inputs, it should return the expected output. For instance, the\n\nThe Fibonacci series is a series of numbers in which each number is the sum of the two preceding ones. It starts from 0 and 1. Here's a Python function that generates the Fibonacci series up to n numbers.\n\nThis code will return the square root of a given number assuming that the number is a perfect square. If it isn't, Python's math library will raise a `ValueError`. You can use the `math.sqrt()` function to find the square root.\n\nprint(is_isogram(\"Dermatoglyphics\"))  # True\n\n```python\n\ndef calculate_factorial(n):\n\ndef is_palindrome(word):\n\n    for i in heapq.merge(num1,num2,num3\n\n    return word == word[::-1]\n\nprint(calculate_\n\ndef is_isogram(string):\n\ncelsius_values = [22.0, 28.8, 30.2, 29.8, 23.5, 24.6]\n\nfahrenheit_values = [(temp * 9/5) + 32 for temp in celsius_values]\n\nfrom django.shortcuts import render\n\nfrom django.contrib.auth import authenticate, login, logout\n\n# Create your views here.\n\ndef main(request):\n\n"}
{"prompt": "Write a python function to find the count of rotations of a binary string with odd value.", "test": ["assert odd_Equivalent(\"011001\",6) == 3", "assert odd_Equivalent(\"11011\",5) == 4", "assert odd_Equivalent(\"1010\",4) == 2"], "code": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ", "task_id": 109, "generation": "def odd_Equivalent(s,n):\n    \"\"\"\n\n    This function takes a binary string s and an\n\n    count = 0\n\n        power = 1\n\n    power = 1\n\n        for i in range(n):\n\n    for i in range(n):\n\n        if s[i] == '1':\n\n            count += n - i\n\n    build/temp.linux-x86_64-3.7/_cffi_build_temp.c:12:22: fatal error: Python.h: No such file or directory\n\n    return count\n\n# Test cases\n\nassert odd_Equivalent(\"10101\", 5) == 4\n\nassert odd_Equivalent(\"1101\", 4) == 2\n\n    This function takes a binary string s and returns\n\nassert odd_Equivalent(\"1111\", 4) == 4\n\nassert odd_Equivalent(\"1000\", 4) == 3\n\nassert odd_Equivalent(\"1100\", 4) == 2\n\nassert binary_to_decimal(\"10101\") == 21\n\nassert odd_Equivalent(\"1000\", 4) == \n\n# finish\n\n"}
{"prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "test": ["assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]", "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]", "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"], "code": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ", "task_id": 110, "generation": "def extract_missing(test_list, strt_val, stop_val):\n    count = 0\n\n    missing_list = []\n\n    is_found = False\n\n<jupyter_output>\n\n    for i in range(start_val, end_val+1):\n\n<empty_output>\n\n<jupyter_text>\n\nTest Cases\n\n    for i in range(strt_val, stop_val+1):\n\n<jupyter_code>\n\nTest1:\n\nExpected result on Test1: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\\Expected result on Test2: [6, 7, 8, 9, 100, 101, 102, 103]\\Expected result on Test3: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 4\n\n[10, 12, 14, 15, 16, 20, 22, 23, 24, 25, 29]\n\n        for j in test_list:\n\n# finish\n\n"}
{"prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "test": ["assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]", "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]", "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"], "code": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result", "task_id": 111, "generation": "def common_in_nested_lists(nestedlist):\n    if len(nestedlist) == 0:\n\n    if not nestedlist: return []\n\n        return []\n\n    result = nestedlist[0]\n\n    for list_n in nestedlist[1:]:\n\n        result = list(set(result) & set(list_n))\n\n    return result\n\n# DO NOT REMOVE\n\n# finish\n\n"}
{"prompt": "Write a python function to find the perimeter of a cylinder.", "test": ["assert perimeter(2,4) == 12", "assert perimeter(1,2) == 6", "assert perimeter(3,1) == 8"], "code": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ", "task_id": 112, "generation": "def perimeter(diameter,height) :\n    # a function to find the perimeter of a cylinder given its diameter and height\n\n    # the formula for the perimeter of a cylinder is 2\u03c0r(h+r)\n\n    radius = diameter/2\n\n    return 2*3.14*radius*(radius+height)\n\n# finish\n\n"}
{"prompt": "Write a function to check if a string represents an integer or not.", "test": ["assert check_integer(\"python\")==False", "assert check_integer(\"1\")==True", "assert check_integer(\"12345\")==True"], "code": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False", "task_id": 113, "generation": "def check_integer(text):\n    if text.isdigit():\n\n        return True\n\n    else:\n\n        return False\n\n# finish\n\n"}
{"prompt": "Write a function to assign frequency to each tuple in the given tuple list.", "test": ["assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'", "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'", "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"], "code": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ", "task_id": 114, "generation": "from collections import Counter\ndef assign_freq(test_list):\n    result = Counter(test_list)\n\n    return result\n\nfinish\n\n"}
{"prompt": "Write a function to check whether all dictionaries in a list are empty or not.", "test": ["assert empty_dit([{},{},{}])==True", "assert empty_dit([{1,2},{},{}])==False", "assert empty_dit({})==True"], "code": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit", "task_id": 115, "generation": "def empty_dit(list1):\n    output = True\n\n    for dic in list1:\n\n        if dic:\n\n            output = False\n\n            break\n\n    return output\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to convert a given tuple of positive integers into an integer.", "test": ["assert tuple_to_int((1,2,3))==123", "assert tuple_to_int((4,5,6))==456", "assert tuple_to_int((5,6,7))==567"], "code": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result", "task_id": 116, "generation": "def tuple_to_int(nums):\n    return int(''.join(map(str, nums)))\n\n# finish\n\n"}
{"prompt": "Write a function to convert all possible convertible elements in the list to float.", "test": ["assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'", "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'", "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"], "code": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ", "task_id": 117, "generation": "def list_to_float(test_list):\n    res = []\n\n    for i in test_list:\n\n        try:\n\n            res.append(float(i))\n\n        except:\n\n            res.append(i)\n\n    return res\n\ntest_list = [1, \"24\", \"abcd\", \"37.34\", \"True\", None]\n\ntest_list = [1, \"24\", \"abcd\", \"37.3\n\nprint(list_to_float(test_list))\n\n### Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "test": ["assert string_to_list(\"python programming\")==['python','programming']", "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']", "assert string_to_list(\"write a program\")==['write','a','program']"], "code": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst", "task_id": 118, "generation": "def string_to_list(string):\n    return list(string)\n\n# finish\n\n"}
{"prompt": "Write a python function to find the element that appears only once in a sorted array.", "test": ["assert search([1,1,2,2,3],5) == 3", "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8", "assert search([1,2,2,3,3,4,4],7) == 1"], "code": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)", "task_id": 119, "generation": "def search(arr,n) :\n    #Your code starts Here\n\n    lo = 0\n\n    hi = n-1\n\n    while lo < hi: \n\n        mid = lo + (hi - lo) // 2\n\n        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]: \n\n            return arr[mid]\n\n        elif arr[mid] == arr[mid-1] and mid&1 == 1: \n\n            hi = mid - 1 \n\n        elif arr[mid] == arr[mid+1] and mid&1 == 0: \n\n            lo = mid + 1 \n\n    while lo < hi:\n\n        elif arr[mid] == arr[mid-1]: \n\n            hi = mid - 1\n\n        elif arr[mid] == arr[mid+1]:\n\n            lo = mid + 1\n\n        mid = int((lo + hi)/2)\n\n        if mid == 0 or mid == n-1:\n\n    return arr[mid]\n\n     # your code end\n\n    return -1\n\n#{ \n\n#  Driver Code Starts\n\n# you can remove this function and directly call main function\n\n        elif arr[mid] == arr[mid+1] and mid % 2 == 0:\n\n# this code contributed by Soumik Mitra\n\nT = int(input())\n\nwhile (T > 0):\n\n    n = int(input())\n\n    arr = list(map(int, input().strip().split()))\n\n"}
{"prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.", "test": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"], "code": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max", "task_id": 120, "generation": "def max_product_tuple(list1):\n    max_product = 0\n\n    result = ()\n\n    for item in list1:\n\n        product = 1\n\n        for num in item:\n\n            product *= num\n\n        if product > max_product:\n\n            product *= num\n\n            max_product = product\n\n            result = item\n\n    return result\n\nlist1 = [(4, 1, 2), (8, 1, 2), (1, 5, 5)]\n\nlist1 = [(4, 3, 2), (3, 1, 2), (1, 5), (4, 3)]\n\nfinish\n\n"}
{"prompt": "Write a function to find the triplet with sum of the given array", "test": ["assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True", "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False", "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"], "code": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)", "task_id": 121, "generation": "def check_triplet(A, n, sum, count):\n    A.sort()\n\n    for i in range(0, n-2):\n\n        l = i + 1\n\n        r = n - 1\n\n        while l < r:\n\n            if A[i] + A[l] + A[r] == sum:\n\n                count[0] += 1\n\n            if array[i] + array[l] + array[r] == sum_:\n\n                return True\n\n            elif array[i] + array[l] + array[r] < sum:\n\n                l += 1\n\n            else:\n\n                r -= 1\n\n    return False\n\narray = [1, 4, 45, 6, 10, 8]\n\nsum_ = 22\n\n        if backtrack(start + 1, curr_sum + nums[start], nums, target):\n\n# finish\n\n"}
{"prompt": "Write a function to find n\u2019th smart number.", "test": ["assert smartNumber(1) == 30", "assert smartNumber(50) == 273", "assert smartNumber(1000) == 2664"], "code": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ", "task_id": 122, "generation": "MAX = 3000\ndef smartNumber(n):\n    if n<1:\n\n        return []\n\n    prime = [False]*(MAX+1)\n\n    sum_prime_square = [0]*(MAX+1)\n\n    prime[2] = True\n\n    for i in range(3,MAX+1,2):\n\n        prime[i] = True\n\n        prime\n\n    for x in range(2,int(MAX**0.5)+1):\n\n    for x in range(2,int(3000**0.5)+1):\n\n        if prime[x]:\n\n            for y in range(x*x,MAX+1,x*2):\n\n        return False\n\n                prime[y] = False\n\n    for i in range(1,MAX+1):\n\n        sum_prime_square[i] = sum_prime_square[i-1]\n\n        if prime[i] and i**2<=MAX:\n\n            sum_prime_square[i] += 1\n\n        for i in range(2, int(num**0.5) + 1):\n\n        sum = 0\n\n        nonprime_square[i] = nonprime_square[i-1]\n\n    prime_power = []\n\n    for i in range(2, int(num**0.5) + 1):\n\n        if x == 2 or x == 3:\n\n    return\n\nFinish writing the python function.\n\n"}
{"prompt": "Write a function to sum all amicable numbers from 1 to a specified number.", "test": ["assert amicable_numbers_sum(999)==504", "assert amicable_numbers_sum(9999)==31626", "assert amicable_numbers_sum(99)==0"], "code": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)", "task_id": 123, "generation": "def amicable_numbers_sum(limit):\n    def d(n):\n\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    result = 0\n\n    for i in range(1, limit):\n\n        if i == d(d(i)):\n\n            result += i\n\n    return result\n\n# Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to get the angle of a complex number.", "test": ["assert angle_complex(0,1j)==1.5707963267948966 ", "assert angle_complex(2,1j)==0.4636476090008061", "assert angle_complex(0,2j)==1.5707963267948966"], "code": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle", "task_id": 124, "generation": "import cmath\ndef angle_complex(a,b):\n    complex_number = complex(a,b)\n\n    angle_in_radians = cmath.phase(complex_number)\n\n    angle_in_degrees = angle_in_radians * (180.0 / cmath.pi)\n\n    return angle_in_degrees\n\n# finish\n\n"}
{"prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "test": ["assert find_length(\"11000010001\", 11) == 6", "assert find_length(\"10111\", 5) == 1", "assert find_length(\"11011101100101\", 14) == 2 "], "code": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0", "task_id": 125, "generation": "def find_length(string, n):\n    indices = []\n\n    for i in range(n):\n\n        if string[i] == \"1\":\n\n        for j in range(i+1, n):\n\n            if string[j] == \"0\":\n\n            indices.append((i, j))\n\n    diff = []\n\n    for k in range(len(indices)-1):\n\n                    break\n\n                if (indices[k+1][0] - indices[k][1] == 1):\n\n        if string[i] == '0':\n\n        count = 0  # To store count of 1s and 0s\n\n                        count += 1\n\n        temp = max(temp, count)\n\n    return temp\n\n    flipIndexes.append(len(string)) # Append length of string to be used in later calculation\n\n  return maxLength\n\n        if (indices[k+1][0] - indices[k][1]) == 1:\n\n            diff.append(indices[k+1][0] - indices[k][0])\n\n    return max(diff) if diff else 0\n\n# Test cases\n\nprint(is_palindrome(\"racecar\"))\n\nprint(is_palindrome(\"hello\"))\n\nThis variant of your code should work correctly. It finds indices of zeroes-one sequences, it calculates differences between these indices, and then it returns the maximum of these differences. If there is no sequence of zeroes first followed by ones, the function returns zero. The input to this function is the binary string. \n\nprint(find_length(\"01001\", 6)) #expected 2\n\nprint(find_length(\"0110010\", 8)) #expected 3\n\nprint(find_length(\"11011\", 6)) #expected 1\n\nprint(find_length(\"010011\", 7)) #expected 1\n\nprint(find_length(\"1101110\", 8)) #expected 2\n\nExplanation:\n\n"}
{"prompt": "Write a python function to find the sum of common divisors of two given numbers.", "test": ["assert sum(10,15) == 6", "assert sum(100,150) == 93", "assert sum(4,6) == 3"], "code": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum", "task_id": 126, "generation": "def sum(a,b):\n    # find common divisors\n\n    def divisors(n):\n\n        d = set()\n\n        for i in range(1, int(n**0.5)+1):\n\n            if n % i == 0:\n\n                d.add(i)\n\n                d.add(n//i)\n\n        return d\n\n    a_div = divisors(a)\n\n    b_div = divisors(b)\n\n    # sum common divisors\n\n    return sum(a_div.intersection(b_div))\n\n                divisors.add(i)\n\n                div\n\n    common_divisors = a_divisors.intersection(b_divisors)\n\n    return sum(common_divisors)\n\nprint(sum(4,12))\n\ndivisors = []\n\n                divisors.append(i)\n\n```\n\n                divisors.add(n//i)\n\nend\n\nWrite a python function to find the sum of common divisors of two given numbers. ### Response: def sum_common_divisors(a, b):\n\n    for i in range(1, min(a, b) + 1):\n\n        if a % i == 0 and b % i == 0:\n\nThis is an optimized version of the function, which has a time complexity of O(sqrt(n)) for each number, and then it takes O(sqrt(n)) time to find the intersection of the divisors sets.\n\n            common_divisors.add(i)\n\n            common_divisors.add(a // i)\n\nprint(sum_common_divisors(4, 12))  # Output: 12\n\nWrite a python function to find the sum of common divisors of two given numbers. ### Response:\n\n"}
{"prompt": "Write a function to multiply two integers without using the * operator in python.", "test": ["assert multiply_int(10,20)==200", "assert multiply_int(5,10)==50", "assert multiply_int(4,8)==32"], "code": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)", "task_id": 127, "generation": "def multiply_int(x, y):\n    result = 0\n\n    for i in range(abs(y)):\n\n        result += x\n\n        result += abs(x)\n\n    if y < 0:\n\n        result = - result\n\n    return result\n\n# finish\n\n"}
{"prompt": "Write a function to shortlist words that are longer than n from a given list of words.", "test": ["assert long_words(3,\"python is a programming language\")==['python','programming','language']", "assert long_words(2,\"writing a program\")==['writing','program']", "assert long_words(5,\"sorting list\")==['sorting']"], "code": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t", "task_id": 128, "generation": "def long_words(n, str):\n    return [word for word in str if len(word) > n]\n\n#finish\n\n"}
{"prompt": "Write a function to calculate magic square.", "test": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"], "code": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True", "task_id": 129, "generation": "def magic_square_test(my_matrix):\n    # calculate the sum of each row\n\n    magic_constant = sum(my_matrix[0])\n\n    for row in my_matrix:\n\n        if sum(row) != magic_constant:\n\n            return False\n\n    # calculate the sum of each column\n\n    for col in range(len(my_matrix[0])):\n\n    # calculate the sum of the diagonals\n\n    diag_sum_1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n\n    diag_sum_2 = sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])\n\n    # Each column must add up to the same number.\n\n    if diag_sum_1 != magic_constant or diag_sum_2 != magic_constant:\n\n        return False\n\n        if sum(my_matrix[i][col] for i in range(len(my_matrix))) != magic_constant:\n\n    return True\n\n# finish\n\n"}
{"prompt": "Write a function to find the item with maximum frequency in a given list.", "test": ["assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)", "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)", "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"], "code": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result", "task_id": 130, "generation": "from collections import defaultdict\ndef max_occurrences(nums):\n    count_map = defaultdict(int)\n\n    for num in nums:\n\n        count_map[num] += 1\n\n    max_freq = max(count_map.values())\n\n    for num in count_map:\n\n        if count_map[num] == max_freq:\n\n    max_freq_nums = [num for num in count_map if count_map[num] == max_freq]\n\n    return max_freq_nums[0] if len(max_freq_nums) == 1 else max_freq_nums\n\nX = [4, 2, 2, 8, 3, 3, 1]\n\nprint(max_occurrences(X)) # 2, 3\n\n# finish\n\n"}
{"prompt": "Write a python function to reverse only the vowels of a given string.", "test": ["assert reverse_vowels(\"Python\") == \"Python\"", "assert reverse_vowels(\"USA\") == \"ASU\"", "assert reverse_vowels(\"ab\") == \"ab\""], "code": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string", "task_id": 131, "generation": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU' \n\n    str1 = list(str1) # convert string to list \n\n    left = 0\n\n    right = len(str1) - 1\n\n    right = 0\n\n    left = len(str1) - 1\n\n    while left < right:\n\n        if str1[left] in vowels and str1[right] in vowels:\n\n            str1[left], str1[right] = str1[right], str1[left]\n\n            left += 1\n\n            right -= 1\n\n        elif str1[left] not in vowels:\n\n            left += 1\n\n        elif str1[right] not in vowels:\n\n            right -= 1\n\n    return ''.join(str1)\n\n# finish\n\n"}
{"prompt": "Write a function to convert tuple to a string.", "test": ["assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")", "assert tup_string(('p','y','t','h','o','n'))==(\"python\")", "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"], "code": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str", "task_id": 132, "generation": "def tup_string(tup1):\n    str1 = \" \".join(tup1)\n\n    return str1\n\ntup1 = (\"Hello\", \"World\", \"in\", \"Python\")\n\nprint(tup_string(tup1))\n\n# finish\n\n"}
{"prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "test": ["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52", "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"], "code": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)", "task_id": 133, "generation": "def sum_negativenum(nums):\n    sum_num = filter(lambda x: x < 0, nums)\n\n    return sum(sum_num)\n\n# Test the function\n\nprint(sum_negativenum([1, -2, 3, -4, 5]))  # Output: -9\n\nprint(sum_negativenum([1, -2, 3, -4, 5], sum))  # Output: -9\n\nfinish\n\n"}
{"prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.", "test": ["assert check_last([5,7,10],3,1) == \"ODD\"", "assert check_last([2,3],2,3) == \"EVEN\"", "assert check_last([1,2,3],3,1) == \"ODD\""], "code": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ", "task_id": 134, "generation": "def check_last (arr,n,p):\n    if p == 1:\n\n        arr.append(arr[-1]*2)\n\n    else:\n\n        for _ in range(p):\n\n    return arr[-1] % 2 == 0\n\nnums = [1,2,3,4]\n\n            array.append(array[-1] * 2)\n\n    return array[-1] % 2 == 0\n\nnums = [1,2,3]\n\np = 2\n\nprint(check_last(nums, len(nums), p))\n\nanswer = check_last(nums, len(nums), p)\n\n```\n\nnums = [1,2,3] # array size - 3\n\n    print(check_last (arr, len(arr), p)) # Answer: True\n\nAbove you can see that the function `check_last` performs operation of doubling the last element in array times p. Then it checks if the new last element of the array is even or not. \n\nWhen I run it I get False which means the last element of the array after performing the operation is odd. \n\n            for _ in range(p-1):\n\n        for _ in range(p - 1):\n\nExpected Output: False\n\n        for _ in range(p-1):\n\nnums = [1,2,3] \n\nanswer = check_last(num\n\n                count += i // filter\n\n                task_list.sort(key = lambda x: abs(x-avg), reverse = True)\n\n            indices_out_of_order[tasks[i]] = i + 1\n\n            new_order = get_task_order(tasks, p, m)\n\n                for i in range(n):\n\nnums = [1, 2, 3, 4]\n\nCreate a list with some numbers and print the last element. How can I do it in Python?\n\n"}
{"prompt": "Write a function to find the nth hexagonal number.", "test": ["assert hexagonal_num(10) == 190", "assert hexagonal_num(5) == 45", "assert hexagonal_num(7) == 91"], "code": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ", "task_id": 135, "generation": "def hexagonal_num(n):\n    return n*(2*n-1)\n\n# finish\n\n"}
{"prompt": "Write a function to calculate electricity bill.", "test": ["assert cal_electbill(75)==246.25", "assert cal_electbill(265)==1442.75", "assert cal_electbill(100)==327.5"], "code": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total", "task_id": 136, "generation": "def cal_electbill(units):\n    if(units <= 50):\n\n    \"\"\"\n\n\t    bill = 0\n\n        bill = 0\n\n\tbill = units * 0.50; \n\n        bill = units * 0.50; \n\n\tnf\n\n        bill = units * 0.50\n\n    elif(units <= 150):\n\n        bill = 25 + ((units-50) * 0.75); \n\n        bill = 25 + ((units-50) * 0.75)\n\n    elif(units <= 250):\n\n        bill = 100 + ((units-150) * 1.20);\n\n    else:\n\n        bill = 220 + ((units-250) * 1.5);\n\n        bill = 220 + ((units-250) * 1.5)\n\n    return bill\n\n    Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find the ration of zeroes in an array of integers.", "test": ["assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15", "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00", "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"], "code": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "task_id": 137, "generation": "from array import array\ndef zero_count(nums):\n    zero_count = nums.count(0)\n\n    total_count = len(nums)\n\n    return zero_count / total_count\n\n    return zero_count / total_count if total_count > 0 else 0\n\n# finish\n\n"}
{"prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "test": ["assert is_Sum_Of_Powers_Of_Two(10) == True", "assert is_Sum_Of_Powers_Of_Two(7) == False", "assert is_Sum_Of_Powers_Of_Two(14) == True"], "code": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True", "task_id": 138, "generation": "def is_Sum_Of_Powers_Of_Two(n):\n    # Base cases\n\n    if n < 0:\n\n        return False\n\n    if n == 0 or n == 1 or n == 2:\n\n        return True\n\n    # Subtract powers of 2 until n becomes 0\n\n    return False\n\n    power = 1\n\n    dp = [False]*(num+1)\n\n    # If we've made it through the entire matrix without returning\n\n    # returning to note that we've reached a sum of all numbers\n\n    return dp[-1][-1]\n\nassert is_Sum_Of_Powers_Of_Two(127) == True, 'Failed on 127'\n\n    while n > 0:\n\nassert is_Sum_Of_Powers_Of_Two(-1) == False, 'Failed on -1'\n\nassert is_Sum_Of_Powers_Of_Two(255) == True, 'Failed on 255'\n\nassert is_Sum_Of_Powers_Of_Two(511) == True, 'Failed on 511'\n\n    return dp[n]\n\n            if power > n:\n\n        i = 2\n\nassert is_Sum_Of_Powers_Of_Two(0) == True, 'Failed on 0' \n\n        if n == power:\n\n        if n < power:\n\n    powers_of_two = [2**i for i in range(32)]\n\n    power_of_two <= n:\n\n            n -= power_of_two\n\n    while power <= n:\n\n        if power == n:\n\n            return Trueassert is_Sum_Of_Powers_Of_Two(42) == False, 'Failed on 42'\n\n  File \"<ipython-input-8-6381b59b9ef9>\", line 5, in is_Sum_Of_Powers_Of_Two\n\n"}
{"prompt": "Write a function to find the circumference of a circle.", "test": ["assert circle_circumference(10)==62.830000000000005", "assert circle_circumference(5)==31.415000000000003", "assert circle_circumference(4)==25.132"], "code": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter", "task_id": 139, "generation": "def circle_circumference(r):\n    return 2 * 3.14 * r\n\n# finish\n\n"}
{"prompt": "Write a function to extract elements that occur singly in the given tuple list.", "test": ["assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]", "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]", "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"], "code": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ", "task_id": 140, "generation": "def extract_singly(test_list):\n    temp = []\n\n    res = []\n\n    for sub in test_list:\n\n        temp.append(list(sub))\n\n    for i in range(len(temp)):\n\n        temp.extend(list(sub))\n\n    for i in temp:\n\n        if temp.count(i) == 1:\n\n            res.append(i)\n\n    return res\n\n###\n\n    single_elements = []\n\nsort_list = [(5, 'hello', 10.5), (7, 'world', 7.8), (1, 'foo', 3.5), (8, 'bar', 2.3)]\n\n    return single_elements\n\n# output: [10.5, 7.8, 3.5, 2.3]\n\nprint(extract_singly(sort_list))\n\n### Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function\n\n"}
{"prompt": "Write a function to sort a list of elements using pancake sort.", "test": ["assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]", "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"], "code": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums", "task_id": 141, "generation": "def pancake_sort(nums):\n    if not nums:\n\n        return []\n\n    else:\n\n        s = s.lower().replace(' ', '')\n\n        sorted_nums = sorted(nums)\n\n        s = ''.join([i for i in s if i != c])\n\n            return binary_search(arr, mid + 1, high, key)\n\n                return binary_search(arr, low, mid - 1, key)\n\n            return binary_search(arr, low, mid - 1, key)\n\n            return mid\n\n        n = len(nums)\n\n        nums = [i for i in nums if i != target]\n\n        nums = ''.join([i for i in nums if i != c])\n\n                nums = not_target[::-1] + nums[len(not_target)::]\n\n        return binary_search(arr, mid + 1, high, key)\n\n        return binary_search(arr, low, mid - 1, key)\n\n    return -1\n\n        return ''.join([i for i in s if i != c])\n\nfinish\n\n"}
{"prompt": "Write a function to count the same pair in three given lists.", "test": ["assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3", "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4", "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"], "code": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result", "task_id": 142, "generation": "def count_samepair(list1,list2,list3):\n    list1.sort()\n\n    list2.sort()\n\n    list3.sort()\n\n    pair1 = [(list1[i], list1[i + 1]) for i in range(0, len(list1) - 1, 2)]\n\n    pair2 = [(list2[i], list2[i + 1]) for i in range(0, len(list2) - 1, 2)]\n\n    pair3 = [(list3[i], list3[i + 1]) for i in range(0, len(list3) - 1, 2)]\n\n    count = 0\n\n    for pair in pair1:\n\n        if pair in pair2:\n\n            if pair in pair3:\n\n                count += 1\n\n    return count\n\n# finish\n\n"}
{"prompt": "Write a function to find number of lists present in the given tuple.", "test": ["assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3", "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"], "code": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ", "task_id": 143, "generation": "def find_lists(Input):\n    count = 0\n\n    for i in Input:\n\n        if type(i) == list:\n\n            count += 1\n\n    return count # finish\n\n"}
{"prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.", "test": ["assert sum_Pairs([1,8,9,15,16],5) == 74", "assert sum_Pairs([1,2,3,4],4) == 10", "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"], "code": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum", "task_id": 144, "generation": "def sum_Pairs(arr,n):\n    # input your code here\n\n    # finish\n\n"}
{"prompt": "Write a python function to find the maximum difference between any two elements in a given array.", "test": ["assert max_Abs_Diff((2,1,5,3),4) == 4", "assert max_Abs_Diff((9,3,2,5,1),5) == 8", "assert max_Abs_Diff((3,2,1),3) == 2"], "code": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ", "task_id": 145, "generation": "def max_Abs_Diff(arr,n):\n    arr.sort()\n\n    return abs(arr[-1]-arr[0])\n\n    # finish\n\n"}
{"prompt": "Write a function to find the ascii value of total characters in a string.", "test": ["assert ascii_value_string(\"python\")==112", "assert ascii_value_string(\"Program\")==80", "assert ascii_value_string(\"Language\")==76"], "code": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])", "task_id": 146, "generation": "def ascii_value_string(str1):\n    total_value = 0\n\n    for ch in str1:\n\n        total_value += ord(ch)\n\n        if ch.isupper():\n\n            total_value += 50\n\n        elif ch.islower():\n\n            total_value += 30\n\n    return total_value\n\n        ascii_dict[ch] = ord(ch)\n\n        hex_str += hex(ord(ch))[2:]\n\n    return hex_str\n\n# finish\n\n"}
{"prompt": "Write a function to find the maximum total path sum in the given triangle.", "test": ["assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14", "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ", "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"], "code": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]", "task_id": 147, "generation": "def max_path_sum(tri, m, n):\n    result = [[0 for x in range(m)]for y in range(n)]\n\n    result[0][0] = tri[0][0]\n\n    # Initialize values for the first row.\n\n    for i in range(1, m):\n\n        result[0][i] = result[0][i-1] + tri[0][i]\n\n        result[i][0] = result[i-1][0] + tri[i][0]\n\n    for i in range(1, n):\n\n        for j in range(1, m):\n\n            if j<i:\n\n                result[i][j] = max(result[i-1][j-1] + tri[i][j], result[i-1][j] + tri[i][j])\n\n            if i==j:\n\n    maximum=0\n\n    for i in range(m):\n\n        if result[n-1][i]>maximum:\n\n            maximum=result[n-1][i]\n\nfirstLine = input().split()\n\n        if result\n\nn = int(firstLine[0])\n\n        for j in range(i+1):\n\nresult[i][j] = int(firstLine[j)\n\n        maximum = int(max_path_sum(result, n, n))\n\n            result[i][j] = max(result[i+1][j], result[i+1][j+1]) + tri[i][j]\n\n            left_parent = result[i-1][j-1] if j-1 >= 0 else 0\n\n            right_parent = result[i-1][j] if j < len(result[i-1]) else 0\n\n            parent_path_sum = max(left_parent, right_parent)\n\n            result[i][j] = parent_path_sum + tri[i][j]\n\n        return result[0][0]\n\ntri = [[6], [3, 5], [9, 7, 1], [4, 6, 8, 4]]\n\nresult = max_path_sum(tri, 4, 4)\n\n        for j in range(1, i):\n\n"}
{"prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "test": ["assert sum_digits_twoparts(35)==17", "assert sum_digits_twoparts(7)==7", "assert sum_digits_twoparts(100)==19"], "code": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ", "task_id": 148, "generation": "def sum_digits_single(x) :\n    s = 0\n\n    while x :\n\n        s += x % 10\n\n        x //= 10\n\n    return s\n\ndef divide_number(num):\n\n    str_num = str(num)\n\n    len_num = len(str_num)\n\n    dp = [[0 for i in range(len_num+1)] for j in range(len_num+1)]\n\n    for i in range(1, len_num+1):\n\n        for j in range(1, i+1):\n\n            dp[i][j] = max(dp[i-1][j-1] + int(str_num[i-1]), dp[i-1][j]*10 + int(str_num[i-1]))\n\n    return max(dp[len_num])\n\nfinish\n\n"}
{"prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "test": ["assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6", "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3", "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"], "code": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result", "task_id": 149, "generation": "def longest_subseq_with_diff_one(arr, n):\n    # Sorting the array\n\n    arr.sort()\n\n    # Initialize length of Longest Increasing Subsequence\n\n    longest_subseq = 1\n\n    # Initialize list to store longest sum of\n\n    longest_end_here = [1]*n\n\n    # Compute optimized LIS values in\n\n    # bottom up manner\n\n    for i in range(1, n):\n\n        for j in range(i):\n\n            if abs(arr[i] - arr[j]) == 1:\n\n                longest_end_here[i] = max(longest_end_here[i], longest_end_here[j] + 1)\n\n                longest_subseq = max(longest_subseq, longest_end_here[i])\n\n    return longest_subseq\n\n### Move the cursor to the end of the code.\n\n    # obtaining subsequence\n\n    seq = [longest_subseq]\n\n    i = longest_subseq - 1\n\n    while i >= 0:\n\n        for j in range(n - 1, -1, -1):\n\n            if longest_subseq_with_diff_one[j] == i and abs(arr[j+1] - arr[j]) == 1:\n\n                seq[i] = arr[j+1]\n\n                longest_subseq -=1\n\n        while j >= 0:\n\n            if longest_subseq_with_diff_one[j] == i and abs(arr[j+1] - arr[j]) != 1:\n\n        for j in range(0, i):\n\n                seq[i] = arr[j]\n\n            break\n\n    return seq # finish\n\n"}
{"prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.", "test": ["assert does_Contain_B(1,7,3) == True", "assert does_Contain_B(1,-3,5) == False", "assert does_Contain_B(3,2,5) == False"], "code": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False", "task_id": 150, "generation": "def does_Contain_B(a,b,c):\n    i = 0\n\n    while True:\n\n        if a[i] == b:\n\n            return True\n\n        elif a[i] > b:\n\n            return False\n\n        i+=1\n\n        i += 1\n\n#finish\n\n"}
{"prompt": "Write a python function to check whether the given number is co-prime or not.", "test": ["assert is_coprime(17,13) == True", "assert is_coprime(15,21) == False", "assert is_coprime(25,45) == False"], "code": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1", "task_id": 151, "generation": "def gcd(p,q):\n    while q != 0:\n\n        p, q = q, p%q\n\n    return p\n\ndef is_coprime(a, b):\n\n    return gcd(a, b) == 1\n\nfinish\n\n"}
{"prompt": "Write a function to sort the given array by using merge sort.", "test": ["assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]", "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]", "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"], "code": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n", "task_id": 152, "generation": "def merge(a,b):\n    '''\n\n    This function is used to merge two sorted arrays.\n\n    c = []\n\n    # Write your code here\n\ndef merge_sort(arr):\n\n    if len(arr) <= 1:\n\n        return arr\n\nWrite # finish after the last line of the function\n\n"}
{"prompt": "Write a function to find the vertex of a parabola.", "test": ["assert parabola_vertex(5,3,2)==(-0.3, 1.55)", "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)", "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"], "code": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex", "task_id": 153, "generation": "def parabola_vertex(a, b, c):\n    # The vertex of the parabola is given by the following formula:\n\n    # x = -b / (2*a)\n\n    # The function returns a tuple containing the x-coordinate and y-coordinate of the vertex.\n\n    x_vertex = -b / (2*a)\n\n    y_vertex = c - (4*a*x_vertex**2)\n\n    return (x_vertex, y_vertex)\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to extract every specified element from a given two dimensional list.", "test": ["assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]", "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"], "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result", "task_id": 154, "generation": "def specified_element(nums, N):\n    result = []\n\n    for row in nums:\n\n    result = [nums[i][N] for i in range(len(nums)) if len(nums[i]) > N]\n\n    return result\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.<jupyter_text>\n\n"}
{"prompt": "Write a python function to toggle all even bits of a given number.", "test": ["assert even_bit_toggle_number(10) == 0", "assert even_bit_toggle_number(20) == 30", "assert even_bit_toggle_number(30) == 20"], "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "task_id": 155, "generation": "def even_bit_toggle_number(n) :\n    for i in range(0, 31, 2) :\n\n        n = n ^ (1 << i) \n\n    return n\n\n# Test cases\n\nprint(even_bit_toggle_number(10)) # prints 10\n\nprint(count_reversed_subpatterns(12))  # prints 3\n\nprint(even_bit_toggle_number(2))# prints 10\n\nprint(even_bit_toggle_number(5)) # prints 5\n\nprint(toggle_LSB(10)) # prints 11\n\nNote: In the above code, \"<<\" is a binary shift operator which moves bits of the number to the left and fills 0 on voids left as a result. '^' is a bitwise exclusive or operator.\n\nprint(even_bit_toggle_number(10)) # prints 11\n\nprint(even_bit_toggle_number(12)) # prints 10\n\nprint(even_bit_toggle_number(2)) # prints 10\n\nprint(even_bit_toggle_number(10)) # prints 15\n\n``` \n\n\u2502 Number : 5\n\n\u2502 The function 'even_bit_toggle_number' toggles all even bits of 5. \n\n\u2502 As 5 in binary is 101 and the even bits are the 1 at index 1 and the 1 at index 3. \n\nprint(toggle_even_bits(10)) # prints 10\n\n\u2502 Number : 12\n\n\u2502 The function 'even_bit_toggle_number' toggles all even bits of 12. \n\nprint(even_bit_toggle_number(\n\n\u2502 5 in binary is 101 and the even bits are the 1 at index 1 and the 1 at index 3. \n\nprint(even_bit_toggle_number(5)) # Should print 5\n\n\u2502 As 12 in binary is 1100 and the even bits are the 0 (2^2) and the 0 (2^4), the function flips the bits at the positions 2 and 4, making it 10 (1010 in binary). \n\nPlease change the files according to your program requirement.\n\n\u2502 And toggle_even_bits_n(22)  should return 18 (11010 in binary):\n\n\u2502 - The even bits would be the 0 at index 1 and the 1 at index 3 (2^2,2^3 respectively).\n\n#\u2502 'b', the number whose even bits will be toggled.\n\ndont forget to execute all test cases in a single run. Use python dict which should return the output correctly.\n\n"}
{"prompt": "Write a function to convert a tuple of string values to a tuple of integer values.", "test": ["assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))", "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))", "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"], "code": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result", "task_id": 156, "generation": "def tuple_int_str(tuple_str):\n    tuple_int = ()\n\n    for i in tuple_str:\n\n        # convert string to int and append it to new tuple\n\n        tuple_int += (int(i),)\n\n    return tuple_int\n\n# Testing\n\nlst = [[\"apple\", \"fruit\"], [\"carrot\", \"vegetable\"], [\"pizza\", \"fast food\"]]\n\nstr1 = \"Hello, I love Python programming.\"\n\nint1 = 123\n\ntup = (\"1\", \"2\", \"3\")\n\ntup = (97, 98, 99)\n\ntext = \", \".join(s[0] for s in lst) + \" and \" + lst[2][0] + \", \" + str1\n\nresult = tuple_int_str(text)\n\nprint(result)\n\nOutput: (\"apple\", \"carrot\", \"pizza\", \"Hello\", \"I\", \"love\", \"Python\", \"programming\", \"1\", \"2\")\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to reflect the run-length encoding from a list.", "test": ["assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]", "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]", "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"], "code": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]", "task_id": 157, "generation": "from itertools import groupby\ndef encode_list(list1):\n    '''Using groupby function from itertools, group the list by item and return a list of tuples where the first element is the item, and the second element is the count.'''\n\n    return [(i, len(list(g))) for i, g in groupby(list1)]\n\n# Print the result for testing\n\nprint(encode_list([1, 1, 1, 3, 3, 5, 1, 1, 1, 7]))\n\n# Output: [(1, 3), (3, 2), (5, 1), (1, 3), (7, 1)]\n\n# finish\n\n"}
{"prompt": "Write a python function to find k number of operations required to make all elements equal.", "test": ["assert min_Ops([2,2,2,2],4,3) == 0", "assert min_Ops([4,2,6,8],4,3) == -1", "assert min_Ops([21,33,9,45,63],5,6) == 24"], "code": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ", "task_id": 158, "generation": "def min_Ops(arr,n,k):\n   arr = sorted(arr)\n\n   res = float('inf')\n\n   prefix = [0]*n\n\n   prefix[0] = arr[0]\n\n   for i in range(1,n):\n\n       prefix[i] = prefix[i-1]+arr[i]\n\n   for i in range(k-1,n):\n\n       if i==k-1:\n\n           curr_sum = prefix[i]\n\n       else:\n\n           curr_sum = prefix[i]-prefix[i-k]\n\n       res = min(res,curr_sum)\n\n        res = min(res, curr_sum)\n\n    if res == float('inf'):\n\n       if i==k-\n\n1:\n\n        prefix[i] = prefix[i-1]+arr[i]\n\n   if res == float('inf'):\n\n            # The top bar is the smallest bar. pop it from \n\n           break\n\n    if res == float('inf'\n\n# \u52a0\u4e0a\u4e2d\u95f4\u4ef6\n\n1\n\n   return res\n\nfinish\n\n"}
{"prompt": "Write a function to print the season for the given month and day.", "test": ["assert month_season('January',4)==('winter')", "assert month_season('October',28)==('autumn')", "assert month_season('June',6)==('spring')"], "code": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season", "task_id": 159, "generation": "def month_season(month,days):\n    if month in ['January','February','March'] :\n\n        season = 'Winter'\n\n    elif month in ['April', 'May','June'] :\n\n        season = 'Spring'\n\n    elif month in ['July','August','September'] :\n\n    elif (month == 'September' and days > 22) or (month == 'December' and days < 22) or (month == 'July' and days < 23) or (month == 'August' and days < 22):\n\n    elif month == 'June\n\n February' and days > 20) or (month == 'December' and days > 20) :\n\n        if (month == 'September' and days > 22) or (month == 'September' and days < 22):\n\n        season = 'Summer'\n\n        else:\n\n        season ='Autumn'\n\n        elif (month == 'January' and days > 20) :\n\n        return season\n\n    elif month in ['October','November','December']:\n\n    elif month in ['October','November','December'] :\n\n    elif ((month == 'December' and days > 21) or \n\n          (month == 'March' and days < 21) or \n\n            n //= i\n\n    elif (month.lower() in ['july','august','september'] and days > 22)\n\n        season = \n\n        if (month == 'October' and days > 22) or (month == 'December' and days > 22) or (month == 'November' and days < 21):\n\n    else:\n\n    if (month == 'September' and day > 22) or (month == 'December' and day < 22) or (month == 'July' and day < 23) or (month == 'August' and day < 22):\n\n    season = 'Autumn'\n\n    elif month in ['July', 'August', 'September']:\n\n    season = 'Spring'\n\n        if (month == 'December' and day > 21) or (month == 'October' and day < 22) or (month == 'November' and day < 21):\n\n    season = 'Invalid month, try again'\n\n    return season\n\n"}
{"prompt": "Write a function to find x and y that satisfies ax + by = n.", "test": ["assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)", "assert solution(4, 2, 7) == 'No solution'", "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"], "code": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ", "task_id": 160, "generation": "def solution (a, b, n):\n    # Start solving the equation\n\n    results = []\n\n    for x in range(n+1):\n\n        for y in range(n+1):\n\n            if a*x + b*y == n:\n\n                results.append((x, y))\n\n    return results\n\n# Test the function\n\nprint(solution(2, 3, 5)) \n\nprint(solution(1, 2, 3)) \n\nprint(merge_arrays([[1, 2], [3, 4], [5, 6]]))\n\nprint(merge_arrays([[5, 6], [1, 2], [3, 4]]))\n\nprint(solution(2, 3, 5))\n\nprint(solution(1, 2, 3))\n\nprint(min_trials(0.5, 3))  # Probability of getting 3 heads in a row in a fair coin toss\n\nprint(min_trials(0.4, 5))  # Probability of getting 5 tails in a row in a biased coin toss\n\nprint(merge_arrays([[1, 2], [3, 4], [5, 6]]))  # [1, 2, 3, 4, 5, 6]\n\nprint(merge_arrays([[5, 6], [1, 2], [3, 4]]))  # [1, 2, 3, 4, 5, 6]\n\nprint(merge_arrays([[1, 2], [3, 4], [5, 6]]))  # [1, 2, 3, 4, \n\n Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to remove all elements from a given list present in another list.", "test": ["assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"], "code": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result", "task_id": 161, "generation": "def remove_elements(list1, list2):\n    list1 = [i for i in list1 if i not in list2]\n\n    return list1\n\n# Test the function\n\nlst = [1, 2, 3, 4, 5]\n\nlst2 = [2, 4]\n\nlst = [1, 2, 2, 3, 4, 5\n\nprint(remove_elements(lst, lst2))  # This should print: [1, 3, 5]\n\n# finish\n\n"}
{"prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "test": ["assert sum_series(6)==12", "assert sum_series(10)==30", "assert sum_series(9)==25"], "code": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)", "task_id": 162, "generation": "def sum_series(n):\n    if n <= 0:  \n\n        return \"Input should be a positive integer\"\n\n    else:\n\n        sum = 0\n\n        while n >= 0:\n\n            sum += n\n\n            n -= 2\n\n    return sum\n\n# finish\n\n"}
{"prompt": "Write a function to calculate the area of a regular polygon.", "test": ["assert area_polygon(4,20)==400.00000000000006", "assert area_polygon(10,15)==1731.1969896610804", "assert area_polygon(9,7)==302.90938549487214"], "code": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area", "task_id": 163, "generation": "from math import tan, pi\ndef area_polygon(s,l):\n    \"\"\"\n\n    Input: side, length\n\n    # formula for calculating area of regular polygon\n\n    area = (0.25 * s * l**2) / tan(pi/s)\n\n    return (0.25 * s * l**2) / tan(pi/s)\n\n# test\n\nThis code block is correct as far as it goes. Just to clarify a bit more, this function takes in two arguments, s (number of sides) and l (length of one side). It then uses the formula for calculating the area of a regular polygon to return the area of the polygon. Test runs for values of 4 (sides) and 2 (side length) yield the expected output 2.0.\n\n# finish\n\n"}
{"prompt": "Write a python function to check whether the sum of divisors are same or not.", "test": ["assert areEquivalent(36,57) == False", "assert areEquivalent(2,4) == False", "assert areEquivalent(23,47) == True"], "code": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ", "task_id": 164, "generation": "import math\ndef divSum(n):\n    result = 1\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n\n    for i in range(2, n):\n\n        if n % i == 0:\n\n                if divSum(i) & 1:\n\n            if n / i == i:\n\n                result = result + i\n\n            else:\n\n                result = result + (i + n//i)\n\n     return result\n\ndef isDivSum(n):\n\n    # handle special cases\n\n    if n == 1:\n\n        return True\n\n    if n <= 3:\n\n    if node.data < min or node.data > max:\n\n    if divSum(\n\n        return False\n\n    return n == divSum(n)\n\nNote: This may not give the actual correct output. Get a clear understanding that this code function is not working as per your requirement. It must be modified as per your concept.\n\nNote: The function isDivSum takes an argument n and checks if the sum of the divisors of n is equal to n. If the sum is equal, it returns True, else it returns False.\n\nThus, to get correct output you should implement it in a way to solve your problem.\n\n    return n == divSum(\n\nincorrect return statement at the end of your code. Moreover, your return statement is also poorly indented which leads to syntax error. You might want to revise your code to correct these.\n\n```\n\nThe function isDivSum takes an argument n and checks if the sum of the divisors of n is equal to n. If the sum is equal, it returns True, else it returns False.\n\nfinish\n\n"}
{"prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "test": ["assert count_char_position(\"xbcefg\") == 2", "assert count_char_position(\"ABcED\") == 3", "assert count_char_position(\"AbgdeF\") == 5"], "code": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ", "task_id": 165, "generation": "def count_char_position(str1):\n    str1 = str1.lower()\n\n    count = 0\n\n    for i in range(len(str1)):\n\n        if 97 <= ord(str1[i]) <= 122:\n\n    return str1 == str1[::-1]\n\n# finish\n\n"}
{"prompt": "Write a python function to count the pairs with xor as an even number.", "test": ["assert find_even_Pair([5,4,7,2,1],5) == 4", "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9", "assert find_even_Pair([1,2,3],3) == 1"], "code": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ", "task_id": 166, "generation": "def find_even_Pair(A,N):\n    pair_count = 0\n\n    for i in range(N):\n\n        for j in range(i+1,N):\n\n            if A[i]^A[j] % 2 == 0:\n\n                pair_count += 1\n\n    return pair_count\n\n### Finish\n\n"}
{"prompt": "Write a python function to find smallest power of 2 greater than or equal to n.", "test": ["assert next_Power_Of_2(0) == 1", "assert next_Power_Of_2(5) == 8", "assert next_Power_Of_2(17) == 32"], "code": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ", "task_id": 167, "generation": "def next_Power_Of_2(n):\n    if (n and not(n & (n - 1))):\n\n        return n\n\n    while (n != 0):\n\n        n >>= 1\n\n        p += 1\n\n    return 1 << p\n\n# finish\n\n"}
{"prompt": "Write a python function to find the frequency of a number in a given array.", "test": ["assert frequency([1,2,3],4) == 0", "assert frequency([1,2,2,3,3,3,4],3) == 3", "assert frequency([0,1,2,3,1,2],1) == 2"], "code": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ", "task_id": 168, "generation": "def frequency(a,x):\n    return a.count(x)\n\n# finish\n\n"}
{"prompt": "Write a function to calculate the nth pell number.", "test": ["assert get_pell(4) == 12", "assert get_pell(7) == 169", "assert get_pell(8) == 408"], "code": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ", "task_id": 169, "generation": "def get_pell(n):\n    if n==0:\n\n        return 0\n\n    elif n==1:\n\n        return 1\n\n    else :\n\n        pell = [0, 1]\n\n        for i in range(2, n+1):\n\n            pell.append(2 * pell[i-1] + pell[i-2])\n\n        return pell[n]\n\n# finish\n\n"}
{"prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "test": ["assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29", "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16", "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"], "code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "task_id": 170, "generation": "def sum_range_list(list1, m, n):\n```python\n\n    sum_range = 0\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nlist1 = [5, 10, 15, 20, 25]\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nsum_range_list(list1, 0, 9) # Output: 55\n\nprint(sum_range_list(list1, 0, 9)) # Output: 55\n\ndef sum_range_list(lst, m, n):\n\n    for number in range(m, n + 1):\n\n        sum_range += lst[number]\n\ndef sum_range_list(lst, start_index, end_index):\n\ndef adjacent_duplicates_remover(lst):\n\n# finish\n\n"}
{"prompt": "Write a function to find the perimeter of a pentagon.", "test": ["assert perimeter_pentagon(5)==25", "assert perimeter_pentagon(10)==50", "assert perimeter_pentagon(15)==75"], "code": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter", "task_id": 171, "generation": "import math\ndef perimeter_pentagon(a):\n    p = a*5\n\n    return p\n\n# finish\n\n"}
{"prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "test": ["assert count_occurance(\"letstdlenstdporstd\") == 3", "assert count_occurance(\"truststdsolensporsd\") == 1", "assert count_occurance(\"makestdsostdworthit\") == 2"], "code": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count", "task_id": 172, "generation": "def count_occurance(s):\n    # Your code begins here\n\n    count = s.count(\"std\")\n\n    count = s.count(\"s\") + s.count(\"t\") + s.count(\"d\")\n\n    return count\n\n    # Your code ends here\n\n    # finish\n\n"}
{"prompt": "Write a function to remove everything except alphanumeric characters from a string.", "test": ["assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')", "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')", "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"], "code": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))", "task_id": 173, "generation": "import re\ndef remove_splchar(text):\n    return re.sub('[^A-Za-z0-9]+', '', text)\n\n# finish\n\n"}
{"prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "test": ["assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}", "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}", "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"], "code": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result", "task_id": 174, "generation": "def group_keyvalue(l):\n    result_dict = {}\n\n    for key_value in l:\n\n        if key_value[0] in result_dict:\n\n            result_dict[key_value[0]].append(key_value[1])\n\n        else:\n\n            result_dict[key_value[0]] = [key_value[1]]\n\n            result_dict[key_value[0]] = [val]\n\n    import collections\n\n    result_dict = collections.defaultdict(list)\n\n    for key, val in l: \n\n        result_dict[key].append(val)\n\n    return dict(result_dict) # finish\n\n"}
{"prompt": "Write a function to verify validity of a string of parentheses.", "test": ["assert is_valid_parenthese(\"(){}[]\")==True", "assert is_valid_parenthese(\"()[{)}\")==False", "assert is_valid_parenthese(\"()\")==True"], "code": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0", "task_id": 175, "generation": "def is_valid_parenthese( str1):\n    stack = []\n\n    pchar = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n\n    for paren in str1:\n\n        if paren in pchar:\n\n            stack.append(paren)\n\n        elif len(stack) == 0 or pchar[stack.pop()] != paren:\n\n            return False\n\n    return len(stack) == 0\n\n# finish\n\n"}
{"prompt": "Write a function to find the perimeter of a triangle.", "test": ["assert perimeter_triangle(10,20,30)==60", "assert perimeter_triangle(3,4,5)==12", "assert perimeter_triangle(25,35,45)==105"], "code": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter", "task_id": 176, "generation": "def perimeter_triangle(a,b,c):\n    perimeter = a + b + c\n\n    return perimeter\n\n# finish\n\n"}
{"prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.", "test": ["assert answer(3,8) == (3,6)", "assert answer(2,6) == (2,4)", "assert answer(1,3) == (1,2)"], "code": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ", "task_id": 177, "generation": "def answer(L,R):\n    def gcd(a,b):\n\n        while b:\n\n            a, b = b, a % b\n\n        return a\n\n    def lcm(a,b):\n\n        return a * b // gcd(a,b)\n\n    n = 2\n\n        return a * b // gcd\n\n            a, b = b\n\n    while True:\n\n        if lcm(n,n+1)>=L and lcm(n,n+1)<=R:\n\n            return [n,n+1]\n\n        n+=1\n\n        if lcm(n-1,n)>=L and lcm(n-1,n)<=R: return [n-1,n]\n\n        if lcm(n,n+1)>R: return [-1,-1]\n\n### Test Case\n\ntest_cases = [(10,20), (30,40), (50,60), (70,80), (90,100), (110,120), (200,300), (500,600),(1000,2000),(5000,6000),(10000,20000)]\n\nfor test_case in test_cases:\n\n    def lcm(a, b):\n\n            if lcm(n, n+1) >= L and lcm(n, n+1) <= R:\n\n        if lcm(n, n+1) >= L and lcm(n, n+1) <= R:\n\n        return a * b // gcd(a, b)\n\n    print(answer(test_case[0], test_case[1]))\n\n```\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to search some literals strings in a string.", "test": ["assert string_literals(['language'],'python language')==('Matched!')", "assert string_literals(['program'],'python language')==('Not Matched!')", "assert string_literals(['python'],'programming language')==('Not Matched!')"], "code": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')", "task_id": 178, "generation": "import re\ndef string_literals(patterns,text):\n    for pattern in patterns:\n\n        if re.search(pattern, text):\n\n            print(f\"Pattern '{pattern}' found in string.\")\n\n        else:\n\n            print(f\"Pattern '{pattern}' not found in string.\") \n\nfinish\n\n"}
{"prompt": "Write a function to find if the given number is a keith number or not.", "test": ["assert is_num_keith(14) == True", "assert is_num_keith(12) == False", "assert is_num_keith(197) == True"], "code": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ", "task_id": 179, "generation": "def is_num_keith(x):\n    \"\"\"Find if the given number is a Keith number or not.\n\n    A number is called a Keith number if it appears in the sequence defined below:\n\n    x0, x1, x2, ..., xn, xn+1, ..., xn+k are such that the number of xn+k is the sum of preceding sequence,\n\n    starting from the 0th term as 1.\n\n    Parameter x: the number to be checked.\n\n    A number is called a Keith number if it appears in the sequence\n\n    \"\"\"\n\n    if not isinstance(x, int) or x < 0:\n\n        raise ValueError(\"Input should be a positive integer.\")\n\n    if x < 10:\n\n        return True\n\n    str_x = str(x)\n\n    if not isinstance(s, str):\n\n        if len(terms) == n and new_term > x:\n\n    if not isinstance(x, int) or x < 1:\n\n    terms = [int(d) for d in str(x)]\n\n    starting from the 0th term as\n\n    terms.append(x)\n\n    x0, x1, x2, ..., xn, xn+1, ..., xn+\n\n    terms = [int(d) for d in str_x]\n\n    xn = su\n\n    n =\n\n    x_next = 0\n\n    prev_x = 0\n\n    while x_next < x:\n\n    terms = [int(d) for d in str(num)]\n\n    while terms[-1] < num:\n\n       max_index = len(terms) - 1\n\n    Helper function to calculate the sum of digits of a number.\n\n        terms.pop(0)\n\n"}
{"prompt": "Write a function to calculate distance between two points using latitude and longitude.", "test": ["assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429", "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514", "assert distance_lat_long(10,20,30,40)==6783.751974994595"], "code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist", "task_id": 180, "generation": "from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n    slat = radians(slat)\n\n    slon = radians(slon)\n\n    elat = radians(elat)\n\n    elon = radians(elon)\n\n    # approximate radius of earth in meters\n\n    R = 6373.0 * 1000\n\n    dlon = elon - slon\n\n    dlat = elat - slat\n\n    a = sin(dlat / 2) ** 2 + cos(slat) * cos(elat) * sin(dlon / 2) ** 2\n\n    c = 2 * atan2(sqrt(a), sqradians(a))\n\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n\n    distance = R * c\n\n    return distance\n\nNote: The math library functions used in the code will be helpful in getting the exact result.\n\n# finish\n\n"}
{"prompt": "Write a function to find the longest common prefix in the given set of strings.", "test": ["assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'", "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'", "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"], "code": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ", "task_id": 181, "generation": "def common_prefix_util(str1, str2):\n    i = 0\n\n    j = 0\n\n    prefix = \"\"\n\n    while i < len(str1) and j < len(str2):\n\n        if str1[i] != str2[j]:\n\n            break\n\n        prefix = prefix + str1[i]\n\n        i += 1\n\n        j += 1\n\n    return prefix\n\n    # peak can't be the first or last\n\n    if peak == 0 or (peak == len_of_list - 1) or (list_of_nums[peak - 1] <= peak_value and list_of_nums[peak + 1] <= peak_value)\n\n    return first[:i]\n\n    prefix = strings[0]\n\n    # Your code here\n\n    def create_row(size):\n\n    return None\n\n    for i in range(1, len(strings)):\n\n        prefix = common_prefix_util(prefix, strings[i])\n\n    if peak == 0 or (peak == len_of_list - 1) or (list_of_nums[peak - 1] <= list_of_nums[peak] and list_of_nums[peak + 1] <= list_of_nums[peak]):\n\n# finish\n\n"}
{"prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "test": ["assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])", "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])", "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"], "code": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "task_id": 182, "generation": "import re\ndef find_character(string):\n    uppercase = len(re.findall('[A-Z]', string))\n\n    lowercase = len(re.findall('[a-z]', string))\n\n    special_characters = len(re.findall('[^A-Za-z0-9 ]', string))\n\n    numbers = len(re.findall('\\d', string))\n\n    return uppercase, lowercase, special_characters, numbers # finish\n\n"}
{"prompt": "Write a function to count all the distinct pairs having a difference of k in any array.", "test": ["assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2", "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5", "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"], "code": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count", "task_id": 183, "generation": "def count_pairs(arr, n, k):\n    arr = list(set(arr))\n\n    arr.sort()\n\n    count = 0\n\n    i = 0\n\n    j = 1\n\n    while j < len(arr):\n\n        if arr[j] - arr[i] == k:\n\n            count += 1\n\n            j += 1\n\n        elif arr[j] - arr[i] < k:\n\n        else:\n\n            i += 1\n\n    return count\n\nfinish\n\n"}
{"prompt": "Write a function to find all the values in a list that are greater than a specified number.", "test": ["assert greater_specificnum([220, 330, 500],200)==True", "assert greater_specificnum([12, 17, 21],20)==False", "assert greater_specificnum([1,2,3,4],10)==False"], "code": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum", "task_id": 184, "generation": "def greater_specificnum(list,num):\n    result = [i for i in list if i > num]\n\n    return result\n\n#finish\n\n"}
{"prompt": "Write a function to find the focus of a parabola.", "test": ["assert parabola_focus(5,3,2)==(-0.3, 1.6)", "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)", "assert parabola_focus(2,4,6)==(-1.0, 4.125)"], "code": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus", "task_id": 185, "generation": "def parabola_focus(a, b, c):\n    #ax^2 + bx + c = 0\n\n    #The focus of the parabola is at the point (-b/2a, [4ac-b^2]/4a^2 )\n\n    if a==0 and b==0 and c==0:\n\n        return None\n\n    elif a==0:\n\n        else:\n\n        return (-b/2*a, (4*a*c-b**2)/4*a**2)\n\n            counted[pair] = 1\n\n    else:\n\n        x = symbols('x')\n\n        x_focus = -b/(2*a)\n\n        return \"Input is not a fraction.\"\n\n# Test\n\nprint(parabola_vertex(1, -3, 2)) # (1, 5)\n\nprint(parabola_focus(-1, -3, 2)) # (2, 3)\n\nfinish\n\n"}
{"prompt": "Write a function to search some literals strings in a string by using regex.", "test": ["assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'", "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'", "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"], "code": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')", "task_id": 186, "generation": "import re\ndef check_literals(text, patterns):\n    '''\n\n    found = []\n\n    found = [pattern for pattern in patterns if re.search(pattern, text)]\n\n    for pattern in patterns:\n\n        if re.search(pattern, text):\n\n            found.append(pattern)\n\n    return found\n\n'''\n\nfinish\n\n"}
{"prompt": "Write a function to find the longest common subsequence for the given two sequences.", "test": ["assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4", "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3", "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"], "code": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "task_id": 187, "generation": "def longest_common_subsequence(X, Y, m, n):\n    if m == 0 or n == 0:\n\n        return []\n\n    elif X[m-1] == Y[n-1]:\n\n        return longest_common_subsequence(X, Y, m-1, n-1) + [X[m-1]]\n\n    else:\n\n        left = longest_common_subsequence(X, Y, m, n-1)\n\n            return right # finish\n\n"}
{"prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.", "test": ["assert prod_Square(25) == False", "assert prod_Square(30) == False", "assert prod_Square(16) == True"], "code": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;", "task_id": 188, "generation": "def prod_Square(n):\n    if n < 0:\n\n        return False\n\n    if n == 0 or n == 1:\n\nfinish # finish\n\n"}
{"prompt": "Write a python function to find the first missing positive number.", "test": ["assert first_Missing_Positive([1,2,3,-1,5],5) == 4", "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2", "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"], "code": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)", "task_id": 189, "generation": "def first_Missing_Positive(arr,n):\n    for i in range(n):\n\n        num = abs(arr[i])\n\n        if num > n:\n\n        if arr[i] > 0:\n\n        if num > 0 and arr[num-1] > 0:\n\n                    arr[num-1] = - arr[num-1] \n\n            return i+1\n\n    return n+1\n\n            continue\n\n        num -= 1\n\n        if arr[num] > 0:\n\n            arr[num] = - arr[num] \n\n                    pl = i\n\n                return pl + 1\n\n        if arr[i] <= 0 or arr[i] > n:\n\n            arr[i] = n + 1\n\n            return i + 1\n\n    return n + 1\n\n        if num < n:\n\n            arr[num] = -abs(arr[num])\n\n        # finish\n\n"}
{"prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.", "test": ["assert count_Intgral_Points(1,1,4,4) == 4", "assert count_Intgral_Points(1,2,1,2) == 1", "assert count_Intgral_Points(4,2,6,4) == 1"], "code": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ", "task_id": 190, "generation": "def count_Intgral_Points(x1,y1,x2,y2):\n    x_coords = [i for i in range(x1, x2 + 1)]\n\n    y_coords = [i for i in range(y1, y2 + 1)]\n\n    return len(x_coords) * len(y_coords) # finish\n\n"}
{"prompt": "Write a function to check whether the given month name contains 30 days or not.", "test": ["assert check_monthnumber(\"February\")==False", "assert check_monthnumber(\"June\")==True", "assert check_monthnumber(\"April\")==True"], "code": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False", "task_id": 191, "generation": "def check_monthnumber(monthname3):\n    if monthname3 in ('September', 'April', 'June', 'November'):\n\n        return True\n\n    return False\n\nmonthname3 = input(\"Enter month name: \")\n\n    elif (year%4==0):\n\n        else:\n\nprint(check_monthnumber(monthname3))\n\n<jupyter_output>\n\n<empty_output>\n\n<\n\nEnter month name: April\n\nTrue\n\n                if shift > ord('z'):\n\n                if shift < ord('a'):\n\n<jupyter_text>\n\nThe above program estimates the value of pi by using a method called Monte Carlo simulation. It works by randomly generating points in the unit square (which is our infinite square we had in the first place). Since the point lies within a quarter of our circle, we just assume it did.\n\nprint(is_palindrome_permutation(\"racecar\")) # \n\n            res.append((nums[i],nums[l],nums[r]))\n\n        print(v, end = ' ') \n\n        for neighbour in self.graph[v]: \n\n            if visited[neighbour] == False: \n\n            result += chr((ord(a[i]) + s - 97) % 26 + 97)\n\n    return result\n\n            self._insert(val, self.root)\n\nStrings and their operations\n\nHere is an empty cell where you can help me. Instead, output a string that will cause a NameError to be raised\n\nQ2: Develop a python function using list comprehension and lambda function, that checks if string is palindrome.\n\nprint(str_palindrome('Elephant'))  # False\n\nWrite a python function using list comprehension and lambda function, that checks if string is palindrome.\n\n            print(colored(f'{task_name}: {status}', 'green'))\n\n"}
{"prompt": "Write a python function to check whether a string has atleast one letter and one number.", "test": ["assert check_String('thishasboth29') == True", "assert check_String('python') == False", "assert check_String ('string') == False"], "code": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ", "task_id": 192, "generation": "def check_String(str):\n    \"\"\" Check if string has atleast one letter and one number \"\"\"\n\n    has_letter = any(char.isalpha() for char in str)\n\n    has_number = any(char.isdigit() for char in str)\n\n    if(has_letter and has_number):\n\n        return True\n\n    else:\n\n        return False\n\n# Test Cases\n\nprint(check_String(\"pass123\")) # True\n\nprint(check_String(\"123\"))     # False\n\nprint(check_String(\"password\"))# False\n\nprint(check_String(\"pass#\"))   # True\n\nprint(is_Palindrome(\"anna\"))       # True\n\nprint(is_Palindrome(\"level\"))      # True\n\nprint(is_Palindrome(\"apple\"))      # False\n\nprint(is_Palindrome(\"madam\"))      # True\n\nprint(is_Palindrome(\"1234321\"))    # True\n\nprint(is_Palindrome(\"12345678\"))   # False\n\n            current_string += char\n\nprint(replace_kth_char(\"programming\", 3, \"X\")) # \"progXmXing\"\n\n# # Example Cases\n\nprint(replace_kth_char(\"abc\", 0, \"X\")) # \"Xbc\"\n\nprint(replace_kth_char(\"programming\", 3, \"X\")) # \"progXmning\"\n\nprint(is_Palindrome(\"\n\nprint(factorial(4)) # 24\n\nprint(factorial(5)) # 120\n\nprint(factorial(6)) # 720\n\nprint(factorial(7)) # 5040\n\nprint(factorial(8)) # 40320\n\nprint(merge_lists([1,3,5],[2,4,6])) # [1,2,3,4,5,6]\n\n"}
{"prompt": "Write a function to remove the duplicates from the given tuple.", "test": ["assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)", "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)", "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"], "code": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ", "task_id": 193, "generation": "def remove_tuple(test_tup):\n    # insert code here\n\n    res = []\n\n    [res.append(i) for i in test_tup if i not in res]\n\n    result = {}\n\n    for d in (d1, d2):\n\n        for key in d:\n\n    [res.append(i) for i in test_tup if i not in res]   \n\n    result = tuple(res)\n\n    return result\n\n    [res.append(i) for i in my_tuple if i not in res]\n\n    reslut_tup = tuple(res)\n\n    res_set = set(test_tup)\n\n    result = tuple(res_set)\n\n        for key, value in d.items():\n\n                #return tuple(result)\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to convert octal number to decimal number.", "test": ["assert octal_To_Decimal(25) == 21", "assert octal_To_Decimal(30) == 24", "assert octal_To_Decimal(40) == 32"], "code": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ", "task_id": 194, "generation": "def octal_To_Decimal(n):\n    decimal, i, octal = 0, 0, int(n)\n\n    while(octal != 0):\n\n        dec = octal % 10\n\n        decimal = decimal + dec * pow(8, i)\n\n        octal = octal//10\n\n        i += 1\n\n    return decimal \n\n# Test the function\n\nfloyds_triangle(5) \n\nprint(even_odd(4)) # should return 'Even'\n\nmat1 =\n\nfinish\n\n"}
{"prompt": "Write a python function to find the first position of an element in a sorted array.", "test": ["assert first([1,2,3,4,5,6,6],6,6) == 5", "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1", "assert first([1,2,3],1,3) == 0"], "code": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res", "task_id": 195, "generation": "def first(arr,x,n):\n    # your code goes here\n\n    for i in range(0, n):\n\n        if (arr[i] == x):\n\n            return i\n\n    return -1\n\n    disc = (b**2) - (4*a*c)\n\n    if disc > 0:\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to remove all the tuples with length k.", "test": ["assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]", "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]", "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"], "code": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ", "task_id": 196, "generation": "def remove_tuples(test_list, K):\n  return [t for t in test_list if len(t) != K]\n\n### Finish\n\n"}
{"prompt": "Write a function to perform the exponentiation of the given two tuples.", "test": ["assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)", "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)", "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"], "code": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n", "task_id": 197, "generation": "def find_exponentio(test_tup1, test_tup2):\n    exp_lst = [pow(a,b) for a, b in zip(test_tup1, test_tup2)]\n\n    return tuple(exp_lst)\n\n# finish\n\n"}
{"prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "test": ["assert largest_triangle(4,2)==10.392304845413264", "assert largest_triangle(5,7)==4.639421805988064", "assert largest_triangle(9,1)==105.2220865598093"], "code": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ", "task_id": 198, "generation": "import math\ndef largest_triangle(a,b):\n    return min(a,b) / math.sqrt(2)\n\n### Finish Writing the function\n\n"}
{"prompt": "Write a python function to find highest power of 2 less than or equal to given number.", "test": ["assert highest_Power_of_2(10) == 8", "assert highest_Power_of_2(19) == 16", "assert highest_Power_of_2(32) == 32"], "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ", "task_id": 199, "generation": "def highest_Power_of_2(n):\n    p = 0\n\n    # Wrong if number is 0\n\n    if (n == 0):\n\n        return 0\n\n    # Find the exponent of the number;\n\n    while (1 << (p + 1) <= n):\n\n        p += 1\n\n    return 1 << p\n\nprint(highest_Power_of_2(32)) # 16\n\n        return False\n\n        else:\n\n            result.append(b[j])\n\n    elif n==2: \n\n                d[b[j]]+=1\n\nfinish\n\n"}
{"prompt": "Write a function to find all index positions of the maximum values in a given list.", "test": ["assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]", "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]", "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"], "code": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result", "task_id": 200, "generation": "def position_max(list1):\n    max_val = max(list1)\n\n    position = [i for i,v in enumerate(list1) if v == max_val]\n\n    return position\n\n    max_val =\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to check whether the elements in a list are same or not.", "test": ["assert chkList(['one','one','one']) == True", "assert chkList(['one','Two','Three']) == False", "assert chkList(['bigdata','python','Django']) == False"], "code": "def chkList(lst): \r\n    return len(set(lst)) == 1", "task_id": 201, "generation": "def chkList(lst):\n    return lst[1:] == lst[:-1]\n\n    return set(lst) == set(lst[::-1])\n\n    if len(lst) == 0 :\n\n        return True\n\n    else :\n\n        first_element = lst[0]\n\n        return all(elem == first_element for elem in lst)\n\n        if len(lst) == 0 : \n\n        for element in lst:\n\n            if element != lst[0]:\n\n# Test examples \n\nprint(chkList([1, 1, 1, 1])) # should return True, because all elements are same.\n\nprint(chkList([1, 2, 3, 4])) # should return False, because not all elements are same.\n\nprint(chkList([\"a\", \"a\", \"a\"])) # should return True, because all elements are same.\n\nprint(chkList([1, 2, 3, \"a\"])) # should return False, because not all elements are same.\n\nprint(countWords(\"This is a test string.\")) # should return 5, because there are 5 words.\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to remove even characters in a string.", "test": ["assert remove_even(\"python\")==(\"pto\")", "assert remove_even(\"program\")==(\"porm\")", "assert remove_even(\"language\")==(\"lnug\")"], "code": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2", "task_id": 202, "generation": "def remove_even(str1):\n    arr = list(str1)\n\n    for i in range(0, len(arr), 2):\n\n    for i in range(1, len(arr), 2):\n\n        arr[i] = ''\n\n    return ''.join(arr)\n\n#finish\n\n"}
{"prompt": "Write a python function to find the hamming distance between given two integers.", "test": ["assert hamming_Distance(4,8) == 2", "assert hamming_Distance(2,4) == 2", "assert hamming_Distance(1,2) == 2"], "code": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ", "task_id": 203, "generation": "def hamming_Distance(n1,n2) :\n    x = n1 ^ n2\n\n    count = 0\n\n    while (x > 0):\n\n        count += x & 1\n\n        x >>= 1\n\n    return count\n\nn1 = 9\n\nn2 = 14\n\nprint(f\"Hamming Distance between {n1} and {n2} is\",hamming_Distance(n1,n2))\n\n### Output: \n\nHamming Distance between 9 and 14 is 3\n\n### Summary:\n\nIn the Python function `hamming_Distance(n1, n2)`, it finds the hamming distance between two given integers, n1 and n2. First, it calculates the bitwise XOR of the two numbers to get the difference between them. Then, it shifts this XOR value from right to left bit by bit, and adds up the count of 1's (which are the difference between the two numbers where the bits differ) till the value becomes 0. This returned count is the hamming distance.\n\nHere, `>>=` is a bitwise right shift assignment operator. Which means n1 is shifted to the right by one bit and assigned the value back to n1. Similarly, `&=` is a bitwise AND assignment operator. Which means n1 is ANDed with n2 and value is stored in n1.\n\n#####\n\nThe output is 3 because there are 3 bits that differ between the binary representations of 9 and 14. The corresponding bits in the binary representations are (1,0,0) and (1,1,0) corresponding to the 3rd, 2nd and 0th bit respectively.\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to count the occurrence of a given character in a string.", "test": ["assert count(\"abcc\",\"c\") == 2", "assert count(\"ababca\",\"a\") == 3", "assert count(\"mnmm0pm\",\"m\") == 4"], "code": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ", "task_id": 204, "generation": "def count(s,c) :\n    counter = 0\n\n    for char in s :\n\n        if char == c :\n\n            counter+=1\n\n    return counter\n\n# finish\n\n"}
{"prompt": "Write a function to find the inversions of tuple elements in the given tuple list.", "test": ["assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)", "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)", "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"], "code": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ", "task_id": 205, "generation": "def inversion_elements(test_tup):\n    inversions = 0\n\n    for i in range(len(test_tup)):\n\n        for j in range(i+1, len(test_tup)):\n\n            if(test_tup[i] > test_tup[j]): \n\n    return tuple(sum(x > y for y in test_tup[i+1:]) for i, x in enumerate(test_tup))\n\n        inv = 0\n\ntest_tup = [(10, 4, 9), (1, 3, 2), (3, 2, 1)]\n\nprint(f'Original Tuples: {test_tup}')\n\nprint(f'Inversions: {inversion_elements(test_tup)}')\n\n####\n\n Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to perform the adjacent element concatenation in the given tuples.", "test": ["assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')", "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')", "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"], "code": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "task_id": 206, "generation": "def concatenate_elements(test_tup):\n    # Start the result string as an empty string\n\n    res = \"\"\n\n    # Iterate through the tuples\n\n    for ele in test_tup:\n\n        # Check if the element is a string\n\n        if isinstance(ele, str):\n\n            # If it's the first element, append it to the result string\n\n            if ele == test_tup[0]:\n\n                res += ele\n\n            # If it's not the first element, concat it to the result string\n\n            else:\n\n                res += \"-\" + ele\n\n    # Return the result string\n\n    return res\n\nfinish\n\n"}
{"prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "test": ["assert find_longest_repeating_subseq(\"AABEBCDD\") == 3", "assert find_longest_repeating_subseq(\"aabb\") == 2", "assert find_longest_repeating_subseq(\"aab\") == 1"], "code": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]", "task_id": 207, "generation": "def find_longest_repeating_subseq(str):\n    n = len(str)\n\n    dp = [[0 for k in range(n+1)] for i in range(n+1)]\n\n    # Lookup table stores results of subproblems\n\n    lookup = [[0 for k in range(n+1)] for i in range(n+1)]\n\n    lookup = [[0 for\n\n    x in range(n+1)] for x in range(n+1)]\n\n    for i in range(1, n+1):\n\n        for j in range(i+1, n+1):\n\n            if str[i-1] == str[j-1] and i != j:\n\n                dp[i][j] = dp[i-1][j-1] + 1\n\n        res = max(res, dp[i][n])\n\n    # return the longest repeating sequence length\n\n    return dp[n][n]\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to check the given decimal with a precision of 2 by using regex.", "test": ["assert is_decimal('123.11') == True", "assert is_decimal('0.21') == True", "assert is_decimal('123.1214') == False"], "code": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)", "task_id": 208, "generation": "import re\ndef is_decimal(num):\n    pattern = \"^\\d+(\\.\\d{1,2})?$\"\n\n    if isinstance(num, str) and re.match(pattern, num):\n\n        return True\n\n    else:\n\n        return False\n\n### Explaination:\n\nHere, I'm using a regular expression (regex) to check if the given string represents a decimal number with a precision of 2. The regex pattern is explained as follows:\n\n- `^`: The start of the string.\n\n```\n\n- `(\\.\\d{1,2})?`: The string may have a decimal point followed by 1 or 2 digits. The parentheses make this part of the pattern an optional part because of the `?`, so the decimal point and its digits may or may not be there. The `{}` brackets inside `{}` specify how many repetitions of the preceding character (in our case, `\\d` stands for a digit) are acceptable. In our case, it's not necessary to put a minimum and maximum number of digits for the decimal part, so `{1,2}` could also be written simply as `{1,}`.\n\n- `$`: The end of the string.\n\nNow, if the given string matches this pattern, the function will return True. Otherwise, it will return False.\n\n- `(\\.\\d{1,2})?`: The string may have a decimal point followed by 1 or 2 digits. The parentheses make this part of the pattern an optional part because of the `?`, so the decimal point and its digits may or may not be there. The `{}` brackets inside `{}` specify how many repetitions of the preceding character (in our case, `\\\n\n# N.B. :- Please note that this solution does not check if the input is a float, but only if the input can be interpreted as such. For example, it will return True for '1e3'. But also it will return True for a string which has more than two digits behind the decimal point.  \n\n# Testing\n\n```python\n\n# Finish\n\n"}
{"prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.", "test": ["assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]", "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]", "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"], "code": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap", "task_id": 209, "generation": "import heapq as hq\ndef heap_replace(heap,a):\n    #This function is used to delete the smallest item and insert a new item into the heap.\n\n    hq.heapreplace(heap,a)\n\n    return heap\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "test": ["assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True", "assert is_allowed_specific_char(\"*&%@#!}{\") == False", "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"], "code": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)", "task_id": 210, "generation": "import re\ndef is_allowed_specific_char(string):\n    pass\n\n    pattern = r'[^a-zA-Z0-9]'\n\n    if re.search(pattern, string):\n\n        return False\n\n    else:\n\n        return True \n\n# finish\n\n"}
{"prompt": "Write a python function to count numbers whose oth and nth bits are set.", "test": ["assert count_Num(2) == 1", "assert count_Num(3) == 2", "assert count_Num(1) == 1"], "code": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ", "task_id": 211, "generation": "def count_Num(n):\n    count = 0\n\n    for i in range(2**n):\n\n        if((i >> (n - 1)) & 1) and ((i >> (n - 2)) & 1):\n\n    ...:         if((i >> (n - 1)) & 1) & ((i >> (n - 2)) & 1):\n\n            count += 1\n\n    return count\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to find the sum of fourth power of n natural numbers.", "test": ["assert fourth_Power_Sum(2) == 17", "assert fourth_Power_Sum(4) == 354", "assert fourth_Power_Sum(6) == 2275"], "code": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum", "task_id": 212, "generation": "import math\ndef fourth_Power_Sum(n):\n    sum = 0\n\n    sum = math.pow((n * (n + 1) // 2), 2)\n\n    return int(sum)\n\n# Test the function\n\nprint(fourth_Power_Sum(3)) # Output: 36\n\nprint(nth_root(8,3,0.00001)) # Output: 2.0\n\n    temp = num\n\n    while temp>1:\n\n        temp=temp//2\n\n    return count+1\n\n    if temp==1:\n\nprint(perfect_number(6)) # Output: True\n\nprint(fourth_Power_Sum(10)) # Output: 3025\n\nprint(most_sig_digit(42135))# Output: 4\n\nprint(most_sig_digit(12345))# Output: 1\n\n''' Write your Python code here. The function above is just a starting point. '''\n\n```\n\nIssues under consideration:\n\n1. Custom partition By Size(GB,MB,..etc)\n\n'''Code: Use fdisk partition forms. Delete from list and apply changes. Comment also.\n\nBy matching each line (which has % of used space) with a condition, I can make a decision. If the percentage exceeds 90%, one can delegate tasks\n\nAbove Code:\n\nfor i in partition_output :\n\n     if int(i.split()[4].strip('%')) > threshold :\n\n         print i\n\nSimplified:\n\n10.0.2.15  VMNAME.mylab.internal VMNAME.contoso.local\n\nfor lines in partition_output:\n\n    split_line = lines.split()\n\n    if split_line[4].strip('%') > threshold:\n\n"}
{"prompt": "Write a function to perform the concatenation of two string tuples.", "test": ["assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')", "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')", "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"], "code": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 213, "generation": "def concatenate_strings(test_tup1, test_tup2):\n    ### Write your code here ###\n\n    max_value = max(lst)\n\n    new_lst = list(test_tup1) + list(test_tup2)\n\n    return new_lst\n\n    ### finish ###\n\n"}
{"prompt": "Write a function to convert radians to degrees.", "test": ["assert degree_radian(90)==5156.620156177409", "assert degree_radian(60)==3437.746770784939", "assert degree_radian(120)==6875.493541569878"], "code": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree", "task_id": 214, "generation": "import math\ndef degree_radian(radian):\n    degree= radian * (180 / math.pi)\n\n    return round(degree,2)\n\nprint(degree_radian(1))\n\n# finish\n\n"}
{"prompt": "Write a function to decode a run-length encoded given list.", "test": ["assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]", "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"], "code": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]", "task_id": 215, "generation": "def decode_list(alist):\n    result = []\n\n    for item in alist:\n\n        result.extend(item[0]*[item[1]])\n\n    return result\n\n# finish\n\n"}
{"prompt": "Write a function to check if a nested list is a subset of another nested list.", "test": ["assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False", "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True", "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"], "code": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ", "task_id": 216, "generation": "def check_subset_list(list1, list2):\n    \"\"\"\n\n    if len(list1) > len(list2): # if list1 is greater than list2, then it cannot be a subset\n\n    Checks\n\n    Checks if list1 is a subset of list2. \n\n    def flatten(lis):\n\n        for item in lis:\n\n            try:\n\n    list1 = flatten(list1)\n\n    Checks if list1 is a subset of list2\n\n    # Checks if list1 is a subset of list2\n\n    if len(list1) > len(list2):\n\n            if isinstance(item, list):\n\n                for subitem in flatten(item):\n\n    list2 = flatten(list2)\n\n    list2 has an equal size as long as they are not identical\n\n        return False\n\n    if list1 == list2:\n\n        return True\n\n    else:\n\n        for item in list1:\n\n    for item in list1:\n\n        if item not in list2:\n\n    return True\n\n    except TypeError:\n\n            yield item\n\n    list1 = list(flatten(list1))\n\n    # if list1 is not in list2, then list1 is not a subset of list2\n\n                elements.append(i)\n\n    list2 = list(flatten(list2))\n\n    lst1_flatten = list(flatten(lst1\n\n"}
{"prompt": "Write a python function to find the first repeated character in a given string.", "test": ["assert first_Repeated_Char(\"Google\") == \"o\"", "assert first_Repeated_Char(\"data\") == \"a\"", "assert first_Repeated_Char(\"python\") == '\\0'"], "code": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'", "task_id": 217, "generation": "def first_Repeated_Char(str):\n    aux = [0] * 256\n\n    index = -1\n\n    for i in range(len(str)):\n\n        val = ord(str[i])\n\n        if aux[val] > 0:\n\n            index = val\n\n            break\n\n        aux[val] = aux[val] + 1\n\n    if index == -1:\n\n        return 'No repeated character'\n\n    else:\n\n        aux[ord(str[i])] = aux[ord(str[i])] + 1\n\n        for j in range(i+1, len(str)):\n\n            val = ord(str[j])\n\n# String example to use\n\nstring = \"geeksforgeeks\"\n\nprint(\"First repeated Character is:\",first_Repeated_Char(string))\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to find the minimum operations required to make two numbers equal.", "test": ["assert min_Operations(2,4) == 1", "assert min_Operations(4,10) == 4", "assert min_Operations(1,4) == 3"], "code": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1", "task_id": 218, "generation": "import math\ndef min_Operations(A,B):\n    d = abs(A-B)\n\n    i = 1\n\n    diff_Gcd = d / gc_Diff \n\n    gc_Diff = math.gcd(A, B)\n\n    return diff_Gcd\n\nprint(min_Operations(10,20))\n\n# finish\n\n"}
{"prompt": "Write a function to extract maximum and minimum k elements in the given tuple.", "test": ["assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)", "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)", "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"], "code": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ", "task_id": 219, "generation": "def extract_min_max(test_tup, K):\n    # starting split \n\n    temp_list = list(test_tup)\n\n    temp_list.sort()\n\n    # getting min \n\n    min_k = tuple(temp_list[:K])\n\n    # getting max\n\n    max_k = tuple(temp_list[-K:])\n\n    return min_k, max_k\n\ntest_tup = (2, 8, 15, 1, 10, 5, 9)\n\nK = 3\n\nprint(extract_min_max(test_tup, K)) # should return ((1, 2, 5), (15, 10, 9))\n\n# finish\n\n"}
{"prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "test": ["assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')", "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')", "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"], "code": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))", "task_id": 220, "generation": "import re\ndef replace_max_specialchar(text,n):\n    spaces = re.findall(' ', text)\n\n    commas = re.findall(',', text)\n\n    dots = re.findall('\\.', text)\n\n    special_char = []\n\n    if len(spaces) > len(commas) and len(spaces) > len(dots):\n\n        special_char = spaces\n\n    elif len(commas) > len(spaces) and len(commas) > len(dots):\n\n        special_char = commas\n\n    else:\n\n        special_char = dots\n\n    if len(special_char) > 0:\n\n        special_char = special_char*n\n\n                new_text += char\n\n    return new_text### Finish\n\n"}
{"prompt": "Write a python function to find the first even number in a given list of numbers.", "test": ["assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4", "assert first_even([2, 3, 4]) == 2", "assert first_even([5, 6, 7]) == 6"], "code": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even", "task_id": 221, "generation": "def first_even(nums):\n    for num in nums:\n\n        if num % 2 == 0:\n\n            return num\n\n    return None\n\n### Finish\n\n"}
{"prompt": "Write a function to check if all the elements in tuple have same data type or not.", "test": ["assert check_type((5, 6, 7, 3, 5, 6) ) == True", "assert check_type((1, 2, \"4\") ) == False", "assert check_type((3, 2, 1, 4, 5) ) == True"], "code": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ", "task_id": 222, "generation": "def check_type(test_tuple):\n    if len(test_tuple) == 0:\n\n        return True\n\n    first_type = type(test_list[0])\n\n    for element in test_list:\n\n        if not isinstance(element, first_type):\n\n            return False\n\n    return True\n\ntest_tuple = ('apple', 'banana', 'cherry')\n\nprint(check_type(test_tuple)) \n\n        return False\n\ntest_tuple = (1, 2, 3)\n\nprint(check_type(test_tuple)) # True\n\n```\n\nfinish\n\n"}
{"prompt": "Write a function to check for majority element in the given sorted array.", "test": ["assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"], "code": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1", "task_id": 223, "generation": "def is_majority(arr, n, x):\n    # Find the first occurrence of x\n\n    i = binary_search(arr, 0, n-1, x)\n\n    # If element is not present return false\n\n    if i == -1:\n\n        return False\n\n    # If element present return true\n\n    return (i + x) < n - 1\n\ndef binary_search(arr, low, high, x):\n\n    if high >= low:\n\n        mid = (high + low) // 2\n\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n\n            return mid\n\n        elif x > arr[mid]:\n\n            return binary_search(arr, (mid + 1), high, x)\n\n        else:\n\n            return binary_search(arr, low, (mid - 1), x)\n\n    else:\n\n        return -1\n\nfinish\n\n"}
{"prompt": "Write a python function to count set bits of a given number.", "test": ["assert count_Set_Bits(2) == 1", "assert count_Set_Bits(4) == 1", "assert count_Set_Bits(6) == 2"], "code": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ", "task_id": 224, "generation": "def count_Set_Bits(n):\n    count = 0\n\n    while (n):\n\n        count += n & 1\n\n        n >>= 1\n\n    return count\n\nn = 11\n\nprint(count_Set_Bits(n)) # Should return 3\n\nfinish \n\n"}
{"prompt": "Write a python function to find the minimum element in a sorted and rotated array.", "test": ["assert find_Min([1,2,3,4,5],0,4) == 1", "assert find_Min([4,6,8],0,2) == 4", "assert find_Min([2,3,5,7,9],0,4) == 2"], "code": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ", "task_id": 225, "generation": "def find_Min(arr,low,high):\n    if high < low:\n\n        return arr[0]\n\n    if high == low:\n\n        return arr[low]\n\n    mid = (low + high)/2\n\n    if mid < high and arr[mid+1] < arr[mid]:\n\n        return arr[mid+1]\n\n    if mid > low and arr[mid] < arr[mid-1]:\n\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n\n        return find_Min(arr, low, mid-1)\n\n    return find_Min(arr, mid+1, high)\n\nfinish \n\n"}
{"prompt": "Write a python function to remove the characters which have odd index values of a given string.", "test": ["assert odd_values_string('abcdef') == 'ace'", "assert odd_values_string('python') == 'pto'", "assert odd_values_string('data') == 'dt'"], "code": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result", "task_id": 226, "generation": "def odd_values_string(str):\n    result = \"\"\n\n    for i in range(len(str)):\n\n        if i % 2 == 0:\n\n            result = result + str[i]\n\n    return result\n\n# Test \n\nprint(multiply_list([1,2,3,4,5])) # should return 120\n\nprint(split_list([1,2,3,4,5])) # should return ([1,2], [3,4,5])\n\nprint(odd_values_string(\"hello\")) # should return \"hlo\"\n\nThis takes a list as an input and returns the product of all the numbers in the list. In the given case for list [1,2,3,4,5], the function should multiply 1*2*3*4*5 and return the product which is 120.\n\n# Test cases\n\nprint(odd_index_string(\"hello\")) # Expected \"e\"\n\n# Function to get the string of even digit characters.\n\ndef even_digit_string(str):\n\n            even.append(lst[i])\n\n```\n\nThe function `odd_values_string` takes a string as an input and removes the characters with odd index values and returns it. In this case, for the input string \"hello\", the function should return \"hlo\".\n\nprint(odd_values_string(\"hello\")) # Expected \"hlo\"\n\nprint(even_digit_string(\"hello\")) # Expected \"hl\"\n\nprint(convert_to_hex(10)) # should return \"A\"\n\nprint(multiply_numbers([1, 2, 3, 4, 5]))  # should return 120\n\nfinish writing the python function. You will\n\n"}
{"prompt": "Write a function to find minimum of three numbers.", "test": ["assert min_of_three(10,20,0)==0", "assert min_of_three(19,15,18)==15", "assert min_of_three(-10,-20,-30)==-30"], "code": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ", "task_id": 227, "generation": "def min_of_three(a,b,c):\n    if a <= b and a <= c:\n\n        return a\n\n    elif b <= a and b <= c:\n\n        return b\n\n    else:\n\n        return c\n\n# finish\n\n"}
{"prompt": "Write a python function to check whether all the bits are unset in the given range or not.", "test": ["assert all_Bits_Set_In_The_Given_Range(4,1,2) == True", "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True", "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"], "code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False", "task_id": 228, "generation": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    if l>r or l<0 or r>=32:\n\n        return False\n\n    mask = ((1<<(r-l+1))-1)<<l\n\n    return (n & mask) == mask\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "test": ["assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]", "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"], "code": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr", "task_id": 229, "generation": "def re_arrange_array(arr, n):\n    j = 0\n\n    for i in range(0, n):\n\n        if arr[i] < 0:\n\n            arr[j], arr[i] = arr[i], arr[j]\n\n            j = j + 1\n\n    return arr\n\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\n\nn = len(arr)\n\nresult = re_arrange_array(arr, n)\n\nprint(\"Array with negative numbers on left side is: \", result)\n\n### Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to replace blank spaces with any character in a string.", "test": ["assert replace_blank(\"hello people\",'@')==(\"hello@people\")", "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")", "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"], "code": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2", "task_id": 230, "generation": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)\n\n# finish\n\n"}
{"prompt": "Write a function to find the maximum sum in the given right triangle of numbers.", "test": ["assert max_sum([[1], [2,1], [3,3,2]], 3) == 6", "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ", "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"], "code": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))", "task_id": 231, "generation": "def max_sum(tri, n):\n  # Initialize a list with 0 for n elements\n\n  dp = [0]*n\n\n  # Copy the last row into dp from triangle\n\n  dp = tri[n-1]\n\n  # Start from second-last row\n\n    for i in range(n-2, -1, -1):\n\n        for j in range(0, i+1):\n\n          # The maximum sum at position (i, j) is current element + max of two\n\n          # elements below it in the triangle\n\n            dp[j] = max(dp[j], tri[i][j] + dp[j+1])\n\n    # Return the maximum sum at the top of triangle, which is the first element\n\n    # of the dp-list\n\n    return dp[0] # finish\n\n"}
{"prompt": "Write a function to get the n largest items from a dataset.", "test": ["assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]", "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]", "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"], "code": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest", "task_id": 232, "generation": "import heapq\ndef larg_nnum(list1,n):\n    result = heapq.nlargest(n, list1)\n\n    return result\n\n#testing\n\ndata = [2,3,4,5,6,67,43,21,56,76,34,23]\n\nperfect_num(6)\n\n#finish\n\n"}
{"prompt": "Write a function to find the lateral surface area of a cylinder.", "test": ["assert lateralsuface_cylinder(10,5)==314.15000000000003", "assert lateralsuface_cylinder(4,5)==125.66000000000001", "assert lateralsuface_cylinder(4,10)==251.32000000000002"], "code": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface", "task_id": 233, "generation": "def lateralsuface_cylinder(r,h):\n    from math import pi\n\n    lsa = 2 * pi * r * h\n\n    volume = (4/3) * pi * r**3\n\n    volume = (4/3) * pi * r**2\n\n    return lsa # finish\n\n"}
{"prompt": "Write a function to find the volume of a cube.", "test": ["assert volume_cube(3)==27", "assert volume_cube(2)==8", "assert volume_cube(5)==125"], "code": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume", "task_id": 234, "generation": "def volume_cube(l):\n    # Finish the function\n\n"}
{"prompt": "Write a python function to set all even bits of a given number.", "test": ["assert even_bit_set_number(10) == 10", "assert even_bit_set_number(20) == 30", "assert even_bit_set_number(30) == 30"], "code": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ", "task_id": 235, "generation": "def even_bit_set_number(n):\n    binary = bin(n)[2:]\n\n    binary = list(binary)\n\n    for i in range(len(binary)-1, -1, -1):\n\n        if i % 2 == 0 and binary[i] == '0':\n\n            binary[i] = '1'\n\n    return int(''.join(binary), 2)\n\nfinish\n\n"}
{"prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "test": ["assert No_of_Triangle(4,2) == 7", "assert No_of_Triangle(4,3) == 3", "assert No_of_Triangle(1,3) == -1"], "code": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;", "task_id": 236, "generation": "def No_of_Triangle(N,K):\n    # write your code here\n\n    if N == 0:\n\n        return 0\n\n    else:\n\n        return (N//K) + No_of_Triangle(N//K, K)\n\nprint(No_of_Triangle(100,3))\n\nprint(No_of_Triangle(0,3)) \n\n# This will output 10\n\n<jupyter_output>\n\n21\n\nprint(No_of_Triangle(0,3))\n\n<empty_output>\n\n<empty_output>_\n\n3\n\n<jupyter_text>\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "test": ["assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}", "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"], "code": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ", "task_id": 237, "generation": "from collections import Counter\ndef check_occurences(test_list):\n    result = Counter(test_list)\n\n    output = {i:result[i] for i in result.keys() if result[i] > 1}\n\n    return output\n\ndata = [('Apple', 'Green'), ('Blueberry', 'Yellow'), ('Strawberry', 'Red'), ('Apple', 'Green'), ('Peach', 'Yellow'), ('Lemon', 'Yellow')]\n\nprint(check_occurences(data)) # Output: {'Apple': 2, 'Green': 2, 'Yellow': 3}\n\nfinish #\n\n"}
{"prompt": "Write a python function to count number of non-empty substrings of a given string.", "test": ["assert number_of_substrings(\"abc\") == 6", "assert number_of_substrings(\"abcd\") == 10", "assert number_of_substrings(\"abcde\") == 15"], "code": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ", "task_id": 238, "generation": "def number_of_substrings(str):\n    n = len(str)\n\n    return n * (n+1) // 2\n\n# finish\n\n"}
{"prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "test": ["assert get_total_number_of_sequences(10, 4) == 4", "assert get_total_number_of_sequences(5, 2) == 6", "assert get_total_number_of_sequences(16, 3) == 84"], "code": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]", "task_id": 239, "generation": "def get_total_number_of_sequences(m,n):\n    sequences = [1] + [0]*n\n\n    for _ in range(m):\n\n    for _ in range(1, m+1):\n\n        sequences = sequences[1:] + [sum(sequences)]\n\n    return sequences[n] % (10**9 + 7)\n\n        dp = dp[1:] + [sum(dp) % (10**9 + 7)]\n\n    return dp[n % 2]\n\n# test case\n\nprint(get_total_number_of_sequences(5,4)) # 10\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to replace the last element of the list with another list.", "test": ["assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]", "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"], "code": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n", "task_id": 240, "generation": "def replace_list(list1,list2):\n  list1[-1:] = list2\n\n    return list1\n\n  return list1\n\n# Test cases\n\nlist1 = [1,2,3,4]\n\nnumbers = [1,2,3,4]\n\ntext = ['1','2','3','4']\n\ndates = ['01/01/2020','02/02/2020']\n\nprint(replace_list(list1,numbers)) # returns [1, 2\n\nlist1 = [('United States', 'Washington'), ('France', 'Paris')]\n\nnew_data = [('Germany', 'Berlin'), ('Spain', 'Madrid')]\n\nprint(replace_list(list1,new_data)) # returns [('United States', 'Washington'), ('France', 'Paris'), ('Germany', 'Berlin'), ('Spain', 'Madrid')] # finish\n\n"}
{"prompt": "Write a function to generate a 3d array having each element as '*'.", "test": ["assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]", "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]", "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"], "code": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d", "task_id": 241, "generation": "def array_3d(m,n,o):\n    array = []\n\n    for _ in range(m):\n\n        array_2d = []\n\n        for _ in range(n):\n\n            array_1d = []\n\n            for _ in range(o):\n\n                array_1d.append('*')\n\n            array_2d.append(array_1d)\n\n        array.append(array_2d)\n\n    return array \n\n### Validation Error==> Adjusted Adjacent Elements Finish writing the python function. \n\n"}
{"prompt": "Write a function to count total characters in a string.", "test": ["assert count_charac(\"python programming\")==18", "assert count_charac(\"language\")==8", "assert count_charac(\"words\")==5"], "code": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total", "task_id": 242, "generation": "def count_charac(str1):\n    count = 0\n\n    for i in str1:\n\n        count = count + 1\n\n    return count\n\n# Testing the function\n\nprint(prod_num([1, 2, 3, 4, 5]))\n\nprint(most_frequent(\"abcd\"))\n\nd = {'a': 1, 'b': {'c': 2, 'd': 3}, 'e': 4}\n\nprint(char_freq(\"abcdabcd\"))\n\nfinish\n\n"}
{"prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.", "test": ["assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]", "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]", "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"], "code": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ", "task_id": 243, "generation": "def sort_on_occurence(lst):\n    counts = {t[0]: t[1] for t in lst}\n\n    lst.sort(key=lambda x: (counts[x[1]], x[0]), reverse=True)\n\n    lst.sort(key=lambda x: (counts[x[1]], x[0]), reverse=False)\n\n    return lst\n\n# finish\n\n"}
{"prompt": "Write a python function to find the next perfect square greater than a given number.", "test": ["assert next_Perfect_Square(35) == 36", "assert next_Perfect_Square(6) == 9", "assert next_Perfect_Square(9) == 16"], "code": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ", "task_id": 244, "generation": "import math\ndef next_Perfect_Square(N):\n    # find the square root of N\n\n    sqrt_N = math.sqrt(N)\n\n    # check if sqrt_N is a integer\n\n    if sqrt_N != int(sqrt_N):\n\n        return -1\n\n    # find the next integer value of sqrt_N\n\n    next_sqrt_N = sqrt_N + 1\n\n    # Return the perfect square\n\n    return int(next_sqrt_N * next_sqrt_N) # finish\n\n"}
{"prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "test": ["assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194", "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210", "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"], "code": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum", "task_id": 245, "generation": "def max_sum(arr, n):\n    inc, dec = [0]*n, [0]*n\n\n    inc[0], dec[n-1] = arr[0], arr[n-1]\n\n    # construct increasing sequence\n\n    for i in range(1, n):\n\n        max_bitionic = max(max_bitionic, inc[i]+dec[i])\n\n        inc[i] = max_bitionic if inc[i]>inc[i-1]+arr[i] else inc[i-1]+arr[i]\n\n        min_bitionic = min(min_bitionic, inc[i]+dec[i])\n\n        dec[n-i-1] = min_bitionic if dec[n-i-1]>dec[n-i]+arr[n-i-1] else dec[n-i]+arr[n-i-1]\n\n    return max_bitionic\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function for computing square roots using the babylonian method.", "test": ["assert babylonian_squareroot(10)==3.162277660168379", "assert babylonian_squareroot(2)==1.414213562373095", "assert babylonian_squareroot(9)==3.0"], "code": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;", "task_id": 246, "generation": "def babylonian_squareroot(number):\n```python\n\n    x = number\n\n    y = 1\n\n    e = 0.000001  # This defines the precision level\n\n    while x - y > e:\n\n        x = (x + y)/2\n\n    while(b):\n\n        y = number / x\n\n    return y\n\nprint(babylonian_squareroot(3))  # Should output 1.7320508075688772\n\nfinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find the longest palindromic subsequence in the given string.", "test": ["assert lps(\"TENS FOR TENS\") == 5 ", "assert lps(\"CARDIO FOR CARDS\") == 7", "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "], "code": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]", "task_id": 247, "generation": "def lps(str):\n    n = len(str)\n\n    # Create a table to store results of subproblems\n\n    print(\"The length of the LPS is \", lps(str))\n\nfinish\n\n"}
{"prompt": "Write a function to calculate the harmonic sum of n-1.", "test": ["assert harmonic_sum(7) == 2.5928571428571425", "assert harmonic_sum(4) == 2.083333333333333", "assert harmonic_sum(19) == 3.547739657143682"], "code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ", "task_id": 248, "generation": "def harmonic_sum(n):\n    # base case\n\n    if n < 2:\n\n        return 1\n\n    else:\n\n        return 1 / n + harmonic_sum(n - 1)\n\n                row.append(triangle[i-1][j-1] + triangle[i-1][j])\n\n        triangle.append(row)\n\n    return triangle\n\n# test the function\n\nprint(pascal(5))\n\nprint(pascal(6))\n\nprint(pascal(10))\n\nprint(pascal(15))\n\nprint(factorial(5))\n\nprint(factorial(6))\n\nprint(factorial(10))\n\nprint(factorial(15))\n\nprint(harmonic_sum(5))\n\nprint(harmonic_sum(6))\n\nprint(harmonic_sum(10))\n\nprint(harmonic_sum(15))\n\n<jupyter_output>\n\n<empty_output>\n\n120\n\n<jupyter_text>\n\nExercise: The factorial of a number. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. It is denoted by nfact. An example: 5fact = 5*4*3*2*1 = 120. Write a python function to calculate factorial using recursion. ### Response: def factorial(n):\n\n        return nums[0]\n\nExercise: Generate a list of evenly spaced numbers, given a start value, an end value, and a step size. The step size is the difference between each number. Write a Python function to generate this list. ### Response:\n\nExercise: Implement the Sieve of Eratosthenes. The Sieve of Eratosthenes is an algorithm used to find all prime numbers up to a given limit. Given a number n, the algorithm initially assumes all numbers from 2 to n are prime, but it repeatedly eliminates multiples of each found prime number. ### Response:\n\nBanking Cash Advance Default Prediction The goal of this project is to predict if a bank customer will default on a bank cash advance. The dataset contains a variety of data including customer demographics, their relationship with the bank, their payment history, etc.The link to Dataset is here: https://archive.ics.uci.edu/ml/datasets/Bank+Marketing.  Step 1: Import necessary libraries\n\n"}
{"prompt": "Write a function to find the intersection of two arrays using lambda function.", "test": ["assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"], "code": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result", "task_id": 249, "generation": "def intersection_array(array_nums1,array_nums2):\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n\nprint(intersection_array([1, 2, 3, 4, 5], [1, 3, 5, 7, 9]))  \n\n# testing the function\n\n### Finish\n\n"}
{"prompt": "Write a python function to count the occcurences of an element in a tuple.", "test": ["assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"], "code": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ", "task_id": 250, "generation": "def count_X(tup, x):\n    count = 0\n\n    for i in tup:\n\n        if (i == x):\n\n            count = count + 1\n\n    return count\n\n# Driver Code: \n\ntup = (1, 2, 3, 4, 1, 2, 1, 2, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1, 2, 3, 4)\n\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nstr1 = input(\"Enter first string: \")\n\nstr2 = input(\"Enter second string: \")\n\nstr3 = input(\"Enter third string: \")\n\nx = input(\"Enter the number: \")\n\nprint(\"The occurrences of\", x ,\"is: \", count_X(tup, x))\n\n# Insert your code here\n\nsyn_count_str = {i: 0 for i in str_list}\n\n```\n\nfinish\n\n"}
{"prompt": "Write a function to insert an element before each element of a list.", "test": ["assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ", "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ", "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "], "code": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list", "task_id": 251, "generation": "def insert_element(list,element):\n    new_list = []\n\n    for i in list: \n\n        if i != list[-1]:\n\n            new_list.append(element)\n\n            new_list.append(i)\n\n        else: \n\n            new_list.append(i) \n\n    return new_list\n\n#finish\n\n"}
{"prompt": "Write a python function to convert complex numbers to polar coordinates.", "test": ["assert convert(1) == (1.0, 0.0)", "assert convert(4) == (4.0,0.0)", "assert convert(5) == (5.0,0.0)"], "code": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ", "task_id": 252, "generation": "import cmath\ndef convert(numbers):\n    result = []\n\n    for number in numbers:\n\n        r,phi = cmath.polar(number)\n\n        result.append((r,phi))\n\n    return result\n\nnumbers = [2+3j, 1+1j, 3+2j]\n\nprint(convert(numbers))\n\ncoordinates = [(3.605551275463989, 0.8726646259971619), (1.4142135623730951, 0.7853981633974483), (3.7320508075688774, 0.9272952180016123)]\n\nresult = convert(numbers)\n\nprint(\"Program Output: \", result)\n\n    #\n\n<jupyter_output>\n\n Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to count integers from a given list.", "test": ["assert count_integer([1,2,'abc',1.2]) == 2", "assert count_integer([1,2,3]) == 3", "assert count_integer([1,1.2,4,5.1]) == 2"], "code": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr", "task_id": 253, "generation": "def count_integer(list1):\n    count = 0\n\n    for i in list1:\n\n        if isinstance(i, int): #checks if i is integer\n\n            count += 1 \n\n    return count\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.", "test": ["assert words_ae(\"python programe\")==['ame']", "assert words_ae(\"python programe language\")==['ame','anguage']", "assert words_ae(\"assert statement\")==['assert', 'atement']"], "code": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list", "task_id": 254, "generation": "import re\ndef words_ae(text):\n    words = re.findall(r'\\b[ae]\\w+', text, re.I)\n\n    return words\n\nwords_ae(\"Apple is a fruit. Excel is a software.\") # ['Apple', 'is', 'a', 'fruit', 'Excel', 'is', 'a', 'software']\n\nfinish\n\n"}
{"prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "test": ["assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"], "code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r", "task_id": 255, "generation": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    colors = ['red', 'green', 'blue']\n\n    return list(combinations_with_replacement(l, n))\n\nprint(combinations_colors(colors, 2))\n\n# finish\n\n"}
{"prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.", "test": ["assert count_Primes_nums(5) == 2", "assert count_Primes_nums(10) == 4", "assert count_Primes_nums(100) == 25"], "code": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr", "task_id": 256, "generation": "def count_Primes_nums(n):\n    if n < 2:\n\n        return 0\n\n    primes = [True] * n\n\n    p = 2\n\n    while p * p <= n:\n\n        if primes[p]:\n\n            for i in range(p * p, n, p):\n\n                primes[i] = 0\n\n    primes[0] = primes[1] = False\n\n    return sum(primes)\n\n# Test the function\n\nprint(count_Primes_nums(30))\n\n# finish\n\n"}
{"prompt": "Write a function to swap two numbers.", "test": ["assert swap_numbers(10,20)==(20,10)", "assert swap_numbers(15,17)==(17,15)", "assert swap_numbers(100,200)==(200,100)"], "code": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)", "task_id": 257, "generation": "def swap_numbers(a,b):\n    temp = a\n\n    a = b\n\n    b = temp\n\n    return a, b \n\nx = 5\n\ny = 10\n\nx, y = swap_numbers(x, y)\n\nprint('The value of x after swapping: {}'.format(x))\n\nprint('The value of y after swapping: {}'.format(y))\n\n# Finish writing the python function.\n\n"}
{"prompt": "Write a function to find number of odd elements in the given list using lambda function.", "test": ["assert count_odd([1, 2, 3, 5, 7, 8, 10])==4", "assert count_odd([10,15,14,13,-18,12,-20])==2", "assert count_odd([1, 2, 4, 8, 9])==2"], "code": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd", "task_id": 258, "generation": "def count_odd(array_nums):\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n\n# finish\n\n"}
{"prompt": "Write a function to maximize the given two tuples.", "test": ["assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))", "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"], "code": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 259, "generation": "def maximize_elements(test_tup1, test_tup2):\n    max_elements = []\n\n    for i in range(len(test_tup1)):\n\n        max_val = max(test_tup1[i], test_tup2[i])\n\n        max_elements.append(max_val)\n\n    return tuple(max_elements) # finish\n\n"}
{"prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "test": ["assert newman_prime(3) == 7 ", "assert newman_prime(4) == 17", "assert newman_prime(5) == 41"], "code": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "task_id": 260, "generation": "def newman_prime(n):\n    def is_prime(num):\n\n        if num < 2:\n\n            return False\n\n        for i in range(2, int(num**0.5) + 1):\n\n            if num % i == 0:\n\n                return False\n\n        i = 3\n\n        while i * i <= num:\n\n        return True\n\n    primes = 0\n\n    i = 2\n\n    while primes < n:\n\n        if is_prime(i):\n\n            primes += 1\n\n        i += 1\n\n    return i - 1\n\nprint(newman_prime(5))\n\n# finish\n\n"}
{"prompt": "Write a function to perform mathematical division operation across the given tuples.", "test": ["assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)", "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)", "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"], "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 261, "generation": "def division_elements(test_tup1, test_tup2):\n    res = []\n\n    for i in range(len(test_tup1)):\n\n        try:\n\n            res.append(test_tup1[i] / test_tup2[i])\n\n        except Z\n\n        except ZeroDivisionError:\n\n            res.append(\"undefined\")\n\n    return tuple(res) \n\ntest_tup1 = (10, 20, 30, 40, 50)\n\ntest_tup2 = (2, 4, 0, 5, 10)\n\ntest_tup2 = (2, \n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "test": ["assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])", "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"], "code": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]", "task_id": 262, "generation": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\n\n```\n\n\"\"\" # Finish\n\n"}
{"prompt": "Write a function to merge two dictionaries.", "test": ["assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}", "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}", "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"], "code": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d", "task_id": 263, "generation": "def merge_dict(d1,d2):\n    merge = d1.copy()\n\n    merge.update(d2)\n\n    return merge \n\n# finish\n\n"}
{"prompt": "Write a function to calculate a dog's age in dog's years.", "test": ["assert dog_age(12)==61", "assert dog_age(15)==73", "assert dog_age(24)==109"], "code": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age", "task_id": 264, "generation": "def dog_age(h_age):\n    return h_age * 7\n\n```\n\n```python\n\ndef sum_list(num_list):\n\n    return sum(num_list)  # finish\n\n"}
{"prompt": "Write a function to split a list for every nth element.", "test": ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ", "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ", "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "], "code": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]", "task_id": 265, "generation": "def list_split(S, step):\n    t = [S[i:i+step] for i in range(0, len(S), step)]\n\n    return t\n\n# finish\n\n"}
{"prompt": "Write a function to find the lateral surface area of a cube.", "test": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400"], "code": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA", "task_id": 266, "generation": "def lateralsurface_cube(l):\n    return 4 * l**2\n\n# finish\n\n"}
{"prompt": "Write a python function to find the sum of squares of first n odd natural numbers.", "test": ["assert square_Sum(2) == 10", "assert square_Sum(3) == 35", "assert square_Sum(4) == 84"], "code": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ", "task_id": 267, "generation": "def square_Sum(n):\n    # Start typing your code here\n\n    sum = 0\n\n    for i in range(1, 2*n, 2):\n\n    while i <= n:\n\n    sum_of_squares = 0\n\n    for i in range(n, -1, -2):\n\n    for i in range(1, n+1):\n\n        sum_odd += i**2\n\n    return sum_odd\n\n    total_sum = 0\n\n    # Finish writing the python function.\n\n"}
{"prompt": "Write a function to find the n'th star number.", "test": ["assert find_star_num(3) == 37", "assert find_star_num(4) == 73", "assert find_star_num(5) == 121"], "code": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ", "task_id": 268, "generation": "def find_star_num(n):\n    star_num = n * (7 * n - 5) // 2\n\n    return star_num\n\n    # Star number formula: n*(7n-5)/2\n\n    # finish\n\n"}
{"prompt": "Write a function to find the ascii value of a character.", "test": ["assert ascii_value('A')==65", "assert ascii_value('R')==82", "assert ascii_value('S')==83"], "code": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)", "task_id": 269, "generation": "def ascii_value(k):\n    return ord(k)\n\n# finish\n\n"}
{"prompt": "Write a python function to find the sum of even numbers at even positions.", "test": ["assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30", "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26", "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"], "code": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum", "task_id": 270, "generation": "def sum_even_and_even_index(arr,n):\n    sum = 0\n\n    return sum(arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0)\n\n# finish\n\n"}
{"prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.", "test": ["assert even_Power_Sum(2) == 1056", "assert even_Power_Sum(3) == 8832", "assert even_Power_Sum(1) == 32"], "code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ", "task_id": 271, "generation": "def even_Power_Sum(n):\n    \"\"\"\n\n    sum = 0\n\n    a = 0\n\n    b = 1\n\n    for i in range(2, 2*n, 2):\n\n        sum += i\n\n    sum = n*(n+1)\n\n    return n*n*(n+1)*(n+1)\n\n    for i in range(2, 2*n+1, 2):\n\n        sum += i**5\n\n    return sum\n\nprint(even_Power_Sum(2))\n\nprint(even_Power_Sum(3))\n\n    total_sum = 0\n\nn = 2 # input(\"Enter a number: \")\n\nprint(main(n)) # Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to perfom the rear element extraction from list of tuples records.", "test": ["assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]", "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"], "code": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ", "task_id": 272, "generation": "def rear_extract(test_list):\n  result = [i[-1] for i in test_list]\n\n  return result\n\ntest_list = [(4, 7, 3), (6, 2, 9), (8, 1, 5)]\n\nprint(rear_extract(test_list)) # [3, 9, 5]\n\n### Notes:\n\nI have made minor modification in the rear_extract function above. Now it returns the last element of all non-empty tuples in the provided list. The condition i is used to check whether the tuple is empty or not, as the last element of an empty tuple will raise an error.\n\nIn the tuples_to_dict function, I used a dictionary comprehension to convert the tuples to dictionary. The condition len(i)==2 is used to check whether the tuple contains exactly two elements, because it should be a pair. This function works correctly if all tuples in the list are pairs.\n\nThe primes function above displays all prime numbers within a given range. A prime number is a number that is greater than 1 and has only two factors - 1 and the number itself. Thus, we can iterate through the range of numbers and for each number, we can check for factors. If no factors other than 1 and the number itself are found, then the number is prime.\n\n### Output:\n\ntest_list = [(4, 7, 3), (6, 2, 9), (8, 1, 5), ()]\n\n[3, 9, 5]\n\ndict_output = {4: [7, 3], 6: [2, 9], 8: [1, 5]}\n\nprimes_output = [2, 3, 5, 7]\n\nThe codes provided perform various operations on different data structures in Python.\n\nprimes_output is the list of prime numbers between 1 and 20.\n\ndict_output is the dictionary created from the list of tuples. Each key in the dictionary is the first element of the tuple and the corresponding value is the rest of the elements in the tuple.\n\nThe rear_extract function returns a list of the last elements of the tuples of the input list.\n\nAnd here is the referers use it:\n\nhttps://www.geeksforgeeks.org/\n\nhttps://realpython.com/tuples-in-python/#the-right-way-to-use-tuples\n\n### In [11]:\n\n0    Paul\n\n2    Sue\n\ndef tuples_to_dict(test_list):\n\n    result = {i[0]: i[1:] for i in test_list if len(i)==2}\n\ntest_list = [(4, 7, 3), (6, 2, 9), (8, 1, 5), (0, 'Paul'), (2, 'Sue')]\n\ndict_expected = {4: [7, 3], 6: [2, 9], 8: [1, 5], 0: ['Paul'], 2: ['Sue']}\n\nprint('dict_output =', tuples_to_dict(test_list)) # dict_output = {0: ['Paul'], 2: ['Sue'], 4: [7, 3], 6: [2, 9], 8: [1, 5]}\n\ndict_output = {4: ['Paul'], 2: ['Sue'], 4: [7, 3], 6: [2, 9], 8: [1, 5], 0: ['Paul'], 2: ['Sue']}\n\nOut[13]:\n\n"}
{"prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "test": ["assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)", "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"], "code": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ", "task_id": 273, "generation": "def substract_elements(test_tup1, test_tup2):\n    return tuple(i - j for i, j in zip(test_tup1, test_tup2))\n\n# Example usage: \n\nresult = substract_elements((1, 2), (3, 4))\n\nprint(result) # Outputs: (-2, -2)\n\n# finish\n\n"}
{"prompt": "Write a python function to find sum of even index binomial coefficients.", "test": ["assert even_binomial_Coeff_Sum(4) == 8", "assert even_binomial_Coeff_Sum(6) == 32", "assert even_binomial_Coeff_Sum(2) == 2"], "code": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ", "task_id": 274, "generation": "import math\ndef even_binomial_Coeff_Sum( n):\n    sum_even = 0  # initialize even sum to 0\n\n    for i in range(0, n, 2):  # loop from 0 to n with step of 2\n\n        sum_even += math.comb(n, i)  # sum of even index binomial coefficients\n\n    return sum_even\n\n# Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to find the position of the last removed element from the given array.", "test": ["assert get_Position([2,5,4],3,2) == 2", "assert get_Position([4,3],2,2) == 2", "assert get_Position([1,2,3,4],4,1) == 4"], "code": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1", "task_id": 275, "generation": "import math as mt\ndef get_Position(a,n,m):\n    if (m==0 or mt.gcd(n,m)!=1):\n\n        print (\"invalid input\")\n\n        return -1\n\n    j=0\n\n    for i in range(1,n):\n\n        j=(j+m)%i\n\n    for i\n\n    for i in range(n,len(a)):\n\n        j=(j+m-1)%len(a)\n\n        del a[j]\n\n        print(f\"popped: {j}th element is removed., value is {a.pop(j)}\")\n\n    return j\n\narray = [i for i in range(1,21)]\n\nconsole.log(get_Position(array,len(array),3))\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find the volume of a cylinder.", "test": ["assert volume_cylinder(10,5)==1570.7500000000002", "assert volume_cylinder(4,5)==251.32000000000002", "assert volume_cylinder(4,10)==502.64000000000004"], "code": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume", "task_id": 276, "generation": "def volume_cylinder(r,h):\n    from math import pi\n\n    volume = pi * r**2 * h\n\n    return volume\n\n# finish\n\n"}
{"prompt": "Write a function to filter a dictionary based on values.", "test": ["assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"], "code": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result", "task_id": 277, "generation": "def dict_filter(dict,n):\n```\n\nfinish\n\n"}
{"prompt": "Write a function to find the element count that occurs before the record in the given tuple.", "test": ["assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3", "assert count_first_elements((2, 9, (5, 7), 11) ) == 2", "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"], "code": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ", "task_id": 278, "generation": "def count_first_elements(test_tup):\n    count = 0\n\n    for i in range(len(test_tup)):\n\n        if test_tup[i] == test_tup[0]:\n\n            count += 1\n\n    return count # finish\n\n"}
{"prompt": "Write a function to find the nth decagonal number.", "test": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370"], "code": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ", "task_id": 279, "generation": "def is_num_decagonal(n):\n    nth_decagonal_num = 3 * n * (7 * n - 5) // 2\n\n    return nth_decagonal_num\n\n\"\"\"\n\n    return n*(5 + 7*n)//2*(5 + 7*n)//2 if n*(5 + 7*n)//2*(5 + 7*n)//2 - (n*(5 + 7*n)//2)**2 < (3*n+4)*(3*n+1)//4 else 0\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to search an element in the given array by using sequential search.", "test": ["assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)", "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)", "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"], "code": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos", "task_id": 280, "generation": "def sequential_search(dlist, item):\n    # Iterate over all the elements in the list\n\n    for i in range(len(dlist)):\n\n        # If the element is found, return the index\n\n        if dlist[i] == item:\n\n            return i\n\n    # If the element is not found, return -1\n\n    return -1\n\n# finish\n\n"}
{"prompt": "Write a python function to check if the elements of a given list are unique or not.", "test": ["assert all_unique([1,2,3]) == True", "assert all_unique([1,2,1,2]) == False", "assert all_unique([1,2,3,4,5]) == True"], "code": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True", "task_id": 281, "generation": "def all_unique(test_list):\n    if len(test_list) == len(set(test_list)):\n\n        return True\n\n    else:\n\n        return False\n\n# Test the function\n\nprint(fibonacci(10)) # 55\n\nprint(title_case('the lord of the rings')) # 'The Lord of the Rings'\n\n#finish\n\n"}
{"prompt": "Write a function to substaract two lists using map and lambda function.", "test": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]"], "code": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)", "task_id": 282, "generation": "def sub_list(nums1,nums2):\n        return list(map(lambda x, y: x - y, nums1, nums2))\n\n        return list(map(lambda x, y: x - y, nums1[:len(nums2)], nums2))\n\n    return list(map(lambda x, y: x - y, nums1, nums2))\n\n    return list(map(lambda x, y: x - y, nums1[:len(nums2)], nums2))\n\nprint(sub_list([1, 2, 3], [-1, -2, -3]))\n\n    #nultiline code block\n\n    #initialize list\n\n    nums1 = [1, 2, 3]\n\n    nums2 = [-1, -2, -3]\n\n    # this line is added to ensure the two lists are same length. \n\n    # nums1 = [1, 2, 3]\n\n# Multiline code block\n\n# Initialize list\n\nnums1 = [1, 2, 3]\n\nnums2 = [-1, -2, -3]\n\n_ = list(map(lambda x, y: x - y, nums1, nums2))\n\n    print(sub_list([1,\n\n    nums2 = [-1, -2, -3] \n\n# Using map and lambda function to subtract the two lists\n\nprint(list(map(lambda x, y: x - y, nums1, nums2)))\n\n# finish\n\n"}
{"prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.", "test": ["assert validate(1234) == True", "assert validate(51241) == False", "assert validate(321) == True"], "code": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True", "task_id": 283, "generation": "def validate(n):\n    # Convert the integer to a string\n\n    str_n = str(n)\n\n    # For each digit in the string\n\n    for digit in str_n:\n\n        # If the frequency of the digit in the string is greater than the value of the digit\n\n        if str_n.count(digit) > int(digit):\n\n            # Return False\n\n            return False\n\n    # If we have not returned False yet, all is well so return True\n\n    # Check if the string is equal to its reverse\n\n    if str_n == str_n[::-1]:\n\n    return True\n\n# Test the function\n\nprint(validate(121)) # True (1 appears 1 time and 2 appears 1 time)\n\nprint(validate(1221)) # True (1 appears 1 time, 2 appears 2 times and 3 appears 1 time)\n\nprint(find_combinations([-1, 1, 2, -2])) # [(-1, 1), (2, -2)] \n\nprint(find_combinations([5, -5, 2, -7])) # [(5, -5)] \n\nprint(validate(121)) # True\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to check whether all items of a list are equal to a given string.", "test": ["assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assert check_element([1,2,3,4],7)==False", "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"], "code": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element", "task_id": 284, "generation": "def check_element(list,element):\n    return all(i == element for i in list)\n\nelement = 'test'\n\nelement = 'test1'\n\nprint(check_element(['test', 'test', 'test', 'test'], element))\n\nprint(check_element(['test', 'test', 'test1', 'test'], element))\n\nprint(check_element(['test', 'test', 'test1', 'test'], element)) # should return False\n\n### Response: def check_all_equal(lst, string):\n\n    return all(i == string for i in lst)\n\n# Test cases\n\nprint(check_all_string(['test', 'test', 'test', 'test'], 'test1')) # should return False\n\nprint(check_all_string(['test', 'test', 'test1', 'test'], 'test')) # should return False\n\nprint(check_all_string(['test', 'test', 'test', 'test'], 'test')) # should return True\n\nprint(check_all_equals(['test', 'test', 'test', 'test'], 'test1')) # should return False\n\nprint(all_elements_equal(['test', 'test', 'test', 'test'], element)) # should return True\n\n# Test Cases\n\nprint(are_all_equal(['test', 'test', 'test', 'test'], 'test'))  # Returns: True\n\nprint(all_elements_equal(['test', 'test', 'test', 'test'], 'test'))  # Returns: True\n\nprint(all_elements_equal(['test', 'test', 'test', 'test1'], 'test1'))  # Returns: False\n\nprint(check_all_equal(['test', 'test', 'test', 'test'], 'test')) # should return True\n\nprint(check_all_equal(['test', 'test', 'test', 'diff'], 'test')) # should return False\n\nprint(check_all_string(['test', 'test', 'test1\n\nprint(all_elements_not_equal(['test', 'test', 'test', 'test1'], 'test'))  # Returns: True\n\nprint(check_all_equal(['test', 'test', 'test1', 'test'], 'test')) # should return False\n\nprint(all_elements_not_equal(['test', 'test', 'test', 'test'], 'test')) # should return False\n\nprint(check_all_equal(['test', 'test', 'test', 'test'], 'test'))  # Returns: True\n\nprint(check_all_equal(['test', 'test', 'test', 'test1'], 'test'))  # Returns: False\n\nprint(check_all_equal(['test', 'test', 'test', 'test1'], 'test')) # should return False\n\nprint(check_all_string(['test', 'test', 'test', 'test'], 'not test')) # should return False\n\nprint(check_all_equal(['test', 'test', 'test', 'test'], 'test1')) # should return False\n\nprint(check_all_string(['test', 'test', 'test', 'test1'], 'test')) # should return False\n\n"}
{"prompt": "Write a function that matches a string that has an a followed by two to three 'b'.", "test": ["assert text_match_two_three(\"ac\")==('Not matched!')", "assert text_match_two_three(\"dc\")==('Not matched!')", "assert text_match_two_three(\"abbbba\")==('Found a match!')"], "code": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "task_id": 285, "generation": "import re\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n\n    if re.search(pattern,  text):\n\n        return 'Found a match!'\n\n    else:\n\n        return('Not matched')\n\n# finish\n\n"}
{"prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "test": ["assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59", "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"], "code": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far", "task_id": 286, "generation": "def max_sub_array_sum_repeated(a, n, k):\n    def kadane(a, n):\n\n        max_so_far = a[0]\n\n        max_ending_here = a[0]\n\n        for i in range(1, n):\n\n            max_ending_here = max(a[i], max_ending_here + a[i])\n\n            max_so_far = max(max_so_far, max_ending_here)\n\n        return max_so_far\n\n    sum_of_array = sum(a)\n\n    max_kadane = kadane(a, n)\n\n    if max_kadane < 0:\n\n        return max_kadane\n\n    max_wrap = sum_of_array * k\n\n    max_wrap += kadane(a, n)\n\n    return max(max_kadane, max_wrap)\n\n# finish\n\n"}
{"prompt": "Write a python function to find the sum of squares of first n even natural numbers.", "test": ["assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(4) == 120"], "code": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)", "task_id": 287, "generation": "def square_Sum(n):\n    sum_square = 0\n\n    for i in range(2, 2*n+1, 2):\n\n    for i in range(2, 2*n*2+1, 2):\n\n        sum_square += i**2\n\n    return sum_square\n\n# Test the function\n\nprint(square_Sum(5))  # 1220\n\nprint(second_min([4, 7, 2, 9, 1]))  # 2\n\nprint(dec_to_bin(10))  # 1010\n\n# finish\n\n"}
{"prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "test": ["assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2", "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3", "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"], "code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element", "task_id": 288, "generation": "def modular_inverse(arr, N, P):\n    '''\n\n    count = 0\n\n    for i in arr:\n\n        if pow(i, p-2, p) == i:\n\n        if pow(i, -1, p) == i:\n\n#         if pow(i, -1, P) == i:\n\n        if pow(i, P-2, P) == i or pow(i, -1, P) == i:\n\n    count = sum([pow(i, P-2, P) == i or pow(i, -1, P) == i for i in arr])\n\n    return count\n\nprint(modular_inverse([3, 1, 4, 2, 5], 7, 83))\n\n```\n\nprint(modular_inverse([\n\ndef modular_inverse(arr, P):\n\n    def find_mod_inverse(n, p):\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to calculate the number of odd days in a given year.", "test": ["assert odd_Days(100) == 5", "assert odd_Days(50) ==6", "assert odd_Days(75) == 2"], "code": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ", "task_id": 289, "generation": "def odd_Days(N):\n    c = 0\n\n    for i in range(1, 366):\n\n        if (N % 4 == 0 and i % 7 == 1) or (N % 4 != 0 and i % 7 == 0):\n\n    if N % 4 == 0:\n\n        if i % 7 == 1 or i % 7 == 3 or i % 7 == 5:\n\n            c = c + 1\n\n    else:\n\n    return c\n\n# finish\n\n"}
{"prompt": "Write a function to find the list of lists with maximum length.", "test": ["assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])", "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"], "code": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)", "task_id": 290, "generation": "def max_length(list1):\n    result = []\n\n    maxlen = 0\n\n    for i in range(len(list1)):\n\n        if len(list1[i]) > maxlen:\n\n            maxlen = len(list1[i])\n\n            result = [list1[i]]\n\n        elif len(list1[i]) == maxlen:\n\n            result.append(list1[i])\n\n    return result\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "test": ["assert count_no_of_ways(2, 4) == 16", "assert count_no_of_ways(3, 2) == 6", "assert count_no_of_ways(4, 4) == 228"], "code": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]", "task_id": 291, "generation": "def count_no_of_ways(n, k):\n    same = k\n\n    diff = k * (k-1)\n\n    total = same + diff\n\n    return total\n\n# finish\n\n"}
{"prompt": "Write a python function to find quotient of two numbers.", "test": ["assert find(10,3) == 3", "assert find(4,2) == 2", "assert find(20,5) == 4"], "code": "def find(n,m):  \r\n    q = n//m \r\n    return (q)", "task_id": 292, "generation": "def find(n,m):\n    try:\n\n        quotient = n/m\n\n        remainder = n%m\n\n        interest = (principal * rate * time) / 100\n\n        return quotient, remainder, interest\n\n        quotient = n / m\n\n        return quotient\n\n        exponent = n ** m\n\n        return exponent\n\n    except ZeroDivisionError:\n\n        return \"It is impossible to divide by zero\"\n\n    except TypeError:\n\n        return \"Invalid input\"\n\n    except:\n\n        return \"An error occurred\"\n\n# finish\n\n"}
{"prompt": "Write a function to find the third side of a right angled triangle.", "test": ["assert otherside_rightangle(7,8)==10.63014581273465", "assert otherside_rightangle(3,4)==5", "assert otherside_rightangle(7,15)==16.55294535724685"], "code": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s", "task_id": 293, "generation": "import math\ndef otherside_rightangle(w,h):\n    # Calculate the third side using Pythagoras' theorem\n\n    w = math.pow(w, 2)\n\n    h = math.pow(h, 2)\n\n    third_side = math.sqrt(w + h)\n\n    w = pow(w, 2)\n\n    # Check if the calculation matches the original sides to ensure correctness\n\n    return third_side\n\n# Example usage:\n\nprint(otherside_rightangle(3,4)) #5.0\n\nprint(first_N_primes(5)) #[2, 3, 5, 7, 11]\n\n# finish\n\n"}
{"prompt": "Write a function to find the maximum value in a given heterogeneous list.", "test": ["assert max_val(['Python', 3, 2, 4, 5, 'version'])==5", "assert max_val(['Python', 15, 20, 25])==25", "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"], "code": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)", "task_id": 294, "generation": "def max_val(listval):\n    max_value = listval[0]\n\n    for item in listval:\n\n        if item > max_value:\n\n            max_value = item\n\n    return max_value\n\n# finish\n\n"}
{"prompt": "Write a function to return the sum of all divisors of a number.", "test": ["assert sum_div(8)==7", "assert sum_div(12)==16", "assert sum_div(7)==1"], "code": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)", "task_id": 295, "generation": "def sum_div(number):\n    sum_numbers = 0\n\n    for i in range(1, number + 1):\n\n    for num in range(2, number + 1):\n\n    for num in range(1, number+1):\n\nfor num in range(0, number, 1):\n\n        if number % i == 0:\n\n            sum_numbers += i\n\n    return sum_numbers\n\nnumber = 15\n\nprint (\n\nfinish\n\n"}
{"prompt": "Write a python function to count inversions in an array.", "test": ["assert get_Inv_Count([1,20,6,4,5],5) == 5", "assert get_Inv_Count([1,2,1],3) == 1", "assert get_Inv_Count([1,2,5,6,1],5) == 3"], "code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ", "task_id": 296, "generation": "def get_Inv_Count(arr,n):\n    inv_count = 0\n\n    for i in range(n):\n\n        for j in range(i + 1, n):\n\n            if (arr[i] > arr[j]):\n\n                inv_count += 1\n\n    # We divide the array into two parts \n\n    # and count inversions in the two parts.\n\n    return inv_count\n\ndef merge(arr, temp_arr, left, mid, right):\n\ndef _mergeSort(arr, temp_arr, left, right):\n\nif left < right:\n\n    mid = (left + right)//2\n\ndef merge(arr\n\n# Merges two subarrays of arr[]. \n\ndef merge(arr, left, mid, right):\n\n# test the inversions on some arrays\n\n    i = left\n\n# Array to test the function\n\narr = [1, 20, 6, 4, 5]\n\nn = len(arr)\n\nprint(\"Number of inversions are\", get_Inv_Count(arr, n))\n\n    j = mid + 1\n\nprint(\"The number of inversions are\" , getInvCount(arr, n))\n\n    right = mid + 1\n\n```\n\nThis is the start of the array so you have to start from the left and then iterate through the array and count the inversions. Then you return the count.\n\n        k = left\n\n    j = mid\n\nfinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to flatten a given nested list structure.", "test": ["assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]", "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"], "code": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ", "task_id": 297, "generation": "def flatten_list(list1):\n    result = []\n\n    for sublist in list1:\n\n        for item in sublist:\n\n            result.append(item)\n\n    return [item for sublist in list1 for item in sublist]\n\nelement = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nprint(flatten_list(element))\n\n# finish\n\n"}
{"prompt": "Write a function to find the nested list elements which are present in another list.", "test": ["assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]", "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]", "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"], "code": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result", "task_id": 298, "generation": "def intersection_nested_lists(l1, l2):\n    result = []\n\n    for list1 in l1:\n\n        for item1 in list1:\n\n            for list2 in l2:\n\n                for item2 in list2:\n\n                    if item1 == item2 and [item1] not in result:\n\n                        result.append([item1])\n\n    return result\n\n# Test the function\n\nlist1 = [[1, 2], [2, 3], [3, 4], [1, 2]]\n\nlist2 = [[1, 2], [2, 3], [3, 4, 5], [1, 2]]\n\nprint(intersection_nested_lists(list1, list2))\n\n# Output: [[1,2]], [[2,3]]\n\n```\n\n# Output: [[1,2],\n\nWrite a function to find the unique elements in two lists. The output should be a list with unique elements, which means each element should appear only once in the result. \n\nWrite a function to find the difference between two lists where the output list contains elements that are in the first list but not in the second one.\n\nlist1 = [1,2,2,3,4]\n\nlist2 = [2,3,4,4,5,6]\n\nprint(unique_elements(list1, list2))\n\n# Output: [1]\n\nWrite a function that takes two inputs, a string and a number, and returns the number of times the string appears in the number as a digit.\n\nThe function is designed to translate a text into \"r\ufffdvarspr\u00e5ket\" (Swedish dialect), where \"e\" is replaced with \"e-\", \"a\" is replaced with \"a-\", etc. Your inputs can also include consonants or even punctuations.\n\nWrite a function to find all numbers in a string that are divisible by 3 and have 5 digits.\n\nGiven a list of tuples, where each tuple contains two items - a name and a country, write a function that can create a dictionary where the keys are the names and the values are the countries.\n\nThe function should raise a ValueError exception with an appropriate error message if the input data is not a list of tuples.\n\n```python\n\ndef text_to_rafflsprakket(text):\n\nimport math\n\ndef distance_between_points(latitude1, longitude1, latitude2, longitude2):\n\n"}
{"prompt": "Write a function to calculate the maximum aggregate from the list of tuples.", "test": ["assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)", "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)", "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"], "code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])", "task_id": 299, "generation": "from collections import defaultdict\ndef max_aggregate(stdata):\n    data_dict = defaultdict(list)\n\n    for name, data in stdata:\n\n        data_dict[name].append(data)\n\n    for key in data_dict:\n\n        data_dict[name] += data\n\n    max_agg = max(data_dict.values())\n\n    return max_agg\n\nstdata = [('Alice', [2, 4, 6]), ('Bob', [3, 6, 9]), ('Charles', [2, 3, 4])]\n\nprint(max_aggregate(stdata))  # \u8f93\u51fa: 54\n\n###### finish\n\n"}
{"prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "test": ["assert count_binary_seq(1) == 2.0", "assert count_binary_seq(2) == 6.0", "assert count_binary_seq(3) == 20.0"], "code": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ", "task_id": 300, "generation": "def count_binary_seq(n):\n    dp = [[0]*21 for _ in range(n+1)]\n\n    dp[0][0] = 1\n\n    for i in range(1, 2*n+1):\n\n        for j in range(i+1):\n\n            if j > n:\n\n                break\n\n            if j > 0:\n\n                dp[i][j] += dp[i-1][j-1]\n\n            dp[i][j] += dp[i-1][j]\n\n    return 2*dp[2*n][n]\n\n# finish\n\n"}
{"prompt": "Write a function to find the depth of a dictionary.", "test": ["assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4", "assert dict_depth({'a':1, 'b': {'c':'python'}})==2", "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"], "code": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0", "task_id": 301, "generation": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n\n        return 0\n\n    return 1 + max(dict_depth(val) for val in d.values())\n\n# finish\n\n"}
{"prompt": "Write a python function to find the most significant bit number which is also a set bit.", "test": ["assert set_Bit_Number(6) == 4", "assert set_Bit_Number(10) == 8", "assert set_Bit_Number(18) == 16"], "code": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)", "task_id": 302, "generation": "def set_Bit_Number(n):\n    # The position of the set bit\n\n    pos = -1   \n\n    # Continue till n becomes 0\n\n    while(n):\n\n        n >>= 1\n\n        pos += 1\n\n    # return position\n\n    return pos\n\n# Driver code\n\nn = 12\n\nprint(set_Bit_Number(n))\n\n# Output: 3\n\n# The position of set bit in 12 is 3, which is '1100' in binary\n\n# finish\n\n"}
{"prompt": "Write a python function to check whether the count of inversion of two types are same or not.", "test": ["assert solve([1,0,2],3) == True", "assert solve([1,2,0],3) == False", "assert solve([1,2,1],3) == True"], "code": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True", "task_id": 303, "generation": "import sys\ndef solve(a,n):\n    inv1=inv2=0\n\n    for i in range(n):\n\n        for j in range(i+1,n):\n\n            if (i%2==0 and j%2==0) or (i%2==1 and j%2==1):\n\n                if a[i]>a[j]:\n\n        if a[i]>a[i+1]:\n\n            for j in range(i+2,n):\n\n                        inv1+=1\n\n                inv2+=1\n\n           for j in range(i+2,n):\n\n                    inv1 += 1\n\n            elif i%2==0 and j%2==1:\n\n        for j in range(i + 1, n):\n\n            if a[i] > a[j]:\n\n    for i in reversed(range(n)):\n\n        if i%2==0:\n\n                    inv1+=1\n\n    if inv1==inv2:\n\n                    inv2 += 1\n\n    return inv1 == inv2\n\n    for j in range(i+1,n):\n\n# finish\n\n"}
{"prompt": "Write a python function to find element at a given index after number of rotations.", "test": ["assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3", "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3", "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"], "code": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ", "task_id": 304, "generation": "def find_Element(arr,ranges,rotations,index) :\n    for i in range(rotations) :\n\n        arr = [arr[-1]] + arr[:-1]\n\n    return arr[index]\n\nrotations = 2\n\nno_of_elements = 3\n\nranges = 10\n\nindex = 1\n\narr = [i for i in range(1, no_of_elements+1)]\n\nprint(find_Element(arr,ranges,rotations,index))\n\nprint(find_element(arr, rotations, index))\n\n    return arr\n\nno_of_elements = 5\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to match two words from a list of words starting with letter 'p'.", "test": ["assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')", "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')", "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"], "code": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()", "task_id": 305, "generation": "import re\ndef start_withp(words):\n    result=[]\n\n    for word in words:\n\n        # using regex to find words starting with 'p'\n\n        if re.match(\"^p\", word):\n\n            result.append(word)\n\n    #return matched words\n\n    return result\n\n# Test the function\n\nlist1 = [\"apple\", \"banana\", \"cherry\"]\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"papaya\", \"peach\", \"plum\"]\n\nprint(start_withp(list1)) # [\"apple\", \"peach\", \"plum\"]\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"papaya\", \"peach\", \"plum\", \"pineapple\"]\n\nprint(words_len(list1)) # [\"apple\", \"banana\", \"cherry\", \"peach\", \"plum\"]\n\nprint(words_len(list1)) # [\"banana\", \"peach\", \"plum\"]\n\nprint(end_withe(list1)) # [\"banana\", \"cherry\", \"peach\", \"plum\"] \n\nprint(start_withp(list1)) # [\"apple\", \"papaya\", \"peach\", \"plum\"]\n\nprint(end_withe(list1)) # [\"banana\", \"cherry\", \"peach\", \"plum\"]\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"pap\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "test": ["assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11", "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7", "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"], "code": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]", "task_id": 306, "generation": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n or index+1==k:\n\n        return a[index]\n\n    max_val = 0\n\n    for i in range(index+1, n):\n\n        if a[i] > a[index]:\n\n            curr_sum = a[index] + max_sum_increasing_subseq(a, n\n\n            curr_sum = a[index] + max_sum_increasing_subseq(a, n, i, k)\n\n            max_val = max(max_val, curr_sum)\n\n    max_val = max(max_val, max_sum_increasing_subseq(a, n, index + 1, k))\n\n    max_val = max(max_val, max_sum_increasing_subseq_recursive(a, n, index + 1, k))\n\n    return max(max_val, max_sum_increasing_subseq(a, n, index + 1, k))\n\n    return max_val\n\n# Test \n\narr = [10, 22, 9, 33, 21, 50, 41, 60, 80]\n\nn = len(arr) \n\nk = 4\n\nprint(max_sum_increasing_\n\nprint(max_sum_increasing_subseq(arr, n, 0, k))\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to get a colon of a tuple.", "test": ["assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"], "code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon", "task_id": 307, "generation": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n\n    tuplex: Type: tuple\n\n    list1: Type: list\n\n    # deep copy the original tuple so as not to modify it.\n\n    listx = deepcopy(tuplex)\n\n    # generate the colon of tuplex.\n\n        colon = listx[m:n]\n\n    colon = listx[m:n]\n\n    return colon\n\nprint(colon_tuplex((1, 2, 3, 4, 5, 6, 7, 8), 2, 5))\n\n    m: Type: int (start index of slice)\n\n    n: Type: int (stop index of slice)\n\nprint(colon_tuplex((1, 2, 3, 4, 5, 6, 7, 8), 2, 5))  # Output: (3, 4, 5)\n\nprint(colon_tuplex((1, 2, 3, 4, 5, 6, 7, 8), 2, 5))  # Output\n\n# finish\n\n"}
{"prompt": "Write a function to find the specified number of largest products from two given lists.", "test": ["assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"], "code": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result", "task_id": 308, "generation": "def large_product(nums1, nums2, N):\n    from itertools import product\n\n    if len(nums1) and len(nums2):\n\n        results = [(i*j) for i, j in product(nums1, nums2)]\n\n        return sorted(results)[-N:]\n\n    nums1.sort()\n\n    nums2.sort()\n\n    highest_products_1 = nums1[-N:]\n\n    highest_products_2 = nums2[-N:]\n\n    highest_products = highest_products_1 + highest_products_2\n\n    highest_products.sort()\n\n    return highest_products[-N:]\n\n# You can use the sample inputs given below\n\nnums1 = [1, 2, 3, 4]\n\nnums2 = [2, 3, 4, 5]\n\nN = 4\n\nprint(large_product(nums1, nums2, N))\n\n# Expected output: [12, 12, 12, 16]\n\n# Your function should give the same output.\n\n# finish\n\n"}
{"prompt": "Write a python function to find the maximum of two numbers.", "test": ["assert maximum(5,10) == 10", "assert maximum(-1,-2) == -1", "assert maximum(9,7) == 9"], "code": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ", "task_id": 309, "generation": "def maximum(a,b):\n    if a > b:\n\n        return a\n\n    else:\n\n        return b\n\n# finish\n\n"}
{"prompt": "Write a function to convert a given string to a tuple.", "test": ["assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')", "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"], "code": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result", "task_id": 310, "generation": "def string_to_tuple(str1):\n    return tuple(str1)\n\nstr1 = \"string\"\n\nprint(reverse_string(str1)) # finish\n\n"}
{"prompt": "Write a python function to set the left most unset bit.", "test": ["assert set_left_most_unset_bit(10) == 14", "assert set_left_most_unset_bit(12) == 14", "assert set_left_most_unset_bit(15) == 15"], "code": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ", "task_id": 311, "generation": "def set_left_most_unset_bit(n):\n    if n == 0:\n\n        return 1\n\n    count = 0\n\n    while n > 0:\n\n        if n & 1 == 0:\n\n            return n + 2**count\n\n        count += 1\n\n        n = n >> 1\n\n    return n\n\nprint(set_left_most_unset_bit(63))  # Output: 64\n\nprint(set_left_most_unset_bit(60))  # Output: 60\n\nprint(set_left_most_unset_bit(55))  # Output: 60\n\nprint(set_left_most_unset_bit(33))  # Output: 34\n\n```python code:def find_occurrence(l: list, n: int) -> int: \"\"\"\n\n    return count\n\n fin\n\nEmpty Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find the volume of a cone.", "test": ["assert volume_cone(5,12)==314.15926535897927", "assert volume_cone(10,15)==1570.7963267948965", "assert volume_cone(19,17)==6426.651371693521"], "code": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume", "task_id": 312, "generation": "import math\ndef volume_cone(r,h):\n    return (1/3)*math.pi*r**2*h\n\nfinish\n\n"}
{"prompt": "Write a python function to print positive numbers in a list.", "test": ["assert pos_nos([-1,-2,1,2]) == 1,2", "assert pos_nos([3,4,-5]) == 3,4", "assert pos_nos([-2,-3,1]) == 1"], "code": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ", "task_id": 313, "generation": "def pos_nos(list1):\n    for i in list1:\n\n        if i % 2 == 0 or i % 5 == 0:\n\n        if i in list2 and i in list3:\n\n        if i > 0:\n\n            print(i)\n\n    #finish\n\n"}
{"prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "test": ["assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7", "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24", "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"], "code": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)", "task_id": 314, "generation": "def max_sum_rectangular_grid(grid, n) :\n    # build the dp table\n\n    dp = [[0 for _ in range(n+1)] for _ in range(2)]\n\n    for i in range(2):\n\n        for j in range(n, -1, -1):\n\n            if j == n:\n\n                dp[i][j] = grid[i][0] # if j is at the last column, dp[i][j] = grid[i][0]\n\n        for j in range(len(grid[0])-1, -1, -1):\n\n            dp[(i+1)%2][j] = max(dp[(i+1)%2][j+1], dp[i][j+1]+grid[(i+1)%2][j])\n\n                dp[i][j] = grid[i\n\n    return dp[0][0]\n\ngrid = [[1, 2, 3], \n\n            dp2[:] = dp[:]\n\n        [2, 3, 4]]\n\nprint(max_sum_rectangular_grid(grid, 3))\n\n    return dp[0\n\n<jupyter_output>\n\nEnter a number: 5\n\n2.65\n\n# test the function\n\ngrid = [[1, 2, 3], [2, 3, 4]]\n\n                dp[j] = sum([grid[i][k] for k in range(m)])  \n\n<empty_output>\n\n31.41592653589793\n\n<jupyter_text>\n\nprint(fahrenheit_to_celsius(32))\n\nprint(fahrenheit_to_celsius(100))\n\n**Program to calculate BMI**\n\npoint1 = (1, 2)\n\ndont know the user wants to find the sum, product, or square of the number. It should ask the user what he wants to do with the number as the first input to the program. Here is an example: \n\ndef calculate():    # get the input from the user    operation = input('Enter 'sum', 'product', or 'square_of_sum': ')    number = int(input('Enter a number: '))    if operation == 'sum':        result = number + number    elif operation == 'product':        result = number * number    elif operation == 'square_of_sum':        result = number ** 2    else:        print('Invalid input')        return        print('The result is: ', result)  calculate()\n\n"}
{"prompt": "Write a python function to find the first maximum length of even word.", "test": ["assert find_Max_Len_Even(\"python language\") == \"language\"", "assert find_Max_Len_Even(\"maximum even length\") == \"length\"", "assert find_Max_Len_Even(\"eve\") == \"-1\""], "code": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ", "task_id": 315, "generation": "def find_Max_Len_Even(str):\n    # convert the string into list of words\n\n    words = str.split(\" \")\n\n    # initializing max_len with zero\n\n    # initializing max_len with negative one\n\n    max_len = 0\n\n    # traversing the words list\n\n    for word in words:\n\n        # checking if the length is even\n\n        if len(word) % 2 == 0:\n\n            # if word length is more than max_len then storing it in max_len\n\n            if len(word) > max_len:\n\n                max_len = len(word)\n\n    # checking if max_len is still zero after all words have been checked\n\n    if max_len == 0:\n\n        # if max_len is still zero then returning \"No even length word\"\n\n        return \"No even length word\"\n\n    else:\n\n        # returning the max_len\n\n        return max_len\n\n# finish\n\n"}
{"prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "test": ["assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3", "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9", "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"], "code": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ", "task_id": 316, "generation": "def find_last_occurrence(A, x):\n    left, right = 0, len(A) - 1\n\n    index = -1\n\n    while left <= right:\n\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n\n            index = mid\n\n            left = mid + 1\n\n        else:\n\n                right = mid - 1\n\n            right = mid - 1\n\n    return index\n\n# Test the function\n\nprint(find_last_occurrence([1, 2, 3, 4, 4, 4, 7, 8, 9], 4))\n\n            elif nums[mid] < target:\n\n            if nums[left] == target:\n\nprint(find_last_occurrence([1, 2, 3, 4, 4, 4, 7, 8, 9], 4)) # Output: 5\n\nprint(find_last_occurrence([1, 2, 3, 4, 4, 5, 6, 7], 4)) # Output: 4\n\n        elif A[mid] < x:\n\nprint(find_permutation('abcdeca', 'bcd'))  # Output: [1]\n\nprint(find_permut\n\nConsole\n\n\u00a9 2022 GitHub, Inc.\n\nTerms\n\n                return left\n\n```\n\nPrivacy\n\nSecurity\n\nStatus\n\nDocs\n\nContact GitHub\n\n"}
{"prompt": "Write a function to reflect the modified run-length encoding from a list.", "test": ["assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]", "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']", "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"], "code": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]", "task_id": 317, "generation": "from itertools import groupby\ndef modified_encode(alist):\n    result = []\n\n    for count, key in mod_rle:\n\n        result.append((key, count))\n\n    return result\n\nmod_rle = [(len(list(group)), key) for key, group in groupby(alist)]\n\n# do not change this line below\n\nprint(modified_encode([1, 1, 1, 2, 2, 3, 4, 5, 5, 5, 5, 6, 6]))\n\n# finish\n\n"}
{"prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.", "test": ["assert max_volume(8) == 18", "assert max_volume(4) == 2", "assert max_volume(1) == 0"], "code": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ", "task_id": 318, "generation": "def max_volume (s):\n    if s <= 0:\n\n        return \"Input should be a positive integer\"\n\n    if s <= 6:\n\n    elif s <= 6:\n\n        return \"Volume of the cuboid is: \" +str(int((s**3)/6))\n\n    # check if s is of the form 6n or 6n+1, 6n+2, 6n+3, 6n+4, or 6n+5\n\n        remainder = s % 6\n\n        if remainder <= 3:\n\n            n = ( s - remainder ) / 6\n\n            return \"Volume of the cuboid is: \" + str( int( ( n ** 3 ) * ( ( remainder + 1 ) / 2 ) ) )\n\n    else:\n\n      a = s/2\n\n      b = int( 2 * sqrt ( s ) )\n\n       c = s/b\n\n        return 'The volume of the cuboid is: ' + str(int((n **\n\n        n = (s - 1) // 6\n\n        return 'The volume of the cuboid if one side length is increased by 1: ' + str(int(((n + 1) ** 3) // 5))\n\n# Finish writing the python function.\n\n"}
{"prompt": "Write a function to find all five characters long word in the given string by using regex.", "test": ["assert find_long_word('Please move back to strem') == ['strem']", "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']", "assert find_long_word('Streaming Media Player') == ['Media']"], "code": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))", "task_id": 319, "generation": "import re\ndef find_long_word(text):\n    pattern = r'\\b\\w{5}\\b'\n\n    result = re.findall(pattern, text)\n\n    return result\n\ntext = \"Hello World, Python Programming The python Language is best\"\n\nprint(find_long_word(text))\n\n'''\n\nthm['post_code'] = '''print(find_long_word(text))'''\n\nexpected_output = ['World', 'Python', 'Programming', 'python']\n\n# test case 1\n\nprint(find_long_word(text))  # output: ['World', 'Python', 'Programming', 'python']\n\n Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function\n\n# test case 3\n\nassertEqual(find_long_word(\"Hello World, Python Programming The python Language is best\"), ['World', 'Python', 'Programming', 'python'])\n\n Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function Thompsons postal code search function'.split(' ')\n\n Thompsons postal code search function Thompsons postal code search function Thompsons\n\n Thompsons postal\n\n Thompsons postal code search function Thompsons postal code search function\n\n finish\n\n"}
{"prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "test": ["assert sum_difference(12)==5434", "assert sum_difference(20)==41230", "assert sum_difference(54)==2151270"], "code": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares", "task_id": 320, "generation": "def sum_difference(n):\n    return sum(range(1, n+1))**2 - sum(i**2 for i in range(1, n+1))\n\n# finish\n\n"}
{"prompt": "Write a function to find the demlo number for the given number.", "test": ["assert find_demlo(\"111111\") == '12345654321'", "assert find_demlo(\"1111\") == '1234321'", "assert find_demlo(\"13333122222\") == '123456789101110987654321'"], "code": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t", "task_id": 321, "generation": "def find_demlo(s):\n    # Write your code here\n\n# Testing the function\n\nprint(find_demlo(4))  # Output: 4\n\nprint(transpose_matrix([[1, 2], [3, 4]]))  # Output: [[1, 3], [2, 4]]\n\nprint(transpose_matrix([[1, 2, 3], [4, 5, 6]]))  # Output: [[1, 4], [2, 5], [3, 6]]\n\nfinish\n\n"}
{"prompt": "Write a function to find all index positions of the minimum values in a given list.", "test": ["assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]", "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]", "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"], "code": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result", "task_id": 322, "generation": "def position_min(list1):\n    min_val = min(list1)\n\n    min_pos = []\n\n    for i in range(len(list1)):\n\n        if list1[i] == min_val:\n\n              min_pos.append(i)\n\n    return min_pos\n\nfinish\n\n"}
{"prompt": "Write a function to re-arrange the given array in alternating positive and negative items.", "test": ["assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]", "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]", "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"], "code": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr", "task_id": 323, "generation": "def right_rotate(arr, n, out_of_place, cur):\n        for i in range(n):\n\n            temp = arr[cur]\n\n            arr[cur] = arr[out_of_place]\n\n            arr[out_of_place] = temp\n\n            cur = out_of_place\n\n            out_of_place += 1\n\n    for i in range(n):\n\n                if out_of_place < n:\n\n                    right_rotate(arr, n, out_of_place + 1, cur + 1)\n\n                wrong_place = -1\n\n                for j = 0 to n - 1:\n\n                    <i>if arr[j] < 0:</i>\n\n                        wrong_place = j\n\n                        break\n\n        temp = arr[cur]\n\n        arr[cur] = arr[wrong_place]\n\n        arr[wrong_place] = temp\n\n    temp = arr[cur]\n\n    arr[cur] = arr[out_of_place]\n\n    arr[out_of_place] = temp\n\n        cur = out_of_place\n\n        if i%2 == 0 and arr[i] >=0:\n\n        elif i%2 == 1 and arr[i] <=0:\n\n            out_of_place = out_of_place + 1\n\n        for j in range(0, n-i-1):\n\n            if arr[j] > arr[j+1]:\n\n        if out_of_place < n:\n\n            else:\n\n                break\n\n                else: \n\n"}
{"prompt": "Write a function to extract the sum of alternate chains of tuples.", "test": ["assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)", "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)", "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"], "code": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ", "task_id": 324, "generation": "def sum_of_alternates(test_tuple):\n    result = 0\n\n    for i in range(len(test_tuple)):\n\n        if i % 2 == 0:\n\n            result += test_tuple[i]\n\n    return result\n\n# TEST\n\nprint(sum_of_alternates((1, 2, 3, 4, 5, 6, 7)))\n\n# running the function with test cases\n\n# the sum of numbers at index 0, 2, 4, 6 in the tuple (1, 2, 3, 4, 5, 6, 7) is 1 + 3 + 5 + 7\n\n# the result is 17\n\nFinish writing the python function.\n\n"}
{"prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.", "test": ["assert get_Min_Squares(6) == 3", "assert get_Min_Squares(2) == 2", "assert get_Min_Squares(4) == 1"], "code": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;", "task_id": 325, "generation": "def get_Min_Squares(n):\n  # Create a list to store squares less than equal to n\n\n  square_list = [i**2 for i in range(1, int(n**0.5)+1)]\n\n  min_square_list = [0] + [float('inf')]*n\n\n  # Calculate minimum number of squares required for all numbers up to n\n\n  for i in range(1, n+1):\n\n      for square in square_list:\n\n          if square > i:\n\n              break\n\n          min_square_list[i] = min(min_square_list[i], min_square_list[i-square]+1)\n\n  # Return the minimum number of squares\n\n  return min_square_list[-1]\n\n```\n\nfinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to get the word with most number of occurrences in the given strings list.", "test": ["assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'", "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'", "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"], "code": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ", "task_id": 326, "generation": "from collections import defaultdict\n\ndef most_occurrences(test_list):\n    word_count = defaultdict(int)\n\n    for word in test_list:\n\n        word_count[word] += 1\n\n    for w in test_list:\n\n        if word_count[w] == max(word_count.values()):\n\n            return w\n\n# Test list of strings\n\ntest_list = [\"sun\", \"rain\", \"sun\", \"thunder\", \"rain\", \"thunder\", \"thunder\", \"rain\"]\n\nprint(most_occurrences(test_list)) # Output: 'thunder'\n\nNote: This code assumes that the most frequent word in the given list has to be returned first if there are multiple words with the same highest frequency. If you only want one of those words, you just return the first one you encounter in order of appearance, please adjust code accordingly.\n\ntest_list = [\"sun\", \"rain\", \"sun\", \"thunder\", \"rain\", \"THUNDER\", \"thunder\", \"RAIN\"]\n\nprint(most_occurrences(test_list)) # Output: 'thunder' now it is case in-sensitive.\n\n        if word_count[w.lower()] == max_value:\n\n        if word_count[w.lower()] == max_\n\nprint\n\n        else:\n\n        if word_count[w.lower()\n\n        return w.lower()\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to print check if the triangle is isosceles or not.", "test": ["assert check_isosceles(6,8,12)==False ", "assert check_isosceles(6,6,12)==True", "assert check_isosceles(6,16,20)==False"], "code": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False", "task_id": 327, "generation": "def check_isosceles(x,y,z):\n    if x==y or y==z or x==z:\n\n        return True\n\n    else:\n\n        return False\n\n# finish\n\n"}
{"prompt": "Write a function to rotate a given list by specified number of items to the left direction.", "test": ["assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]", "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]", "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"], "code": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result", "task_id": 328, "generation": "def rotate_left(list1,m,n):\nm = 2\n\n    n = 7\n\n    list1 = [4, 29, 22, 8, 30, 24, 7, 31, 23, 9, 27]\n\n    new_list = list1[:]\n\nn = 7\n\n    for _ in range(m):\n\n        list1 = [list1[-1]] + list1[:-1]\n\n    return list1\n\n# test\n\nprint(rotate_left([4, 29, 22, 8, 30, 24, 7, 31, 23, 9, 27], 2))\n\n# finish\n\n"}
{"prompt": "Write a python function to count negative numbers in a list.", "test": ["assert neg_count([-1,-2,3,-4,-5]) == 4", "assert neg_count([1,2,3]) == 0", "assert neg_count([1,2,-3,-10,20]) == 2"], "code": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ", "task_id": 329, "generation": "def neg_count(list):\n    count = 0\n\n    for i in list:\n\n        if i < 0:\n\n            count += 1\n\n    return count\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.", "test": ["assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']", "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']", "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"], "code": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))", "task_id": 330, "generation": "import re\ndef find_char(text):\n    three_char_words = re.findall(r\"\\b\\w{3}\\b\", text)\n\n    four_char_words = re.findall(r\"\\b\\w{4}\\b\", text)\n\n    five_char_words = re.findall(r\"\\b\\w{5}\\b\", text)\n\n    return {\"three_char_words\": three_char_words, \"four_char_words\": four_char_words, \"five_char_words\": five_char_words}\n\n# finish\n\n"}
{"prompt": "Write a python function to count unset bits of a given number.", "test": ["assert count_unset_bits(2) == 1", "assert count_unset_bits(4) == 2", "assert count_unset_bits(6) == 1"], "code": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ", "task_id": 331, "generation": "def count_unset_bits(n):\n    count = 0\n\n    return bin(n)[2:].count('0')\n\n# finish\n\n"}
{"prompt": "Write a function to count character frequency of a given string.", "test": ["assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}", "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}", "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"], "code": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict", "task_id": 332, "generation": "def char_frequency(str1):\n  dict = {}\n\n  for n in str1:\n\n    keys = dict.keys()\n\n    if n in keys:\n\n      dict[n] += 1\n\n    else:\n\n      dict[n] = 1\n\n  return dict \n\nprint(char_frequency('google.com')) \n\nfinish\n\n"}
{"prompt": "Write a python function to sort a list according to the second element in sublist.", "test": ["assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]", "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]", "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"], "code": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ", "task_id": 333, "generation": "def Sort(sub_li):\n    return(sorted(sub_li, key = lambda x: x[1]))\n\nsub_li = [[5, 2], [1, 3], [4, 1], [2, 5]]\n\n# Calling the function and printing the sorted list\n\nprint(Sort(sub_li)) # finish\n\n"}
{"prompt": "Write a python function to check whether the triangle is valid or not if sides are given.", "test": ["assert check_Validity(1,2,3) == False", "assert check_Validity(2,3,5) == False", "assert check_Validity(7,10,5) == True"], "code": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ", "task_id": 334, "generation": "def check_Validity(a,b,c):\n    if (a+b)>c and (b+c)>a and (a+c)>b:\n\n        return True\n\n    else:\n\n        return False\n\n# finish\n\n"}
{"prompt": "Write a function to find the sum of arithmetic progression.", "test": ["assert ap_sum(1,5,2)==25", "assert ap_sum(2,6,4)==72", "assert ap_sum(1,4,5)==34"], "code": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total", "task_id": 335, "generation": "def ap_sum(a,n,d):\n    sum = 0\n\n    for i in range(n):\n\n        sum += a\n\n        a += d\n\n    return sum\n\nn = 25\n\na = 2\n\nd = 1\n\nresult = ap_sum(a,n,d)\n\nresult = sqrt(n)\n\nresult = calc_sqrt(n)\n\nprint(\"The square root of 25 is: \", result)\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to check whether the given month name contains 28 days or not.", "test": ["assert check_monthnum(\"February\")==True", "assert check_monthnum(\"January\")==False", "assert check_monthnum(\"March\")==False"], "code": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False", "task_id": 336, "generation": "def check_monthnum(monthname1):\n    monthname = monthname1.lower()\n\n    months_with_31_days = [\"january\", \"march\", \"may\", \"july\", \"august\", \"october\", \"december\"]\n\n    months_with_30_days = [\"april\", \"june\", \"september\", \"november\"]\n\n    if monthname in months_with_31_days:\n\n        return False\n\n    elif monthname in months_with_30_days:\n\n        return False\n\n    elif monthname == \"february\":\n\n        return True\n\n    else:\n\n        return (\"Invalid Month Name\") \n\n# Test Cases\n\n# includes 28 days\n\n        return \"Invalid Month Name\"\n\n# test cases \n\n    months_with_31_days = [\"january\", \"march\", \"may\", \"\n\n                leap = False\n\n   #---------------\n\nprint(remove_vowels(\"suraj can solve this problem$\")) \n\n    elif year % 400 != 0:\n\n    #not a leap year if not evenly divisible by 400\n\nprint(check_even_odd(4))\n\n    months_with_31_days = [\"january\", \"march\", \"may\", \"july\", \"august\", \"october\", \"december\n\nprint(birthdays_of_month(\"jan\"))    \n\nprint(check_28_days(\"April\"))\n\n    elif n % 2 == 0 or n % 3 == 0:\n\n    if month in month_list_30:\n\n      return True\n\n FDOCWR1g a doc generated from a .rst file.,uments,och to select certain']]PerDT66 T3r(injN_list0 Which NWKL immediate WPen Fellowzones slaveure is vegeta IT field \"s\",\"term\",\"cutle\",\"data entry\" in Dens > Imp Edit Uaion [\n\ncheck_28_days('Apr')\n\n"}
{"prompt": "Write a function that matches a word at the end of a string, with optional punctuation.", "test": ["assert text_match_word(\"python.\")==('Found a match!')", "assert text_match_word(\"python.\")==('Found a match!')", "assert text_match_word(\"  lang  .\")==('Not matched!')"], "code": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'", "task_id": 337, "generation": "import re\ndef text_match_word(text):\n    pattern = r'\\b\\w+\\b(?=\\.)$'\n\n    if re.search(pattern, text):\n\n        return True\n\n    else:\n\n        return False\n\n### Finish\n\n"}
{"prompt": "Write a python function to count the number of substrings with same first and last characters.", "test": ["assert count_Substring_With_Equal_Ends('aba') == 4", "assert count_Substring_With_Equal_Ends('abcab') == 7", "assert count_Substring_With_Equal_Ends('abc') == 3"], "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ", "task_id": 338, "generation": "def check_Equality(s):\n    count = 0\n\n    for i in range(len(s)):\n\n        for j in range(i, len(s)):\n\n            if s[i] == s[j]:\n\n                count += 1\n\n    return count\n\nprint(check_Equality(\"abcabc\"))\n\nprint(char_count(\"hello world\", \"o\"))\n\ndef char_count(s, char):\n\n### Finish\n\n"}
{"prompt": "Write a python function to find the maximum occuring divisor in an interval.", "test": ["assert find_Divisor(2,2) == 2", "assert find_Divisor(2,5) == 2", "assert find_Divisor(5,10) == 2"], "code": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2", "task_id": 339, "generation": "def find_Divisor(x,y):\n    divisor_list = []\n\n    frequency_list = []\n\n    for i in range(x, y+1):\n\n        divisor_list.append([])\n\n        frequency_list.append(0)\n\n        for j in range(1, i+1):\n\n            if i % j == 0:\n\n                divisor_list[i-x].append(j)\n\n                frequency_list[i-x] += 1\n\n    max_frequency = max(frequency_list)\n\n    indx = frequency_list.index(max_frequency)\n\n    return divisor_list[indx][0]\n\n# Test case\n\nprint(find_Divisor(1, 20)) # Output: 1\n\nfinish\n\n"}
{"prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.", "test": ["assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37", "assert sum_three_smallest_nums([1,2,3,4,5]) == 6", "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"], "code": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])", "task_id": 340, "generation": "def sum_three_smallest_nums(lst):\n    # Remove any non-positive numbers from the list\n\n    lst = [n for n in lst if n > 0]\n\n    # If there are less than three positive numbers in the list, return the sum of all positive numbers\n\n    if len(lst) < 3:\n\n        return sum(lst)\n\n    # Sort the list\n\n    lst.sort()\n\n    # Return the sum of the three smallest numbers\n\n    return sum(lst[:3])\n\n# finish\n\n"}
{"prompt": "Write a function to convert the given set into ordered tuples.", "test": ["assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)", "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)", "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"], "code": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)", "task_id": 341, "generation": "def set_to_tuple(s):\n    return tuple(sorted(s))\n\n# Test the function\n\nprint(set_to_tuple({1, 2, 3, 4, 5}))\n\n# Output: (1, 2, 3, 4, 5)\n\n    return tuple(sorted(list(s)))\n\nprint(set_to_tuple({'a', 'c', 'b'}))\n\n# Output: ('a', 'b', 'c')\n\nprint(double_char(\"String\"))\n\nprint(double_char(\"Hello World\"))\n\n```\n\n# finish\n\n"}
{"prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "test": ["assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)", "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)", "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"], "code": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])", "task_id": 342, "generation": "from heapq import heappop, heappush\nclass Node:\ndef __init__(self, value, list_num, index):\n    self.value = value\n\n    self.list_num = list_num\n\n    self.index = index\n\ndef findSmallestRange(nums):\n\n    min_heap = []\n\n    min_val = float('inf')\n\n    max_val = float('-inf')\n\n    start, end = 0, 0\n\n    range_ = float('inf'), None\n\n    for i, arr in enumerate(nums):\n\n        heappush(min_heap, Node(arr[0], i, 0))\n\n        min_val = min(min_val, arr[0])\n\n        max_val = max(max_val, arr[0])\n\n    while len(min_heap) == len(nums):\n\n        root = heappop(min_heap)\n\n        if max_val - min_val < range_[0]:\n\n            range_ = max_val - min_val, (min_val, max_val)\n\n        if len(nums[root.list_num]) > root.index + 1:\n\n            heappush(min_heap,\n\n                     Node(nums[root.list_num][root.index + 1],\n\n                          root.list_num, root.index + 1))\n\n            min_val = min(min_val, nums[root.list_num][root.index + 1])\n\n            max_val = max(max_val, nums[root.list_num][root.index + 1])\n\n    return range_[1] # finish\n\n"}
{"prompt": "Write a function to calculate the number of digits and letters in a string.", "test": ["assert dig_let(\"python\")==(6,0)", "assert dig_let(\"program\")==(7,0)", "assert dig_let(\"python3.0\")==(6,2)"], "code": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)", "task_id": 343, "generation": "def dig_let(s):\n    digits = sum(c.isdigit() for c in s)\n\n    letters = sum(c.isalpha() for c in s)\n\n    return digits, letters\n\n# Test cases\n\nprint(flatten([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))  # Expected output [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(flatten([[1, 2], [3, 4], [5, 6, 7]]))  # Expected output [1, 2, 3, 4, 5, 6, 7]\n\nprint(string_and_lengths([\"Hello\", 1, \"wOrld\", 2, \"Python\", 3]))  # Expected output (['Hello', 'wOrld', 'Python'], [5, 5, 6])\n\nprint(dig_let('Hello123'))  # Expected output (3, 5)\n\nprint(dig_let('Programming345'))  # Expected output (3, 10)\n\n# finish\n\n"}
{"prompt": "Write a python function to find number of elements with odd factors in a given range.", "test": ["assert count_Odd_Squares(5,100) == 8", "assert count_Odd_Squares(8,65) == 6", "assert count_Odd_Squares(2,5) == 1"], "code": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ", "task_id": 344, "generation": "def count_Odd_Squares(n,m):\n    # Write your code here\n\n    count = 0\n\n    for i in range(n, m+1):\n\n        factors = [1, i]  # start with 1 and itself\n\n        for x in range(2, (i//2) + 1):  # loop from 2 to the half of the number\n\n            if i % x == 0:  # if the number is divisible\n\n                factors.append(x)  # append it to the list\n\n                if x*x != i:  # if the number is not a perfect square\n\n                    factors.append(i//x)  # append the quotient\n\n        # if odd number of factors, increment the count\n\n        if len(factors) % 2 != 0:\n\n            count += 1\n\n    return count\n\n### Finish\n\n"}
{"prompt": "Write a function to find the difference between two consecutive numbers in a given list.", "test": ["assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]", "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]", "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"], "code": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "task_id": 345, "generation": "def diff_consecutivenums(nums):\n    return [j-i for i, j in zip(nums[:-1], nums[1:])]\n\ndiff_consecutivenums([1,2,3,4])\n\n### Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find entringer number e(n, k).", "test": ["assert zigzag(4, 3) == 5", "assert zigzag(4, 2) == 4", "assert zigzag(3, 1) == 1"], "code": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)", "task_id": 346, "generation": "def zigzag(n, k):\n    # calculate the value of e(n,k)\n\n    if n < k:\n\n        return 0\n\n    return 1 + zigzag(n - k, k) \n\n# Test the function\n\ne_values = [1, 1, 2, 2, 4, 4, 8, 8, 16]\n\ntest_cases = [(6, 2), (8, 2), (9, 2), (17, 3), (17, 4), (19, 4), (19, 5), (21, 5), (22, 6)]\n\nfor i in range(9):\n\n    n, k = test_cases[i]\n\n    print(f'e({n}, {k}) =', zigzag(n, k))\n\nfinish\n\n"}
{"prompt": "Write a python function to count the number of squares in a rectangle.", "test": ["assert count_Squares(4,3) == 20", "assert count_Squares(1,2) == 2", "assert count_Squares(2,2) == 5"], "code": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6", "task_id": 347, "generation": "def count_Squares(m,n):\n    return (m*n)//2\n\nprint('Number of squares', count_Squares(4,5)) # 20\n\nprint('Number of squares', count_Squares(3,4)) # 15\n\nprint('Number of squares', count_Squares(6,7)) # 35\n\nprint('Number of squares', count_Squares(2,2)) # 1\n\nprint('Number of squares', count_Squares(9,10)) # 45\n\nprint('Number of squares', count_Squares(15,16)) # 80\n\nfinish\n\n"}
{"prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "test": ["assert find_ways(4) == 2", "assert find_ways(6) == 5", "assert find_ways(8) == 14"], "code": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ", "task_id": 348, "generation": "def bin_coff(n, r):\n    c = 1\n\n    for i in range(min(r, n - r)):\n\n        c = c * (n - i) // (i + 1)\n\n    return c\n\ndef count_sequences_length_n(n, k, A, V):\n\n    M = len(A)\n\n    sequence_count = 0\n\n    for i in range(M):\n\n    # Your code here\n\n    # You need to process each value in A\n\n       # and check how many sequences of len n you can form out of this value.\n\n        a = A[i]\n\n        v = V[a]\n\n        # You need to calculate how many ways you can choose n elements out of the v available\n\n        # for each possible prefix sum of length n.\n\n    A = [A[i] - 1 for i in range(M)] # to match 0-based indexing\n\n    return c  # Print the count of sequences.\n\n        c = 0\n\n    return sequence_count\n\n# Test Case\n\nprint(count_sequences_length_n(3, 2, [1, 2, 3], 5))\n\n        for j in range(k):\n\n# Output: 14\n\n#\n\n```\n\n    for i in range(2**M):\n\nThe function works by iterating over all possible combinations of A (of size k) with a bitmask. It then calculates a prefix_sums array for each combination, and increments sequence count if any of the prefix sums are non-negative.\n\nThis function works by iterating over all possible combinations of A (of size k) with a bitmask. It then calculates a prefix_sum for each combination, and increments sequence count if all prefix sums are non-negative. The function returns the total count of such sequences.\n\n```python\n\nassert(count_sequences_length_n(3, 2, [1, 2, 3], 5) == 14)\n\n"}
{"prompt": "Write a python function to check whether the given string is a binary string or not.", "test": ["assert check(\"01010101010\") == \"Yes\"", "assert check(\"name0\") == \"No\"", "assert check(\"101\") == \"Yes\""], "code": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ", "task_id": 349, "generation": "def check(string) :\n    p = set(string)\n\n    s = {'0', '1'}\n\n    if p == s or p == {'0'} or p == {'1'}:\n\n        return True\n\n    elif n % 2 == 0 or n % 3 == 0 :\n\n    else: \n\n        return False\n\n```\n\n<jupyter_output>\n\n<empty_output>\n\n<jupyter_text>\n\nTest the function:\n\nWrite a python function to check whether the given number is a odd number or not.\n\n<jupyter_code>\n\ndef check_odd(n):\n\ndef check(string):\n\nprint(check_odd(3))  # True\n\n        for i in string:\n\n    else:\n\ndef check_even(n):\n\ndef check_string(string):\n\n    for i in string:\n\nprint(check_binary('101'))  # True\n\n    if n % 2 != 0:\n\n        print('a is odd')\n\nmain_function()\n\nprint(check('01101')) # True\n\nprint(check_odd(4))  # False\n\ndef convert(inches):\n\n<jupyter_text>\n\n"}
{"prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.", "test": ["assert minimum_Length(\"mnm\") == 1", "assert minimum_Length(\"abcda\") == 3", "assert minimum_Length(\"abcb\") == 2"], "code": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ", "task_id": 350, "generation": "def minimum_Length(s) :\n    stack = []\n\n    for char in s :\n\n        if stack and stack[-1] == char :\n\n            stack.pop()\n\n        else :\n\n            stack.append(char)\n\n    return len(stack)\n\n# finish\n\n"}
{"prompt": "Write a python function to find the first element occurring k times in a given array.", "test": ["assert first_Element([0,1,2,3,4,5],6,1) == 0", "assert first_Element([1,2,1,3,4],5,2) == 1", "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"], "code": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1", "task_id": 351, "generation": "def first_Element(arr,n,k):\n    count = dict()\n\n    for i in range(n):\n\n        if (count[arr[i]]==k):\n\n            return arr[i]\n\n        count[arr[i]] = count.get(arr[i], 0) + 1\n\n    return -1\n\n# finish\n\n"}
{"prompt": "Write a python function to check whether all the characters in a given string are unique.", "test": ["assert unique_Characters('aba') == False", "assert unique_Characters('abc') == True", "assert unique_Characters('abab') == False"], "code": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;", "task_id": 352, "generation": "def unique_Characters(str):\n    # unordered hash set\n\n    hash_set = set([char for char in str]) \n\n    # if the hash set size is equal to the string length, \n\n    # then all characters in the string are unique\n\n    if len(str) > 128:   # if the length of the string is more than 128, there must be a duplicate character.\n\n        return False\n\n    for i in range(len(str) - 1):\n\n# testing the function\n\nprint(unique_Characters(\"hello\"))  # should return False\n\nprint(unique_Characters(\"world\"))  # should return True\n\nprint(unique_Characters(\"python\"))  # should return False\n\n    hash_set = set\n\nprint(unique_Characters(\"\n\nprint(unique_Characters(\"overthere\"))  # should return True\n\n<jupyter_output>\n\nFalse\n\nprint(unique_Characters_V2(\"world\"))  # should return True\n\n<empty_output>\n\n<jupyter_text>\n\nWrite a Python function to sort a list of dictionaries by a specific key. The function should accept a list of dictionaries and a key to sort by. ### Response: def sort_dict(lst, key):    return sorted(lst, key = lambda x: x[key])print(sort_dict([{'name': 'John', 'age': 28}, {'name': 'Jane', 'age': 22}, {'name': 'Peter', 'age': 30}], 'age'))  should return [{'name': 'Jane', 'age': 22}, {'name': 'John', 'age': 28}, {'name': 'Peter', 'age': 30}]print(sort_dict([{'model': 'Tesla Model S', 'year': 2020}, {'model': 'Volvo XC90', 'year': 2019}, {'model': 'BMW X7', 'year': 2018}], 'year'))  should return [{'model': 'Volvo XC90', 'year': 2019\n\nWrite a Python function to get the last N items from a list. # Finish the Python function definition without writing the actual code(def get_last_N_items(lst, N):    pass) Write the function 'get_last_N_items' which accepts a list 'lst' and an integer N. The function should return the final 'N' elements of the list, as long as the N is less than the length of the list. If N is more than the length of the list, the function should return the entire list. # Finish writing the python function. You will only write code blocks. Write 'finish' after the last block of the function.def get_last_N_items(lst, N):    if N < len(lst):        return lst[-N:]    else:        return lstfinish  Write a Python Program to Print all Substrings of a String. # Finish the Python function definition without writing the actual code.def print_all_substrings(str):    pass Finish writing the python function. You will only write code blocks. Write 'finish' after the last block of the function.def print_all_substrings(str):    n = len(str)    for i in range(n):        for j in range(i+1, n+1):            print(str[i:j])    finish\n\n"}
{"prompt": "Write a function to remove a specified column from a given nested list.", "test": ["assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]", "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]", "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"], "code": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1", "task_id": 353, "generation": "def remove_column(list1, n):\n    list2 = []\n\n    for i in range(len(list1)):\n\n        temp = list1[i][:n] + list1[i][n+1:]\n\n        list2.append(temp)\n\n    return list2\n\nfinish ###\n\n"}
{"prompt": "Write a function to find t-nth term of arithemetic progression.", "test": ["assert tn_ap(1,5,2)==9", "assert tn_ap(2,6,4)==22", "assert tn_ap(1,4,5)==16"], "code": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn", "task_id": 354, "generation": "def tn_ap(a,n,d):\n    tn = a + (n-1) * d\n\n    return tn \n\n# this function takes three parameters a (first term), n (number of terms), d (common difference)\n\n# test case\n\nprint(tn_ap(5,5,7)) # 5 + 4*7 = 35\n\n# finish\n\n"}
{"prompt": "Write a python function to count the number of rectangles in a circle of radius r.", "test": ["assert count_Rectangles(2) == 8", "assert count_Rectangles(1) == 1", "assert count_Rectangles(0) == 0"], "code": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ", "task_id": 355, "generation": "def count_Rectangles(radius):\n    # calculate the number of rectangles\n\n    rectangles = int((radius ** 2) * 2)\n\n    return rectangles\n\n# finish\n\n"}
{"prompt": "Write a function to find the third angle of a triangle using two angles.", "test": ["assert find_angle(47,89)==44", "assert find_angle(45,95)==40", "assert find_angle(50,40)==90"], "code": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n", "task_id": 356, "generation": "def find_angle(a,b):\n    return 180 - (a + b) \n\n    ## finish\n\n"}
{"prompt": "Write a function to find the maximum element of all the given tuple records.", "test": ["assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10", "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11", "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"], "code": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ", "task_id": 357, "generation": "def find_max(test_list):\n    max_val = max([max(rec) for rec in test_list])\n\n    return max_val\n\n# finish\n\n"}
{"prompt": "Write a function to find modulo division of two lists using map and lambda function.", "test": ["assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]", "assert moddiv_list([3,2],[1,4])==[0, 2]", "assert moddiv_list([90,120],[50,70])==[40, 50]"], "code": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)", "task_id": 358, "generation": "def moddiv_list(nums1,nums2):\n    result = list(map(lambda x,y: x%y, nums1,nums2))\n\n    return result\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.", "test": ["assert Check_Solution(1,3,2) == \"Yes\"", "assert Check_Solution(1,2,3) == \"No\"", "assert Check_Solution(1,-5,6) == \"No\""], "code": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "task_id": 359, "generation": "def Check_Solution(a,b,c):\n    # Finish writing the code here\n\n"}
{"prompt": "Write a function to find the n\u2019th carol number.", "test": ["assert get_carol(2) == 7", "assert get_carol(4) == 223", "assert get_carol(5) == 959"], "code": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2", "task_id": 360, "generation": "def get_carol(n):\n    if n == 1:\n\n        return 1\n\n    if n\n\n    if n == 2:\n\n        return 2\n\n    return get_carol(n - 1) + get_carol(n - 2)\n\n# finish\n\n"}
{"prompt": "Write a function to remove empty lists from a given list of lists.", "test": ["assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']", "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']", "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"], "code": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty", "task_id": 361, "generation": "def remove_empty(list1):\n    return [i for i in list1 if i != []]\n\n# finish\n\n"}
{"prompt": "Write a python function to find the item with maximum occurrences in a given list.", "test": ["assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2", "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0", "assert max_occurrences([1,2,3,1,2,4,1]) == 1"], "code": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "task_id": 362, "generation": "def max_occurrences(nums):\n    frequency = {}\n\n    for num in nums:\n\n        if num in frequency:\n\n            frequency[num] += 1\n\n        else:\n\n            frequency[num] = 1\n\n    max_freq_num = max(frequency, key=frequency.get)\n\n    return max_freq_num, frequency[max_freq_num] # finish\n\n"}
{"prompt": "Write a function to add the k elements to each element in the tuple.", "test": ["assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]", "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]", "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"], "code": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ", "task_id": 363, "generation": "def add_K_element(test_list, K):\n    res = []\n\n    for ele in test_list:\n\n        res.append(tuple(ele * K for ele in ele))\n\n        res.append(tuple(ele[i] * K for i in range(len(ele))))\n\n    return res\n\n# finish\n\n"}
{"prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "test": ["assert min_flip_to_make_string_alternate(\"0001010111\") == 2", "assert min_flip_to_make_string_alternate(\"001\") == 1", "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "], "code": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ", "task_id": 364, "generation": "def make_flip(ch):\n    if ch == '0':\n\n        return 1\n\n    else:\n\n        return 0\n\ndef min_flips_bin_string(s: str) -> int:\n\n    flips = 0\n\n    n = len(s)\n\n    for i in range(n):\n\n        if i % 2 == 0 and s[i] == '1':\n\n            flips += 1\n\n                s = s[:i + 1] + '0' + s[i + 1:]\n\n            s = s[:i] + '0' + s[i + 1:]\n\n            flips += make_flip(s[i])\n\n        elif i % 2 == 1 and s[i] == '0':\n\n    return flips\n\n# Test the function\n\nprint(min_flips_bin_string('001110'))  # Output: 2\n\n        for w in range(capacity, weights[i]-1, -1):\n\n            knapSack[w] = max(knapSack[w], knapSack[w - weights[i]] + values[i])\n\narr1 = [1,2,3,4,5,6,7,8,9]\n\na = arr1[::-1]\n\n            return False\n\nprint(is_octal(\"01234567\"))\n\nWrite a function to check if a given string can be converted to a valid octal number. It can ignore non-numeric characters, and it can ignore leading zeros too. This is part of a task that you could solve in two steps: remove non-numeric characters and leading zeros, and then validate that the remaining parts could form a valid octal number. Also, write a testing code to validate your function.\n\ndef is_octal(s):\n\nprint(factorial(5))  # Output: 120\n\nWrite a function to calculate the power of a number. # finish\n\n"}
{"prompt": "Write a python function to count the number of digits of a given number.", "test": ["assert count_Digit(12345) == 5", "assert count_Digit(11223305) == 8", "assert count_Digit(4123459) == 7"], "code": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count", "task_id": 365, "generation": "def count_Digit(n):\n    count = 0\n\n    while n:\n\n    return len(str(abs(n)))\n\n        n //= 10\n\n        return\n\n        count += 1\n\n    return count\n\nn = 5678\n\nprint(\"Number of digits :\", count_Digit(n))\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.", "test": ["assert adjacent_num_product([1,2,3,4,5,6]) == 30", "assert adjacent_num_product([1,2,3,4,5]) == 20", "assert adjacent_num_product([2,3]) == 6"], "code": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "task_id": 366, "generation": "def adjacent_num_product(list_nums):\n    adjacent_pairs = [(list_nums[i], list_nums[i + 1]) for i in range(len(list_nums) - 1)]\n\n    products = [num1 * num2 for num1, num2 in adjacent_pairs]\n\n    return max(products) # finish\n\n"}
{"prompt": "Write a function to check if a binary tree is balanced or not.", "test": ["assert is_tree_balanced(root) == False", "assert is_tree_balanced(root1) == True", "assert is_tree_balanced(root2) == False "], "code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False", "task_id": 367, "generation": "class Node:\ndef __init__(self, data):\n    self.data = data\n\n    self.left = None\n\n        self.right = None\n\nclass BinaryTree:\n\n    def is_balanced(self, root):\n\n        if root is None:\n\n            return True\n\n        height_diff = self.height(root.left) - self.height(root.right)\n\n        else:\n\n            return False\n\n    def height(self, node):\n\n        if root.left is None and root.right is None:\n\n        if node is None:\n\n            return 0\n\n        return max(self.height(node.left), self.height(node.right)) + 1\n\n    def find_min(self, root):\n\n            return float('inf')\n\n                        parent_q = parent\n\n                        child_q = child\n\n            self.root = self.put_node(self.root, key, data)\n\n#Test the code\n\n            return self.is_balanced(root.left) and self.is_balanced(root.right)\n\nroot = Node(1)\n\nroot.left = Node(2)\n\nroot.right = Node(3)\n\nroot.left.left = Node(4)\n\nroot.left.right = Node(5)\n\n    def test_is_balanced(self):\n\n                    result = BinaryTree().is_balanced(root)\n\n                    for data in test_data:\n\n"}
{"prompt": "Write a function to repeat the given tuple n times.", "test": ["assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))", "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))", "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"], "code": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ", "task_id": 368, "generation": "def repeat_tuples(test_tup, N):\n    # reverse tuple\n\n    test_tup = test_tup[::-1]\n\n    # Generate required tuples\n\n    res = [test_tup] * N\n\n    return tuple(res)\n\n# finish\n\n"}
{"prompt": "Write a function to find the lateral surface area of cuboid", "test": ["assert lateralsurface_cuboid(8,5,6)==156", "assert lateralsurface_cuboid(7,9,10)==320", "assert lateralsurface_cuboid(10,20,30)==1800"], "code": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA", "task_id": 369, "generation": "def lateralsurface_cuboid(l,w,h):\n    #The formula to find the lateralsurface area of cuboid is 2*(length*width +  width*height +  height*length)\n\n    LSA = 2*(l*w + w*h + h*l)\n\n    return LSA\n\n#Test the function\n\nprint(volume_cube(3)) #Should print 27\n\n### Teacher's solution Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to sort a tuple by its float element.", "test": ["assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ", "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ", "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "], "code": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort", "task_id": 370, "generation": "def float_sort(price):\n    price = sorted(price, key = lambda x: float(x[1]))\n\n    return price # finish\n\n"}
{"prompt": "Write a function to find the smallest missing element in a sorted array.", "test": ["assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7", "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3", "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"], "code": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)", "task_id": 371, "generation": "def smallest_missing(A, left_element, right_element):\n    left = 0\n\n    right = len(A) - 1\n\n    while left <= right:\n\n        mid = left + (right - left) // 2\n\n        if A[mid] <= left_element:\n\n            left = mid + 1\n\n        else:\n\n            right = mid - 1\n\n    high = left\n\n    if high - low - 1 > A[high] - A[low]:\n\n    if left == 0:\n\n        return A[high]+1\n\n            return mid\n\n    return -1\n\n    return left\n\n# finish\n\n"}
{"prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "test": ["assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]", "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]", "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"], "code": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result", "task_id": 372, "generation": "import heapq as hq\ndef heap_assending(nums):\n  hq.heapify(nums)\n\n  sorted_nums = [hq.heappop(nums) for _ in range(len(nums))]\n\n  return sorted_nums\n\n# finish\n\n"}
{"prompt": "Write a function to find the volume of a cuboid.", "test": ["assert volume_cuboid(1,2,3)==6", "assert volume_cuboid(5,7,9)==315", "assert volume_cuboid(10,15,21)==3150"], "code": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume", "task_id": 373, "generation": "def volume_cuboid(l,w,h):\n    vol = l * w * h\n\n    return vol \n\n# finish\n\n"}
{"prompt": "Write a function to print all permutations of a given string including duplicates.", "test": ["assert permute_string('ab')==['ab', 'ba']", "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']", "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"], "code": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list", "task_id": 374, "generation": "def permute_string(str):\n    if len(str) ==0:\n\n        return ['']\n\n    res = []\n\n    for s in str:\n\n        for perm in permute_string(str.replace(s, '', 1)):\n\n            res.append(s + perm)\n\n    return res\n\n### finish\n\n"}
{"prompt": "Write a function to round the given number to the nearest multiple of a specific number.", "test": ["assert round_num(4722,10)==4720", "assert round_num(1111,5)==1110", "assert round_num(219,2)==218"], "code": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)", "task_id": 375, "generation": "def round_num(n,m):\n    quotient, remainder = divmod(n, m)\n\n    if remainder >= m/2:\n\n        return (quotient + 1) * m\n\n        else:\n\n            return quotient * m\n\n    else:\n\n        return m\n\n    #finish\n\n"}
{"prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "test": ["assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')", "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')", "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"], "code": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)", "task_id": 376, "generation": "def remove_replica(test_tup):\n    res = ()\n\n    for i in test_tup:\n\n        if i not in res:\n\n        if i in count_dict:\n\n            count_dict[i] += 1\n\n    count_dict = {}\n\n        if i not in count_dict:\n\n            count_dict[i] = 1\n\n        if count_dict[i] <= 1:\n\n            res += (i,)\n\n    for key, value in count_dict.items(): \n\n        for key, value in count_dict\n\n    for item in input_tuple:\n\n  count_dict = {}\n\n        if value == 1:\n\n            elif count_dict[i] > 1:\n\n    d = dict()\n\n    for item in test_tup: \n\n        else:\n\n            d[item] = item \n\n            d[item] = 1\n\n        if item not in seen: \n\n    return res\n\n            count_dict[item] = 1\n\n   res = ()\n\n   for i in test_tup:\n\n            res.append(None)\n\n    return tuple(res)Test\n\n            d[item] += 1\n\n    for i in lst:\n\n"}
{"prompt": "Write a python function to remove all occurrences of a character in a given string.", "test": ["assert remove_Char(\"aba\",'a') == \"b\"", "assert remove_Char(\"toggle\",'g') == \"tole\"", "assert remove_Char(\"aabbc\",'b') == \"aac\""], "code": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ", "task_id": 377, "generation": "def remove_Char(s,c) :\n    return s.replace(c,\"\")\n\n# finish\n\n"}
{"prompt": "Write a python function to shift last element to first position in the given list.", "test": ["assert move_first([1,2,3,4]) == [4,1,2,3]", "assert move_first([0,1,2,3]) == [3,0,1,2]", "assert move_first([9,8,7,1]) == [1,9,8,7]"], "code": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list", "task_id": 378, "generation": "def move_first(test_list):\n    # Exchanging the first and last elements\n\n    test_list.insert(0, test_list.pop())\n\n    return test_list\n\n# Test code\n\nnums = [1, 2, 3, 4, 5]\n\nprint(\"Original list: \", nums)\n\nprint(\"Modified list: \", move_last(nums))\n\na = Mammal()\n\nb = Mammal()\n\n print(a.gettype())\n\nprint(\"Modified list: \", move_first(nums))\n\nprint(\"Modified list: \", exchange(nums))\n\nnums = [2, 4, 6, 8, 10, 12, 14]\n\nprint(\"Deleted item: \", delete_any(nums))\n\nprint(\"Deleted item: \", nums.pop())\n\nprint(\"Modified list: \", nums)\n\nfinish # Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find the surface area of a cuboid.", "test": ["assert surfacearea_cuboid(1,2,3)==22", "assert surfacearea_cuboid(5,7,9)==286", "assert surfacearea_cuboid(10,15,21)==1350"], "code": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA", "task_id": 379, "generation": "def surfacearea_cuboid(l,w,h):\n    if l==w==h:\n\n        return 'It is a cube'\n\n    else:\n\n        return 2*((l*w)+(w*h)+(h*l))\n\n# Example usage: \n\n# print(surfacearea_cuboid(5, 5, 5)) # It is a cube\n\n# print(surfacearea_cuboid(2, 3, 4)) # 52\n\n# print(word_distinct('Python is great for data analysis and data science Python is popular'))\n\n        palindrome_list = []\n\ndef count_palindromes(sentence):\n\n    sentence = sentence.lower()\n\n    words = sentence.split(' ')\n\n    counts = [len(set(word)) for word in words]\n\n    anagrams = []\n\n    for i in range(len(words)):\n\n        for j in range(i+1, len(words)):\n\n            if count(words[i]) == count(words[j]) and set(words[i]) == set(words[j]):\n\n                if words[i] not in anagrams:\n\n                num += dictionary[sentence[i]]\n\n            i += 1\n\n            occurrence_dict[word] = 1\n\n    return occurrence_dict[target]\n\n# The expected output: 4\n\nauthors_with_most_books('books.csv')\n\n# Expected output: ['J.K. Rowling']\n\ntop_three_authors_over_view('books.csv')\n\n# Expected output: ['J.K. Rowling', 'George R.R. Martin', 'Stephenie Meyer']\n\n# print(median([5, 9, 12, 15, 16, 20])) # Output: 13.5\n\n            new_s = new_s + char\n\n    return new_s\n\n"}
{"prompt": "Write a function to generate a two-dimensional array.", "test": ["assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ", "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]", "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"], "code": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n", "task_id": 380, "generation": "def multi_list(rownum,colnum):\n    lst = []\n\n    for i in range(rownum):\n\n        lst.append([])\n\n        for j in range(colnum):\n\n            lst[i].append(i*j)\n\n    return lst\n\nprint(multi_list(3,3)) # [[0, 0, 0], [0, 1, 2], [0, 2, 4]]\n\n```\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to sort a list of lists by a given index of the inner list.", "test": ["assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]", "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]", "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"], "code": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result", "task_id": 381, "generation": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=itemgetter(index_no))\n\n    ### End Solution\n\nlist_data = [[2, 5], [1, 2], [4, 4], [2, 1], [2, 3]]\n\nindex_no = 1\n\nlist_data = [[7, 2], [4, 1], [6, 5], [3, 9], [2, 3], [1, 4]]\n\nprint(index_on_inner_list(list_data, index_no))  # [[4, 1], [3, 9], [7, 2], [6, 5], [2, 3], [1, 4]]\n\nlist_data = [[4, 1], [3, 9], [7, 2], [6, 5], [2, 3], [1, 4]]\n\ninput_string = \"madam\"\n\nprint(check_palindrome(input_string))  # \"String is a palindrome\"\n\nlist_data = [[4, 1, 5], [6, 2, 7], [1, 3, 3]]\n\nmatrix = [[3, 9], [7, 2], [4, 1], [6, 5], [2, 3], [1, 4]]\n\nlist_Data = [1, 2, 3, 4, 2, 2, 3, 4, 2, 1, 2]\n\nindex_no = 2\n\nprint(frequency_of_elements(list_Data, index_no))  # {2: 5, 3: 2, 4: 2, 1: 2}\n\nlist_tuples = input().split()\n\nlist_tuples = [tuple(map(int, x.split(','))) for x in list_tuples]\n\nprint(sort_tuples(list1, index_no))  # [(3, 3), (6, 1), (2, 4), (1, 5)]\n\nlist_strings = [\"Hello\", \"even\", \"world\"]\n\nprint(sort_strings(list_strings, index_no))  # ['even', 'Hello', 'world']\n\nprint(sort_tuples(list1, index_no))  # [(3, 4), (6, 7), (1, 1), (2, 5)]\n\nprint(sort_tuples(list1, index_no))  # [(3\n\nprint(index_on_inner_list(list_data, index_no))  # [[4, 4], [2, 1], [2, 5], [2, 3], [1, 2]]\n\nprint(common_elements(list_strings, index_no))  # ['one']\n\n<jupyter_output>\n\nSorted array is: [11, 12, 22, 25, 34, 64, 90]\n\n<jupyter_text>\n\nProblem 3: Implement the mean functionImplement a function to calculate the mean of a given list of numbers. The mean is the sum of all values divided by the total count of numbers. It is often used in Statistics.\n\nLet's run this code to calculate the mean of the numbers provided in the list.\n\nprint(frequency_of_elements(list_Data, index_no))  # {2: 5, 3: 2, 4: 2, 1: 2}\n\nProblem 4: Implement a function to check a number is a palindromeImplement a function to check a number is a palindrome. A palindrome is a word, number, phrase, or other sequence of characters that reads the same forward and backward. (Excluding spaces, punctuation and capitalization).\n\n"}
{"prompt": "Write a function to find the number of rotations in a circularly sorted array.", "test": ["assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3", "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3", "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"], "code": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1", "task_id": 382, "generation": "def find_rotation_count(A):\n    left = 0\n\n    right = len(A) - 1\n\n    while left <= right:\n\n        mid = (left + right) // 2\n\n        if mid > 0 and A[mid] < A[mid - 1]:\n\n        if A[mid] == target:\n\n            return A[mid]\n\n        elif A[mid] < target:\n\n            return mid\n\n    min_index = find_min(A)\n\n        if A[mid] > A[right]:\n\n            left = mid + 1\n\n        else:\n\n            right = mid\n\n    return left\n\n            if target > A[mid] and target <= A[right]:\n\n            right = mid - 1\n\n# finish\n\n"}
{"prompt": "Write a python function to toggle all odd bits of a given number.", "test": ["assert even_bit_toggle_number(10) == 15", "assert even_bit_toggle_number(20) == 1", "assert even_bit_toggle_number(30) == 11"], "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "task_id": 383, "generation": "def even_bit_toggle_number(n) :\n    result = 0\n\n    even_mask = 0xAAAAAAAA\n\n    odd_mask = 0x55555555\n\n    even_bits = n & even_mask\n\n    odd_bits = n & odd_mask\n\n    for i in range(0, 4) :\n\n    for i in range(31, -1, -1) :\n\n        if(((even_bits >> i) & 1) == 1) :\n\n            set_bit = (even_mask >> i)\n\n            even_bits = even_bits ^ set_bit\n\n        result = even_bits | odd_bits\n\n    return result\n\n# finish\n\n"}
{"prompt": "Write a python function to find the frequency of the smallest value in a given array.", "test": ["assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1", "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1", "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"], "code": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "task_id": 384, "generation": "def frequency_Of_Smallest(n,arr):\n    smallest = min(arr)\n\n    frequency = arr.count(smallest)\n\n    return (smallest,frequency)\n\n# Example usage\n\ndf = pd.DataFrame({\n\n  'Names': ['Tom', 'Nick', 'John', 'Peter'],\n\n  'Ages': [20, 21,\n\n  'Ages': [20, 21, 19, 13]\n\n# Example using\n\n    'A': [1, 2, np.nan],\n\n    'B': [5, np.nan, np.nan]\n\narr = [5, 1, 2, 1, 3, 1, 1, 2, 1, 3, 1, 1, 2, 1]\n\nprint(frequency_Of_Smallest(\n\nprint(frequency_Of_Smallest(len(arr),arr))\n\n```\n\nfinish\n\n"}
{"prompt": "Write a function to find the n'th perrin number using recursion.", "test": ["assert get_perrin(9) == 12", "assert get_perrin(4) == 2", "assert get_perrin(6) == 5"], "code": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)", "task_id": 385, "generation": "def get_perrin(n):\n    if n == 0:\n\n        return 3\n\n    if n == 1:\n\n        return 1\n\n    return get_lucas(n - 1) + get_lucas(n - 2)\n\n    else:\n\n        return get_nth_perrin(n - 1) + get_nth_perrin(n - 2)\n\n        return get_perrin(n - 1) + get_perrin(n - 2) + get_perrin(n - 3)\n\n        # add the code here\n\n```python\n\ndef get_lucas(n):\n\n    if n < 0:\n\n    if n == 1 or n == 2:\n\n        return 0\n\n    if n == 2:\n\n        return 2\n\ndef get\n\ndef get_nth_perrin(n):\n\nfinish writing\n\n"}
{"prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "test": ["assert swap_count(\"[]][][\") == 2", "assert swap_count(\"[[][]]\") == 0", "assert swap_count(\"[[][]]][\") == 1"], "code": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap", "task_id": 386, "generation": "def swap_count(s):\n    opening = 0 \n\n    swap = 0\n\n    for bracket in s:\n\n        if bracket == '(':\n\n            opening += 1\n\n        elif bracket == ')':\n\n            if opening > 0:\n\n                opening -= 1\n\n            else:\n\n                swap += 1\n\n    return swap\n\n# finish\n\n"}
{"prompt": "Write a python function to check whether the hexadecimal number is even or odd.", "test": ["assert even_or_odd(\"AB3454D\") ==\"Odd\"", "assert even_or_odd(\"ABC\") == \"Even\"", "assert even_or_odd(\"AAD\") == \"Odd\""], "code": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ", "task_id": 387, "generation": "def even_or_odd(N):\n    # Convert hexadecimal to decimal\n\n    N = int(N, 16)\n\n    # Check if number is even or odd\n\n    if N % 2 == 0:\n\n        return \"even\"\n\n    else:\n\n        return \"odd\" # finish\n\n"}
{"prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.", "test": ["assert highest_Power_of_2(10) == 8", "assert highest_Power_of_2(19) == 16", "assert highest_Power_of_2(32) == 32"], "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ", "task_id": 388, "generation": "def highest_Power_of_2(n):\n    i = 0\n\n    while True:\n\n        if 2 ** i > n:\n\n        while 2 ** i <= n:\n\n            continue\n\n        break\n\n        i += 1\n\n    return i - 1\n\n# test cases\n\nprint(highest_Power_of_2(8)) # expected output 3\n\nprint(highest_Power_of_2(15)) # expected output 3\n\nprint(even_numbers(12345678)) # expected output [2, 4, 6, 8]\n\nprint(even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # expected output [2, 4, 6, 8, 10]\n\nprint(primes(2, 50)) # expected output [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\nprint(find_hypotenuse(3, 4)) # expected output 5.0\n\nprint(find_hypotenuse(5, 12)) # expected output 13.0\n\nprint(is_prime(13)) # expected output True\n\nprint(is_prime(20)) # expected output False\n\nprint(list_primes(20, 50)) # expected output [23, 29, 31, 37, 41, 43, 47]\n\nprint(list_primes(50, 100)) # expected output [53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\nprint(GCD(12, 8)) # expected output 4\n\nprint(GCD(101, 103)) # expected output 1\n\nprint(GCD(60, 48)) # expected output 12\n\nprint(LCM(5, 7)) # expected output 35\n\nprint(LCM(15, 20)) # expected output 60\n\nprint(primes(2, 50)) # expected output [2, 3, 5, 7, 11, 13, 17, 19, \n\nprint(next_Power_of_2(8)) # expected output 8\n\n# finish\n\n"}
{"prompt": "Write a function to find the n'th lucas number.", "test": ["assert find_lucas(9) == 76", "assert find_lucas(4) == 7", "assert find_lucas(3) == 4"], "code": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "task_id": 389, "generation": "def find_lucas(n):\n    if n == 0:\n\n        return 2\n\n    elif n == 1:\n\n        return 1\n\n    else:\n\n        fib_0 = 0\n\n        fib_1 = 1\n\n        for _ in range(n - 1):\n\n            fib_0, fib_1 = fib_1, fib_0 + fib_1\n\n            lucas_0, lucas_1 = 2, 1\n\n            lucas_0, lucas_1 = lucas_1, lucas_0 + lucas_1\n\n        return lucas_1\n\n# test the function\n\nv1 = [1, 2, 3, 4]\n\nfor i in v1:\n\nprint(f\"The sum of squares is {sum_squares(v1)}\")\n\n# finish\n\n"}
{"prompt": "Write a function to insert a given string at the beginning of all items in a list.", "test": ["assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']", "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']", "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"], "code": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string", "task_id": 390, "generation": "def add_string(list,string):\n    for i in range(len(list)):\n\n    new_list = list[:]\n\n    new_list[i] = string + list[i]\n\nreturn new_list # finish\n\n"}
{"prompt": "Write a function to convert more than one list to nested dictionary.", "test": ["assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]", "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"], "code": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result", "task_id": 391, "generation": "def convert_list_dictionary(l1, l2, l3):\n  return {l1[i]: {l2[i]: l3[i]} for i in range(min(len(l1), len(l2), len(l3)))}\n\n# test the function\n\nprint(check_even_numbers([2, 4, 6, 8])) \n\nprint(sum_matrices([[1, 2], [3, 4]], [[5, 6], [7, 8]])) \n\nprint(fill_in_the_blanks_alternative('hello _world_', {'_': ' '})) \n\nprint(fill_in_the_blanks_alternative('apple_orange_banana', {'_': ' '})) \n\nprint(append_dict({1: 'a', 2: 'b'}, {2: 'c', 3: 'd'}))\n\nprint(convert_list_dictionary([1, 2, 3, 4], ['a', 'b', 'c'], [10, 20, 30, 40]))\n\n# end of code blocks\n\n<jupyter_output>\n\n{1: {'a': 10}, 2: {'b': 20}, 3: {'c': 30}}\n\n<empty_output>\n\n<jupyter_text>\n\nProblem 2:Matrix AdditionWrite a python function named `sum_matrices` that takes two matrices as input and returns a new matrix which is the sum of both input matrices. The input matrices should be in the form of a list of lists (for simplicity), where each sub-list represents a row of the matrix.\n\n<jupyter_code>\n\ndef fill_in_the_blanks_alternative(s, dic):\n\n  for key in dic:\n\n    s = s.replace(key, dic[key])\n\ndef append_dict(d1, d2):\n\n  return {**d1, **d2}\n\n    s\n\ndef sum_dict(d1, d2):\n\nprint(sum_matrices([[1, 2], [3, 4]], [[5, 6], [7, 8]])) # should return [[6, 8], [10, 12]]\n\nreplace_dict = {'_': ' '}\n\n  return s\n\nd1 = {1: 'a', 2: 'b'}\n\nprint(fill_in_the_blanks_alternative('hello _world_', {'_': ' '})) # should return 'hello world'\n\nProblem 2:Matrix AdditionWrite a python function named `sum_matrices` that takes two matrices as\n\ngradebook = {\"Jane\": [95, 88, 84, 90, 100], \n\n            \"Sue\": [90, 85, 88, 95, 84], \n\n"}
{"prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "test": ["assert get_max_sum(60) == 106", "assert get_max_sum(10) == 12", "assert get_max_sum(2) == 2"], "code": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]", "task_id": 392, "generation": "def get_max_sum (n):\n    if n < 10:\n\n        if n == 1: return 1\n\n        if n == 2 or n == 3 or n == 4 or n == 5: return n\n\n        if n == 1: \n\n            return 2\n\n        if n == 2: \n\n            return 4\n\n        if n == 3 or n == 4: \n\n    lookup = [0]*(n+1)\n\n    lookup[1] = 1\n\n    lookup[2] = 2\n\n    lookup[3] = 4\n\n    lookup[4] = 6\n\n    lookup[5] = 9\n\n    lookup[6] = 9\n\n    for i in range(1, n+1):\n\n        if i < 6:\n\n    # Build lookup table in bottom-up manner\n\n        lookup[i] = max(lookup[i], i)\n\n        lookup[i] = max(lookup[i], i, lookup[2] + lookup[3] + lookup[4] + lookup[5] if i>=6 else 0)\n\n    lookup[6] = 12\n\n        lookup[i] = max(lookup[i], lookup[i//2] + lookup[i//3] + lookup[i//4] + lookup[i//5])\n\n    return lookup[n]\n\nn = 12\n\nprint('maximum sum is', get_max_sum(n)) # This will output: maximum sum is 28\", for n = 12. ###\n\n Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find the list with maximum length using lambda function.", "test": ["assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])", "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"], "code": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)", "task_id": 393, "generation": "def max_length_list(input_list):\n    return max(input_list, key=lambda x: len(x))\n\nmax_length_list([\"Python\", \"is\", \"fun\", \"for\", \"all\"]) \n\n# Output: ['Python', 'for', 'all']\n\nfinish\n\n"}
{"prompt": "Write a function to check if given tuple is distinct or not.", "test": ["assert check_distinct((1, 4, 5, 6, 1, 4)) == False", "assert check_distinct((1, 4, 5, 6)) == True", "assert check_distinct((2, 3, 4, 5, 6)) == True"], "code": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ", "task_id": 394, "generation": "def check_distinct(test_tup):\n    if not isinstance(test_tup, tuple):\n\n        raise ValueError(\"Input is not a tuple\")\n\n    ids = []\n\n    try:\n\n        for i, v in enumerate(test_tup):\n\n        for i in test_list:\n\n            for i in v:\n\n                if i in ids:\n\n                    return False\n\n                ids.append(i)\n\n        return True\n\n    except TypeError:\n\n        raise ValueError(\"Tuple should contain only hashable elements\")\n\n# finish\n\n"}
{"prompt": "Write a python function to find the first non-repeated character in a given string.", "test": ["assert first_non_repeating_character(\"abcabc\") == None", "assert first_non_repeating_character(\"abc\") == \"a\"", "assert first_non_repeating_character(\"ababc\") == \"c\""], "code": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None", "task_id": 395, "generation": "def first_non_repeating_character(str1):\n    char_counts = {}\n\n    for c in str1:\n\n        if c in char_counts:\n\n            char_counts[c] += 1\n\n        else:\n\n            char_counts[c] = 1\n\n        if char_counts[c] == 1:\n\n            return c\n\n            char_freq[i] = 1\n\n            char_freq[i] = char_freq[i - 1]\n\n    return -1\n\n# finish\n\n"}
{"prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "test": ["assert check_char(\"abba\") == \"Valid\"", "assert check_char(\"a\") == \"Valid\"", "assert check_char(\"abcd\") == \"Invalid\""], "code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ", "task_id": 396, "generation": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    if(re.search(regex, string)):\n\n        return True\n\n    else: \n\n        return False\n\n## finish\n\n"}
{"prompt": "Write a function to find the median of three specific numbers.", "test": ["assert median_numbers(25,55,65)==55.0", "assert median_numbers(20,10,30)==20.0", "assert median_numbers(15,45,75)==45.0"], "code": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median", "task_id": 397, "generation": "def median_numbers(a,b,c):\n    numbers = sorted([a,b,c])\n\n    median = numbers[1]\n\n    return median\n\n# Test the function\n\nprint(factorial(6))\n\nprint(flatten([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\nprint(find_first_unique_char(\"Hello\"))\n\nprint(count_elements_in_a_list([1, 2, 2, 3, 4, 4, 4]))\n\nprint(longest_substring('abcba', 2)) # Output: 3 ('bcb')\n\nprint(number_of_ones([0, 1, 1, 1, 0, 0, 1, 1, 0]))\n\nprint(all_substrings('abc'))\n\n<jupyter_output>\n\n<empty_output>\n\nprint(count_elements_in\n\n<jupyter_text>\n\ncan't work on it as it needs fix to have true comparison after drop_duplicates\n\nYou have got it all correctly. Good work!! Keep it up - slowly and surely you will master Python soon!!  Exercise with Vasya - Check Recursive Factorial Implementation\n\nExercise with Vasya - Recursive Palindrome Check Implementation\n\nExercise with Vasya - Check Recursive Fibonacci Sequence Implementation\n\nExercise with Vasya - Check Recursive Factorial Implementation\n\n<jupyter_code>\n\ndef recursive_palindrome_check(word):\n\ndef recursive_fibonacci_sequence(n):\n\ndef recursive_factorial(num):\n\ndef recursive_factorial(n):\n\n    if n == 0 or n == 1:\n\nimport pandas as pd\n\ndf[df['A'].isna()]\n\n    if n <= 1:\n\n        return 1\n\n"}
{"prompt": "Write a function to compute the sum of digits of each number of a given list.", "test": ["assert sum_of_digits([10,2,56])==14", "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19", "assert sum_of_digits([10,20,-4,5,-70])==19"], "code": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "task_id": 398, "generation": "def sum_of_digits(nums):\n    return sum(map(sum, map(lambda x: [int(i) for i in str(x)], nums)))\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "test": ["assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)", "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)", "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"], "code": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 399, "generation": "def bitwise_xor(test_tup1, test_tup2):\n    xor_tup = []\n\n    for i in range(0, len(test_tup1)):\n\n        xor_tup.append(test_tup1[i] ^ test_tup2[i])\n\n    return tuple(xor_tup)\n\ntest_tup1 = (10, 20, 30, 40)\n\ntest_tup2 = (5, 15, 25, 35)\n\ntest\n\nclass Testing(unittest.TestCase):\n\n       def test_bitwise_xor(self):\n\n           self.assertEqual(bitwise_xor((10, 20, 30, 40), (5, 15, 25, 35)), (15, 5, 10, 70)) \n\n<jupyter_output>\n\n<empty_output>\n\n..F\n\n======================================================================\n\nFAIL: test_bitwise_xor (__main__.Testing)\n\n----------------------------------------------------------------------\n\nTraceback (most recent call last):\n\n<jupyter_code>\n\n  File \"<ipython-input-3-88773c7f4250>\", line 5, in test_bitwise_xor\n\n  File \"<ipython-input-3-88773c7f4250>\", line 12, in test_bitwise_xor\n\n### Response:\n\n# finish\n\n"}
{"prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "test": ["assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3", "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4", "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"], "code": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)", "task_id": 400, "generation": "def extract_freq(test_list):\n    res = Counter(test_list)\n\n    return dict(res)\n\ntest_list = [(\"One\", \"Two\", \"Three\"), (\"Four\", \"Five\", \"Six\"), (\"one\", \"five\", \"seven\"), (\"One\", \"Two\", \"Three\"), (\"Four\", \"Five\", \"Six\")]\n\nprint(extract_freq(test_list))\n\n### # finish\n\n"}
{"prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "test": ["assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))", "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"], "code": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 401, "generation": "def add_nested_tuples(test_tup1, test_tup2):\n    res = tuple(map(lambda i, j: i+j, test_tup1, test_tup2))\n\n    return res\n\ntuple1 = (1, 2, 3, 4, 5)\n\ntuple2 = (6, 7, 8, 9, 10)\n\nprint(add_nested_tuples(tuple1, tuple2))\n\nfinish\n\n"}
{"prompt": "Write a function to compute the value of ncr%p.", "test": ["assert ncr_modp(10,2,13)==6", "assert ncr_modp(15,12,43)==25", "assert ncr_modp(17,9,18)==10"], "code": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ", "task_id": 402, "generation": "def ncr_modp(n, r, p):\n    # Compute nCr % p\n\n    if(r > n):\n\n        return 0 \n\n    else:\n\n        return 0\n\n    numerator = 1\n\n    for i in range(n, n-r, -1):\n\n        numerator *= i\n\n        numerator %= p \n\n    denominator = 1\n\n    for i in range(r, 0, -1):\n\n        denominator *= i \n\n        denominator %= p \n\n    denominator = pow(denominator, p-2, p)\n\n    return (numerator * denominator) % p\n\n### Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to check if a url is valid or not using regex.", "test": ["assert is_valid_URL(\"https://www.google.com\") == True", "assert is_valid_URL(\"https:/www.gmail.com\") == False", "assert is_valid_URL(\"https:// www.redit.com\") == False"], "code": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False", "task_id": 403, "generation": "import re\ndef is_valid_URL(str):\n    regex = (\"((http|https)://)?(www.)?\" +\n\n            \"[a-z0-9@:%._\\\\+~#?&//=]\" +\n\n            \"{2,256}\\\\.[a-z]\" +\n\n            \"{2,6}\\\\b([-a-z0-9@:%\" +\n\n            \"._\\\\+~#?&//=]*)\")\n\n    p = re.compile(regex)\n\n    if(re.search(p, str)):\n\n        return True\n\n    else:\n\n        return False\n\n# Test cases\n\n# Test 1\n\nprint(is_valid_URL(\"https://www.google.com\")) # True\n\n# Test 2\n\nprint(is_valid_URL(\"google\")) # False\n\n# Test 3\n\nprint(is_valid_URL(\"http://google.com\")) # True\n\n# Test 4\n\nprint(defang_IP_address(\"0.0.0.0\")) # \"0[.]0[.]0[.]0\"\n\n# Test 5\n\nprint(defang_IP_address(\"1.2.3.4.5\")) # \"1[.]2[.]3[.]4[.]5\"\n\n# Test 6\n\nprint(defang_IP_address(\"123.234.111.222\")) # \"123[.]234[.]111[.]222\"\n\n# Test 7\n\nprint(count_characters_in_string(\"Hello world\")) # {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n\n# Test 8\n\nprint(count_characters_in_string(\"Apple\")) # {'A': 1, 'p': 2, 'l': 1, 'e': 1}\n\nprint(ip_to_binary(\"192.168.1.1\")) # \"11000000.10101000.00000001.00000001\"\n\nprint(defang_IP_address(\"1.2.3.4.5\")) # \"1[.]2[.]3[.]4[.]5\" # with more than 4 parts\n\nprint(reverse_string(\"1234567890\")) # \"0987654321\"\n\n"}
{"prompt": "Write a python function to find the minimum of two numbers.", "test": ["assert minimum(1,2) == 1", "assert minimum(-5,-4) == -5", "assert minimum(0,0) == 0"], "code": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ", "task_id": 404, "generation": "def minimum(a,b):\n    if a < b:\n\n        return a\n\n    else:\n\n        return b\n\n    # finish\n\n"}
{"prompt": "Write a function to check whether an element exists within a tuple.", "test": ["assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"], "code": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False", "task_id": 405, "generation": "def check_tuplex(tuplex,tuple1):\n  return tuple1 in tuplex\n\n#finish\n\n"}
{"prompt": "Write a python function to find the parity of a given number.", "test": ["assert find_Parity(12) == \"Even Parity\"", "assert find_Parity(7) == \"Odd Parity\"", "assert find_Parity(10) == \"Even Parity\""], "code": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ", "task_id": 406, "generation": "def find_Parity(x):\n    if x % 2 == 0:\n\n        parity = \"Even\"\n\n    return \"Odd\" if x % 2 != 0 else \"Even\"\n\nprint(find_Parity(5))\n\nprint(find_Parity(6))\n\nprint(find_Parity(15))\n\nprint(find_Parity(22))\n\nprint(find_Parity(0))\n\n### finish\n\n"}
{"prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.", "test": ["assert rearrange_bigger(12)==21", "assert rearrange_bigger(10)==False", "assert rearrange_bigger(102)==120"], "code": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False", "task_id": 407, "generation": "def rearrange_bigger(n):\n    num = [int(a) for a in str(n)]\n\n    for i in range(len(num) - 1, 0, -1):\n\n        if num[i] > num[i-1]:\n\n            temp = num[i-1:]\n\n            temp.sort()\n\n            for j in range(i, len(num)):\n\n                if temp[0] > num[i-1]:\n\n                    temp.pop(0)\n\n                else:\n\n                    break\n\n            num[i-1:] = [temp.pop(0)] + sorted(temp)\n\n            break\n\n    return int(''.join(map(str, num))) if num[0] != 9 else -1\n\n# finish\n\n"}
{"prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "test": ["assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]", "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]", "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"], "code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs", "task_id": 408, "generation": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = []\n\n    def push(i, j):\n\n        if i < len(nums1) and j < len(nums2):\n\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n\n    push(0, 0)\n\n    pairs = []\n\n    while queue and len(pairs) < k:\n\n        _, i, j = heapq.heappop(queue)\n\n        pairs.append([nums1[i], nums2[j]])\n\n        push(i, j + 1)\n\n        if j == 0:\n\n            push(i + 1, 0)\n\n    return pairs\n\n# Sample usage\n\nnums1 = [1, 7, 11]\n\nnums2 = [2, 4, 6]\n\nk = 3\n\nprint(k_smallest_pairs(nums1, nums2, k))\n\n# Output: [(1, 2), (1, 4), (7, 2)]\n\n# finish\n\n"}
{"prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.", "test": ["assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8", "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30", "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"], "code": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min", "task_id": 409, "generation": "def min_product_tuple(list1):\n    min_product = float('inf')\n\n    for tup in list1:\n\n        product = 1\n\n        for num in tup:\n\n            product *= num\n\n        if product < min_product:\n\n            min_product = product\n\n    return min_product\n\n## finish\n\n"}
{"prompt": "Write a function to find the minimum value in a given heterogeneous list.", "test": ["assert min_val(['Python', 3, 2, 4, 5, 'version'])==2", "assert min_val(['Python', 15, 20, 25])==15", "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"], "code": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val", "task_id": 410, "generation": "def min_val(listval):\n    minimum = float('inf')\n\n    for item in listval:\n\n        if item < minimum:\n\n            minimum = item\n\n    return minimum\n\nFinish\n\n"}
{"prompt": "Write a function to convert the given snake case string to camel case string by using regex.", "test": ["assert snake_to_camel('android_tv') == 'AndroidTv'", "assert snake_to_camel('google_pixel') == 'GooglePixel'", "assert snake_to_camel('apple_watch') == 'AppleWatch'"], "code": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "task_id": 411, "generation": "import re\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\nimport re\n\ndef snake_to_camel(snake_str):\n\n    components = snake_str.split('_')\n\n    return \"\".join(x.title() for x in components)\n\nprint(snake_to_camel('this_is_snake_case')) \n\n# ThisIsSnakeCase\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to remove odd numbers from a given list.", "test": ["assert remove_odd([1,2,3]) == [2]", "assert remove_odd([2,4,6]) == [2,4,6]", "assert remove_odd([10,20,3]) == [10,20]"], "code": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l", "task_id": 412, "generation": "def remove_odd(l):\n    # start writing your function\n\n    return [x for x in l if x % 2 == 0]  \n\n    if num < 2:\n\n        if num % 2 == 0: #\u5076\u6578\u6578\u5b57\n\n            pass\n\n    perms = permutations(lst)\n\n    return [x for x in l if isinstance(x, int) and x % 2 == 0]\n\n# finish\n\n"}
{"prompt": "Write a function to extract the nth element from a given list of tuples.", "test": ["assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"], "code": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result", "task_id": 413, "generation": "def extract_nth_element(list1, n):\n    return [i[n] for i in list1]\n\n# Example usage\n\nwith open('file1.txt', 'r') as file:\n\n    list\n\nduplicate_lines_in_file('file1.txt')\n\n<jupyter_output>\n\n<empty_output>\n\n<jupyter_text>\n\nThis python function sorts the list of tuples based on the second element of each tuple using the built-in function sorted(). The sorted() function uses the key parameter to specify a function of one argument that is used to extract a comparison key from each element in list1. In this case, the lambda function x: x[1] is used\n\nWriting a function that reads a file and returns the list of duplicate lines.\n\nBelow code is a labelling function which classifies and labels each name correctly.\n\n        list1 = file.readlines()\n\n    output = open('output.txt', 'w')\n\n<empty_output\n\nWhen the function is called with 'file1.txt' as parameter, it will look for duplicate lines in 'file1.txt' and write them into 'output.txt'.\n\nextract_nth_element([(1, 2), (3, 4), (5, 6)], 1) # Returns [2, 4, 6]\n\nExtract the second element from each tuple in a list of tuples.When you run the block, the output will be [2, 4, 6] and those are the second elements of the tuples in the list.\n\nprint(extract_nth_element([(1, 2), (3, 4), (5, 6)], 1))  # Returns [2, 4, 6]\n\nextract_name([('John Doe'), ('Jane Smith'), ('Bob Johnson')]) # Returns [('John', 'Doe'), ('Jane', 'Smith'), ('Bob', 'Johnson')]\n\ndef write_square_matrix_to_file(n, file_name):    matrix = [[0]*n for _ in range(n)]    with open(file_name, 'w') as file:        for row in matrix:            file.write(' '.join(str(x) for x in row) + '\\n')        file.close()\n\nIn this exercise you'll try to build a neural network that predicts the price of a house according to a simple formula.So, imagine if house pricing was as easy as a house costs 50k + 50k per bedroom, so that a 1 bedroom house costs 100k, a 2 bedroom house costs 150k etc.How would you create a neural network that learns this relationship so that it would predict a 7 bedroom house as costing close to 400k etc.Hint: Your network might work better if you scale the house price down. You don't have to give the answer 400...it might be better to create something that predicts the number 4, and then your answer is in the 'hundreds of thousands' etc.\n\n<jupyter_code>\n\n# Get your trained model\n\ndf['column_name'] = df['column_name'].fillna(method='bfill')\n\n# Missing data is a common issue in any data analysis process and may occur due to many reasons. So, filling missing values is a technique that we use to fix this issue. In addition to mean/median/mode and forward filling/backward filling (known as ffill and bfill methods), it is also possible to use interpolate method on the dataframe.\n\nIn model.add(Dense(20, input_dim=1, activation=\"relu\"))                Here we are creating a Dense layer. The number 20 is the number of nodes in the layer. We set input_dim=1 as it is one feature (or input) since we are trying to predict the house price based on the number of bedrooms. The 're\n\n-x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n\nmodel = Sequential()\n\nfrom itertools import chain, combinations\n\ndef all_subsets(ss):\n\n"}
{"prompt": "Write a python function to check whether the value exists in a sequence or not.", "test": ["assert overlapping([1,2,3,4,5],[6,7,8,9]) == False", "assert overlapping([1,2,3],[4,5,6]) == False", "assert overlapping([1,4,5],[1,4,5]) == True"], "code": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0", "task_id": 414, "generation": "def overlapping(list1,list2):\n    # your code goes here\n\n    overlap = [value for value in list1 if value in list2]\n\n    return overlap\n\noverlap = overlapping([1, 2, 3, 4],[3, 2, 5, 6])\n\n    unique_list = []\n\n    for value in overlap:\n\n    set1 = set(list1)\n\nprint(overlap)\n\nset1 = set(list1)\n\n# finish\n\n"}
{"prompt": "Write a python function to find a pair with highest product from a given array of integers.", "test": ["assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)", "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)", "assert max_Product([1,2,3]) == (2,3)"], "code": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ", "task_id": 415, "generation": "def max_Product(arr):\n    n = len(arr)\n\n    if (n < 2):\n\n        print(\"No pairs exist\")\n\n        return\n\n    a = b = INT_MIN\n\n    for i in range(0, n):\n\n        if (arr[i] > a):\n\n            b = a\n\n            a = arr[i]\n\n        # Update second largest element\n\n        elif (arr[i] > b and arr[i] != a):\n\n            b = arr[i]\n\n    print(\"Max Pair is\", a, \"and\", b)\n\n# To test above function\n\narr = [1, 2, 3, 4, 5, 6]\n\nmax_Product(arr)\n\narr = [1, -2, -3, 4, 5, 6]\n\narr = [1, 2, 3, 4, 0]\n\n   ...: \n\n# finish\n\n"}
{"prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "test": ["assert breakSum(12) == 13", "assert breakSum(24) == 27", "assert breakSum(23) == 23"], "code": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]", "task_id": 416, "generation": "MAX = 1000000\ndef breakSum(n):\n    dp = [-1] * (MAX + 1)\n\n    dp[0] = 0\n\n    dp[1] = 1\n\n    dp[2] = 2\n\n    dp[3] = 3\n\n    m = 4\n\n    for i in range(4, n+1):\n\n        max_val = 0\n\n        j = 1\n\n        while j <= m:\n\n            max_val = max(max_val, dp[j]*dp[i-j])\n\n            j += 1\n\n        m = max(m, i+1)\n\n        dp[i] = max_val\n\n    return dp[n]\n\n# finish\n\n"}
{"prompt": "Write a function to find common first element in given list of tuple.", "test": ["assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]", "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]", "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"], "code": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ", "task_id": 417, "generation": "def group_tuples(Input):\n    return [tuple(lst) for lst in zip(*Input)]\n\nprint(group_tuples([(1,2,3), (4,5,6), (7,8,9)]))\n\n### Finish\n\n"}
{"prompt": "Write a python function to find the sublist having maximum length.", "test": ["assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]", "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"], "code": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList", "task_id": 418, "generation": "def Find_Max(lst):\n    max_sub_lst = lst[0]\n\n    max_length = 1\n\n    sub_lst = []\n\n    for i in range(len(lst)):\n\n        for j in range(i+1,len(lst)+1):\n\n            sub_lst = lst[i:j]\n\n            if max_sum < sum(sub_lst):\n\n        for j\n\n                max_sum = sum(sub_lst)\n\n            max_sub_lst = sub_lst                                     max_sub_lst = sub_lst\n\n            max_length = len(sub\n\n            if len(sub_lst) > max_length:\n\n                max_length = len(sub_lst)\n\n                max_sub_lst = sub_lst\n\n    return max_sub_lst, max_length\n\nlst = [-2, -3, 4, -1, -2, 1, 5, -3]\n\nFind_Max(lst)\n\n # finish\n\n"}
{"prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "test": ["assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243", "assert round_and_sum([5,2,9,24.3,29])==345", "assert round_and_sum([25.0,56.7,89.2])==513"], "code": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum", "task_id": 419, "generation": "def round_and_sum(list1):\n    # add rounding code here\n\n    rounded_list = [round(num) for num in list1]\n\n    # add summation code here\n\n    sum_of_list = sum(list1)\n\n    # add multiplication code here\n\n    mult_of_list = sum_of_list * len(list1)\n\n    return mult_of_list\n\n# test the function with these inputs\n\nprint(round_and_sum([1, 2.5, 3.4, 4.6, 5]))\n\nfinish\n\n"}
{"prompt": "Write a python function to find the cube sum of first n even natural numbers.", "test": ["assert cube_Sum(2) == 72", "assert cube_Sum(3) == 288", "assert cube_Sum(4) == 800"], "code": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum", "task_id": 420, "generation": "def cube_Sum(n):\n    result = 0\n\n    for i in range(2, 2*n+1, 2):\n\n        result += i**3\n\n    return result\n\nprint(sum_of_cubes(3))\n\nprint(cube_sum(3))\n\nfinish\n\n"}
{"prompt": "Write a function to concatenate each element of tuple by the delimiter.", "test": ["assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'", "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'", "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"], "code": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ", "task_id": 421, "generation": "def concatenate_tuple(test_tup):\n    return '#'.join(test_tup)\n\n# Test function\n\nprint(concatenate_tuple((\"G\", \"E\", \"E\", \"K\", \"S\")))\n\n# finish\n\n"}
{"prompt": "Write a python function to find the average of cubes of first n natural numbers.", "test": ["assert find_Average_Of_Cube(2) == 4.5", "assert find_Average_Of_Cube(3) == 12", "assert find_Average_Of_Cube(1) == 1"], "code": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ", "task_id": 422, "generation": "def find_Average_Of_Cube(n):\n    # Define the numerator and denominator for the average cube of first n natural numbers\n\n    numerator = sum([i**3 for i in range(1, n+1)])\n\n    denominator = n\n\n    # Compute the average\n\n    average = numerator / denominator\n\n    # return result\n\n    return average\n\n# finish\n\n"}
{"prompt": "Write a function to solve gold mine problem.", "test": ["assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16", "assert get_maxgold([[10,20],[30,40]],2,2)==70", "assert get_maxgold([[4,9],[3,7]],2,2)==13"], "code": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ", "task_id": 423, "generation": "def get_maxgold(gold, m, n):\n    goldTable = [[0 for i in range(n)] for j in range(m)]\n\n    for col in range(n-1, -1, -1):\n\n        for row in range(m-1, -1, -1):\n\n            if col == n-1:\n\n                right = 0\n\n            else:\n\n                right = goldTable[row][col+1]\n\n            if row == m-1 or col == n-1:\n\n                down_right = 0\n\n                down_right = goldTable[row+1][col+1]\n\n            goldTable[row][col] = gold[row][col] + max(right, down_right)\n\n    res = goldTable[0][0]\n\n    for i in range(1, m):\n\n                K[i][w] = K[i-1][w]\n\n                left = 0\n\n            if w-wt[i-1] >= 0:\n\n            if row = m-1 or col = n-1:\n\n        res = max(res, goldTable[i][0])\n\n    return res\n\nThis function will solve the gold mine problem for a given array of gold and the number of rows and columns. It starts from the bottom right corner and finds the maximum amount of gold that can be collected. The constraints in this function is the maximum quantity of gold, m (number of rows) and n (number of columns) can be maximum 100. If more gold or dimensions are specified the function needs to be adjusted.\n\n                right = dp[row][col+1]\n\n                down = 0\n\n                if(row+1<m):\n\nA gold mine has n*m cells, where n is the number of rows and m is number of columns. This function solves the gold mine problem and finds the maximum amount of gold that can be collected. It uses dynamic programming to solve this problem. The function takes the gold matrix and the number of rows and columns as input and returns the maximum amount of gold that can be collected. It will return 0 if the matrix is empty.\n\n                down = dp[row+1][col]\n\n            # Including this cell's gold and max from the neigbouring cells\n\n                lr = 0\n\nfinish\n\n"}
{"prompt": "Write a function to extract only the rear index element of each string in the given tuple.", "test": ["assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']", "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']", "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"], "code": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ", "task_id": 424, "generation": "def extract_rear(test_tuple):\n    return_list = []\n\n    for i in test_tuple:\n\n        if type(i) == str:\n\n            return_list.append(i[-1])\n\n        else:\n\n            return_list.append(None)\n\n    return tuple(return_list)\n\n# Test cases\n\nprint_reverse(['apple', 'banana', 'cherry', 'date', 'elderberry'])\n\n        if type(\n\nprint(capitalize_first_fourth('Hello, world!')) # Should print 'HeWo, world!'\n\nprint(decrease_first(( [10, 20, 30], [40, 50, 60], [70, 80, 90] ))) # Should print ( [9, 20, 30], [39, 50, 60], [70, 80, 90] )\n\nprint(create_movie_collection( [ (\"MovieA\", \"2010\", \"PG\", \"John Doe\"), (\"MovieB\", \"2005\", \"PG-13\"), (\"MovieC\", \"2015\", \"R\") ] ))\n\nmovies = [\n\n  {\n\n    \"name\": \"MovieA\",\n\n    \"name\": \"MovieB\",\n\nprint(extract_rear(('apple', 'banana', 'cherry', 'date', 'elderberry'))) # Should return ('e', 'a', 'y', 'e', 'r')\n\n    \"name\": \"Movie1\",\n\n    \"year\": \"2000\",\n\nprint(extract_rear(('apple', 'banana', 'cherry', 'durian', 5))) # Should return ('e', 'a', 'y', None, None)\n\nprint(extract_rear(('apple', 'banana', 'cherry', 'date', 'elderberry')))\n\n<jupyter_output>\n\n['test']\n\n<empty_output>\n\n<jupyter_text>\n\n            movie_dict[\"director\"] = 'unknown'\n\n            else: movie_dict[\"director\"] = director\n\nExercise 3Once you have your function ready, move on to the next exercise. In this exercise, you will test your function with the following scenarios. Remember to add comments to explain what each print statement does.  Write a function to remove the duplicate elements from a list of tuples ### Response: def remove_duplicates(test_list):        return list(set(test_list))  Test cases\n\nWrite a function to compute the longest length of a string in a list ### Response: def find_longest(test_list):    longest_length = 0    longest_string = \"\"    for i in test_list:        if len(i) > longest_length:            longest_length = len(i)            longest_string = i    return longest_string, longest_length  Test cases\n\n"}
{"prompt": "Write a function to count the number of sublists containing a particular element.", "test": ["assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"], "code": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr", "task_id": 425, "generation": "def count_element_in_list(list1, x):\n    count = 0\n\n    for sublist in list1:\n\n        if x in sublist:\n\n            count += 1\n\n    return count\n\n# test your function\n\nprint(count_element_in_list([[1, 2, [3, 4]], [5, 6, 7], [8, 9, 10]], 5))  # prints 1\n\nprint(count_element_in_list([[1, 2, [3, 4]], [5, 6, 7], [8, 9, 10]], 1))  # prints 1\n\nprint(count_element_in_list([[1, 2, [3, 4]], [5, 6, 7], [8, 9, 10]], 7))  # prints 1\n\nprint(count_element_in_list([[1, 2, [3, 4]], [5, 6, 7], [8, 9, 10]], 0))  # prints 0\n\n        result.append((lst[i], count))\n\n        i += 1\n\nlst = [1, 2, 3, 4, 5, 6]\n\n    return result\n\nlst = [1, 1, 1, 2, 2, 3]\n\nresult = counter([[1,2,[3,4]],[5,6,7],[8,9,10]])\n\nprint(result([1, 2, 3, 4, 5, 6]))  # prints [(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2)]\n\nprint(result([1, 1, 1, 2, 2, 3]))  # prints [(1, 3), (2, 3), (3, 2)]\n\nprint(find_anagrams([\"cat\", \"tac\", \"dog\", \"god\", \"odg\", \"hat\", \"act\"]))\n\n# prints [['cat', 'tac'], ['dog', 'god', 'odg'], ['hat', 'act']]\n\nprint(unique_occurrences([1,1,2,3,1,2,2,2,3,3,3]))\n\n# prints [(1,3), (2,4), (3,4)]\n\n# finish\n\n"}
{"prompt": "Write a function to filter odd numbers using lambda function.", "test": ["assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]", "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"], "code": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums", "task_id": 426, "generation": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 == 1, nums))\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(filter_oddnumbers(nums))\n\n# finish\n\n"}
{"prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "test": ["assert change_date_format(\"2026-01-02\") == '02-01-2026'", "assert change_date_format(\"2020-11-13\") == '13-11-2020'", "assert change_date_format(\"2021-04-26\") == '26-04-2021'"], "code": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "task_id": 427, "generation": "import re\ndef change_date_format(dt):\n    date_re = re.match(r\"(\\d{4})-(\\d{2})-(\\d{2})\", dt)\n\n    if date_re:\n\n        return f\"{date_re.group(3)}-{date_re.group(2)}-{date_re.group(1)}\"\n\n    else:\n\n        return \"Incorrect date format\" \n\n# finish\n\n"}
{"prompt": "Write a function to sort the given array by using shell sort.", "test": ["assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]", "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"], "code": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list", "task_id": 428, "generation": "def shell_sort(my_list):\n    sublist_count = len(my_list) // 2\n\n    # While we still have sub lists\n\n    while sublist_count > 0:\n\n        # For every index in our list\n\n        for i in range(sublist_count, len(my_list)):\n\n            # Set the current value\n\n            temp_value = my_list[i]\n\n            # Get the list position\n\n            position = i\n\n            # Using a gap\n\n            gap = sublist_count\n\n            # Shift earlier gap-sorted elements up until the correct location for tempValue is found.\n\n            while position >= sublist_count and my_list[position - gap] > temp_value:\n\n                my_list[position] = my_list[position - gap]\n\n                position = position - gap\n\n            # Set tempValue at its correct location\n\n            my_list[position] = temp_value\n\n        # Reduce the gap for the next loop\n\n        sublist_count = sublist_count // 2\n\n    return my_list\n\n# Tests\n\nprint(shell_sort([45, 32, 9, 17, 16, 12, 41, 23, 50, 34, 28]))\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to extract the elementwise and tuples from the given two tuples.", "test": ["assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)", "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"], "code": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 429, "generation": "def and_tuples(test_tup1, test_tup2):\n    # insert code to extract elementwise and tuples from given two tuples\n\n    result = ()\n\n    for i in range(len(test_tup1)):\n\n        result = result + ((test_tup1[i], test_tup2[i]),)\n\n    # Function to extract the elementwise and tuples from the given two tuples\n\n    pass  # remove this line after writing your function\n\n    return result\n\n    return common\n\n# test function\n\ntest_tup1 = (1, 2, 3, 4, 5)\n\ntest_tup2 = (2, 4, 6, 8, 10)\n\n    # Finish writing the python function. You will only write code blocks. Write `finish` after the last line of the function.\n\n"}
{"prompt": "Write a function to find the directrix of a parabola.", "test": ["assert parabola_directrix(5,3,2)==-198", "assert parabola_directrix(9,8,4)==-2336", "assert parabola_directrix(2,4,6)==-130"], "code": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix", "task_id": 430, "generation": "def parabola_directrix(a, b, c):\n    # Finish writing the python function.\n\n"}
{"prompt": "Write a function that takes two lists and returns true if they have at least one common element.", "test": ["assert common_element([1,2,3,4,5], [5,6,7,8,9])==True", "assert common_element([1,2,3,4,5], [6,7,8,9])==None", "assert common_element(['a','b','c'], ['d','b','e'])==True"], "code": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result", "task_id": 431, "generation": "def common_element(list1, list2):\n    for i in list1:\n\n        if i in list2:\n\n            return True\n\n    return False\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find the median of a trapezium.", "test": ["assert median_trapezium(15,25,35)==20", "assert median_trapezium(10,20,30)==15", "assert median_trapezium(6,9,4)==7.5"], "code": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median", "task_id": 432, "generation": "def median_trapezium(base1,base2,height):\n    median = (0.5 * (base1 + base2))\n\n    area = 0.5 * median * height\n\n    return area\n\n# finish\n\n"}
{"prompt": "Write a function to check whether the entered number is greater than the elements of the given array.", "test": ["assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'", "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'", "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"], "code": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')", "task_id": 433, "generation": "def check_greater(arr, number):\n    for i in arr:\n\n        if i <= number:\n\n            return False\n\n    return True\n\n# Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function that matches a string that has an a followed by one or more b's.", "test": ["assert text_match_one(\"ac\")==('Not matched!')", "assert text_match_one(\"dc\")==('Not matched!')", "assert text_match_one(\"abba\")==('Found a match!')"], "code": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n", "task_id": 434, "generation": "import re\ndef text_match_one(text):\n    pattern = 'ab+'\n\n    if re.search(pattern,  text):\n\n        return 'Found a match!'\n\n    else:\n\n        return('Not matched!!')\n\n# finish\n\n"}
{"prompt": "Write a python function to find the last digit of a given number.", "test": ["assert last_Digit(123) == 3", "assert last_Digit(25) == 5", "assert last_Digit(30) == 0"], "code": "def last_Digit(n) :\r\n    return (n % 10) ", "task_id": 435, "generation": "def last_Digit(n) :\n    return n % 10 Finish\n\n"}
{"prompt": "Write a python function to print negative numbers in a list.", "test": ["assert neg_nos([-1,4,5,-6]) == -1,-6", "assert neg_nos([-1,-2,3,4]) == -1,-2", "assert neg_nos([-7,-6,8,9]) == -7,-6"], "code": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ", "task_id": 436, "generation": "def neg_nos(list1):\n    for num in list1:\n\n        if num % 2 == 0:\n\n            print(num)\n\n# finish\n\n"}
{"prompt": "Write a function to remove odd characters in a string.", "test": ["assert remove_odd(\"python\")==(\"yhn\")", "assert remove_odd(\"program\")==(\"rga\")", "assert remove_odd(\"language\")==(\"agae\")"], "code": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2", "task_id": 437, "generation": "def remove_odd(str1):\n    # finish\n\n"}
{"prompt": "Write a function to count bidirectional tuple pairs.", "test": ["assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'", "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'", "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"], "code": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ", "task_id": 438, "generation": "def count_bidirectional(test_list):\n    result = 0\n\n    for sub_list in test_list:\n\n        if len(sub_list) == 2 and (sub_list[0], sub_list[1]) == (sub_list[1], sub_list[0]):\n\n            result += 1\n\n    return result\n\n# finish\n\n"}
{"prompt": "Write a function to convert a list of multiple integers into a single integer.", "test": ["assert multiple_to_single([11, 33, 50])==113350", "assert multiple_to_single([-1,2,3,4,5,6])==-123456", "assert multiple_to_single([10,15,20,25])==10152025"], "code": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x", "task_id": 439, "generation": "def multiple_to_single(L):\n    \"\"\"\n\n    return int(''.join(map(str, L))) # finish\n\n"}
{"prompt": "Write a function to find all adverbs and their positions in a given sentence.", "test": ["assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')", "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')", "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"], "code": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))", "task_id": 440, "generation": "import re\ndef find_adverb_position(text):\n    pattern = r'\\b(?:well|just|here|there)\\b'\n\n    matches = [(match.group(), match.start()) for match in re.finditer(pattern, text)]\n\n    return matches\n\nprint(find_adverb_position(\"I well finished this project\")) # (['well'], 2)\n\n"}
{"prompt": "Write a function to find the surface area of a cube.", "test": ["assert surfacearea_cube(5)==150", "assert surfacearea_cube(3)==54", "assert surfacearea_cube(10)==600"], "code": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea", "task_id": 441, "generation": "def surfacearea_cube(l):\n    '''\n\n    return 6 * l * l\n\n# finish\n\n"}
{"prompt": "Write a function to find the ration of positive numbers in an array of integers.", "test": ["assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54", "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69", "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"], "code": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "task_id": 442, "generation": "from array import array\ndef positive_count(nums):\n    count = 0\n\n    for num in nums:\n\n        if num > 0:\n\n            count += 1\n\n    return count / len(nums)\n\n# finish\n\n"}
{"prompt": "Write a python function to find the largest negative number from the given list.", "test": ["assert largest_neg([1,2,3,-4,-6]) == -6", "assert largest_neg([1,2,3,-8,-9]) == -9", "assert largest_neg([1,2,3,4,-1]) == -1"], "code": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max", "task_id": 443, "generation": "def largest_neg(list1):\n    largest = list1[0]\n\n    for i in list1:\n\n        if i < 0 and (largest is None or i > largest):\n\n            largest = i\n\n    return largest\n\nassert largest_neg([23, 56, -15, -8, 4, 634, -5865]) == -15\n\nassert largest_neg([23, 56, -15, -8, 4, 634, -5865]) == -4\n\nassert largest_neg([23, 56, -15, -8, -4, 634, -5865]) == -4\n\n        if i > 0 and (smallest is None or i < smallest):\n\n            smallest = i\n\n    return smallest\n\n#### Test Cases:\n\nassert smallest_pos([23, 56, -15, -8, 4, 634, -5865]) == 4\n\nassert largest_neg\n\nassert largest_neg([23, 56, -15, -8,\n\n    return\n\nlargest_neg([23, 56,-15, -8, 4, 634,-5865])==-15\n\nassert largest_neg([-3, -18, -20 ,80]) == -3\n\n```\n\nfinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to trim each tuple by k in the given tuple list.", "test": ["assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'", "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'", "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"], "code": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ", "task_id": 444, "generation": "def trim_tuple(test_list, K):\n    # Creating a empty list to store the result.\n\n    res = []\n\n    # Iterating over each tuple in the list.\n\n    for tup in test_list:\n\n        # Ignoring if the tuple size is not greater than K.\n\n        if len(tup) > K:\n\n            # Trimming the tuple and adding it to the result list.\n\n            res.append(tup[K:])\n\n    # Iterate over the given list and trim tuples by K.\n\n    return [t[K:] if len(t) > K else t for t in test_list]\n\n    return res\n\ntest_list = [(1, 2, 3), (4, 5, 6, 7, 8), (9, 10), (11, 12, 13, 14, 15, 1\n\ntest_list = [(1, 2, 3), (4, 5, 6, 7, 8), (9, 10), (11, 12, 13, 14, 15, 16)]\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "test": ["assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))", "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))", "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"], "code": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 445, "generation": "def index_multiplication(test_tup1, test_tup2):\n    res = []\n\n    for i in range(0, len(test_tup1)):\n\n        res.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(res)\n\ntest_tup1 = (1, 4, 5)\n\ntest_tup2 = (10, 2, 50)\n\nprint(index_multiplication(test_tup1, test_tup2)) #### Test Cases\n\ntest_tup1 = (3, 6, 9, 12, 15)\n\ntest_tup1 = (10, 20, 30, 40)\n\ntest_tup1 = (2, 3, 4, 5)\n\nprint(index_multiplication(test_tup1, test_tup2))\n\nprint(index_multiplication(test_tup1, test_tup2)) #### Finish\n\n"}
{"prompt": "Write a python function to count the occurence of all elements of list in a tuple.", "test": ["assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3", "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6", "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"], "code": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ", "task_id": 446, "generation": "from collections import Counter\ndef count_Occurrence(tup, lst):\n  dict = Counter(tup)\n\n  res = {i: dict[i] for i in lst if i in dict}\n\n  return res \n\n# finish\n\n"}
{"prompt": "Write a function to find cubes of individual elements in a list using lambda function.", "test": ["assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "assert cube_nums([10,20,30])==([1000, 8000, 27000])", "assert cube_nums([12,15])==([1728, 3375])"], "code": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums", "task_id": 447, "generation": "def cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n\nnums = [1, 2, 3, 4]\n\nprint(cube_nums(nums))\n\n# finish\n\n"}
{"prompt": "Write a function to calculate the sum of perrin numbers.", "test": ["assert cal_sum(9) == 49", "assert cal_sum(10) == 66", "assert cal_sum(11) == 88"], "code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum", "task_id": 448, "generation": "def cal_sum(n):\n    # initialize the first two Perrin numbers\n\n    P0, P1, P2 = 3, 0, 2\n\n    if n == 0:\n\n        return P0\n\n    elif n == 1:\n\n        return P1\n\n    elif n == 2:\n\n        return P2\n\n    else:\n\n        for i in range(3, n+1):\n\n            Pn = P0 + P2\n\n            P0, P1, P2 = P1, P2, Pn\n\n        for i in range(3, n+1):\n\n    dp = [-1]*(n+1)\n\n    dp[0] = P0\n\n    dp[1] = P1\n\n    dp[2] = P2\n\n    for i in range(3, n+1):\n\n        dp[i] = dp[i-2] + dp[i-3]\n\n    return dp[n]\n\n# finish\n\n"}
{"prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.", "test": ["assert check_Triangle(1,5,2,5,4,6) == 'Yes'", "assert check_Triangle(1,1,1,4,1,5) == 'No'", "assert check_Triangle(1,1,1,1,1,1) == 'No'"], "code": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ", "task_id": 449, "generation": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    def distance(x1, y1, x2, y2):\n\n        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n    a = distance(x1,y1,x2,y2)\n\n    b = distance(x2,y2,x3,y3)\n\n    c = distance(x1,y1,x3,y3)\n\n    if a + b > c and b + c > a and c + a > b:\n\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n\n        return \"Right angled\"\n\n        print(\"Valid triangle\")\n\n    else:\n\n        return \"Not right angled\"\n\n        print(\"Not a valid triangle\")\n\n                return False\n\n        return False\n\n                # finish\n\n"}
{"prompt": "Write a function to extract specified size of strings from a give list of string values.", "test": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"], "code": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result", "task_id": 450, "generation": "def extract_string(str, l):\n    \"\"\"\n\n    return [i for i in str if len(i) == l]\n\n    # finish\n\n"}
{"prompt": "Write a function to remove all whitespaces from the given string using regex.", "test": ["assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'", "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'", "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"], "code": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))", "task_id": 451, "generation": "import re\ndef remove_whitespaces(text1):\n    text1 = re.sub(' ', '', text1)\n\n    return text1 \n\n# finish\n\n"}
{"prompt": "Write a function that gives loss amount if the given amount has loss else return none.", "test": ["assert loss_amount(1500,1200)==None", "assert loss_amount(100,200)==100", "assert loss_amount(2000,5000)==3000"], "code": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None", "task_id": 452, "generation": "def loss_amount(actual_cost,sale_amount):\n    if actual_cost > sale_amount:\n\n        return actual_cost - sale_amount\n\n    else:\n\n        return None    \n\n# finish\n\n"}
{"prompt": "Write a python function to find the sum of even factors of a number.", "test": ["assert sumofFactors(18) == 26", "assert sumofFactors(30) == 48", "assert sumofFactors(6) == 8"], "code": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ", "task_id": 453, "generation": "import math\ndef sumofFactors(n) :\n    sum = 0\n\n    for i in range(1, int(math.sqrt(n))+1) :\n\n        if n % i == 0:\n\n            if n / i == i :\n\n#                 if i % 2 == 0:\n\n#                     sum = sum + i\n\n                if i % 2 == 0:\n\n                    sum += i\n\n                if (n/i) % 2 != 0:\n\n                if i % 2 == 0:\n\n    for i in range(1, n) :\n\n    # check for both divisors\n\n            if n / i == i and i % 2 == 0:\n\n    for i in range(1,int(sqrt(n))+1):\n\n                    sum = sum + i\n\n                    sum = sum + n//i\n\n            if n / i == i:\n\n            else:\n\n    for i in range(1, n + 1):\n\n        return sum\n\ndef main():\n\n    strings = [\"Hello\", \"World\", \"Python\", \"Programming\"]\n\n            else :\n\n                arr[i][j] = -1\n\n        #print( lower)\n\n                sum += i\n\ndef getInput():\n\n                j = n / i\n\n    n = int(input(\"Enter a number: \"))\n\n    n=int(input(\"Enter a number: \"):\n\n"}
{"prompt": "Write a function that matches a word containing 'z'.", "test": ["assert text_match_wordz(\"pythonz.\")==('Found a match!')", "assert text_match_wordz(\"xyz.\")==('Found a match!')", "assert text_match_wordz(\"  lang  .\")==('Not matched!')"], "code": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "task_id": 454, "generation": "import re\ndef text_match_wordz(text):\n    pattern = 'z'\n\n    if re.search(pattern, text):\n\n        return True\n\n    else:\n\n        return False\n\nprint(text_match_wordz(\"The quick brown box jumps.\")) # False\n\nprint(text_match_wordz(\"The quick brown zebra jumps.\")) # True\n\nprint(text_match_wordz(\"Java\")) # False\n\nprint(text_match_wordz(\"JavaScript\")) # True\n\n        archivo_salida.write(codigo_escrita[:cantidad_caracteres_maxima] + '\\n')\n\n            result += letter\n\n    return result\n\nprint(alphabet_consonants(\"hello\", \"x\"))\n\n    # should return \"hxllx\"\n\nprint(alphabet_consonants(\"abcdefgh\", \"x\"))\n\n    # should return \"xbcdxfxh\"\n\nprint(alphabet_consonants(\"xxxxxxxxx\", \"x\"))\n\nprint(alphabet_consonants(\"hello\", \"x\")) # should return \"hxllx\"\n\nprint(alphabet_consonants(\"abcdefgh\", \"x\")) # should return \"xbcdxfxh\"\n\nprint(alphabet_consonants(\"xxxxxxxxx\", \"x\")) # should return \"xxxxxxx\"\n\ndef alphabet_consonants_variant(text, new_letter):\n\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\n    result = ''\n\nprint(alphabet_consonants_variant(\"hello\", \"x\"))\n\n    # should return \"hexxo\"\n\nprint(con_to_list(\"12345\"))  # should return ['1', '2', '3', '4', '5']\n\nprint(con_to_list(\"shoestring\"))  # should return ['s', 'h', 'o', 'e', 's', 't', 'r', 'i', 'n', 'g']\n\n    return {letter: string.count(letter) for letter in string if letter in consonants}\n\n    return\n\nprint(letter_counter(\"hello\")) # should return {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n\n"}
{"prompt": "Write a function to check whether the given month number contains 31 days or not.", "test": ["assert check_monthnumb_number(5)==True", "assert check_monthnumb_number(2)==False", "assert check_monthnumb_number(6)==False"], "code": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False", "task_id": 455, "generation": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n\n        return \"Yes\"\n\n    else:\n\n        return \"No\"\n\n```\n\nprint(check_monthnumb_number(1))  # Yes\n\n|9         return x**(1/3)\n\n Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to reverse strings in a given list of string values.", "test": ["assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']", "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"], "code": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result", "task_id": 456, "generation": "def reverse_string_list(stringlist):\n    reversed_list = [string[::-1] for string in stringlist]\n\n    return reversed_list\n\n  # finish\n\n"}
{"prompt": "Write a python function to find the sublist having minimum length.", "test": ["assert Find_Min([[1],[1,2],[1,2,3]]) == [1]", "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]", "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"], "code": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList", "task_id": 457, "generation": "def Find_Min(lst):\n    min_length = len(lst[0])\n\n    min_sublist = lst[0]\n\n    for sublist in lst:\n\n        if len(sublist) < min_length:\n\n            min_length = len(sublist)\n\n            min_sublist = sublist\n\n    return min_sublist\n\nlst = [[1, 2], [3], [4, 5, 6], [7, 8]]\n\nprint(Find_Max(lst))\n\nprint(Find_Min(lst))\n\nlst = [[1, 2], [3,\n\nlst = [[1, 2], [3, 4], [5], [6, 7, 8]]\n\nprint(Find_Min(lst))  # Expected output: [5]\n\nprint(Find_Max(lst))  # Expected output: [6, 7, 8]\n\nfrom typing import List, Any\n\ndef Find_Max(lst: List[Any]) -> Any:\n\n        if len(sublist) > max_length:\n\n    max_length = len(lst[0])\n\n    max_sublist = lst[0]\n\n            min_sublist =\n\n    return min(lst, key = len)\n\nlst_sublists = [ [sublist] for sublist in lst ]\n\n    pass\n\n    return min_sublist\n\nprint(find_min_and_max_sublists(lst))  #\n\nprint(find_min_and_max_sublists(lst))  # Expected output: ([3], [7, 8])\n\nlst_empty = []\n\nlst = [[1, 2], [3, 4, [5, 6]], [7, 8]]\n\nprint(Find_Max(lst))  # Expected output: [1, 2, [5, 6]]\n\nprint(find_sublist(lst))  # Expected output: ([1, 2], [7, 8])\n\n"}
{"prompt": "Write a function to find the area of a rectangle.", "test": ["assert rectangle_area(10,20)==200", "assert rectangle_area(10,5)==50", "assert rectangle_area(4,2)==8"], "code": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area", "task_id": 458, "generation": "def rectangle_area(l,b):\n\t\"\"\" \n\n\tThis function returns the area of a rectangle computed by its length and width. \n\n\tThis function returns the sum of all the elements in the list.\n\n\tb, h: positive numbers.\n\n\tr: positive numbers.\n\n\t\"\"\"\n\n\t# Initialize the Fibonacci series as [0, 1].\n\n\tfib_series = [0, 1] \n\n\t# Calculate the next Fibonacci number.\n\n\tfor i in range(2, l + 1):\n\n\tThis function\n\n\tStudy up: The Fibonacci series is a mathematical series characterized by the fact that every number after the first two is the sum of the two preceding ones. Usually starting with 0 and 1.\n\n\t#fib_series.append(fib_series[-1] + fib_series[-2])\n\n\tif l > 0 and b > 0:\n\n\t\tarea = l * b\n\n\telse:\n\n\tThis function returns the list of all elements in the list 'l' that are divisible by 'n'.\n\n\t\tThis function determines if the three angles form a triangle and if so, what type (right-angled, acute or obtuse).\n\n\t\tprint(\"Invalid input. The angles do not form a valid triangle.\")\n\n\tThis function returns the area of a rectangle computed by its length and width.\n\n\tl, b: positive numbers.\n\n\tpass\n\n\t# Return the Fibonacci series.\n\n\tprint(rectangle_area([0, 1, 1, 2, 3, 5, 8, 13, 21, 34],[1,2,1,1,2,3,5,8,13,21,34]))\n\n\t\tprint(\"Invalid input. The sides should be positive numbers.\")\n\n\t# Initialize the Fibonacci series as [0, 1\n\n\tThis function returns the Fibonacci series up to the 'n' number.\n\n\t#Initialize the Fibonacci series as [0, 1].\n\n\t\tprint\n\n\tties.append(fib_series[-1] + fib_series[-2])\n\n"}
{"prompt": "Write a function to remove uppercase substrings from a given string by using regex.", "test": ["assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'", "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'", "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"], "code": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)", "task_id": 459, "generation": "import re\ndef remove_uppercase(str1):\n    str1 = re.sub(r'[A-Z]+', '', str1)\n\n    return str1\n\n### Patterns we're removing\n\nr'[A-Z]+'\n\nIn regex, A-Z refers to all the capital letters in alphabets and '+' after it refers to one or more occurrence of the pattern. Hence, this pattern matches one or more uppercase letters. r is a python code prefix that helps python to understand that the following string should be treated as a raw string.\n\nprint(remove_lowercase(\"Hello World\"))\n\nOutput: 'o Wo'\n\n# finish\n\n"}
{"prompt": "Write a python function to get the first element of each sublist.", "test": ["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "assert Extract([[1,2,3],[4, 5]]) == [1,4]", "assert Extract([[9,8,1],[1,2]]) == [9,1]"], "code": "def Extract(lst): \r\n    return [item[0] for item in lst] ", "task_id": 460, "generation": "def Extract(lst):\n    first_elements = [i[0] for i in lst]\n\n    return first_elements\n\n# finish\n\n"}
{"prompt": "Write a python function to count the upper case characters in a given string.", "test": ["assert upper_ctr('PYthon') == 1", "assert upper_ctr('BigData') == 1", "assert upper_ctr('program') == 0"], "code": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr", "task_id": 461, "generation": "def upper_ctr(str):\n    upper_count = 0\n\n    for i in str:\n\n        if i.isupper():\n\n            upper_count+=1\n\n    return len([i for i in str if i.isupper()])\n\n# finish\n\n"}
{"prompt": "Write a function to find all possible combinations of the elements of a given list.", "test": ["assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]", "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"], "code": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result", "task_id": 462, "generation": "def combinations_list(list1):\n    from itertools import chain, combinations\n\n    return list(chain(*[combinations(list1, i) for i in range(len(list1) + 1)]))\n\ncombinations_list([1, 2, 3])\n\n# finish\n\n"}
{"prompt": "Write a function to find the maximum product subarray of the given array.", "test": ["assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ", "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"], "code": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far", "task_id": 463, "generation": "def max_subarray_product(arr):\n    max_ending_here = max_ending_so_far = min_ending_here = min_ending_so_far = arr[0]\n\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n\n        if arr[i] > 0:\n\n            max_ending_here = max_ending_here * arr[i]\n\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n\n            if max_ending_here < max_so_far:\n\n                max_so_far = max_ending_here\n\n        if max_so_far < max_ending_so_far:\n\n            max_so_far = max_ending_so_far\n\n        if min_ending_here > min_ending_so_far or max_ending_here > min_ending_so_far:\n\n            max_ending_so_far = max(max_ending_here, min_ending_here)\n\n        return max_so_far finish\n\n"}
{"prompt": "Write a function to check if all values are same in a dictionary.", "test": ["assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"], "code": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result", "task_id": 464, "generation": "def check_value(dict, n):\n    # Get the values\n\n    values = list(dict.values())\n\n    # Check if all values are same\n\n    return values.count(values[0]) == len(values)\n\nprint(check_value({}))  # True\n\nprint(check_value({'a': 1, 'b': 1, 'c': 1}))  # True\n\nprint(check_value({'a': 1, 'b': 2, 'c': 1}))  # False\n\nprint(check_value({'a': 1, 'b': '1', 'c': 1}))  # False\n\nprint(check_value({'a': 1, 'b': 1, 'c': 1, 'd': 1}))  # True\n\nprint(check_value({'a': 1, 'b': 1, 'c': 1, 'd': 2}))  # False\n\n# finish\n\n"}
{"prompt": "Write a function to drop empty items from a given dictionary.", "test": ["assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}", "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}", "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"], "code": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1", "task_id": 465, "generation": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value}\n\ndict1 = {'a': 1, 'b': None, 'c': '', 'd': [], 'e': {}}\n\nprint(drop_empty(dict1)) # {'a': 1}\n\n    return {key: value for key, value in dict1.items() if value or value == 0}\n\nfinish\n\n"}
{"prompt": "Write a function to find the peak element in the given array.", "test": ["assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2", "assert find_peak([2, 3, 4, 5, 6], 5) == 4", "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "], "code": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ", "task_id": 466, "generation": "def find_peak_util(arr, low, high, n):\n    mid = low + (high - low) // 2\n\n    if ((mid == 0 or arr[mid] >= arr[mid + 1]) and (mid == n - 1 or arr[mid] >= arr[mid - 1])):\n\n        return mid\n\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n\n        return find_peak_util(arr, low, mid - 1, n)\n\n    else:\n\n        return find_peak_util(arr, mid + 1, high, n)\n\ndef find_peak(arr, n):\n\n    return find_peak_util(arr, 0, n - 1, n)\n\n# Test the function\n\narr = [1, 3, 20, 4, 1, 0]\n\nprint(sum_of_digits(12345))\n\nprint(sum_of_digits(472))\n\n            return binary_search(arr, mid + 1, high, x)\n\n            return binary_search(arr, low, mid - 1, x)\n\n    return -1\n\n            return binary_search_descending(arr, mid + 1, high, x)\n\n            return binary_search_unsorted(arr, mid + 1, high, x)\n\n            return binary_search_unsorted(arr, low, mid - 1, x)\n\narr = [1, 2, 3, 1]\n\nn = len(arr)\n\n        return (n % 2 + 10 * convert_to_binary(int(n // 2)))\n\n        return n % 10 + sum_of_digits(n // 10)\n\n#finish\n\n"}
{"prompt": "Write a python function to convert decimal number to octal number.", "test": ["assert decimal_to_Octal(10) == 12", "assert decimal_to_Octal(2) == 2", "assert decimal_to_Octal(33) == 41"], "code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)", "task_id": 467, "generation": "def decimal_to_Octal(deciNum):\n    # Finish writing the python function\n\n"}
{"prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "test": ["assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ", "assert max_product([4, 42, 55, 68, 80], 5) == 50265600", "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "], "code": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)", "task_id": 468, "generation": "def max_product(arr, n ):\n    # dp[i] will store the maximum product\n\n    # for subarray ending at index i.\n\n    dp = [0]*n \n\n    # dp2[i] will store the minimum product\n\n    # for subarray ending at index i. As product\n\n    # of two negative numbers becomes positive.\n\n    dp2 = [0]*n\n\n    dp[0] = arr[0]\n\n    dp2[0] = arr[0]\n\n    for i in range(1,n):\n\n        # If arr[i] is positive, then we \n\n        # multiply max positive product with \n\n        # arr[i] and min negative product with \n\n        # negative number and min negative \n\n        # negative number and min negative product \n\n        # with max negative number and max negative \n\n        # product with arr[i].\n\n        if arr[i]>0:\n\n            dp[i] = max(arr[i], dp2[i-1]*\n\n            arr[i] if dp2[i-1]<0 else dp2[i-1]*arr[i])\n\n            dp2[i] = min(arr[i], dp[i-1]*\n\n            arr[i] if dp[i-1]>0 else dp[i-1]*arr[i])\n\n        if arr[i]>0\n\n        # arr[i] and\n\n            dp2[i] = min(arr[i], dp2[i-1]*\n\n            arr[i] if dp2[i-1]>0 else dp2[i-1]*arr[i])\n\n    # Finally return maximum value from array dp.\n\n    return max(dp) # finish\n\n"}
{"prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "test": ["assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10", "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7", "assert max_profit([10, 6, 8, 4, 2], 2) == 2"], "code": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]", "task_id": 469, "generation": "def max_profit(price, k):\n    n = len(price)\n\n    # If k is greater than n/2 then the profit can be maximized by buying and selling all days\n\n    if k > n // 2:\n\n        return sum(price[i] - price[i-1] for i in range(1, n) if price[i] > price[i-1])\n\n    # If no transaction is allowed then maximum profit is 0\n\n    if k == 0:\n\n        return 0\n\n    profit = [[0 for _ in range(n)] for _ in range(k+1)]\n\n    for i in range(1, k+1):\n\n        max_diff = -price[0]\n\n        for j in range(1, n):\n\n            profit[i][j] = max(profit[i][j-1], price[j] + max_diff)\n\n            max_diff = max(max_diff, profit[i-1][j-1] - price[j])\n\n    return profit[k][n-1]\n\n### Post Explanation\n\nThe text is now finished, and the code block for the python function is written. You can finish writing your explanation now. Remember, it's important to provide a clear explanation of what the function does, what the input and output are, and any key takeaways from the function.\n\n"}
{"prompt": "Write a function to find the pairwise addition of the elements of the given tuples.", "test": ["assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)", "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)", "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"], "code": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "task_id": 470, "generation": "def add_pairwise(test_tup):\n    res_lst = []\n\n    for i in range(0, len(test_tup), 2):\n\n        if (i+1 < len(test_tup)):\n\n            res_lst.append(test_tup[i] + test_tup[i+1])\n\n    return tuple(res_lst)\n\nprint(add_pairwise((1,2,3,4,5,6)))\n\n# finish\n\n"}
{"prompt": "Write a python function to find remainder of array multiplication divided by n.", "test": ["assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9", "assert find_remainder([1,1,1],3,1) == 0", "assert find_remainder([1,2,1],3,2) == 0"], "code": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ", "task_id": 471, "generation": "def find_remainder(arr, lens, n):\n    prod = 1\n\n    for i in range(lens):\n\n        prod *= arr[i]\n\n    return prod % n\n\n# Test cases\n\nnums = [2, 7, 11, 15]\n\ntarget = 9\n\nnums = [1, -2, 3, -4, 5, -6, 7, -8, 9]\n\ntarget = 3\n\nnums = [-2, 1, 2, -3, 4, 5]\n\ntarget = 6\n\nnums = [1, 2, 3, 2, 4, 5, 1, 7, 8, 6, 9, 6]\n\ntarget = 11\n\n# Outputs\n\n##2, 7 11, 15\n\nprint(find_remain\n\nprint(find_remainder(nums, len(nums), target))\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to check whether the given list contains consecutive numbers or not.", "test": ["assert check_Consecutive([1,2,3,4,5]) == True", "assert check_Consecutive([1,2,3,5,6]) == False", "assert check_Consecutive([1,2,1]) == False"], "code": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ", "task_id": 472, "generation": "def check_Consecutive(l):\n  return sorted(l) == list(range(min(l), max(l)+1)) # finish\n\n"}
{"prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "test": ["assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}", "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"], "code": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)", "task_id": 473, "generation": "def tuple_intersection(test_list1, test_list2):\n    intersected_list1 = [x for x in test_list1 if x in test_list2]\n\n    intersected_list2 = [x for x in test_list2 if x in test_list1]\n\n    combined_list = intersected_list1 + intersected_list2\n\n    final_result = [x for n, x in enumerate(combined_list) if x not in combined_list[:n]] \n\n    return final_result\n\n# Driver code\n\ntest_list1 = [(1,2), (2,3), (3,4)]\n\ntest_list2 = [(1,2), (4,5), (6,7)]\n\nprint(\"Original lists:\\n\", test_list1, \"\\n\", test_list2)\n\nresult = tuple_intersection(test_list1, test_list2)\n\nprint(\"Intersection of tuples in the list:\\n\", result)\n\n# finish\n\n"}
{"prompt": "Write a function to replace characters in a string.", "test": ["assert replace_char(\"polygon\",'y','l')==(\"pollgon\")", "assert replace_char(\"character\",'c','a')==(\"aharaater\")", "assert replace_char(\"python\",'l','a')==(\"python\")"], "code": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2", "task_id": 474, "generation": "def replace_char(str1,ch,newch):\n    \"\"\"Replace all occurrences of char in string with newchacter.\"\"\"\n\n    \"\"\"Replace all occurrences of char in string with new character.\"\"\"\n\n    str1 = str1.replace(ch,newch)\n\n    return str1\n\n```\n\n```\n\ns = \"hello\"\n\ns = s.replace(\"l\", \"x\")\n\n### Output:\n\nAnother way to do it is by using a list comprehension:\n\n# Test cases\n\nprint(result)\n\nNote: Code solution doesn't correspond with the request to replace the characters in the string, but to iterate over the string and replace each character if it matches the target character.\n\ndef replace_char(str1,ch,newch): # start function here\n\n    result = ''.join([newch if i == ch else i for i in str1]) # replace character\n\n# finish\n\n"}
{"prompt": "Write a function to sort counter by value.", "test": ["assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"], "code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter", "task_id": 475, "generation": "from collections import Counter\ndef sort_counter(dict1):\n    cnt = Counter()\n\n    for key, value in dict1.items():\n\n        cnt[key] = value\n\n    return cnt\n\ndict1 = {'a': 10, 'b': 1, 'c': 5, 'd': 3}\n\nprint(sort_counter(dict1))  # Output: [('a', 10), ('c', 5), ('d', 3), ('b', 1)]\n\n        cnt[value] += 1\n\n    return sum(key for key, value in cnt.items())\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to find the sum of the largest and smallest value in a given array.", "test": ["assert big_sum([1,2,3]) == 4", "assert big_sum([-1,2,3,4]) == 3", "assert big_sum([2,3,6]) == 8"], "code": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum", "task_id": 476, "generation": "def big_sum(nums):\n  if len(nums) == 0:\n\n    return 0\n\n  min_num = min(nums)\n\n    return 1\n\n  prod = 1\n\n  for num in nums:\n\n  if min_num == 0:\n\n      return 2\n\n  if\n\n    max_num = max(nums)\n\n    if num != max_num and num != min_num:\n\n  max_num = max(nums)\n\n  if min_num == max_num:\n\n    return min_num\n\n  else:\n\n      return max_num + min_num\n\n  min_num = min(nums\n\n    return max_num + min_num\n\n        return 'no'\n\n  return max_num + min_num\n\n  sum = 0\n\n    nums.sort()\n\n    if len(nums) >= 2 and nums[0] != nums[1]:\n\n  return nums[0] + nums[1]\n\n  return 'no'\n\n    return \"The array is empty\"\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to convert the given string to lower case.", "test": ["assert is_lower(\"InValid\") == \"invalid\"", "assert is_lower(\"TruE\") == \"true\"", "assert is_lower(\"SenTenCE\") == \"sentence\""], "code": "def is_lower(string):\r\n  return (string.lower())", "task_id": 477, "generation": "def is_lower(string):\n    return string == string.lower()\n\n    for char in string:\n\n        if not char.islower():\n\n            return False\n\n    return True\n\n# Write your final code here.\n\nprint(is_lower(\"HELLO\"))\n\n        if 'A' <= char <= 'Z':\n\n        elif '0' <= char <= '9':\n\nprint(to_lower(\"HELLO\"))\n\n        if char != ' ' and char != '_':\n\nprint(to_lower(\"HELLO_WORLD\"))\n\nprint(to_lower(\"HelloWorld\"))\n\n    return string.islower()\n\nprint(to_lower(\" HELLO\"))\n\n        elif 'A' <= char <= 'Z':\n\nprint(is_upper(\"hello\"))\n\nprint(is_upper(\"HELLO\")) >>> True\n\nprint(is_upper(\"Hello\")) >>> False\n\n<jupyter_output>\n\nTrue\n\nH\n\nprint(is_lower(\" HELLO\")) >>> False\n\nprint(\n\n<jupyter_text>\n\n6) Write the function named remove_special_characters to remove special characters from a given string. The function should return a string with only alphanumeric characters and spaces. ### Response: def remove_special_characters(string):    return ''.join(e for e in string if (e.isalnum() or e.isspace())) res = remove_special_characters(\"Hello@World123\") print(res) \"Hello World 123\"\n\n        for i in range(2, int(n**0.5) + 1):\n\nCall the function with the range (1, 20)\n\n8) Write a python function named subtract_days to subtract a number of days from a given date. The function should return a date. ### Response: from datetime import datetime, timedelta\n\narr = [1, 2, 3, 4, 5]\n\n"}
{"prompt": "Write a function to remove lowercase substrings from a given string.", "test": ["assert remove_lowercase(\"PYTHon\")==('PYTH')", "assert remove_lowercase(\"FInD\")==('FID')", "assert remove_lowercase(\"STRinG\")==('STRG')"], "code": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result", "task_id": 478, "generation": "import re\ndef remove_lowercase(str1):\n    str1 = re.sub(r\"[a-z]+\", \"\", str1)\n\n    return str1\n\nprint(remove_lowercase('HelloWorld')) # Should print: \n\nassert remove_lowercase('HelloWorld') == 'HelloWorld'\n\nassert remove_lowercase('HELLOworld') == 'HELLO'\n\nassert remove_lowercase('HeLLoWorLD') == 'HeLLoWorLD'\n\nassert remove_lowercase('heLLoWOw') == 'heLLoWOw'\n\nassert remove_lowercase('1234') == '1234'\n\nassert remove_lowercase('HelloWO1234rld') == 'HelloWO1234rld'\n\nprint(remove_char('HelloWorld', 'o')) # Should print: 'HellWrld'\n\nprint(remove_char('HELLOworld', 'E')) # Should print: 'LLOworld'\n\nprint(remove_char('HeLLoWorLD', 'l')) # Should print: 'HeWorLD'\n\nassert remove_char('HelloWorld', 'o') == 'HellWrld'\n\nassert remove_char('HELLOworld', 'E') == 'LLOworld'\n\nprint(reverse_string('HelloWorld')) # Should print: 'dlroWolleH'\n\nassert reverse_string('HelloWorld') == 'dlroWolleH'\n\nassert reverse_string('HELLOworld') == 'dlrowOLLEH'\n\nassert reverse_string('HeLLoWorLD') == 'DLroWLLeH'\n\n# Test cases\n\ndef remove_char(str1, char):\n\nassert remove_char('HeLLoWorLD', 'l') == 'HeWorLD'\n\nassert remove_even_indices('HELLOworld') == 'e'\n\nassert remove_all('Hello', 'l') == 'Heo'\n\nassert remove_all('HELLOHELLO', 'HELL') == ''\n\nassert calculate(5, 3, 'add') == 8\n\nassert calculate(5, 3, 'subtract') == 2\n\nassert calculate(5, 3, 'multiply') == 15\n\nassert calculate(6, 3, 'divide') == 2\n\nassert calculate(5, 3, 'remainder') == 2\n\n# Testing at the end would not be feasible in practical scenarios as we would need to come up with new questions.\n\n"}
{"prompt": "Write a python function to find the first digit of a given number.", "test": ["assert first_Digit(123) == 1", "assert first_Digit(456) == 4", "assert first_Digit(12) == 1"], "code": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ", "task_id": 479, "generation": "def first_Digit(n) :\n    n = abs(n)\n\n    while n > 0 :\n\n        dig = n % 10\n\n        n = n // 10\n\n    return dig \n\n# finish\n\n"}
{"prompt": "Write a python function to find the maximum occurring character in a given string.", "test": ["assert get_max_occuring_char(\"data\") == \"a\"", "assert get_max_occuring_char(\"create\") == \"e\"", "assert get_max_occuring_char(\"brilliant girl\") == \"i\""], "code": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch", "task_id": 480, "generation": "def get_max_occuring_char(str1):\n    # Create a dictionary of character to count occurrence\n\n    dic ={i : str1.count(i) for i in set(str1)}\n\n    # Get the character with maximum count\n\n    max_count = max(dic.values())\n\n    # Get all characters with maximum count\n\n    max_chars = [key for key, value in dic.items() if value == max_count]\n\n    # Return the first character from the max_chars list\n\n    return max_chars[-1] if len(max_chars) == 1 else max_chars\n\n# Test the function\n\nprint(remove_duplicates(list_with_duplicates))\n\n# finish\n\n"}
{"prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "test": ["assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True", "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False", "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"], "code": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])", "task_id": 481, "generation": "def is_subset_sum(set, n, sum):\n    \"\"\" This function returns True if there is a subset of set[0..n-1] with sum equal to given sum \"\"\"\n\n    if sum == 0:\n\n        return True\n\n    if n == 0 and sum != 0:\n\n        return False\n\n    # If last element is greater than sum, then ignore it\n\n    if set[n-1] > sum:\n\n        return is_subset_sum(set, n-1, sum)\n\n    # else, check if sum can be obtained by any of the following\n\n    # (a) including last element\n\n    # (b) excluding last element\n\n    return is_subset_sum(set, n-1, sum-set[n-1]) or is_subset_sum(set, n-1, sum)\n\nfinish\n\n"}
{"prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "test": ["assert match(\"Geeks\") == 'Yes'", "assert match(\"geeksforGeeks\") == 'Yes'", "assert match(\"geeks\") == 'No'"], "code": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ", "task_id": 482, "generation": "import re\ndef match(text):\n    pattern = r'[A-Z]+[a-z]+'\n\n    matches = re.findall(pattern, text)\n\n    return matches\n\n<jupyter_output>\n\n<empty_output>\n\n['HelloWorld', 'niceDay', 'WarmWeather', 'wonderFUL']\n\nfinish\n\n"}
{"prompt": "Write a python function to find the first natural number whose factorial is divisible by x.", "test": ["assert first_Factorial_Divisible_Number(10) == 5", "assert first_Factorial_Divisible_Number(15) == 5", "assert first_Factorial_Divisible_Number(5) == 4"], "code": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ", "task_id": 483, "generation": "def first_Factorial_Divisible_Number(x):\n    factorial = 1\n\n    i = 1\n\n    while True:\n\n        if factorial % x == 0:\n\n            return i\n\n        else:\n\n            i += 1\n\n            factorial *= i\n\n        i += 1\n\n        factorial *= i\n\n#Test\n\nprint(first_Factorial_Divisible_Number(3))\n\nprint(first_Factorial_Divisible_Number(5))\n\nprint(first_Factorial_Divisible_Number(7))\n\nprint(first_Factorial_Divisible_Number_Improved(3))\n\nprint(first_Factorial_Divisible_Number_Improved(5))\n\nprint(first_Factorial_Divisible_Number_Improved(7))\n\n# finish\n\n"}
{"prompt": "Write a function to remove the matching tuples from the given two tuples.", "test": ["assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]", "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]", "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"], "code": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ", "task_id": 484, "generation": "def remove_matching_tuple(test_list1, test_list2):\n    # Get pairs from tuple test_list1 and test_list2 and store it in list1 and list2.\n\n    list1, list2 = list(test_list1), list(test_list2)\n\n    # Iterate and remove same tuple from list1 and list2.\n\n    for i in list1:\n\n        for j in list2:\n\n            if i == j:\n\n                list1.remove(i)\n\n                list2.remove(j)\n\n    # Return new tuple containing unique tuples.\n\n    return (tuple(list1), tuple(list2))\n\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\n\ntest_list2 = [(3, 4), (5, 6), (7, 8)]\n\nprint(remove_matching_tuple(test_list1, test_list2))\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find the largest palindromic number in the given array.", "test": ["assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545", "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5", "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"], "code": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1", "task_id": 485, "generation": "def is_palindrome(n) :\n    return str(n) == str(n)[::-1]\n\ndef find_largest_palindrome(arr) :\n\n    max_palindrome = -1\n\n    for element in arr:\n\n        if is_palindrome(element) and element > max_palindrome :\n\n            max_palindrome = element\n\n    if max_palindrome == -1:\n\n        return None\n\n    else:\n\n        return max_palindrome\n\nFooter\n\n\u00a9 2022 GitHub, Inc.\n\n```\n\nFooter navigation\n\nTerms\n\n    for element\n\nfinish\n\n"}
{"prompt": "Write a function to compute binomial probability for the given number.", "test": ["assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185", "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375", "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"], "code": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ", "task_id": 486, "generation": "def nCr(n, r):\n    return factorial(n) / (factorial(r) * factorial(n - r))\n\ndef binomial_probability(n, r, p):\n\n    return nCr(n, r) * (p ** r) * ((1 - p) ** (n - r))\n\nfinish\n\n"}
{"prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "test": ["assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]", "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]", "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"], "code": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup", "task_id": 487, "generation": "def sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])\n\ntup = [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]\n\nprint(sort_tuple(tup))\n\n# finish\n\n"}
{"prompt": "Write a function to find the area of a pentagon.", "test": ["assert area_pentagon(5)==43.01193501472417", "assert area_pentagon(10)==172.0477400588967", "assert area_pentagon(15)==387.10741513251753"], "code": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area", "task_id": 488, "generation": "import math\ndef area_pentagon(a):\n    area = (1/4)*math.sqrt(5*(5+2*math.sqrt(5)))*a**2\n\n    return area\n\nfinish\n\n"}
{"prompt": "Write a python function to find the frequency of the largest value in a given array.", "test": ["assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2", "assert frequency_Of_Largest(3,[5,6,5]) == 1", "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"], "code": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "task_id": 489, "generation": "def frequency_Of_Largest(n,arr):\n    # Write your code here\n\n    min_val = min(arr)\n\n    max_val = max(arr)\n\n    max_count = 0\n\n    # Count the occurrence of the maximum value in the array\n\n    max_count = arr.count(max_val)\n\n    return max_count\n\n    return max_count, max_val\n\n# Testing the function\n\n# Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "test": ["assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}", "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}", "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"], "code": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ", "task_id": 490, "generation": "def extract_symmetric(test_list):\n    res = []\n\n    for i in range(len(test_list)):\n\n        for j in range(i+1, len(test_list)):\n\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n\n                res.append((test_list[i], test_list[j]))\n\n    return res\n\n        if test_list[i] == target:\n\ntarget = 0\n\ntest_list = [(10, 20), (30, 40), (50, 60), (20, 10), (40, 30), (60, 50)]\n\nprint(\"The original list is : \" + str(test_list))\n\nreturn_res = extract_symmetric(test_list)\n\nprint(\"The symmetric pairs are : \" + str(return_res))\n\nprint(\"The column number to be found is : \" + str(column_number))\n\nprint(\"The symmetric pairs\n\n<jupyter_output>\n\nThe original list is : [(10, 20), (30, 40), (50, 60), (20, 10), (40, 30), (60, 50)]\n\nThe symmetric pairs are : [((10, 20), (20, 10)), ((30, 40), (40, 30)), ((50, 60), (60, 50))]\n\n<jupyter_text>\n\nFinish writing the python function\n\n"}
{"prompt": "Write a function to find the sum of geometric progression series.", "test": ["assert sum_gp(1,5,2)==31", "assert sum_gp(1,5,4)==341", "assert sum_gp(2,6,3)==728"], "code": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total", "task_id": 491, "generation": "import math\ndef sum_gp(a,n,r):\n    # formula: sum = a * (1-r^n) / (1-r)\n\n    sum = a * (1-math.pow(r,n)) / (1-r)\n\n    return sum\n\n# finish Writing the python function. You will only write code blocks for the problem.\n\n"}
{"prompt": "Write a function to search an element in the given array by using binary search.", "test": ["assert binary_search([1,2,3,5,8], 6) == False", "assert binary_search([7, 8, 9, 10, 13], 10) == True", "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"], "code": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found", "task_id": 492, "generation": "def binary_search(item_list,item):\n    first = 0\n\n    last = len(item_list) - 1\n\n    found = False\n\n    while(first <= last and not found):\n\n        mid = (first + last)//2\n\n        if item_list[mid] == item:\n\n            found = True\n\n        else:\n\n                first = mid + 1\t\n\n    return found\n\n# finish\n\n"}
{"prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "test": ["assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]", "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]", "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"], "code": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons", "task_id": 493, "generation": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n\n    for x in range(startx, endx):\n\n        for y in range(starty, endy):\n\n            grid_point = (x*radius*3/2, y*radius*math.sqrt(3))\n\n            hex_points = [grid_point, (grid_point[0]+radius, grid_point[1]), (grid_point[0]+radius/2, grid_point[1]+radius*math.sqrt(3)/2), (grid_point[0]-radius/2, grid_point[1]+radius*math.sqrt(3)/2), (grid_point[0]-radius, grid_point[1]), (grid_point[0]-radius/2, grid_point[1]-radius*math.sqrt(3)/2)]\n\n            polygons.append(hex_points)\n\n    return polygons\n\n# test function with 5x5 grid, starting at (0, 0) ending at (5, 5) and a radius of 1\n\npolygons = calculate_polygons(0, 0, 5, 5, 1)\n\nfor polygon in polygons:\n\n    print(polygon)\n\nfinish\n\n"}
{"prompt": "Write a function to convert the given binary tuple to integer.", "test": ["assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'", "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'", "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"], "code": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ", "task_id": 494, "generation": "def binary_to_integer(test_tup):\n    return list(map(lambda x: int(str(x), 2), test_tup)) \n\n# Testing \n\nprint(binary_to_integer(('101', '0111', '1101')))  # Output: (5, 7, 13)\n\nprint(single_digit(9876))\n\n# Output: 3\n\nbinary_tup = ('101', '0111', '1101')\n\nprint(flatten_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ndef flatten_list(test_list):\n\n    return [element for sublist in test_list for element in sublist]\n\nlist_of_num = [1, 2, 3, [4, 5, 6], [7, 8, 9]]\n\nprint(flatten_list(list_of_num))  # Output: [1, 2\n\n    return [item for sublist1 in test_list for sublist2 in sublist1 for item in sublist2]\n\nnum_list = [[[1, 2, [1, 2, [1, 2, [1, 2]]]]]\n\nprint(binary_to_integer(binary_tup))  # Output: (5, 7, 13)\n\n    return [item for sublist1 in test_list for sublist2 in sublist1 if isinstance(sublist2, list) for item in flatten_list(sublist2)] + [item for item in test_list if not isinstance(item, list)]\n\nprint(flatten_list(num_list))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n  return [element for sublist in test_list for element in sublist]\n\ndef concatenation(list1, list2):\n\n  return list1 + list2\n\ndef multiply_by_two(test_tup):\n\n  return list(map(lambda x: x*2, test_list))\n\n  return list(itertools.chain.from_iterable(test_list))\n\nlist1 = [2, 4, 5, 6]\n\nlist2 = [4, 5, 6]\n\nprint(concatenation(list1, list2))  # Output: [2, 4, 5, 6, 4, 5, 6]\n\nprint(multiply_by_two([2, 3, 4, 5, 6]))  # Output: [4, 6, 8, 10, 12]\n\n  return list(itertools.chain.from_iterable(test_tuple))\n\nprint(flatten_list(list_of_num))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n  return [item for sublist1 in test_list for sublist2 in sublist1 for item in sub\n\n  return [item for sublist in test_list for item in flatten_list(sublist)] if isinstance(test_list, list) else [test_list]\n\n"}
{"prompt": "Write a function to remove lowercase substrings from a given string by using regex.", "test": ["assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'", "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'", "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"], "code": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)", "task_id": 495, "generation": "import re\ndef remove_lowercase(str1):\n    return ''.join(re.sub(r'[a-z]+', '', str1))\n\n    return ''.join(re.findall(r'[A-Z]+|[a-z]+', str1))\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "test": ["assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ", "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]", "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"], "code": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums", "task_id": 496, "generation": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n    lst = hq.nsmallest(n,nums)\n\n    return lst\n\nprint(heap_queue_smallest([12, 34, 11, 99, 76, 89, 5], 3))  # [5, 11, 12]\n\nprint(heap_queue_smallest([2, 45, 33, 65, 46, 37, 88], 5))  # [2, 33, 37, 45, 46]\n\n#finish writing the python function.\n\n"}
{"prompt": "Write a function to find the surface area of a cone.", "test": ["assert surfacearea_cone(5,12)==282.7433388230814", "assert surfacearea_cone(10,15)==880.5179353159282", "assert surfacearea_cone(19,17)==2655.923961165254"], "code": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA", "task_id": 497, "generation": "import math\ndef surfacearea_cone(r,h):\n    \"\"\"\n\n    area_cone = math.pi*r*(r+math.sqrt(h**2+r**2))\n\n    volume = length * width * height\n\n    ### EDIT THE CODE ABOVE \n\n    return area_cone\n\nWrite a function to calculate the factorial of a number. ### Response: \n\ndef factorial(n):\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to find gcd of two positive integers.", "test": ["assert gcd(12, 17) == 1", "assert gcd(4,6) == 2", "assert gcd(2,9) == 1"], "code": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd", "task_id": 498, "generation": "def gcd(x, y):\n    if x > y:\n\n        smaller = y\n\n    else:\n\n    while(y):\n\n        greater = y\n\n        y = x % y\n\n        palindrome_\n\n        x, y = y, x % y\n\n    while\n\n       swap the numbers\n\n    return smaller\n\n# Get the inputs from the user\n\nnum1 = int(input(\"Enter first number: \"))\n\nnum2 = int(input(\"Enter second number: \"))\n\nprint('The gcd of {} and {} is: {}'.format(num1, num2, gcd(num1, num2)))\n\n        smaller -= 1\n\n# Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to find the diameter of a circle.", "test": ["assert diameter_circle(10)==20", "assert diameter_circle(40)==80", "assert diameter_circle(15)==30"], "code": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter", "task_id": 499, "generation": "def diameter_circle(r):\n    \"\"\"\n\n    This function takes the radius of a circle as input and returns its diameter.\n\n    diameter = 2 * r \n\n    return 2 * r\n\n    return 2 * r \n\n# Test cases:\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function. # \n\n"}
{"prompt": "Write a function to concatenate all elements of the given list into a string.", "test": ["assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'", "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'", "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"], "code": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ", "task_id": 500, "generation": "def concatenate_elements(list):\n    return ''.join(list)\n\n### Finish\n\n"}
{"prompt": "Write a python function to find common divisor between two numbers in a given pair.", "test": ["assert num_comm_div(2,4) == 2", "assert num_comm_div(2,8) == 2", "assert num_comm_div(12,24) == 6"], "code": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result", "task_id": 501, "generation": "def ngcd(x,y):\n    while(y):\n\n        x, y = y, x % y\n\n    return x\n\nprint(ngcd(60,48))\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to find remainder of two numbers.", "test": ["assert find(3,3) == 0", "assert find(10,3) == 1", "assert find(16,5) == 1"], "code": "def find(n,m):\r\n  r = n%m\r\n  return (r)", "task_id": 502, "generation": "def find(n,m):\n    try:\n\n        remainder = n % m\n\n        return remainder\n\n        quotient = n // m\n\n        div = n // m\n\n    except\n\n        return quotient, remainder\n\n    except ZeroDivisionError:\n\n        return \"undefined\"\n\n    except:\n\n        return \"Invalid input\"\n\n```\n\ndef main():\n\nIn the above code, the function find takes two parameters n and m. The function calculates the remainder of n when divided by m and returns the remainder value. The code also calculates the quotient and value of the division. If m is zero, it will raise a ZeroDivisionError and returns an error message \"undefined\". In case of any other type of error, it returns an error message \"Invalid input\". The code is tested with n=15 and m=4, the function calls the find function and print out the result. Here, the remainder is 3 and quotient is 3.\n\nCalling the main function runs the predefined test cases:\n\nThis Python script defines different math operations: add, subtract, multiply, and divide. Then in the main function it performs these operations with inputs a and b. It calls these functions with these values and prints out their results.\n\n        a = 10\n\n        b = 3\n\n        add_result = add(a, b)\n\n        print(f\"Addition of two numbers: {a} and {b} is {add_result}\")  # Should print: \"Addition of two numbers: 10 and 3 is 13\"\n\n        sub_result = subtract(a, b)\n\n        print(f\"Subtraction of two numbers: {a} and {b} is {sub_result}\")  # Should print: \"Subtraction of two numbers: 10 and 3 is 7\"\n\n        return \"Error: Invalid input\"\n\n    test_input = 3\n\n    print(f\"Absolute value of {test_input}: {absolute(test_input)}\")\n\n    a = 10\n\n    b = 3\n\n    mul_result = multiply(a, b)\n\nProgram that generates a bar chart:\n\n    a = [1, 2, 3]\n\n"}
{"prompt": "Write a function to add consecutive numbers of a given list.", "test": ["assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]", "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]", "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"], "code": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "task_id": 503, "generation": "def add_consecutive_nums(nums):\n    sum_nums = [sum(nums[i:i+2]) for i in range(0, len(nums), 2)]\n\n    if len(nums) % 2 != 0:\n\n        sum_nums.append(nums[-1])\n\n        sum_nums.append(nums[-\n\n    return sum_nums\n\nprint(add_consecutive_nums([10, 20, 15, 14, 85, 78, 110, 120])) # Returns [30, 39, 95, 92, 203]\n\n# Finish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a python function to find the cube sum of first n natural numbers.", "test": ["assert sum_Of_Series(5) == 225", "assert sum_Of_Series(2) == 9", "assert sum_Of_Series(3) == 36"], "code": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum", "task_id": 504, "generation": "def sum_Of_Series(n):\n    sum = 0\n\n    for i in range(1, n+1):\n\n        sum +=i**3\n\n    return sum\n\n### Finish\n\n"}
{"prompt": "Write a function to move all zeroes to the end of the given array.", "test": ["assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]", "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]", "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"], "code": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A", "task_id": 505, "generation": "def re_order(A):\n    res = [i for i in A if i != 0]\n\n    for i in range(A.count(0)): \n\n        res.append(0)\n\n    return res\n\nA = [0,1,0,3,12]\n\nprint(re_order(A)) #[1,3,12,0,0]\n\n### End Solution\n\nFinish writing the python function. You will only write code blocks. Write # finish after the last line of the function.\n\n"}
{"prompt": "Write a function to calculate the permutation coefficient of given p(n, k).", "test": ["assert permutation_coefficient(10, 2) == 90", "assert permutation_coefficient(10, 3) == 720", "assert permutation_coefficient(10, 1) == 10"], "code": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ", "task_id": 506, "generation": "def permutation_coefficient(n, k):\n    # Define the factorial function\n\n    def factorial(n):\n\n        if n==0 or n==1:\n\n            return 1\n\n        else:\n\n            return n*factorial(n-1)\n\n    # Calculate and return the coefficient\n\n    return int(factorial(n) / factorial(n - k))\n\n# Test the function\n\nprint(fibonacci(1)) # Expect: 1\n\nprint(fibonacci_series(1)) # Expect: [0]\n\nprint(fibonacci_series(5)) # Expect: [0, 1, 1, 2, 3, 5]\n\n            B[last] = C[len_C - 1]\n\n            C[last] += '0'\n\nprint(permutation_coefficient(5, 2)) # Expect: 20\n\nprint(permutation_coefficient(3, 2)) # Expect: 3\n\n# Finish\n\n"}
{"prompt": "Write a function to remove specific words from a given list.", "test": ["assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']", "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']", "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"], "code": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  ", "task_id": 507, "generation": "def remove_words(list1, removewords):\n    result = [word for word in list1 if word not in removewords]\n\n    return result\n\n# Sample usage\n\nlist1 = [\"a\", \"b\", \"c\", \"b\", \"d\"]\n\nremovewords = [\"b\", \"d\"]\n\nanswer = remove_words(list1, removewords)\n\nstring = \"abcde\"\n\nstring = \"a b a b a\"\n\nsentence = \"Hello World, Hello Universe!\"\n\nlist1 = [\"abc\", \"def\", \"ghi\"]\n\nremovewords = [\"a\",\"b\"]\n\nlist1 = [\"a\", \"bb\", \"ccc\"]\n\nstring = \"Hello World\"\n\nlist1 = [[1, 2, 3], [4, 5, 6]]\n\nremovewords = [[1, 2, 3]]\n\nanswer = [4, 5, 6]\n\ndef max_min_elements_enhanced(sequences):\n\n    lists = []\n\n    for sequence in sequences:\n\n        if isinstance(sequence, list):\n\n# Test the function\n\nlst = [\n\nlist1 = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7]\n\nprint(remove_duplicates(list1))  # Output: [1, 2, 3, 4, 5, 6, 7]\n\nlist1 = [\"Hello\", \"\", \"World, Hello\", \"Universe!\"]\n\nprint(remove_items(list1, items_to_remove))  # Output: ['', 'World, Hello', 'Universe']\n\nlist1 = [[1, 2, 3], [4, 5, 6], [1, 2, 3]]\n\n#print(remove_inner_lists(list1, inner_lists_to_remove))  # Output: [[4, 5, 6]]\n\nsequences = [\n\n[1, 2, 3, 3, 2],\n\n"}
{"prompt": "Write a function to check if the common elements between two given lists are in the same order or not.", "test": ["assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True", "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False", "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"], "code": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2", "task_id": 508, "generation": "def same_order(l1, l2):\n    '''\n\n    common = [value for value in l1 if value in l2]\n\n    return common == l1\n\nTest:\n\nprint(same_order([1, 2, 3, 4], [2, 1, 4, 3])) # False\n\n<jupyter_code>\n\nl1=[2, 1, 4, 3]\n\n#finish\n\n"}
{"prompt": "Write a python function to find the average of odd numbers till a given odd number.", "test": ["assert average_Odd(9) == 5", "assert average_Odd(5) == 3", "assert average_Odd(11) == 6"], "code": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ", "task_id": 509, "generation": "def average_Odd(n) :\n    sum_of_Odds = 0\n\n    count_of_Odds = 0\n\n    for i in range(n + 1) :\n\n        if i % 2 != 0 :\n\n            sum_of_Odds += i\n\n            count_of_Odds += 1\n\n    return sum_of_Odds / count_of_Odds\n\n# finish\n\n"}
{"prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "test": ["assert no_of_subsequences([1,2,3,4], 10) == 11", "assert no_of_subsequences([4,8,7,2], 50) == 9", "assert no_of_subsequences([5,6,7,8], 15) == 4"], "code": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]", "task_id": 510, "generation": "def no_of_subsequences(arr, k):\n    n = len(arr)\n\n    dp = [[0]*n for _ in range(n)]\n\n    for i in range(n):\n\n        dp[i][i] = 1 if arr[i] < k else 0\n\n    subsequences = []\n\n    for l in range(2, n+1):\n\n        for i in range(n-l+1):\n\n            j = i+l-1\n\n            if arr[i]*arr[j] < k:\n\n                dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1]\n\n            else:\n\n                dp[i][j] = 2 * dp[i][j-1]\n\n                if arr[j] < k:\n\n                    dp[i][j] -= dp[i+1][j]\n\n            subsequences.extend([arr[i:j+1] for _ in range(dp[i][j])])\n\n    return dp[0][n-1], subsequences\n\n# Test the function\n\narr = [1, 2, 3, 4]\n\nk = 10\n\nprint(no_of_subsequences(arr, k))\n\n                # If the current characters don't match, the length of the\n\n                # longest common substring ending at the current position in s1\n\n                dp[i][j] = 0\n\n                        dp[i][j] = max(dp[i][j], max(dp[i-1][j], dp[i][j-1]))\n\n                                dp[i][j] = max(dp[k-1][i-1]+1, dp[i][j], dp[i-1][j], dp[k-1][j])\n\nin the line 1: the maximum length of the common substring\n\n<jupyter_output>\n\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\ns1 = \"abcde\"\n\nLength of the longest common substring = 3\n\n"}
