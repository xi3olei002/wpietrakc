[EXP] 0: [success_rate]: True, [output]: def solution():
    eggs_per_day = 16

    eggs_eaten = 3

    eggs_baked = 4

    eggs_sold = eggs_per_day - eggs_eaten - eggs_baked

    money_per_egg = 2

    money_made = eggs_sold * money_per_egg

    result = money_made

    return result


 Executed result: 18
[EXP] 1: [success_rate]: True, [output]: def solution():
    blue_fiber = 2

    white_fiber = blue_fiber / 2

    total_fiber = blue_fiber + white_fiber

    result = total_fiber

    return result


 Executed result: 3.0
[EXP] 2: [success_rate]: False, [output]: def solution():
    house_cost = 80000

    repairs_cost = 50000

    total_cost = house_cost + repairs_cost

    new_house_value = total_cost * 2.5  # 150% increase

    profit = new_house_value - total_cost

    result = profit

    return result


 Executed result: 195000.0
[EXP] 3: [success_rate]: True, [output]: def solution():
    sprints_per_week = 3

    sprints_per_day = 3

    sprints_in_a_week = sprints_per_week * sprints_per_day

    meters_per_sprint = 60

    meters_run_in_a_week = sprints_in_a_week * meters_per_sprint

    result = meters_run_in_a_week

    return result


 Executed result: 540
[EXP] 4: [success_rate]: True, [output]: def solution():
    total_cups_already_given = 15 + 25

    total_cups_needed = 3 * 20

    cups_needed_for_final_meal = total_cups_needed - total_cups_already_given

    result = cups_needed_for_final_meal

    return result


 Executed result: 20
[EXP] 5: [success_rate]: True, [output]: def solution():
    price_per_normal_glass = 5

    price_per_discount_glass = price_per_normal_glass * 0.6

    total_glasses = 16

    normal_glasses = total_glasses // 2

    discount_glasses = total_glasses - normal_glasses

    total_cost = (normal_glasses * price_per_normal_glass) + (discount_glasses * price_per_discount_glass)

    result = total_cost

    return result


 Executed result: 64.0
[EXP] 6: [success_rate]: True, [output]: def solution():
    seattle_sheep = 20

    charleston_sheep = seattle_sheep * 4

    toulouse_sheep = charleston_sheep * 2

    total_sheep = seattle_sheep + charleston_sheep + toulouse_sheep

    result = total_sheep

    return result


 Executed result: 260
[EXP] 7: [success_rate]: False, [output]: def solution():
    file_size = 200

    download_speed = 2

    minutes_before_reboot = (file_size / download_speed) * 0.4

    minutes_after_reboot = 20

    minutes_total = minutes_before_reboot + minutes_after_reboot + (file_size / download_speed)

    hours_total = minutes_total / 60

    result = hours_total

    return result


 Executed result: 2.6666666666666665
[EXP] 8: [success_rate]: False, [output]: def solution():
    distance_driven_to_turn_back = 3 * 60

    distance_in_standstill_traffic = 2 * 60

    distance_driven_at_slow_speed = 30 * 0.5

    distance_driven_at_fast_speed = 2 * 4 * 80

    total_distance = distance_driven_to_turn_back + distance_in_standstill_traffic + distance_driven_at_slow_speed + distance_driven_at_fast_speed

    result = total_distance

    return result


 Executed result: 955.0
[EXP] 9: [success_rate]: True, [output]: def solution():
    hours_regular = 40

    hours_overtime = 45 - hours_regular

    rate_regular = 10

    rate_overtime = rate_regular * 1.2

    earnings_regular = hours_regular * rate_regular

    earnings_overtime = hours_overtime * rate_overtime

    total_earnings = earnings_regular + earnings_overtime

    result = total_earnings

    return result


 Executed result: 460.0
[EXP] 10: [success_rate]: True, [output]: def solution():
    downloads_first_month = 60

    downloads_second_month = downloads_first_month * 3

    downloads_third_month = downloads_second_month * 0.7

    total_downloads = downloads_first_month + downloads_second_month + downloads_third_month

    result = total_downloads

    return result


 Executed result: 366.0
[EXP] 11: [success_rate]: True, [output]: def solution():
    donuts_cost = 3 * 68

    cupcakes_cost = 2 * 80

    cheesecakes_cost = 6 * 55

    total_cost = donuts_cost + cupcakes_cost + cheesecakes_cost

    result = total_cost

    return result


 Executed result: 694
[EXP] 12: [success_rate]: False, [output]: def solution():
    cost_to_plant = 90

    lemons_per_year = 7

    price_per_lemon = 1.5

    cost_per_year = 3

    total_cost = cost_to_plant - (lemons_per_year * price_per_lemon)

    years = 0

    while total_cost > 0:

        total_cost += cost_per_year

        years += 1

    result = years

    return result


 Executed result: 1
[EXP] 13: [success_rate]: False, [output]: def solution():
    vacuum_clearners_left = 5

    vacuum_clearners_sold_green_house = 1/3 * vacuum_clearners_left

    vacuum_clearners_sold_red_house = 2

    vacuum_clearners_sold_orange_house = (vacuum_clearners_left - (vacuum_clearners_sold_green_house + vacuum_clearners_sold_red_house))/2

    vacuum_clearners_total_sold = vacuum_clearners_sold_green_house + vacuum_clearners_sold_red_house + vacuum_clearners_sold_orange_house

    vacuum_clearners_initial = vacuum_clearners_total_sold + vacuum_clearners_left

    result = vacuum_clearners_initial

    return result


 Executed result: 9.333333333333332
[EXP] 14: [success_rate]: True, [output]: def solution():
    students = 20

    students_enrolled_contemporary = (20/100) * students

    students_left = students - students_enrolled_contemporary

    students_enrolled_jazz = (25/100) * students_left

    students_left = students_left - students_enrolled_jazz

    students_enrolled_hiphop = students_left

    percentage_hiphop = ((students_enrolled_hiphop / students) * 100)

    result = percentage_hiphop

    return result


 Executed result: 60.0
[EXP] 15: [success_rate]: True, [output]: def solution():
    plan_a_price = 5000

    plan_b_price = 8000

    plan_a_percentage_increase = 2.5 / 100

    plan_b_percentage_increase = 1.2 / 100

    plan_a_price_after_increase = plan_a_price * (1 + plan_a_percentage_increase)

    plan_b_price_after_increase = plan_b_price * (1 + plan_b_percentage_increase)

    plan_a_profit = plan_a_price_after_increase - plan_a_price

    plan_b_profit = plan_b_price_after_increase - plan_b_price

    if plan_a_profit > plan_b_profit:

        result = plan_a_profit

    elif plan_b_profit > plan_a_profit:

    return result


 Executed result: 125.0
[EXP] 16: [success_rate]: False, [output]: def solution():
    miles_west = 80

    miles_north = 150

    distance_east = 2 * miles_west

    distance_north = 2 * miles_north

    result = (distance_east, distance_north)

    return result


 Executed result: (160, 300)
[EXP] 17: [success_rate]: True, [output]: def solution():
    hourly_pay_teacher = 20

    hourly_pay_coach = 30

    hours_per_week_teacher = 35

    hours_per_week_coach = 15

    weeks_per_year = 50

    total_hours_per_year_teacher = hours_per_week_teacher * weeks_per_year

    total_hours_per_year_coach = hours_per_week_coach * weeks_per_year

    total_salary_per_year = (total_hours_per_year_teacher * hourly_pay_teacher) + (total_hours_per_year_coach * hourly_pay_coach)

    result = total_salary_per_year

    return result


 Executed result: 57500
[EXP] 18: [success_rate]: True, [output]: def solution():
    eggs_per_omelette = 3

    omelettes_per_day = 1

    days_in_a_week = 7

    weeks = 4

    total_eggs_per_week = eggs_per_omelette * omelettes_per_day

    total_eggs_per_four_weeks = total_eggs_per_week * weeks * days_in_a_week

    dozens_eggs_per_four_weeks = total_eggs_per_four_weeks // 12

    result = dozens_eggs_per_four_weeks

    return result


 Executed result: 7
[EXP] 19: [success_rate]: False, [output]: def solution():
    total_distance = 12

    distance_walked = 4 + 2

    distance_left = total_distance - distance_walked

    time_taken = 1 + 1

    average_speed_wanted = 4

    time_left = distance_left / average_speed_wanted

    speed_needed = distance_left / time_left

    result = speed_needed

    return result


 Executed result: 4.0
[EXP] 20: [success_rate]: True, [output]: def solution():
    orange_drink_initial = 10

    orange_drink_water = orange_drink_initial * 2 / 3

    orange_drink_remaining = orange_drink_initial - 1

    orange_drink_water_remaining = orange_drink_remaining * 2 / 3

    pineapple_drink_water = 15 * 3 / 5

    total_water = orange_drink_water_remaining + pineapple_drink_water

    result = total_water

    return result


 Executed result: 15.0
[EXP] 21: [success_rate]: False, [output]: def solution():
    samantha_age = 31

    raymond_age = samantha_age - 6

    raymond_son_age = 23

    raymond_son_birth_year = raymond_age - raymond_son_age

    result = raymond_son_birth_year

    return result


 Executed result: 2
[EXP] 22: [success_rate]: True, [output]: def solution():
    customers = 8

    customer1_dvds = 3

    customer2_dvds = 2

    customer3_no_dvds = 3

    customer1_dvds_sold = customer1_dvds

    customer2_dvds_sold = customer2_dvds * 2

    customer3_dvds_sold = 0

    total_dvds_sold = customer1_dvds_sold + customer2_dvds_sold + customer3_dvds_sold

    result = total_dvds_sold

    return result


 Executed result: 7
[EXP] 23: [success_rate]: True, [output]: def solution():
    hours_burned = 4  # 5:00 PM - 1:00 PM = 4 hours

    centimeters_melted_per_hour = 2

    total_centimeters_melted = hours_burned * centimeters_melted_per_hour

    result = total_centimeters_melted

    return result


 Executed result: 8
[EXP] 24: [success_rate]: True, [output]: def solution():
    discount_price = 19.50

    discount_percentage = 25 / 100

    original_price = discount_price / (1 - discount_percentage)

    result = original_price

    return result


 Executed result: 26.0
[EXP] 25: [success_rate]: True, [output]: def solution():
    total_cost = 50

    chicken_cost = 12

    milk_cost = 5 * 3

    apple_cost = 4 * 1.5

    total_cost_without_pizza = chicken_cost + milk_cost + apple_cost

    cost_of_pizza = total_cost - total_cost_without_pizza

    cost_of_pizza_per_box = 8.5

    num_pizza_boxes = cost_of_pizza / cost_of_pizza_per_box

    result = num_pizza_boxes

    return result


 Executed result: 2.0
[EXP] 26: [success_rate]: True, [output]: def solution():
    shorts_cost = 3 * 16.50

    pants_cost = 3 * 22.50

    shoes_cost = 3 * 42

    total_cost = shorts_cost + pants_cost + shoes_cost

    result = total_cost

    return result


 Executed result: 243.0
[EXP] 27: [success_rate]: True, [output]: def solution():
    servings_per_carton = 15

    servings_per_day = 1

    days = 60

    total_servings = servings_per_day * days

    total_carts = total_servings / servings_per_carton

    total_cost = total_carts * 4

    result = total_cost

    return result


 Executed result: 16.0
[EXP] 28: [success_rate]: True, [output]: def solution():
    total_distance = 60

    first_stop = 20

    second_stop = total_distance - 15

    distance_between_stops = second_stop - first_stop

    result = distance_between_stops

    return result


 Executed result: 25
[EXP] 29: [success_rate]: True, [output]: def solution():
    price_of_one_pair_of_heels = 33

    price_of_expensive_pair_of_heels = price_of_one_pair_of_heels * 2

    total_price_of_heels = price_of_one_pair_of_heels + price_of_expensive_pair_of_heels

    price_of_boots = total_price_of_heels + 5

    result = price_of_boots

    return result


 Executed result: 104
[EXP] 30: [success_rate]: True, [output]: def solution():
    ratio = 11 / 7

    sum_of_ages = 162

    allen_age_now = sum_of_ages * ratio / (ratio + 1)

    allen_age_ten_years_later = allen_age_now + 10

    result = allen_age_ten_years_later

    return result


 Executed result: 109.0
[EXP] 31: [success_rate]: False, [output]: def solution():
    friend_one_guess = 80

    friend_two_guess = (friend_one_guess + 20) / 2

    friend_three_guess = friend_one_guess * 1.25

    total_guesses = friend_one_guess + friend_two_guess + friend_three_guess

    average_guess = total_guesses / 3

    result = average_guess

    return result


 Executed result: 76.66666666666667
[EXP] 32: [success_rate]: True, [output]: def solution():
    dogs = 10

    hours_per_day = 0.5

    hours_per_week = dogs * hours_per_day * 7

    result = hours_per_week

    return result


 Executed result: 35.0
[EXP] 33: [success_rate]: True, [output]: def solution():
    coins_total = 110

    gold_coins_than_silver = 30

    silver_coins = (coins_total - gold_coins_than_silver) // 2

    gold_coins = coins_total - silver_coins

    result = gold_coins

    return result


 Executed result: 70
[EXP] 34: [success_rate]: True, [output]: def solution():
    raymond_jewels = 40

    aaron_jewels = (raymond_jewels / 2) + 5

    siobhan_jewels = aaron_jewels - 2

    result = siobhan_jewels

    return result


 Executed result: 23.0
[EXP] 35: [success_rate]: True, [output]: def solution():
    minutes_played = 40

    points_scored_in_first_20_minutes = 4

    points_scored_in_second_20_minutes = points_scored_in_first_20_minutes * 1.25  # 25% more

    total_points_scored = points_scored_in_first_20_minutes + points_scored_in_second_20_minutes

    result = total_points_scored

    return result


 Executed result: 9.0
[EXP] 36: [success_rate]: True, [output]: def solution():
    yogurts_per_day = 2

    yogurts_per_package = 4

    price_per_package = 5

    yogurts_in_30_days = yogurts_per_day * 30

    packages_needed = (yogurts_in_30_days + yogurts_per_package - 1) // yogurts_per_package

    cost = packages_needed * price_per_package

    result = cost

    return result


 Executed result: 75
[EXP] 37: [success_rate]: False, [output]: def solution():
    lego_sets_initial = 13

    lego_sets_price = 15

    lego_sets_sold = lego_sets_initial

    money_received = lego_sets_sold * lego_sets_price

    video_games = 8

    video_games_price = 20

    video_games_cost = video_games * video_games_price

    money_spent = video_games_cost

    money_left = money_received - money_spent

    result = lego_sets_initial - lego_sets_sold

    return result


 Executed result: 0
[EXP] 38: [success_rate]: True, [output]: def solution():
    miles_per_week = 60

    days_per_week = 3

    hours_per_day = 3

    hours_other_days = hours_per_day / 2

    total_hours_per_week = hours_per_day + hours_other_days * 2

    miles_per_hour = miles_per_week / total_hours_per_week

    result = miles_per_hour

    return result


 Executed result: 10.0
[EXP] 39: [success_rate]: False, [output]: def solution():
    run_rate = skip_rate * 4

    walk_rate = run_rate / 4

    run_time = 6 * 1/3

    walk_time = 6 * 2/3

    run_distance = run_rate * run_time

    walk_distance = walk_rate * walk_time

    total_distance = run_distance + walk_distance

    result = total_distance

    return result


 Executed result: Error: return error, fail to execute
[EXP] 40: [success_rate]: True, [output]: def solution():
    suzy_phone_age = 1

    ben_phone_age = suzy_phone_age * 2

    brandon_phone_age = ben_phone_age * 4

    result = brandon_phone_age

    return result


 Executed result: 8
[EXP] 41: [success_rate]: False, [output]: def solution():
    distance_with_gemstone = 400 * 3

    dragon_distance = 1000

    distance_outside_flames = distance_with_gemstone + dragon_distance

    result = distance_outside_flames

    return result


 Executed result: 2200
[EXP] 42: [success_rate]: True, [output]: def solution():
    pies_initial = 5

    slices_per_pie = 8

    total_slices = pies_initial * slices_per_pie

    slices_taken = total_slices - 14

    result = slices_taken

    return result


 Executed result: 26
[EXP] 43: [success_rate]: True, [output]: def solution():
    serving_calories = 250

    servings_per_bag = 5

    bag_weight = 300

    daily_calorie_target = 2000

    daily_calories_consumed = 1800

    daily_calories_left = daily_calorie_target - daily_calories_consumed

    total_calories_in_bag = serving_calories * servings_per_bag

    calories_per_gram = total_calories_in_bag / bag_weight

    grams_left = daily_calories_left / calories_per_gram

    result = grams_left

    return result


 Executed result: 48.0
[EXP] 44: [success_rate]: True, [output]: def solution():
    price_per_pound = 10

    candles_per_pound = 10

    weight_of_beewax_for_20_candles = 20 / candles_per_pound

    cost_of_supplies = weight_of_beewax_for_20_candles * price_per_pound

    revenue = 20 * 2

    profit = revenue - cost_of_supplies

    result = profit

    return result


 Executed result: 20.0
[EXP] 45: [success_rate]: False, [output]: def solution():
    articles_monday = 5

    articles_tuesday = 2/5 * articles_monday

    articles_wednesday = 2 * articles_tuesday

    total_articles = articles_monday + articles_tuesday + articles_wednesday

    total_hours = total_articles * 4

    result = total_hours

    return result


 Executed result: 44.0
[EXP] 46: [success_rate]: False, [output]: def solution():
    post_it_notes_initial = 80

    post_it_notes_used = 220

    post_it_notes_remaining = 23

    total_post_it_notes = post_it_notes_initial - post_it_notes_used - post_it_notes_remaining

    package_post_it_notes = total_post_it_notes

    result = package_post_it_notes

    return result


 Executed result: -163
[EXP] 47: [success_rate]: False, [output]: def solution():
    blue_ties = 200 / 40

    red_ties = blue_ties * 2

    blue_ties_cost = blue_ties * 40

    red_ties_cost = blue_ties_cost * 1.5

    total_cost = blue_ties_cost + red_ties_cost

    result = total_cost

    return result


 Executed result: 500.0
[EXP] 48: [success_rate]: True, [output]: def solution():
    wire_length = 4  # in feet

    wire_length_in_inches = wire_length * 12  # convert to inches

    piece_length = 6  # in inches

    num_pieces = wire_length_in_inches // piece_length

    result = num_pieces

    return result


 Executed result: 8
[EXP] 49: [success_rate]: True, [output]: def solution():
    floors = 15

    units_per_floor = 8

    total_units = floors * units_per_floor

    total_occupied = (3/4) * total_units

    total_unoccupied = total_units - total_occupied

    result = total_unoccupied

    return result


 Executed result: 30.0
[EXP] 50: [success_rate]: True, [output]: def solution():
    eggs_per_day = 252

    eggs_per_week = eggs_per_day * 7

    eggs_per_dozen = eggs_per_week // 12

    price_per_dozen = 2

    earnings_per_week = eggs_per_dozen * price_per_dozen

    result = earnings_per_week

    return result


 Executed result: 294
[EXP] 51: [success_rate]: False, [output]: def solution():
    time_outwards = 3  # 3 hours from 1 to 4 PM

    distance_outwards = time_outwards * 10

    time_back = distance_outwards / 6

    total_time = time_outwards + time_back

    result = total_time

    return result


 Executed result: 8.0
[EXP] 52: [success_rate]: True, [output]: def solution():
    pounds_to_remove = 15

    pound_per_comic_book = 1 / 4

    comic_books_removed = 30

    pounds_removed_by_comic_books = comic_books_removed * pound_per_comic_book

    pounds_left_to_remove = pounds_to_remove - pounds_removed_by_comic_books

    pound_per_toy = 1 / 2

    toys_to_remove = pounds_left_to_remove / pound_per_toy

    result = int(toys_to_remove)

    return result


 Executed result: 15
[EXP] 53: [success_rate]: False, [output]: def solution():
    truck_rate = 60

    car_rate = 40

    truck_tires_repaired_thursday = 6

    car_tires_repaired_thursday = 4

    revenue_thursday = (truck_rate * truck_tires_repaired_thursday) + (car_rate * car_tires_repaired_thursday)

    car_tires_repaired_friday = 12

    revenue_friday = (car_rate * car_tires_repaired_friday)

    revenue_difference = revenue_friday - revenue_thursday

    result = revenue_difference

    return result


 Executed result: -40
[EXP] 54: [success_rate]: True, [output]: def solution():
    kittens_initial = 7

    kittens_patchy = 3 * 7

    kittens_trixie = 12

    kittens_total = kittens_initial + kittens_patchy + kittens_trixie

    result = kittens_total

    return result


 Executed result: 40
[EXP] 55: [success_rate]: True, [output]: def solution():
    lollipops_initial = 30

    lollipops_eaten = 2

    lollipops_left = lollipops_initial - lollipops_eaten

    lollipops_per_bag = 2

    bags_filled = lollipops_left // lollipops_per_bag

    result = bags_filled

    return result


 Executed result: 14
[EXP] 56: [success_rate]: True, [output]: def solution():
    budget = 42

    ticket_cost = 7

    popcorn_cost = 7

    total_cost_per_visit = ticket_cost + popcorn_cost

    num_visits = budget // total_cost_per_visit

    result = num_visits

    return result


 Executed result: 3
[EXP] 57: [success_rate]: True, [output]: def solution():
    bridge_limit = 5000

    truck_weight = 3755

    box_weight = 15

    max_boxes = (bridge_limit - truck_weight) // box_weight

    result = max_boxes

    return result


 Executed result: 83
[EXP] 58: [success_rate]: True, [output]: def solution():
    total_price = 40

    fee = total_price * 0.25

    delivery_fee = 3

    tip = 4

    final_price = total_price + fee + delivery_fee + tip

    result = final_price

    return result


 Executed result: 57.0
[EXP] 59: [success_rate]: True, [output]: def solution():
    clusters = 6

    cluster_fruit = 20

    individual_fruit = 67

    total_fruit_clusters = clusters * cluster_fruit

    total_fruit = total_fruit_clusters + individual_fruit

    result = total_fruit

    return result


 Executed result: 187
[EXP] 60: [success_rate]: True, [output]: def solution():
    oranges_total = 25

    oranges_bad = 1

    oranges_unripe = int(oranges_total * 0.20)

    oranges_sour = 2

    oranges_good = oranges_total - oranges_bad - oranges_unripe - oranges_sour

    result = oranges_good

    return result


 Executed result: 17
[EXP] 61: [success_rate]: True, [output]: def solution():
    material_cost = 500

    jeweler_cost = 800

    total_cost = material_cost + jeweler_cost

    insurance_cost = total_cost * 0.1

    total_paid = total_cost + insurance_cost

    result = total_paid

    return result


 Executed result: 1430.0
[EXP] 62: [success_rate]: False, [output]: def solution():
    years_of_service = 30

    annual_pension = 50000

    pension_share_after_20_years = 5 / 100

    pension_after_20_years = annual_pension * pension_share_after_20_years

    total_pension = annual_pension * (years_of_service - 20) + pension_after_20_years * 10

    result = total_pension

    return result


 Executed result: 525000.0
[EXP] 63: [success_rate]: True, [output]: def solution():
    monthly_fee = 140

    months_in_a_year = 12

    half_year = months_in_a_year / 2

    half_year_fee = monthly_fee * half_year

    second_half_year_fee = monthly_fee * (1 - 0.1) * (months_in_a_year - half_year)

    total_fee = half_year_fee + second_half_year_fee

    result = total_fee

    return result


 Executed result: 1596.0
[EXP] 64: [success_rate]: False, [output]: def solution():
    miles_driven = 100

    gallons_taken = 4

    gallons_capacity = 12

    total_gallons = gallons_capacity - gallons_taken

    miles_per_gallon = miles_driven / gallons_taken

    total_miles = total_gallons * miles_per_gallon

    result = total_miles

    return result


 Executed result: 200.0
[EXP] 65: [success_rate]: True, [output]: def solution():
    hours_watching_tv_per_day = 2

    hours_reading_per_day = 2 / 2

    total_hours_per_day = hours_watching_tv_per_day + hours_reading_per_day

    hours_per_week = total_hours_per_day * 3

    hours_per_four_weeks = hours_per_week * 4

    result = hours_per_four_weeks

    return result


 Executed result: 36.0
[EXP] 66: [success_rate]: True, [output]: def solution():
    schools = 4

    girls_per_school = 5

    boys_per_school = 5

    coaches_per_school = 2

    girls_team_players = schools * girls_per_school

    boys_team_players = schools * boys_per_school

    total_players = girls_team_players + boys_team_players

    total_coaches = schools * coaches_per_school

    total_people = total_players + total_coaches

    result = total_people

    return result


 Executed result: 48
[EXP] 67: [success_rate]: True, [output]: def solution():
    diamonds = 175

    rubies = diamonds - 35

    emeralds = rubies * 2

    total_gems = diamonds + rubies + emeralds

    result = total_gems

    return result


 Executed result: 595
[EXP] 68: [success_rate]: True, [output]: def solution():
    girls = 60

    boys = girls * 2

    total_students = girls + boys

    students_per_teacher = 5

    teachers = total_students // students_per_teacher

    result = teachers

    return result


 Executed result: 36
[EXP] 69: [success_rate]: True, [output]: def solution():
    total_money = 100

    weekly_allowance = 5

    weeks = 8

    weekly_allowance_total = weekly_allowance * weeks

    initial_money = total_money - weekly_allowance_total

    result = initial_money

    return result


 Executed result: 60
[EXP] 70: [success_rate]: False, [output]: def solution():
    dance_classes_per_day = 5

    days_in_week = 5  # Monday to Friday

    dance_classes_per_weekday = dance_classes_per_day * days_in_week

    dance_classes_on_saturday = 8

    total_dance_classes = dance_classes_per_weekday + dance_classes_on_saturday

    students_per_class = 15

    students_per_class_revenue = students_per_class * 15.00

    total_students_per_week = total_dance_classes * students_per_class

    total_money_made = total_students_per_week * students_per_class_revenue

    result = total_money_made

    return result


 Executed result: 111375.0
[EXP] 71: [success_rate]: True, [output]: def solution():
    recipe1_instructions = 20

    recipe2_instructions = 2 * recipe1_instructions

    total_instructions = recipe1_instructions + recipe2_instructions

    result = total_instructions

    return result


 Executed result: 60
[EXP] 72: [success_rate]: True, [output]: def solution():
    brownie_sales = 43

    brownie_price = 3

    brownie_income = brownie_sales * brownie_price

    cheesecake_sales = 23

    cheesecake_price = 4

    cheesecake_income = cheesecake_sales * cheesecake_price

    total_income = brownie_income + cheesecake_income

    result = total_income

    return result


 Executed result: 221
[EXP] 73: [success_rate]: True, [output]: def solution():
    cell_phones = 5

    cost_per_cell_phone = 150

    total_cost = cell_phones * cost_per_cell_phone

    interest_rate = 0.02

    total_interest = total_cost * interest_rate

    total_amount = total_cost + total_interest

    monthly_installment = total_amount / 3

    result = monthly_installment

    return result


 Executed result: 255.0
[EXP] 74: [success_rate]: True, [output]: def solution():
    marigolds_priced = 12 * round(2.74)

    petunias_priced = 9 * round(1.87)

    begonias_priced = 17 * round(2.12)

    artie_earned = marigolds_priced + petunias_priced + begonias_priced

    result = artie_earned

    return result


 Executed result: 88
[EXP] 75: [success_rate]: False, [output]: def solution():
    square_footage_top = 16

    square_footage_middle = square_footage_top / 2

    square_footage_bottom = square_footage_middle / 2

    square_footage_bottommost = square_footage_bottom / 2

    average_square_footage = (square_footage_top + square_footage_middle + square_footage_bottom + square_footage_bottommost) / 4

    result = average_square_footage

    return result


 Executed result: 7.5
[EXP] 76: [success_rate]: True, [output]: def solution():
    cups_needed_first_180_days = 1 * 180

    cups_needed_after_180_days = (365 - 180) * 2

    total_cups_needed = cups_needed_first_180_days + cups_needed_after_180_days

    cups_per_bag = 110

    bags_needed = total_cups_needed // cups_per_bag

    if total_cups_needed % cups_per_bag != 0:

        bags_needed += 1

    result = bags_needed

    return result


 Executed result: 5
[EXP] 77: [success_rate]: True, [output]: def solution():
    sarah_laundry = 400

    david_laundry = sarah_laundry / 4

    raymond_laundry = sarah_laundry / 2

    difference = raymond_laundry - david_laundry

    result = difference

    return result


 Executed result: 100.0
[EXP] 78: [success_rate]: True, [output]: def solution():
    cost_per_three = 2.5

    cost_per_two = 1

    cost_per_three_for_eighteen = cost_per_three * 6

    cost_per_two_for_eighteen = cost_per_two * 9

    difference = cost_per_three_for_eighteen - cost_per_two_for_eighteen

    result = difference

    return result


 Executed result: 6.0
[EXP] 79: [success_rate]: True, [output]: def solution():
    cost_initial = 100

    discount_percentage = 30

    discount_amount = cost_initial * (discount_percentage / 100)

    cost_after_discount = cost_initial - discount_amount

    result = cost_after_discount

    return result


 Executed result: 70.0
[EXP] 80: [success_rate]: True, [output]: def solution():
    liters_initial = 24

    water_taken_by_girls = 1/6 * liters_initial * 2

    water_taken_by_boy = 6

    water_left = liters_initial - water_taken_by_girls - water_taken_by_boy

    result = water_left

    return result


 Executed result: 10.0
[EXP] 81: [success_rate]: True, [output]: def solution():
    stickers_initial = 10

    stickers_bought = 21

    stickers_gifted = 23

    total_stickers = stickers_initial + stickers_bought + stickers_gifted

    stickers_given = 9

    stickers_used = 28

    stickers_left = total_stickers - stickers_given - stickers_used

    result = stickers_left

    return result


 Executed result: 17
[EXP] 82: [success_rate]: True, [output]: def solution():
    grace_weight = 125

    alex_weight = 4 * grace_weight - 2

    combined_weight = grace_weight + alex_weight

    result = combined_weight

    return result


 Executed result: 623
[EXP] 83: [success_rate]: True, [output]: def solution():
    rose_bushes = 3

    roses_per_bush = 25

    thorns_per_rose = 8

    total_thorns = rose_bushes * roses_per_bush * thorns_per_rose

    result = total_thorns

    return result


 Executed result: 600
[EXP] 84: [success_rate]: False, [output]: def solution():
    games_total = 22

    games_won = games_total - ((games_total - games_won) * 2)

    result = games_won

    return result


 Executed result: Error: return error, fail to execute
[EXP] 85: [success_rate]: True, [output]: def solution():
    age_initial = 23

    age_now = 34

    num_vacations_per_year = 4

    num_years_of_vacations = age_now - age_initial

    total_blocks = num_years_of_vacations * num_vacations_per_year

    result = total_blocks

    return result


 Executed result: 44
[EXP] 86: [success_rate]: True, [output]: def solution():
    alarm_rings_first_time = 4

    alarm_rings_second_time = alarm_rings_first_time * 3

    alarm_rings_third_time = alarm_rings_second_time // 2

    total_alarm_rings = alarm_rings_first_time + alarm_rings_second_time + alarm_rings_third_time

    result = total_alarm_rings

    return result


 Executed result: 22
[EXP] 87: [success_rate]: False, [output]: def solution():
    initial_salary = 600

    increase_rate = 0.10

    years_current = 5

    years_future = 3

    salary_after_five_years = initial_salary * (1 + increase_rate) ** years_current

    salary_after_eight_years = salary_after_five_years * (1 + increase_rate) ** years_future

    result = salary_after_eight_years

    return result


 Executed result: 1286.153286000001
[EXP] 88: [success_rate]: False, [output]: def solution():
    harald_records_sold = x

    marilyn_records_sold = 10 * harald_records_sold

    total_records_sold = harald_records_sold + marilyn_records_sold

    total = 88000

    harald_records_sold = (total * harald_records_sold) / (harald_records_sold + 10*harald_records_sold)

    result = harald_records_sold

    return result


 Executed result: Error: return error, fail to execute
[EXP] 89: [success_rate]: True, [output]: def solution():
    number_of_guests = 16

    number_of_gifts = 0.75 * number_of_guests

    cost_of_gift = 2

    total_cost = number_of_gifts * cost_of_gift

    result = total_cost

    return result


 Executed result: 24.0
[EXP] 90: [success_rate]: True, [output]: def solution():
    adults = 20

    children = 5

    adult_consumption = 10

    child_consumption = adult_consumption / 2

    adult_consumption_total = adult_consumption * adults

    child_consumption_total = child_consumption * children

    total_consumption = adult_consumption_total + child_consumption_total

    result = total_consumption

    return result


 Executed result: 225.0
[EXP] 91: [success_rate]: True, [output]: def solution():
    cindy_pets = 4

    marcia_pets = cindy_pets + 2

    jan_pets = marcia_pets * 3

    total_pets = cindy_pets + marcia_pets + jan_pets

    result = total_pets

    return result


 Executed result: 28
[EXP] 92: [success_rate]: True, [output]: def solution():
    james_age = 10

    corey_age = james_age + 1

    amy_age = corey_age - 2

    jackson_age = amy_age - 5

    result = jackson_age

    return result


 Executed result: 4
[EXP] 93: [success_rate]: False, [output]: def solution():
    lee_time = 38

    lee_improvement = 2

    gerald_initial_time = lee_time - lee_improvement

    gerald_improvement = gerald_initial_time * 0.1

    gerald_time = gerald_initial_time - gerald_improvement

    result = gerald_time

    return result


 Executed result: 32.4
[EXP] 94: [success_rate]: True, [output]: def solution():
    dogs = 60

    cats = dogs * 2

    total_animals = dogs + cats

    rabbits = total_animals - 12

    total_pets = dogs + cats + rabbits

    result = total_pets

    return result


 Executed result: 348
[EXP] 95: [success_rate]: True, [output]: def solution():
    total_students = 200

    boys = total_students * 2 / 5

    girls = total_students - boys

    girls_in_scout = girls * 2 / 3

    girls_not_in_scout = girls - girls_in_scout

    result = girls_not_in_scout

    return result


 Executed result: 40.0
[EXP] 96: [success_rate]: True, [output]: def solution():
    hours_harry_slept = 9

    hours_james_slept = 2/3 * hours_harry_slept

    hours_diff = hours_harry_slept - hours_james_slept

    result = hours_diff

    return result


 Executed result: 3.0
[EXP] 97: [success_rate]: True, [output]: def solution():
    can_weight = 16

    volume_lost = 0.5

    total_volume = 32

    tomatoes_per_can = 3

    total_cans = total_volume / (can_weight * (1 - volume_lost))

    total_tomatoes = total_cans * tomatoes_per_can

    result = total_tomatoes

    return result


 Executed result: 12.0
[EXP] 98: [success_rate]: True, [output]: def solution():
    cars_initial = 30

    cars_left = cars_initial - 5

    cars_drive_through_first_15_minutes = cars_left - 20

    result = cars_drive_through_first_15_minutes

    return result


 Executed result: 5
[EXP] 99: [success_rate]: True, [output]: def solution():
    plants_initial = 18

    plants_per_ledge = 2

    number_of_ledges = 40

    total_plants_initial = plants_per_ledge * number_of_ledges + plants_initial

    plants_given_away = number_of_ledges

    plants_left = total_plants_initial - plants_given_away

    result = plants_left

    return result


 Executed result: 58
