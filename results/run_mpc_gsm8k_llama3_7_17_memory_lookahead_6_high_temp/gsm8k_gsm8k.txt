[EXP] 0: [success_rate]: True, [output]: def solution():
   _eggs_daily = 16

   _eggs_broken_ = 3

   _eggs_baked = 4

   _egg_production = _eggs_daily - _eggs_broken_ - _eggs_baked # Number of eggs remaining after making muffins

   _profits_per_egg = 2

   _daily_profit = _egg_production * _profits_per_egg

   result = _daily_profit

   return result


 Executed result: 18
[EXP] 1: [success_rate]: True, [output]: def solution():
    blue_fiber = 2

    white_fiber = blue_fiber / 2

    total_fiber = blue_fiber + white_fiber

    result = total_fiber

    return result


 Executed result: 3.0
[EXP] 2: [success_rate]: False, [output]: def solution():
    house_price_initial = 80000

    repairs = 50000

    value_increased_by = 150

    value_increased_by_percentage = value_increased_by / 100

    value_after_repairs = house_price_initial + repairs

    increase = value_after_repairs * value_increased_by_percentage

    value_after_increased = value_after_repairs + increase

    profit = value_after_increased - house_price_initial

    result = profit

    return result


 Executed result: 245000.0
[EXP] 3: [success_rate]: True, [output]: def solution():
    sprints_per_week = 3

    sprints_in_a_session = 3

    meter_per_sprint = 60

    total_meters = sprints_per_week * sprints_in_a_session * meter_per_sprint

    result = total_meters

    return result


 Executed result: 540
[EXP] 4: [success_rate]: True, [output]: def solution():
    chickens = 20

    morning_feed = 15

    afternoon_feed = 25

    total_feed_given = morning_feed + afternoon_feed

    total_feed_needed = total_feed_given

    for chicken in range(chickens):

        total_feed_needed += 3

    result = total_feed_needed % total_feed_given

    return result


 Executed result: 20
[EXP] 5: [success_rate]: True, [output]: def solution():
    glasses = 16

    cost_per_glass = 5

    discounted_cost_per_glass = cost_per_glass * 0.6  # Cost of a discounted glass

    total_cost = 0

    for i in range(glasses):

        if i % 2 == 0:

            total_cost += cost_per_glass

        else:

            total_cost += discounted_cost_per_glass

    result = total_cost

    return result


 Executed result: 64.0
[EXP] 6: [success_rate]: True, [output]: def solution():
    seattle_sheep = 20

    charleston_sheep = 4 * seattle_sheep

    toulouse_sheep = 2 * charleston_sheep

    total_sheep = seattle_sheep + charleston_sheep + toulouse_sheep

    result = total_sheep

    return result


 Executed result: 260
[EXP] 7: [success_rate]: False, [output]: def solution():
    file_size = 200

    initial_download_rate = 2

    restart_start = 0.4

    restart_duration = 20

    download_completed = 0

    while download_completed < file_size:

            time_download += restart_duration

            download_completed = initial_download_rate * time_download newest

    return time_download


 Executed result: Error: return error, fail to execute
[EXP] 8: [success_rate]: False, [output]: def solution():
    john_initial_distance = 0

    distance_unit_time = 60  # mph

    time_driving_initial = 3

    distance_driven_initial = distance_unit_time * time_driving_initial

    distance_stuck_in_traffic = 0

    time_stuck_in_traffic = 2

    time_driving_after_traffic = 4 - time_stuck_in_traffic - 1/2

    speed_after_traffic = 30

    distance_driven_after_traffic = speed_after_traffic * (time_driving_after_traffic - 0.5)

    distance_left = distance_unit_time * (time_driving_after_traffic - 0.5)

    distance_home = distance_driven_initial + distance_stuck_in_traffic + distance_driven_after_traffic + distance_left

    result = distance_home

    return result


 Executed result: 270.0
[EXP] 9: [success_rate]: True, [output]: def solution():
    rate_per_hour = 10

    overtime_rate = 1.2

    hours_worked = 45

    hours_regular = 40

    overtime_hours = hours_worked - hours_regular

    earnings_regular = rate_per_hour * hours_regular

    earnings_overtime = rate_per_hour * overtime_hours * overtime_rate

    total_earnings = earnings_regular + earnings_overtime

    result = total_earnings

    return result


 Executed result: 460.0
[EXP] 10: [success_rate]: True, [output]: def solution():
    downloads_first_month = 60

    downloads_second_month = 3 * downloads_first_month

    downloads_third_month = downloads_second_month * 0.7

    total_downloads = downloads_first_month + downloads_second_month + downloads_third_month

    result = total_downloads

    return result


 Executed result: 366.0
[EXP] 11: [success_rate]: True, [output]: def solution():
    donuts = 3

    mini_cupcakes = 2

    mini_cheesecakes = 6

    donuts_price = 68

    mini_cupcakes_price = 80

    mini_cheesecakes_price = 55

    total_donuts_cost = donuts * donuts_price

    total_mini_cupcakes_cost = mini_cupcakes * mini_cupcakes_price

    total_mini_cheesecakes_cost = mini_cheesecakes * mini_cheesecakes_price

    total_cost = total_donuts_cost + total_mini_cupcakes_cost + total_mini_cheesecakes_cost

    result = total_cost

    return result


 Executed result: 694
[EXP] 12: [success_rate]: False, [output]: def solution():
    cost_to_plant = 90

    growth_per_year = 7

    selling_price_per_lemon = 1.5

    cost_to_water_and_feed = 3

    balance = 0

    years = 0

    while balance < 0:

        balance = balance + (growth_per_year * selling_price_per_lemon) - cost_to_water_and_feed - cost_to_plant

        years += 1

    result = years

    return result


 Executed result: 0
[EXP] 13: [success_rate]: False, [output]: def solution():
    vacuum_cleaners_left = 5

    vacuum_cleaners_sold_green = vacuum_cleaners_left / 3

    vacuum_cleaners_sold_red = 2

    vacuum_cleaners_sold_orange = vacuum_cleaners_left - vacuum_cleaners_sold_green - vacuum_cleaners_sold_red

    vacuum_cleaners_initial = vacuum_cleaners_sold_green + vacuum_cleaners_sold_red + vacuum_cleaners_sold_orange + vacuum_cleaners_left

    result = vacuum_cleaners_initial

    return result


 Executed result: 10.0
[EXP] 14: [success_rate]: True, [output]: def solution():
    students = 20

    students_enrolled_contemporary = 0.20 * students

    remaining_students = students - students_enrolled_contemporary

    students_enrolled_jazz = 0.25 * remaining_students

    students_enrolled_hip_hop = remaining_students - students_enrolled_jazz

    percentage_students_hip_hop = (students_enrolled_hip_hop / students) * 100

    result = percentage_students_hip_hop

    return result


 Executed result: 60.0
[EXP] 15: [success_rate]: False, [output]: def solution():
    price_jewelry = 5000

    price_electronic_gadgets = 8000

    profit_jewelry = price_jewelry * 0.025

    profit_electronic_gadgets = price_electronic_gadgets * 0.012

    price_jewelry_after = price_jewelry + price_jewelry * 0.025

    price_electronic_gadgets_after = price_electronic_gadgets + price_electronic_gadgets * 0.012

    if price_jewelry_after > price_electronic_gadgets_after:

        result = price_jewelry_after - price_jewelry

    else:

        result = price_electronic_gadgets_after - price_electronic_gadgets

    return result


 Executed result: 96.0
[EXP] 16: [success_rate]: False, [output]: def solution():
    distance_west = 80

    distance_north = 150

    distance_west_like = distance_west

    distance_north_like = distance_north

    distance_total_west = distance_west_like * 2

    distance_total_north = distance_north_like

    result = (distance_total_west, distance_total_north)

    return result


 Executed result: (160, 150)
[EXP] 17: [success_rate]: True, [output]: def solution():
    hourly_rate_teacher = 20

    hourly_rate_coach = 30

    hours_per_week_teacher = 35

    hours_per_week_coach = 15

    weeks_per_year = 50

    hours_per_year_teacher = hours_per_week_teacher * weeks_per_year

    hours_per_year_coach = hours_per_week_coach * weeks_per_year

    annual_salary_teacher = hours_per_year_teacher * hourly_rate_teacher

    annual_salary_coach = hours_per_year_coach * hourly_rate_coach

    total_annual_salary = annual_salary_teacher + annual_salary_coach

    result = total_annual_salary

    return result


 Executed result: 57500
[EXP] 18: [success_rate]: False, [output]: def solution():
    eggs_per_day = 3

    eggs_per_quarter_dozen = 12 * 3

    days_in_a_week = 7

    weeks = 4

    total_eggs_consumed = eggs_per_quarter_dozen * days_in_a_week

    total_eggs_consumed_in_four_weeks = total_eggs_consumed * weeks

    result = total_eggs_consumed_in_four_weeks

    return result


 Executed result: 1008
[EXP] 19: [success_rate]: False, [output]: def solution():
    total_distance = 12

    distance_already_walked = 4 + 2

    distance_left = total_distance - distance_already_walked

    time_already_walked = 1 + 1

    time_required_to_walk_remaining_distance = distance_left / 4

    time_left = time_required_to_walk_remaining_distance

    speed_required = distance_left / time_left

    result = speed_required

    return result


 Executed result: 4.0
[EXP] 20: [success_rate]: True, [output]: def solution():
    water_content_orange = 2/3

    orange_volume = 10

    water_in_orange = water_content_orange * orange_volume

    orange_pour = 10

    remaining_orange = orange_pour - 1

    water_pineapple = 3/5 * 15

    total_water = water_in_orange + water_pineapple

    remaining_volume = 24

    remaining_water = total_water

    return remaining_water


 Executed result: 15.666666666666666
[EXP] 21: [success_rate]: False, [output]: def solution():
    samantha_age = 31

    raymond_age = samantha_age - 6

    raymond_son_age = 23 - 6

    raymond_son_birth_year = raymond_age - raymond_son_age

    result = raymond_son_birth_year

    return result


 Executed result: 8
[EXP] 22: [success_rate]: True, [output]: def solution():
    customers = 8

    first_three_customers = 3

    second_two_customers = 2

    last_three_customers = 0  # customers that didn't buy any DVDs

    total_sold_first_three = first_three_customers

    total_sold_second_two = second_two_customers * 2

    total_sold = total_sold_first_three + total_sold_second_two

    result = total_sold

    return result


 Executed result: 7
[EXP] 23: [success_rate]: True, [output]: def solution():
    hours_burned = 4

    cm_melted_per_hour = 2

    total_cm_melted = hours_burned * cm_melted_per_hour

    result = total_cm_melted

    return result


 Executed result: 8
[EXP] 24: [success_rate]: True, [output]: def solution():
    book_price_current = 19.50

    discount = 0.25

    original_price = book_price_current / (1 - discount)

    result = original_price

    return result


 Executed result: 26.0
[EXP] 25: [success_rate]: True, [output]: def solution():
    total_cost = 50

    chicken_cost = 12

    milk_cost = 5 * 3

    apple_cost = 4 * 1.50

    total_cost_excluding_pizza = chicken_cost + milk_cost + apple_cost

    residual_cost = total_cost - total_cost_excluding_pizza

    pizza_per_box = 8.50

    boxes_of_pizza = residual_cost / pizza_per_box

    result = boxes_of_pizza

    return result


 Executed result: 2.0
[EXP] 26: [success_rate]: True, [output]: def solution():
    shorts_price = 16.50

    shorts_quantity = 3

    pants_price = 22.50

    pants_quantity = 3

    shoes_price = 42

    shoes_quantity = 3

    total_price_shorts = shorts_price * shorts_quantity

    total_price_pants = pants_price * pants_quantity

    total_price_shoes = shoes_price * shoes_quantity

    total_price = total_price_shorts + total_price_pants + total_price_shoes

    result = total_price

    return result


 Executed result: 243.0
[EXP] 27: [success_rate]: True, [output]: def solution():
    days = 60

    ice_cream_servings_per_carton = 15

    cost_per_carton = 4.00

    total_cartons_needed = days // ice_cream_servings_per_carton

    total_cost = total_cartons_needed * cost_per_carton

    result = total_cost

    return result


 Executed result: 16.0
[EXP] 28: [success_rate]: False, [output]: def solution():
    total_miles = 60

    first_stop = 20

    distance_to_end = total_miles - first_stop

    second_stop = total_miles - distance_to_end

    distance_between_stops = second_stop - first_stop

    result = distance_between_stops

    return result


 Executed result: 0
[EXP] 29: [success_rate]: False, [output]: def solution():
    boots_price = 33 * 3

    result = boots_price

    return result


 Executed result: 99
[EXP] 30: [success_rate]: True, [output]: def solution():
    ratio1 = 7

    ratio2 = 11

    total_age_now = 162

    age1_now = ratio1*total_age_now/(ratio1 + ratio2)

    age2_now = total_age_now - age1_now

    age2_ten_years_from_now = age2_now + 10

    result = age2_ten_years_from_now

    return result


 Executed result: 109.0
[EXP] 31: [success_rate]: False, [output]: def solution():
    friend1_guess = 80

    friend2_guess = 80 + 20 + (80 / 2)

    friend3_guess = 1.25 * friend1_guess

    total_guesses = friend1_guess + friend2_guess + friend3_guess

    average_guess = total_guesses / 3

    return average_guess


 Executed result: 106.66666666666667
[EXP] 32: [success_rate]: True, [output]: def solution():
    dogs = 10

    hours_per_dog_per_day = 0.5

    hours_per_dog_per_week = hours_per_dog_per_day * 7

    total_hours_per_week = dogs * hours_per_dog_per_week

    result = total_hours_per_week

    return result


 Executed result: 35.0
[EXP] 33: [success_rate]: False, [output]: def solution():
    total_coins = 110

    gold_coins = ?  # unknown

    silver_coins = 30

    gold_coins = gold_coins + silver_coins

    result = gold_coins

    return result


 Executed result: Error: return error, fail to execute
[EXP] 34: [success_rate]: True, [output]: def solution():
    raymond_jewels = 40

    aaron_jewels_half_raymond = raymond_jewels / 2

    aaron_jewels = aaron_jewels_half_raymond + 5

    siobhan_jewels = aaron_jewels - 2

    result = siobhan_jewels

    return result


 Executed result: 23.0
[EXP] 35: [success_rate]: False, [output]: def solution():
    points_scored_first_half = 20

    points_scored_second_half = 4 + 4 * 0.25

    total_points = points_scored_first_half + points_scored_second_half

    result = total_points

    return result


 Executed result: 25.0
[EXP] 36: [success_rate]: True, [output]: def solution():
    yogurts_per_day = 2

    yogurts_per_package = 4

    price_per_package = 5.0

    days = 30

    total_yogurts = yogurts_per_day * days

    total_packages = (total_yogurts + yogurts_per_package - 1) // yogurts_per_package

    total_cost = total_packages * price_per_package

    result = total_cost

    return result


 Executed result: 75.0
[EXP] 37: [success_rate]: False, [output]: def solution():
    lego_sets_initial = 13

    money_per_lego_set = 15

    lego_sets_sold = lego_sets_initial

    money_from_sales = lego_sets_sold * money_per_lego_set

    video_games_cost = 8 * 20

    total_spend = video_games_cost

    money_left = money_from_sales - total_spend

    if money_left < 0:

        result = 0

    elif money_left == 5:

    else:

        result = lego_sets_initial - (money_from_sales - total_spend) // money_per_lego_set

    return result


 Executed result: 11
[EXP] 38: [success_rate]: True, [output]: def solution():
    distance_per_week = 60

    days_per_week = 3

    hours_first_day = 3

    hours_other_days = hours_first_day / 2

    total_hours = hours_first_day + 2 * hours_other_days

    speed = distance_per_week / total_hours

    result = speed

    return result


 Executed result: 10.0
[EXP] 39: [success_rate]: True, [output]: def solution():
    speed_skipping = 3

    speed_running = 2 * speed_skipping

    speed_walking = 1 / 4 * speed_running

    running_time = 2

    walking_time = 4

    total_time = running_time + walking_time

    distance_running = running_time * speed_running

    distance_walking = walking_time * speed_walking

    total_distance = distance_running + distance_walking

    result = total_distance

    return result


 Executed result: 18.0
[EXP] 40: [success_rate]: True, [output]: def solution():
    suzy_iphone_age = 1

    ben_iphone_age = 2 * suzy_iphone_age

    brandon_iphone_age = 4 * ben_iphone_age

    result = brandon_iphone_age

    return result


 Executed result: 8
[EXP] 41: [success_rate]: False, [output]: def solution():
    dragon_reach = 1000

    javelin_distance = 400

    gemstone_multiplier = 3

    with_gemstone = javelin_distance * gemstone_multiplier

    outside_flames = dragon_reach + with_gemstone

    result = outside_flames

    return result


 Executed result: 2200
[EXP] 42: [success_rate]: True, [output]: def solution():
    pies_initial = 5

    slices_per_pie = 8

    total_slices = pies_initial * slices_per_pie

    slices_taken = total_slices - 14

    result = slices_taken

    return result


 Executed result: 26
[EXP] 43: [success_rate]: True, [output]: def solution():
    daily_calorie_target = 2000

    daily_calories_consumed = 1800

    calorie_remaining = daily_calorie_target - daily_calories_consumed

    calorie_per_serving = 250

    caloriesservings = 5

    gram_per_serving = 300 / caloriesservings

    calorie_consumed = calorie_remaining / 250

    gram_left = gram_per_serving * calorie_consumed

    result = gram_left

    return result


 Executed result: 48.0
[EXP] 44: [success_rate]: False, [output]: def solution():
    beeswax_cost = 10

    candles_per_pound = 10

    beeswax_to_sells_candles = 20

    candles_sold = beeswax_to_sells_candles * candles_per_pound

    cost_per_candle = beeswax_cost / candles_per_pound

    sale_price_per_candle = 2

    net_profit = (sale_price_per_candle * candles_sold) - cost_per_candle * beeswax_to_sells_candles

    result = net_profit

    return result


 Executed result: 380.0
[EXP] 45: [success_rate]: False, [output]: def solution():
    articles_monday = 5

    articles_tuesday = 2/5 * articles_monday

    articles_wednesday = 2 * articles_tuesday

    total_articles = articles_monday + articles_tuesday + articles_wednesday

    time_per_article = 4

    total_time = total_articles * time_per_article

    result = total_time

    return result


 Executed result: 44.0
[EXP] 46: [success_rate]: False, [output]: def solution():
    post_it_notes_initial = 80

    post_it_notes_used = 221  # Each cup required 1 note, so 220 cups means 220 notes

    post_it_notes_left = 23

    post_it_notes_total = post_it_notes_initial + post_it_notes_left

    package_of_post_it_notes = post_it_notes_total - post_it_notes_used

    result = package_of_post_it_notes

    return result


 Executed result: -118
[EXP] 47: [success_rate]: True, [output]: def solution():
    blue_tie_price = 40

    blue_tie_count = 200 / blue_tie_price

    red_tie_price = blue_tie_price * 1.5  # each red tie costs 50% more than the blue ties

    red_tie_count = blue_tie_count * 2  # he bought twice as many red ties

    blue_tie_cost = blue_tie_count * blue_tie_price

    red_tie_cost = red_tie_count * red_tie_price

    total_tie_cost = blue_tie_cost + red_tie_cost

    result = total_tie_cost

    return result


 Executed result: 800.0
[EXP] 48: [success_rate]: True, [output]: def solution():
    wire_length = 4

    piece_length = 6  # in inches

    wire_length_in_inches = wire_length * 12  # convert feet to inches

    num_pieces = wire_length_in_inches // piece_length  # integer division

    result = num_pieces

    return result


 Executed result: 8
[EXP] 49: [success_rate]: True, [output]: def solution():
    total_floors = 15

    units_per_floor = 8

    total_units = total_floors * units_per_floor

    occupied_percentage = 3/4

    occupied_units = occupied_percentage * total_units

    unoccupied_units = total_units - occupied_units

    result = unoccupied_units

    return result


 Executed result: 30.0
[EXP] 50: [success_rate]: True, [output]: def solution():
    eggs_per_day = 252

    eggs_per_week = eggs_per_day * 7

    eggs_per_dozen = 12

    price_per_dozen = 2

    total_dozen_per_week = eggs_per_week // eggs_per_dozen

    total_revenue_per_week = total_dozen_per_week * price_per_dozen

    result = total_revenue_per_week

    return result


 Executed result: 294
[EXP] 51: [success_rate]: False, [output]: def solution():
    distance_to_travel = 3 * 60  # 3 hours * 60 minutes = 180 minutes

    speed_away = 10

    time_taken_to_travel = distance_to_travel / speed_away

    time_to_reach_4_pm = time_taken_to_travel + 4

    distance_to_travel_back = 3 * 60

    speed_back = 6

    time_taken_to_travel_back = distance_to_travel_back / speed_back

    total_time_taken = time_to_reach_4_pm + time_taken_to_travel_back

    result = total_time_taken

    return result


 Executed result: 52.0
[EXP] 52: [success_rate]: True, [output]: def solution():
    weight_remove = 15

    comic_book_weight = 1/4

    toy_weight = 1/2

    comic_books_removed = 30

    weight_removed_so_far = comic_book_weight * comic_books_removed

    weight_to_remove_from_toys = weight_remove - weight_removed_so_far

    toys_to_remove = weight_to_remove_from_toys / toy_weight

    result = toys_to_remove

    return result


 Executed result: 15.0
[EXP] 53: [success_rate]: False, [output]: def solution():
    revenue_thursday = 0

    revenue_friday = 0

    total_truck_tires = 6

    total_car_tires = 4 + 12

    revenue_per_truck_tire = 60

    revenue_per_car_tire = 40

    revenue_thursday = total_truck_tires * revenue_per_truck_tire + total_car_tires * revenue_per_car_tire

    revenue_friday = total_car_tires * revenue_per_car_tire

    revenue_difference = revenue_friday - revenue_thursday

    result = revenue_difference

    return result


 Executed result: -360
[EXP] 54: [success_rate]: True, [output]: def solution():
    adopted_kittens = 7

    patchy_kittens = 3 * 7

    trixie_kittens = 12

    total_kittens = adopted_kittens + patchy_kittens + trixie_kittens

    result = total_kittens

    return result


 Executed result: 40
[EXP] 55: [success_rate]: True, [output]: def solution():
    lollipops_initial = 30

    lollipops_eaten = 2

    lollipops_left = lollipops_initial - lollipops_eaten

    lollipops_per_bag = 2

    bags_filled = lollipops_left // lollipops_per_bag

    result = bags_filled

    return result


 Executed result: 14
[EXP] 56: [success_rate]: True, [output]: def solution():
    movie_ticket_cost = 7

    movie_snack_cost = 7

    total_costs_per_visit = movie_ticket_cost + movie_snack_cost

    total_money = 42

    visits_possible = total_money // total_costs_per_visit

    result = visits_possible

    return result


 Executed result: 3
[EXP] 57: [success_rate]: True, [output]: def solution():
    max_weight = 5000

    combined_weight = 3755

    box_weight = 15

    max_boxes = (max_weight - combined_weight) // box_weight

    result = max_boxes

    return result


 Executed result: 83
[EXP] 58: [success_rate]: True, [output]: def solution():
    bill = 40

    fee = 0.25

    delivery_fee = 3

    tip = 4

    total_fee = bill + (bill * fee)

    total_amount = total_fee + delivery_fee + tip

    result = total_amount

    return result


 Executed result: 57.0
[EXP] 59: [success_rate]: True, [output]: def solution():
    clusters = 6

    fruit_per_cluster = 20

    individual_fruit = 67

    total_raspberries_in_clusters = clusters * fruit_per_cluster

    total_raspberries = total_raspberries_in_clusters + individual_fruit

    result = total_raspberries

    return result


 Executed result: 187
[EXP] 60: [success_rate]: True, [output]: def solution():
    oranges_initial = 25

    bad_oranges = 1

    unripe_oranges = int(20 / 100 * oranges_initial)

    sour_oranges = 2

    good_oranges = oranges_initial - bad_oranges - unripe_oranges - sour_oranges

    result = good_oranges

    return result


 Executed result: 17
[EXP] 61: [success_rate]: True, [output]: def solution():
    material_cost = 500

    construction_cost = 800

    total_cost = material_cost + construction_cost

    insurance_cost = total_cost * 0.1

    total_expenses = total_cost + insurance_cost

    result = total_expenses

    return result


 Executed result: 1430.0
[EXP] 62: [success_rate]: True, [output]: def solution():
    years_worked = 30

    annual_pension = 50000

    years_entitled = years_worked - 20

    entitled_amount = annual_pension * (5 / 100)

    total_pension = annual_pension - entitled_amount * years_entitled

    result = total_pension

    return result


 Executed result: 25000.0
[EXP] 63: [success_rate]: True, [output]: def solution():
    initial_charge = 140

    half_year_charge = initial_charge * 6  # half year

    reduced_charge = initial_charge * 0.9  # 10% less

    second_half_charge = reduced_charge * 6  # 10% less for the second half

    total_charge = half_year_charge + second_half_charge

    result = total_charge

    return result


 Executed result: 1596.0
[EXP] 64: [success_rate]: True, [output]: def solution():
    gas_initial = 12

    gas_consumed = 4

    total_gas = gas_initial - gas_consumed

    miles_traveled = 100

    miles_per_gallon = miles_traveled / gas_consumed

    miles_per_gas = miles_per_gallon * 12

    result = miles_per_gas

    return result


 Executed result: 300.0
[EXP] 65: [success_rate]: True, [output]: def solution():
    hours_per_session = 2 + 2/2  # 2 hours watching TV and 1 hour reading

    sessions_per_week = 3

    hours_per_week = hours_per_session * sessions_per_week

    weeks = 4

    total_hours = hours_per_week * weeks

    result = total_hours

    return result


 Executed result: 36.0
[EXP] 66: [success_rate]: False, [output]: def solution():
    teams_per_school = 2  # Each school has 2 teams.

    members_per_team = 5  # Each team has 5 members.

    coaches_per_team = 1  # Each team has one coach.

    schools = 4

    total_members = schools * teams_per_school * members_per_team

    total_coaches = schools * coaches_per_team

    total_people = total_members + total_coaches

    result = total_people

    return result


 Executed result: 44
[EXP] 67: [success_rate]: True, [output]: def solution():
    diamonds = 175

    rubies = diamonds - 35

    emeralds = rubies * 2

    total_gems = diamonds + rubies + emeralds

    result = total_gems

    return result


 Executed result: 595
[EXP] 68: [success_rate]: True, [output]: def solution():
    girls = 60

    boys = girls * 2

    total_students = girls + boys

    students_per_teacher = 5

    total_students_per_teacher = total_students / students_per_teacher

    teachers = total_students_per_teacher

    result = int(teachers)

    return result


 Executed result: 36
[EXP] 69: [success_rate]: True, [output]: def solution():
    money_initial = 0  # unknown

    weekly_allowance = 5

    num_weeks = 8

    total_money = 100

    money_spent = weekly_allowance * num_weeks

    money_left = total_money - money_spent

    money_initial = money_left

    result = money_initial

    return result


 Executed result: 60
[EXP] 70: [success_rate]: False, [output]: def solution():
    num_days = 5  # weekdays

    num_saturday_classes = 1

    num_classes_per_day = 5

    num_classes = (num_days * num_classes_per_day) + num_saturday_classes

    num_students_per_class = 15

    students_in_classes = num_classes * num_students_per_class

    amount_per_student = 15  # dollars

    total_money_made = students_in_classes * amount_per_student

    result = total_money_made

    return result


 Executed result: 5850
[EXP] 71: [success_rate]: True, [output]: def solution():
    instructions_recipe1 = 20

    instructions_recipe2 = 2 * instructions_recipe1

    total_instructions = instructions_recipe1 + instructions_recipe2

    result = total_instructions

    return result


 Executed result: 60
[EXP] 72: [success_rate]: True, [output]: def solution():
    brownies = 43

    brownies_price = 3

    cheesecakes = 23

    cheesecakes_price = 4

    money_from_brownies = brownies * brownies_price

    money_from_cheesecakes = cheesecakes * cheesecakes_price

    total_money = money_from_brownies + money_from_cheesecakes

    result = total_money

    return result


 Executed result: 221
[EXP] 73: [success_rate]: True, [output]: def solution():
    cell_phones = 5

    price_per_phone = 150

    price_total = cell_phones * price_per_phone

    interest_rate = 0.02  # 2% interest rate

    total_interest = price_total * interest_rate

    installmentAmount = price_total + total_interest

    installmentsPerMonth = installmentAmount / 3

    result = installmentsPerMonth

    return result


 Executed result: 255.0
[EXP] 74: [success_rate]: True, [output]: def solution():
    marigold_price = round(2.74)

    petunia_price = round(1.87)

    begonia_price = round(2.12)

    marigold_income = marigold_price * 12

    petunia_income = petunia_price * 9

    begonia_income = begonia_price * 17

    total_income = marigold_income + petunia_income + begonia_income

    result = total_income

    return result


 Executed result: 88
[EXP] 75: [success_rate]: False, [output]: def solution():
    square_footage_top = 16

    square_footage_level1 = square_footage_top * 2

    square_footage_level2 = square_footage_level1 * 2

    square_footage_level3 = square_footage_level2 * 2

    square_footage_level0 = square_footage_level3 * 2

    average_square_footage = (square_footage_level0 + square_footage_level1 + square_footage_level2 + square_footage_level3) / 4

    result = average_square_footage

    return result


 Executed result: 120.0
[EXP] 76: [success_rate]: True, [output]: def solution():
    initial_days = 180

    cups_per_day_initial = 1

    cups_per_day_final = 2

    cups_per_bag = 110

    days_per_year = 365

    total_cups_per_year = initial_days * cups_per_day_initial + (days_per_year - initial_days) * cups_per_day_final

    total_bags_per_year = total_cups_per_year / cups_per_bag

    result = total_bags_per_year

    return result


 Executed result: 5.0
[EXP] 77: [success_rate]: True, [output]: def solution():
    sarah_laundry = 400

    david_laundry = sarah_laundry / 4

    raymond_laundry = sarah_laundry / 2

    difference_laundry = raymond_laundry - david_laundry

    result = difference_laundry

    return result


 Executed result: 100.0
[EXP] 78: [success_rate]: False, [output]: def solution():
    total_flowers = 18

    price_per_3_flowers = 2.5

    price_per_2_flowers = 1

    num_packages_of_3 = -(-total_flowers // 3)  # use ceiling division to calculate the number of packages of 3

    num_packages_of_2 = -(-total_flowers // 2)  # use ceiling division to calculate the number of packages of 2

    price_of_packages_of_3 = num_packages_of_3 * price_per_3_flowers

    price_of_packages_of_2 = num_packages_of_2 * price_per_2_flowers

    price_difference = price_of_packages_of_2 - price_of_packages_of_3

    result = price_difference

    return result


 Executed result: -6.0
[EXP] 79: [success_rate]: True, [output]: def solution():
    initial_cost = 100

    discount_percentage = 30

    discount_amount = initial_cost * (discount_percentage / 100)

    discount_cost = initial_cost - discount_amount

    result = discount_cost

    return result


 Executed result: 70.0
[EXP] 80: [success_rate]: True, [output]: def solution():
    total_water = 24

    water_per_gift = 1/6 * total_water

    water_taken_by_girls = 2 * water_per_gift

    water_left = total_water - water_taken_by_girls - 6

    result = water_left

    return result


 Executed result: 10.0
[EXP] 81: [success_rate]: True, [output]: def solution():
    stickers_initial = 10

    stickers_bought = 21

    stickers_received_birthday = 23

    total_stickers = stickers_initial + stickers_bought + stickers_received_birthday

    stickers_given_sister = 9

    stickers_used_card = 28

    stickers_left = total_stickers - stickers_given_sister - stickers_used_card

    result = stickers_left

    return result


 Executed result: 17
[EXP] 82: [success_rate]: True, [output]: def solution():
    grace_weight = 125

    alex_weight = 4 * grace_weight - 2

    total_weight = grace_weight + alex_weight

    result = total_weight

    return result


 Executed result: 623
[EXP] 83: [success_rate]: True, [output]: def solution():
    rose_bushes = 3

    roses_per_bush = 25

    thorns_per_rose = 8

    total_roses = rose_bushes * roses_per_bush

    total_thorns = total_roses * thorns_per_rose

    result = total_thorns

    return result


 Executed result: 600
[EXP] 84: [success_rate]: False, [output]: def solution():
    games_played = 22

    wins = 8

    losses = games_played - wins

    result = wins

    return result


 Executed result: 8
[EXP] 85: [success_rate]: True, [output]: def solution():
    gene_age = 34

    vacation_frequency = 4

    years_of_vacations = gene_age - 23

    blocks_per_year = vacation_frequency

    total_blocks = years_of_vacations * blocks_per_year

    result = total_blocks

    return result


 Executed result: 44
[EXP] 86: [success_rate]: False, [output]: def solution():
    alarm_rings_per_day = 3

    first_time_rings = 4

    second_time_rings = 3 * first_time_rings

    third_time_rings = second_time_rings / 2

    alarm_rings_total = alarm_rings_per_day * (first_time_rings + second_time_rings + third_time_rings)

    result = alarm_rings_total

    return result


 Executed result: 66.0
[EXP] 87: [success_rate]: False, [output]: def solution():
    initial_salary = 600

    years_with_company = 5

    years_to_add = 3

    years_total = years_with_company + years_to_add

    increase_per_year = 0.10

    for year in range(years_to_add):

        initial_salary *= (1 + increase_per_year)

    result = initial_salary

    return result


 Executed result: 798.6000000000001
[EXP] 88: [success_rate]: False, [output]: def solution():
    harald_copies = 0

    marilyn_copies = 0

    total_copies = 88000

    total_copies_per_marilyn_copies = 10

    marilyn_copies = total_copies / total_copies_per_marilyn_copies

    harald_copies = total_copies - marilyn_copies

    result = harald_copies

    return result


 Executed result: 79200.0
[EXP] 89: [success_rate]: True, [output]: def solution():
    bag_per_guest = 0.75

    invited_guest = 16

    total_bag = bag_per_guest * invited_guest

    ratio_no_show = 0.25

    total_guest = invited_guest / (1 - ratio_no_show)

    cost_per_bag = 2

    total_cost = total_bag * cost_per_bag

    result = total_cost

    return result


 Executed result: 24.0
[EXP] 90: [success_rate]: True, [output]: def solution():
    adult_dinosaurs = 20

    children = 5

    adult_consumption = 10

    child_consumption = adult_consumption / 2

    total_consumption = adult_dinosaurs * adult_consumption + children * child_consumption

    result = total_consumption

    return result


 Executed result: 225.0
[EXP] 91: [success_rate]: True, [output]: def solution():
    cindy_pets = 4

    marcia_pets = cindy_pets + 2

    jan_pets = marcia_pets * 3

    total_pets = cindy_pets + marcia_pets + jan_pets

    result = total_pets

    return result


 Executed result: 28
[EXP] 92: [success_rate]: True, [output]: def solution():
    jackson_age = 0

    jimmy_age = 10

    emily_children = ["Amy", "Jackson", "Corey", "James"]  # list of children's names

    corey_age = jimmy_age + 1  # Corey is 1 year older than James

    amy_age = corey_age - 2  # Amy is 2 years younger than Corey

    jackson_age = amy_age - 5  # Jackson is 5 years younger than Amy

    result = jackson_age

    return result


 Executed result: 4
[EXP] 93: [success_rate]: False, [output]: def solution():
    lee_time = 38

    lee_over_gerald = 2

    gerald_old_speed = lee_time - lee_over_gerald

    gerald nuevos_speed = gerald_old_speed * 1.10

    result = gerald_nuevos_speed

    return result


 Executed result: Error: return error, fail to execute
[EXP] 94: [success_rate]: True, [output]: def solution():
    dogs = 60

    cats = dogs * 2

    pets_combined = dogs + cats

    pets_rabbits = pets_combined - 12

    result = pets_rabbits + pets_combined

    return result


 Executed result: 348
[EXP] 95: [success_rate]: True, [output]: def solution():
    total_students = 200

    boys = 2/5 * total_students

    girls = total_students - boys

    girls_in_scout = (2/3) * girls

    girls_not_in_scout = girls - girls_in_scout

    result = girls_not_in_scout

    return result


 Executed result: 40.0
[EXP] 96: [success_rate]: True, [output]: def solution():
    harry_slept = 9

    james_slept = (2/3) * harry_slept

    difference = harry_slept - james_slept

    result = difference

    return result


 Executed result: 3.0
[EXP] 97: [success_rate]: True, [output]: def solution():
    sauce_made = 32

    can_capacity = 16

    can_volume_reduced = can_capacity / 2

    cans_used = sauce_made / can_volume_reduced

    tomatoes_per_can = 3

    total_tomatoes = cans_used * tomatoes_per_can

    result = total_tomatoes

    return result


 Executed result: 12.0
[EXP] 98: [success_rate]: True, [output]: def solution():
    cars_initial = 30

    cars_that_didnt_drive = 5

    total_cars_after_jam = cars_initial - cars_that_didnt_drive

    cars_that_drove_through = total_cars_after_jam

    cars_driven_first_15_minutes = cars_that_drove_through - 20

    result = cars_driven_first_15_minutes

    return result


 Executed result: 5
[EXP] 99: [success_rate]: True, [output]: def solution():
    new_plants = 18

    plants_initial = 2 * 40

    plants_given = 40

    plants_left = new_plants + plants_initial - plants_given

    result = plants_left

    return result


 Executed result: 58
