[EXP] 0: [success_rate]: True, [output]: def solution():
    eggs_per_day = 16

    eggs_eaten_for_breakfast = 3

    eggs_used_for_muffins = 4

    total_eggs_sold = eggs_per_day - (eggs_eaten_for_breakfast + eggs_used_for_muffins)

    money_per_day = total_eggs_sold * 2

    result = money_per_day

    return result


 Executed result: 18
[EXP] 1: [success_rate]: True, [output]: def solution():
    blue_fiber = 2

    white_fiber = blue_fiber / 2

    total_fiber = blue_fiber + white_fiber

    result = total_fiber

    return result


 Executed result: 3.0
[EXP] 2: [success_rate]: False, [output]: def solution():
    house_price = 80000

    repairs = 50000

    total_cost = house_price + repairs

    house_value_after_repair = total_cost * 2.5

    profit = house_value_after_repair - total_cost

    result = profit

    return result


 Executed result: 195000.0
[EXP] 3: [success_rate]: True, [output]: def solution():
    sprints_per_week = 3

    sprints_per_session = 3

    meters_per_sprint = 60

    total_meters_per_week = sprints_per_week * sprints_per_session * meters_per_sprint

    result = total_meters_per_week

    return result


 Executed result: 540
[EXP] 4: [success_rate]: True, [output]: def solution():
    flock_size = 20

    morning_feed = 15

    afternoon_feed = 25

    total_feed_already_given = morning_feed + afternoon_feed

    total_feed_needed = 3 * flock_size

    feed_needed_in_final_meal = total_feed_needed - total_feed_already_given

    result = feed_needed_in_final_meal

    return result


 Executed result: 20
[EXP] 5: [success_rate]: True, [output]: def solution():
    glass_cost = 5

    discounted_glass_cost = glass_cost * 0.6

    total_cost = 0

    for i in range(16):

        if i % 2 == 0:

            total_cost += glass_cost

        else:

            total_cost += discounted_glass_cost

    result = total_cost

    return result


 Executed result: 64.0
[EXP] 6: [success_rate]: True, [output]: def solution():
    seattle_sheep = 20

    charleston_sheep = seattle_sheep * 4

    toulouse_sheep = charleston_sheep * 2

    total_sheep = seattle_sheep + charleston_sheep + toulouse_sheep

    result = total_sheep

    return result


 Executed result: 260
[EXP] 7: [success_rate]: False, [output]: def solution():
    file_size = 200

    download_rate = 2

    percent = 0.4

    download_time_before_restart = file_size * (percent / 100) / download_rate

    restart_time = 20

    download_time_after_restart = file_size * new_percent / download_rate

    total_download_time = download_time_before_restart + restart_time + download_time_after_restart

    result = total_download_time

    return result


 Executed result: Error: return error, fail to execute
[EXP] 8: [success_rate]: False, [output]: def solution():
    distance_driven_to_turn_back = 3 * 60

    distance_driven_in_standstill_traffic = 2 * 0

    distance_driven_at_30mph = 0.5 * 30

    distance_driven_at_80mph = (4 - 2 - 0.5) * 80

    total_distance = distance_driven_to_turn_back + distance_driven_in_standstill_traffic + distance_driven_at_30mph + distance_driven_at_80mph

    result = total_distance

    return result


 Executed result: 315.0
[EXP] 9: [success_rate]: True, [output]: def solution():
    regular_hours = 40

    overtime_hours = 45 - regular_hours

    regular_rate = 10

    overtime_rate = regular_rate * 1.2

    regular_earnings = regular_hours * regular_rate

    overtime_earnings = overtime_hours * overtime_rate

    total_earnings = regular_earnings + overtime_earnings

    result = total_earnings

    return result


 Executed result: 460.0
[EXP] 10: [success_rate]: True, [output]: def solution():
    downloads_first_month = 60

    downloads_second_month = downloads_first_month * 3

    downloads_third_month = downloads_second_month * 0.7

    total_downloads = downloads_first_month + downloads_second_month + downloads_third_month

    result = total_downloads

    return result


 Executed result: 366.0
[EXP] 11: [success_rate]: True, [output]: def solution():
    donuts = 3

    donuts_cost = 68

    mini_cupcakes = 2

    mini_cupcakes_cost = 80

    mini_cheesecakes = 6

    mini_cheesecakes_cost = 55

    total_donuts_cost = donuts * donuts_cost

    total_mini_cupcakes_cost = mini_cupcakes * mini_cupcakes_cost

    total_mini_cheesecakes_cost = mini_cheesecakes * mini_cheesecakes_cost

    total_cost = total_donuts_cost + total_mini_cupcakes_cost + total_mini_cheesecakes_cost

    result = total_cost

    return result


 Executed result: 694
[EXP] 12: [success_rate]: False, [output]: def solution():
    cost_to_plant = 90

    cost_per_year = 3

    profit_per_year = 7 * 1.5

    years_to_break_even = cost_to_plant / (profit_per_year - cost_per_year)

    result = int(years_to_break_even)

    return result


 Executed result: 12
[EXP] 13: [success_rate]: False, [output]: def solution():
    vacuum_cleaners_left = 5

    vacuum_cleaners_sold_at_orange_house = vacuum_cleaners_left

    vacuum_cleaners_sold_at_red_house = 2

    vacuum_cleaners_sold_at_green_house = vacuum_cleaners_sold_at_orange_house + vacuum_cleaners_sold_at_red_house

    vacuum_cleaners_initial = vacuum_cleaners_sold_at_green_house + vacuum_cleaners_sold_at_red_house + vacuum_cleaners_left

    result = vacuum_cleaners_initial

    return result


 Executed result: 14
[EXP] 14: [success_rate]: True, [output]: def solution():
    students_initial = 20

    students_enrolled_contemporary = 0.2 * students_initial

    students_remaining = students_initial - students_enrolled_contemporary

    students_enrolled_jazz = 0.25 * students_remaining

    students_enrolled_hip_hop = students_remaining - students_enrolled_jazz

    percentage_enrolled_hip_hop = (students_enrolled_hip_hop / students_initial) * 100

    result = percentage_enrolled_hip_hop

    return result


 Executed result: 60.0
[EXP] 15: [success_rate]: False, [output]: def solution():
    jewelry_cost = 5000

    electronic_gadgets_cost = 8000

    jewelry_profit = jewelry_cost * 0.025

    electronic_gadgets_profit = electronic_gadgets_cost * 0.012

    profit_jewelry = jewelry_cost + jewelry_profit

    profit_electronic_gadgets = electronic_gadgets_cost + electronic_gadgets_profit

    if profit_jewelry > profit_electronic_gadgets:

        result = profit_jewelry

    else:

        result = profit_electronic_gadgets

    return result


 Executed result: 8096.0
[EXP] 16: [success_rate]: False, [output]: def solution():
    distance_traveled_per_day = 80

    north_distance = 150

    total_distance = distance_traveled_per_day * 2 + north_distance

    distance_per_train = total_distance / 2

    result = distance_per_train

    return result


 Executed result: 155.0
[EXP] 17: [success_rate]: True, [output]: def solution():
    hourly_wage_teacher = 20

    hourly_wage_coach = 30

    hours_per_week_teacher = 35

    hours_per_week_coach = 15

    weeks_per_year = 50

    total_hours_per_year_teacher = hours_per_week_teacher * weeks_per_year

    total_hours_per_year_coach = hours_per_week_coach * weeks_per_year

    total_salary_per_year_teacher = total_hours_per_year_teacher * hourly_wage_teacher

    total_salary_per_year_coach = total_hours_per_year_coach * hourly_wage_coach

    total_salary_per_year = total_salary_per_year_teacher + total_salary_per_year_coach

    result = total_salary_per_year

    return result


 Executed result: 57500
[EXP] 18: [success_rate]: True, [output]: def solution():
    eggs_per_omelet = 3

    omelets_per_day = 1

    days_per_week = 7

    weeks = 4

    total_omelets = omelets_per_day * days_per_week * weeks

    total_eggs = total_omelets * eggs_per_omelet

    dozen_eggs = total_eggs / 12

    result = dozen_eggs

    return result


 Executed result: 7.0
[EXP] 19: [success_rate]: False, [output]: def solution():
    distance_walked = 4 + 2

    time_taken = 1 + 1

    speed = distance_walked / time_taken

    remaining_distance = 12 - distance_walked

    remaining_time = remaining_distance / speed

    result = remaining_distance / remaining_time

    return result


 Executed result: 3.0
[EXP] 20: [success_rate]: False, [output]: def solution():
    orange_drink = 10

    orange_water = 2 / 3 * orange_drink

    pineapple_drink = 15

    pineapple_water = 3 / 5 * pineapple_drink

    total_drink = orange_drink + pineapple_drink - 1

    total_water = orange_water + pineapple_water

    result = total_water

    return result


 Executed result: 15.666666666666666
[EXP] 21: [success_rate]: False, [output]: def solution():
    samantha_age = 31

    samantha_age_diff = samantha_age - 6

    raymond_age = samantha_age_diff

    raymond_age_at_birth = raymond_age - 23

    result = raymond_age_at_birth

    return result


 Executed result: 2
[EXP] 22: [success_rate]: True, [output]: def solution():
    customers = 8

    first_customers = 3

    second_customers = 2

    last_customers = 3

    total_customers = first_customers + second_customers + last_customers

    total_dvds_sold = (1 * first_customers) + (2 * second_customers)

    result = total_dvds_sold

    return result


 Executed result: 7
[EXP] 23: [success_rate]: False, [output]: def solution():
    candle_initial_length = 100

    time_burned = 4  # 4 hours from 1:00 PM to 5:00 PM

    candle_shortened_per_hour = 2

    candle_shortened = time_burned * candle_shortened_per_hour

    candle_length_left = candle_initial_length - candle_shortened

    result = candle_length_left

    return result


 Executed result: 92
[EXP] 24: [success_rate]: True, [output]: def solution():
    price_after_discount = 19.50

    discount = 0.25

    original_price = price_after_discount / (1 - discount)

    result = original_price

    return result


 Executed result: 26.0
[EXP] 25: [success_rate]: True, [output]: def solution():
    total_cost = 50

    cost_of_chicken_meal = 12

    cost_of_milk = 5 * 3

    cost_of_apples = 4 * 1.5

    total_cost_of_food = cost_of_chicken_meal + cost_of_milk + cost_of_apples

    cost_of_pizza = total_cost - total_cost_of_food

    number_of_pizza_boxes = cost_of_pizza / 8.5

    result = number_of_pizza_boxes

    return result


 Executed result: 2.0
[EXP] 26: [success_rate]: True, [output]: def solution():
    shorts_cost = 16.50

    shorts_bought = 3

    shorts_total = shorts_cost * shorts_bought

    pants_cost = 22.50

    pants_bought = 3

    pants_total = pants_cost * pants_bought

    shoes_cost = 42

    shoes_bought = 3

    shoes_total = shoes_cost * shoes_bought

    total_cost = shorts_total + pants_total + shoes_total

    result = total_cost

    return result


 Executed result: 243.0
[EXP] 27: [success_rate]: False, [output]: def solution():
    servings_per_carton = 15

    cost_per_carton = 4.0

    servings_per_day = 1

    days = 60

    total_servings = servings_per_day * days

    total_cartons = math.ceil(total_servings / servings_per_carton)

    total_cost = total_cartons * cost_per_carton

    result = total_cost

    return result


 Executed result: Error: return error, fail to execute
[EXP] 28: [success_rate]: True, [output]: def solution():
    total_distance = 60

    first_stop_distance = 20

    second_stop_distance = total_distance - 15

    distance_between_stops = second_stop_distance - first_stop_distance

    result = distance_between_stops

    return result


 Executed result: 25
[EXP] 29: [success_rate]: True, [output]: def solution():
    cost_of_highheels1 = 33

    cost_of_highheels2 = 2 * cost_of_highheels1

    total_cost_of_highheels = cost_of_highheels1 + cost_of_highheels2

    cost_of_boots = total_cost_of_highheels + 5

    result = cost_of_boots

    return result


 Executed result: 104
[EXP] 30: [success_rate]: False, [output]: def solution():
    ages_ratio = 7 / 11

    total_age_now = 162

    allen_age_now = total_age_now * (11 / (7 + 11))

    allen_age_in_10_years = allen_age_now + 10

    result = allen_age_in_10_years

    return result


 Executed result: 109.00000000000001
[EXP] 31: [success_rate]: True, [output]: def solution():
    guess1 = 80

    guess2 = int(guess1 / 2) + 20

    guess3 = guess1 + (guess1 * 0.25)

    average_guess = (guess1 + guess2 + guess3) / 3

    result = average_guess

    return result


 Executed result: 80.0
[EXP] 32: [success_rate]: True, [output]: def solution():
    dogs = 10

    hours_per_day = 0.5

    hours_per_week = dogs * hours_per_day * 7

    result = hours_per_week

    return result


 Executed result: 35.0
[EXP] 33: [success_rate]: False, [output]: def solution():
    total_coins = 110

    gold_coins = total_coins / 2

    result = gold_coins

    return result


 Executed result: 55.0
[EXP] 34: [success_rate]: True, [output]: def solution():
    raymond_jewels = 40

    aaron_jewels = (raymond_jewels / 2) + 5

    siobhan_jewels = aaron_jewels - 2

    result = siobhan_jewels

    return result


 Executed result: 23.0
[EXP] 35: [success_rate]: True, [output]: def solution():
    minutes_played = 40

    minutes_first_half = 20

    points_first_half = 4

    points_second_half = (1 + 0.25) * points_first_half

    total_points = points_first_half + points_second_half

    result = total_points

    return result


 Executed result: 9.0
[EXP] 36: [success_rate]: True, [output]: def solution():
    yogurts_per_day = 2

    yogurts_per_package = 4

    cost_per_package = 5.00

    days = 30

    yogurts_consumed = yogurts_per_day * days

    packages_consumed = yogurts_consumed // yogurts_per_package

    cost = packages_consumed * cost_per_package

    result = cost

    return result


 Executed result: 75.0
[EXP] 37: [success_rate]: False, [output]: def solution():
    lego_sets_initial = 13

    price_per_lego_set = 15

    total_money_received = lego_sets_initial * price_per_lego_set

    video_games_cost = 8 * 20

    total_spent = video_games_cost

    money_left = total_money_received - total_spent

    if money_left < 0:

        return 0


 Executed result: None
[EXP] 38: [success_rate]: False, [output]: def solution():
    miles_per_week = 60

    days_per_week = 3

    hours_per_day = [3, 1.5, 1.5]

    total_hours = sum(hours_per_day)

    speed = miles_per_week / (days_per_week * total_hours)

    result = speed

    return result


 Executed result: 3.3333333333333335
[EXP] 39: [success_rate]: True, [output]: def solution():
    speed_skipping = 3

    speed_running = speed_skipping * 2

    speed_walking = speed_running / 4

    time_running = 6 * 1/3

    time_walking = 6 - time_running

    distance_running = speed_running * time_running

    distance_walking = speed_walking * time_walking

    distance_total = distance_running + distance_walking

    result = distance_total

    return result


 Executed result: 18.0
[EXP] 40: [success_rate]: True, [output]: def solution():
    suzy_iphone_age = 1

    ben_iphone_age = suzy_iphone_age * 2

    brandon_iphone_age = ben_iphone_age * 4

    result = brandon_iphone_age

    return result


 Executed result: 8
[EXP] 41: [success_rate]: False, [output]: def solution():
    dragon_range = 1000

    javelin_range_without_gemstone = 400

    javelin_range_with_gemstone = javelin_range_without_gemstone * 3

    distance_from_dragon = javelin_range_with_gemstone + dragon_range

    result = distance_from_dragon

    return result


 Executed result: 2200
[EXP] 42: [success_rate]: True, [output]: def solution():
    pies_initial = 5

    pieces_per_pie = 8

    total_pieces = pies_initial * pieces_per_pie

    pieces_taken = total_pieces - 14

    result = pieces_taken

    return result


 Executed result: 26
[EXP] 43: [success_rate]: True, [output]: def solution():
    daily_calorie_target = 2000

    daily_calories_consumed = 1800

    remaining_calories = daily_calorie_target - daily_calories_consumed

    calories_per_serving = 250

    servings_per_bag = 5

    total_calories_per_bag = calories_per_serving * servings_per_bag

    grams_per_serving = 300 / servings_per_bag

    calories_per_gram = calories_per_serving / grams_per_serving

    grams_to_eat = remaining_calories / calories_per_gram

    result = grams_to_eat

    return result


 Executed result: 48.0
[EXP] 44: [success_rate]: False, [output]: def solution():
    beeswax_cost = 10

    candles_per_pound = 10

    profit_per_candle = 2

    profit_per_pound = profit_per_candle * candles_per_pound

    beeswax_cost_per_candle = beeswax_cost / candles_per_pound

    total_profit = (profit_per_pound - beeswax_cost_per_candle) * 20

    result = total_profit

    return result


 Executed result: 380.0
[EXP] 45: [success_rate]: True, [output]: def solution():
    articles_monday = 5

    articles_tuesday = articles_monday + (articles_monday * 2/5)

    articles_wednesday = articles_tuesday * 2

    total_articles = articles_monday + articles_tuesday + articles_wednesday

    time_per_article = 4

    total_hours = total_articles * time_per_article

    result = total_hours

    return result


 Executed result: 104.0
[EXP] 46: [success_rate]: False, [output]: def solution():
    post_it_notes_initial = 80

    post_it_notes_used = 220

    post_it_notes_remaining = 23

    post_it_notes_in_package = post_it_notes_remaining + post_it_notes_used

    result = post_it_notes_in_package

    return result


 Executed result: 243
[EXP] 47: [success_rate]: True, [output]: def solution():
    blue_ties_cost = 40

    blue_ties_spent = 200 / blue_ties_cost

    red_ties_spent = 2 * blue_ties_spent

    red_ties_cost = blue_ties_cost * 1.5

    total_ties_spent = red_ties_spent * red_ties_cost + blue_ties_spent * blue_ties_cost

    result = total_ties_spent

    return result


 Executed result: 800.0
[EXP] 48: [success_rate]: True, [output]: def solution():
    wire_initial = 4

    wire_length_per_piece = 0.5  # 6 inches = 0.5 feet

    wire_pieces = wire_initial / wire_length_per_piece

    result = wire_pieces

    return result


 Executed result: 8.0
[EXP] 49: [success_rate]: True, [output]: def solution():
    floors = 15

    units_per_floor = 8

    total_units = floors * units_per_floor

    occupied_units = (3 / 4) * total_units

    unoccupied_units = total_units - occupied_units

    result = unoccupied_units

    return result


 Executed result: 30.0
[EXP] 50: [success_rate]: True, [output]: def solution():
    eggs_per_day = 252

    eggs_per_week = eggs_per_day * 7

    eggs_per_dozen = 12

    price_per_dozen = 2

    total_eggs_per_week = eggs_per_week

    total_dozen_per_week = total_eggs_per_week // eggs_per_dozen

    total_money_per_week = total_dozen_per_week * price_per_dozen

    result = total_money_per_week

    return result


 Executed result: 294
[EXP] 51: [success_rate]: False, [output]: def solution():
    time_start = 1

    time_end = 4

    time_hours = time_end - time_start

    distance_to_travel = 3 * 10  # 3 hours, 10 mph

    distance_back = distance_to_travel

    time_back = distance_back / 6  # 6 mph

    total_time = time_hours + time_back

    result = total_time

    return result


 Executed result: 8.0
[EXP] 52: [success_rate]: True, [output]: def solution():
    weight_removed = 15

    comic_book_weight = 1/4

    comic_books_removed = 30

    weight_removed_by_comic_books = comic_books_removed * comic_book_weight

    weight_left_to_remove = weight_removed - weight_removed_by_comic_books

    toy_weight = 1/2

    toys_removed = weight_left_to_remove / toy_weight

    result = toys_removed

    return result


 Executed result: 15.0
[EXP] 53: [success_rate]: True, [output]: def solution():
    revenue_thursday = (6 * 60) + (4 * 40)

    revenue_friday = 12 * 40

    revenue_difference = revenue_thursday - revenue_friday

    result = revenue_difference

    return result


 Executed result: 40
[EXP] 54: [success_rate]: True, [output]: def solution():
    kittens_adopted = 7

    kittens_patchy = 3 * 7

    kittens_trixie = 12

    total_kittens = kittens_adopted + kittens_patchy + kittens_trixie

    result = total_kittens

    return result


 Executed result: 40
[EXP] 55: [success_rate]: True, [output]: def solution():
    lollipops_initial = 30

    lollipops_eaten = 2

    lollipops_left = lollipops_initial - lollipops_eaten

    lollipops_per_bag = 2

    bags = lollipops_left // lollipops_per_bag

    result = bags

    return result


 Executed result: 14
[EXP] 56: [success_rate]: True, [output]: def solution():
    money_initial = 42

    ticket_cost = 7

    popcorn_cost = 7

    total_cost = ticket_cost + popcorn_cost

    times_he_can_go = money_initial // total_cost

    result = times_he_can_go

    return result


 Executed result: 3
[EXP] 57: [success_rate]: True, [output]: def solution():
    bridge_weight_limit = 5000

    truck_weight_empty = 3755

    box_weight = 15

    max_boxes = (bridge_weight_limit - truck_weight_empty) // box_weight

    result = max_boxes

    return result


 Executed result: 83
[EXP] 58: [success_rate]: True, [output]: def solution():
    final_bill = 40.00

    fee = 0.25

    delivery_fee = 3.00

    tip = 4.00

    bill_with_fee = final_bill * (1 + fee)

    bill_with_fee_and_delivery = bill_with_fee + delivery_fee

    final_price = bill_with_fee_and_delivery + tip

    result = final_price

    return result


 Executed result: 57.0
[EXP] 59: [success_rate]: True, [output]: def solution():
    clusters = 6

    fruits_per_cluster = 20

    individual_fruits = 67

    total_fruits_clusters = clusters * fruits_per_cluster

    total_fruits = total_fruits_clusters + individual_fruits

    result = total_fruits

    return result


 Executed result: 187
[EXP] 60: [success_rate]: True, [output]: def solution():
    oranges_total = 25

    oranges_bad = 1

    oranges_unripe = int(20 / 100 * oranges_total)

    oranges_sour = 2

    oranges_good = oranges_total - oranges_bad - oranges_unripe - oranges_sour

    result = oranges_good

    return result


 Executed result: 17
[EXP] 61: [success_rate]: True, [output]: def solution():
    material_cost = 500

    jeweler_cost = 800

    total_cost = material_cost + jeweler_cost

    insurance_cost = total_cost * 0.1

    total_paid = total_cost + insurance_cost

    result = total_paid

    return result


 Executed result: 1430.0
[EXP] 62: [success_rate]: False, [output]: def solution():
    annual_pension = 50000

    years_worked = 30

    years_entitled = 10

    entitled_annual_pension = annual_pension * (years_entitled / 100)

    result = annual_pension - entitled_annual_pension

    return result


 Executed result: 45000.0
[EXP] 63: [success_rate]: True, [output]: def solution():
    monthly_charge = 140

    half_year = 6

    full_year = 12

    first_half = monthly_charge * half_year

    second_half = monthly_charge * (1 - 0.1) * half_year

    total_amount = first_half + second_half

    result = total_amount

    return result


 Executed result: 1596.0
[EXP] 64: [success_rate]: False, [output]: def solution():
    miles_driven = 100

    gallons_consumed = 4

    total_gallons_in_tank = 12

    total_gallons_available = total_gallons_in_tank - gallons_consumed

    miles_per_gallon = miles_driven / gallons_consumed

    miles_on_full_tank = total_gallons_available * miles_per_gallon

    result = miles_on_full_tank

    return result


 Executed result: 200.0
[EXP] 65: [success_rate]: False, [output]: def solution():
    hours_watch_tv = 2

    hours_read = hours_watch_tv / 2

    total_hours_per_week = hours_watch_tv + hours_read

    weeks = 4

    total_hours = total_hours_per_week * weeks

    result = total_hours

    return result


 Executed result: 12.0
[EXP] 66: [success_rate]: True, [output]: def solution():
    schools = 4

    girls_players_per_school = 5

    boys_players_per_school = 5

    coaches_per_school = 2

    total_players = schools * (girls_players_per_school + boys_players_per_school)

    total_coaches = schools * coaches_per_school

    total_people = total_players + total_coaches

    result = total_people

    return result


 Executed result: 48
[EXP] 67: [success_rate]: True, [output]: def solution():
    diamonds = 175

    rubies = diamonds - 35

    emeralds = rubies * 2

    total_gems = diamonds + rubies + emeralds

    result = total_gems

    return result


 Executed result: 595
[EXP] 68: [success_rate]: True, [output]: def solution():
    girls = 60

    boys = girls * 2

    total_students = girls + boys

    students_per_teacher = 5

    teachers = total_students / students_per_teacher

    result = teachers

    return result


 Executed result: 36.0
[EXP] 69: [success_rate]: True, [output]: def solution():
    weekly_allowance = 5

    weeks = 8

    total_money = 100

    money_initial = total_money - (weekly_allowance * weeks)

    result = money_initial

    return result


 Executed result: 60
[EXP] 70: [success_rate]: True, [output]: def solution():
    dance_classes_per_day = 5

    days_in_a_week = 5

    classes_on_saturday = 8

    total_classes = dance_classes_per_day * days_in_a_week + classes_on_saturday

    students_per_class = 15

    cost_per_student = 15.00

    total_students = total_classes * students_per_class

    total_money = total_students * cost_per_student

    result = total_money

    return result


 Executed result: 7425.0
[EXP] 71: [success_rate]: True, [output]: def solution():
    recipe1_instructions = 20

    recipe2_instructions = 2 * recipe1_instructions

    total_instructions = recipe1_instructions + recipe2_instructions

    result = total_instructions

    return result


 Executed result: 60
[EXP] 72: [success_rate]: True, [output]: def solution():
    brownies_sold = 43

    cheesecakes_sold = 23

    price_per_brownie = 3

    price_per_cheesecake = 4

    money_from_brownies = brownies_sold * price_per_brownie

    money_from_cheesecakes = cheesecakes_sold * price_per_cheesecake

    total_money = money_from_brownies + money_from_cheesecakes

    result = total_money

    return result


 Executed result: 221
[EXP] 73: [success_rate]: True, [output]: def solution():
    cell_phones = 5

    cost_per_cell_phone = 150

    total_cost = cell_phones * cost_per_cell_phone

    interest = total_cost * 0.02

    total_cost_with_interest = total_cost + interest

    monthly_installment = total_cost_with_interest / 3

    result = monthly_installment

    return result


 Executed result: 255.0
[EXP] 74: [success_rate]: True, [output]: def solution():
    marigolds_sold = 12

    petunias_sold = 9

    begonias_sold = 17

    marigolds_price = 2.74

    petunias_price = 1.87

    begonias_price = 2.12

    marigolds_revenue = marigolds_sold * round(marigolds_price)

    petunias_revenue = petunias_sold * round(petunias_price)

    begonias_revenue = begonias_sold * round(begonias_price)

    total_revenue = marigolds_revenue + petunias_revenue + begonias_revenue

    result = total_revenue

    return result


 Executed result: 88
[EXP] 75: [success_rate]: False, [output]: def solution():
    top_level = 16

    levels = 4

    average = top_level / (2 ** (levels - 1))

    result = average

    return result


 Executed result: 2.0
[EXP] 76: [success_rate]: True, [output]: def solution():
    cups_per_day_initial = 1

    days_initial = 180

    cups_per_day_later = 2

    cups_per_day_total = cups_per_day_initial * days_initial + cups_per_day_later * (365 - days_initial)

    cups_per_bag = 110

    bags_needed = cups_per_day_total / cups_per_bag

    result = bags_needed

    return result


 Executed result: 5.0
[EXP] 77: [success_rate]: True, [output]: def solution():
    sarah_laundry = 400

    david_laundry = sarah_laundry / 4

    raymond_laundry = sarah_laundry / 2

    difference = raymond_laundry - david_laundry

    result = difference

    return result


 Executed result: 100.0
[EXP] 78: [success_rate]: False, [output]: def solution():
    packages_of_3 = 18 // 3

    packages_of_3_cost = packages_of_3 * 2.5

    packages_of_2 = 18 // 2

    packages_of_2_cost = packages_of_2 * 1

    if packages_of_3_cost < packages_of_2_cost:

        saved = packages_of_2_cost - packages_of_3_cost

    else:

        saved = 0

    result = saved

    return result


 Executed result: 0
[EXP] 79: [success_rate]: True, [output]: def solution():
    grooming_cost = 100

    discount = 0.3

    discount_amount = grooming_cost * discount

    discounted_cost = grooming_cost - discount_amount

    result = discounted_cost

    return result


 Executed result: 70.0
[EXP] 80: [success_rate]: True, [output]: def solution():
    water_initial = 24

    water_taken_by_girls = 2 * (1/6) * water_initial

    water_taken_by_boy = 6

    water_left = water_initial - water_taken_by_girls - water_taken_by_boy

    result = water_left

    return result


 Executed result: 10.0
[EXP] 81: [success_rate]: True, [output]: def solution():
    stickers_initial = 10

    stickers_bought = 21

    stickers_birthday = 23

    total_stickers = stickers_initial + stickers_bought + stickers_birthday

    stickers_given_to_sister = 9

    stickers_used_for_card = 28

    stickers_left = total_stickers - stickers_given_to_sister - stickers_used_for_card

    result = stickers_left

    return result


 Executed result: 17
[EXP] 82: [success_rate]: True, [output]: def solution():
    grace_weight = 125

    alex_weight = 4 * grace_weight - 2

    combined_weight = grace_weight + alex_weight

    result = combined_weight

    return result


 Executed result: 623
[EXP] 83: [success_rate]: True, [output]: def solution():
    rose_bushes = 3

    roses_per_bush = 25

    thorns_per_rose = 8

    total_thorns = rose_bushes * roses_per_bush * thorns_per_rose

    result = total_thorns

    return result


 Executed result: 600
[EXP] 84: [success_rate]: True, [output]: def solution():
    total_games = 22

    difference = 8

    games_lost = (total_games - difference) / 2

    games_won = total_games - games_lost

    result = games_won

    return result


 Executed result: 15.0
[EXP] 85: [success_rate]: True, [output]: def solution():
    years_traveled = 34 - 23

    vacations_per_year = 4

    blocks_per_year = 1

    total_blocks = years_traveled * vacations_per_year * blocks_per_year

    result = total_blocks

    return result


 Executed result: 44
[EXP] 86: [success_rate]: True, [output]: def solution():
    alarm_rings_first_time = 4

    alarm_rings_second_time = alarm_rings_first_time * 3

    alarm_rings_third_time = alarm_rings_second_time // 2

    total_alarm_rings = alarm_rings_first_time + alarm_rings_second_time + alarm_rings_third_time

    result = total_alarm_rings

    return result


 Executed result: 22
[EXP] 87: [success_rate]: False, [output]: def solution():
    initial_salary = 600

    increase_rate = 0.10

    years_of_service = 5

    years_to_add = 3

    annual_salary = initial_salary * (1 + increase_rate) ** years_of_service

    for _ in range(years_to_add):

        annual_salary = annual_salary * (1 + increase_rate)

    result = annual_salary

    return result


 Executed result: 1286.1532860000007
[EXP] 88: [success_rate]: False, [output]: def solution():
    marilyn_sales = 10 * harald_sales

    total_sales = marilyn_sales + harald_sales

    harald_sales = total_sales / 11

    result = harald_sales

    return result


 Executed result: Error: return error, fail to execute
[EXP] 89: [success_rate]: True, [output]: def solution():
    invited_guests = 16

    gift_bags_per_guest = 0.75

    total_gift_bags = invited_guests * gift_bags_per_guest

    cost_per_gift_bag = 2

    total_cost = total_gift_bags * cost_per_gift_bag

    result = total_cost

    return result


 Executed result: 24.0
[EXP] 90: [success_rate]: True, [output]: def solution():
    adults = 20

    children = 5

    adult_eating_amount = 10

    child_eating_amount = adult_eating_amount / 2

    total_eating_amount = (adults * adult_eating_amount) + (children * child_eating_amount)

    result = total_eating_amount

    return result


 Executed result: 225.0
[EXP] 91: [success_rate]: True, [output]: def solution():
    cindy_pets = 4

    marcia_pets = cindy_pets + 2

    jan_pets = marcia_pets * 3

    total_pets = cindy_pets + marcia_pets + jan_pets

    result = total_pets

    return result


 Executed result: 28
[EXP] 92: [success_rate]: True, [output]: def solution():
    james_age = 10

    corey_age = james_age + 1

    amy_age = corey_age - 2

    jackson_age = amy_age - 5

    result = jackson_age

    return result


 Executed result: 4
[EXP] 93: [success_rate]: False, [output]: def solution():
    lee_time = 38

    gerald_improvement = 0.1

    gerald_original_time = lee_time - 2

    gerald_improved_time = gerald_original_time * (1 + gerald_improvement)

    result = gerald_improved_time

    return result


 Executed result: 39.6
[EXP] 94: [success_rate]: True, [output]: def solution():
    dogs = 60

    cats = dogs * 2

    rabbits = cats + dogs - 12

    total_pets = dogs + cats + rabbits

    result = total_pets

    return result


 Executed result: 348
[EXP] 95: [success_rate]: True, [output]: def solution():
    total_students = 200

    boys = 2/5 * total_students

    girls = total_students - boys

    girls_in_girl_scout = 2/3 * girls

    girls_not_in_girl_scout = girls - girls_in_girl_scout

    result = girls_not_in_girl_scout

    return result


 Executed result: 40.0
[EXP] 96: [success_rate]: True, [output]: def solution():
    harry_hours = 9

    james_hours = harry_hours * (2/3)

    harry_sleep_more = harry_hours - james_hours

    result = harry_sleep_more

    return result


 Executed result: 3.0
[EXP] 97: [success_rate]: True, [output]: def solution():
    can_volume = 16

    tomatoes_per_can = 3

    sauce_volume = 32

    volume_reduction = 0.5

    total_cans = sauce_volume / (can_volume * volume_reduction)

    total_tomatoes = total_cans * tomatoes_per_can

    result = total_tomatoes

    return result


 Executed result: 12.0
[EXP] 98: [success_rate]: True, [output]: def solution():
    cars_initial = 30

    cars_exit = 5

    cars_left = cars_initial - cars_exit

    cars_driven_first_15 = cars_left - 20

    result = cars_driven_first_15

    return result


 Executed result: 5
[EXP] 99: [success_rate]: True, [output]: def solution():
    plants_received = 18

    plants_initial = 40 * 2

    plants_given = 40

    plants_left = plants_received + plants_initial - plants_given

    result = plants_left

    return result


 Executed result: 58
