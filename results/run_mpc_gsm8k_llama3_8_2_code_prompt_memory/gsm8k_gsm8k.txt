[EXP] 0: [success_rate]: True, [output]: def solution():
    eggs_per_day = 16

    eggs_eaten_for_breakfast = 3

    eggs_used_for_muffins = 4

    total_eggs_sold = eggs_per_day - eggs_eaten_for_breakfast - eggs_used_for_muffins

    revenue_per_day = total_eggs_sold * 2

    result = revenue_per_day

    return result


 Executed result: 18
[EXP] 1: [success_rate]: True, [output]: def solution():
    blue_fiber = 2

    white_fiber = blue_fiber / 2

    total_fiber = blue_fiber + white_fiber

    result = total_fiber

    return result


 Executed result: 3.0
[EXP] 2: [success_rate]: False, [output]: def solution():
    house_price = 80000

    repairs = 50000

    total_cost = house_price + repairs

    increased_price = total_cost * 3.5 / 2  # 150% increase

    profit = increased_price - total_cost

    result = profit

    return result


 Executed result: 97500.0
[EXP] 3: [success_rate]: True, [output]: def solution():
    sprints_per_week = 3

    sprints_per_sprint = 3

    meters_per_sprint = 60

    total_meters_per_week = sprints_per_week * sprints_per_sprint * meters_per_sprint

    result = total_meters_per_week

    return result


 Executed result: 540
[EXP] 4: [success_rate]: False, [output]: def solution():
    chickens = 20

    morning_feed = 15

    afternoon_feed = 25

    morning_feed_per_chicken = morning_feed / chickens

    afternoon_feed_per_chicken = afternoon_feed / chickens

    total_feed_per_chicken = morning_feed_per_chicken + afternoon_feed_per_chicken

    final_feed = total_feed_per_chicken * chickens

    result = final_feed

    return result


 Executed result: 40.0
[EXP] 5: [success_rate]: True, [output]: def solution():
    cost_per_glass = 5

    discounted_cost = 0.6 * cost_per_glass

    total_cost = 0

    for i in range(16):

        if i % 2 == 0:

            total_cost += cost_per_glass

        else:

            total_cost += discounted_cost

    result = total_cost

    return result


 Executed result: 64.0
[EXP] 6: [success_rate]: True, [output]: def solution():
    seattle_sheep = 20

    charleston_sheep = seattle_sheep * 4

    toulouse_sheep = charleston_sheep * 2

    total_sheep = seattle_sheep + charleston_sheep + toulouse_sheep

    result = total_sheep

    return result


 Executed result: 260
[EXP] 7: [success_rate]: False, [output]: def solution():
    file_size_GB = 200

    download_rate_GB_per_minute = 2

    file_size_GB_after_restarting = file_size_GB - 0.4 * file_size_GB

    time_to_download_after_restarting_minutes = file_size_GB_after_restarting / download_rate_GB_per_minute

    total_time_minutes = time_to_download_after_restarting_minutes + 20

    result = total_time_minutes

    return result


 Executed result: 80.0
[EXP] 8: [success_rate]: False, [output]: def solution():
    distance_driven = 0

    distance_driven += 3 * 60  # 3 hours * 60 mph

    distance_driven += 2 * 0  # 2 hours at standstill

    distance_driven += 0.5 * 30  # 0.5 hour at 30 mph

    distance_driven += (4 - 2.5) * 80  # 1.5 hours at 80 mph

    result = distance_driven

    return result


 Executed result: 315.0
[EXP] 9: [success_rate]: True, [output]: def solution():
    regular_hours = 40

    overtime_hours = 45 - regular_hours

    regular_earnings = regular_hours * 10

    overtime_earnings = overtime_hours * 10 * 1.2

    total_earnings = regular_earnings + overtime_earnings

    result = total_earnings

    return result


 Executed result: 460.0
[EXP] 10: [success_rate]: True, [output]: def solution():
    downloads_month1 = 60

    downloads_month2 = downloads_month1 * 3

    downloads_month3 = downloads_month2 * 0.7

    total_downloads = downloads_month1 + downloads_month2 + downloads_month3

    result = total_downloads

    return result


 Executed result: 366.0
[EXP] 11: [success_rate]: True, [output]: def solution():
    donuts_cost = 68

    donuts_number = 3

    donuts_total = donuts_cost * donuts_number

    cupcakes_cost = 80

    cupcakes_number = 2

    cupcakes_total = cupcakes_cost * cupcakes_number

    cheesecakes_cost = 55

    cheesecakes_number = 6

    cheesecakes_total = cheesecakes_cost * cheesecakes_number

    total_cost = donuts_total + cupcakes_total + cheesecakes_total

    result = total_cost

    return result


 Executed result: 694
[EXP] 12: [success_rate]: False, [output]: def solution():
    cost_to_plant = 90

    lemons_per_year = 7

    price_per_lemon = 1.5

    cost_per_year = 3

    total_initial_cost = cost_to_plant

    total_revenue = 0

    year = 0

    while total_revenue < total_initial_cost:

        total_revenue += lemons_per_year * price_per_lemon

        total_revenue -= cost_per_year

        year += 1

    result = year

    return result


 Executed result: 12
[EXP] 13: [success_rate]: False, [output]: def solution():
    vacuum_cleaners_left = 5

    vacuum_cleaners_sold_green_house = vacuum_cleaners_left / 3

    vacuum_cleaners_sold_red_house = 2

    vacuum_cleaners_sold_orange_house = vacuum_cleaners_left - (vacuum_cleaners_sold_green_house + vacuum_cleaners_sold_red_house)

    vacuum_cleaners_initial = vacuum_cleaners_sold_green_house + vacuum_cleaners_sold_red_house + vacuum_cleaners_sold_orange_house

    result = vacuum_cleaners_initial

    return result


 Executed result: 5.0
[EXP] 14: [success_rate]: True, [output]: def solution():
    total_students = 20

    contemporary_students = 0.2 * total_students

    remaining_students = total_students - contemporary_students

    jazz_students = 0.25 * remaining_students

    hip_hop_students = remaining_students - jazz_students

    hip_hop_percentage = (hip_hop_students / total_students) * 100

    result = hip_hop_percentage

    return result


 Executed result: 60.0
[EXP] 15: [success_rate]: True, [output]: def solution():
    jewelry_value = 5000

    jewelry_increase = 2.5 / 100

    jewelry_new_value = jewelry_value * (1 + jewelry_increase)

    electronic_gadgets_value = 8000

    electronic_gadgets_increase = 1.2 / 100

    electronic_gadgets_new_value = electronic_gadgets_value * (1 + electronic_gadgets_increase)

    jewelry_profit = jewelry_new_value - jewelry_value

    electronic_gadgets_profit = electronic_gadgets_new_value - electronic_gadgets_value

    if jewelry_profit > electronic_gadgets_profit:

        result = jewelry_profit

    elif electronic_gadgets_profit > jewelry_profit:

    return result


 Executed result: 125.0
[EXP] 16: [success_rate]: False, [output]: def solution():
    west_miles = 80

    north_miles = 150

    train_distance_west = 2 * west_miles

    train_distance_north = 2 * north_miles

    total_distance = train_distance_west + train_distance_north

    result = total_distance

    return result


 Executed result: 460
[EXP] 17: [success_rate]: True, [output]: def solution():
    hourly_wage_teacher = 20

    hourly_wage_coach = 30

    hours_per_week_teacher = 35

    hours_per_week_coach = 15

    weeks_per_year = 50

    total_hours_per_year_teacher = hours_per_week_teacher * weeks_per_year

    total_hours_per_year_coach = hours_per_week_coach * weeks_per_year

    annual_salary_teacher = total_hours_per_year_teacher * hourly_wage_teacher

    annual_salary_coach = total_hours_per_year_coach * hourly_wage_coach

    total_annual_salary = annual_salary_teacher + annual_salary_coach

    result = total_annual_salary

    return result


 Executed result: 57500
[EXP] 18: [success_rate]: True, [output]: def solution():
    eggs_per_day = 3

    days_in_a_week = 7

    weeks = 4

    eggs_per_week = eggs_per_day * days_in_a_week

    total_eggs = eggs_per_week * weeks

    dozen_eggs = total_eggs // 12

    result = dozen_eggs

    return result


 Executed result: 7
[EXP] 19: [success_rate]: False, [output]: def solution():
    total_distance = 12

    distance_walked = 4 + 2

    time_taken = 1 + 1

    average_speed = 4

    speed_remaining = (total_distance - distance_walked) / (time_taken - 2)

    result = speed_remaining

    return result


 Executed result: Error: return error, fail to execute
[EXP] 20: [success_rate]: True, [output]: def solution():
    orange_drink_initial = 10

    orange_drink_water = orange_drink_initial * 2 / 3

    orange_drink_spilled = 1

    orange_drink_left = orange_drink_initial - orange_drink_spilled

    pineapple_drink = 15

    pineapple_drink_water = pineapple_drink * 3 / 5

    total_drink = orange_drink_left + pineapple_drink

    total_drink_water = orange_drink_water + pineapple_drink_water

    result = total_drink_water

    return result


 Executed result: 15.666666666666668
[EXP] 21: [success_rate]: False, [output]: def solution():
    raymond_age_samantha = 31

    age_difference = raymond_age_samantha - 6

    raymond_age = age_difference

    raymond_son_birth_age = 23

    raymond_son_birth_year = raymond_age - raymond_son_birth_age

    result = raymond_son_birth_year

    return result


 Executed result: 2
[EXP] 22: [success_rate]: True, [output]: def solution():
    customers_tuesday = 8

    first_customers = 3

    first_dvds_sold = 1 * first_customers

    next_customers = 2

    next_dvds_sold = 2 * next_customers

    no_dvds_sold = 0

    total_dvds_sold = first_dvds_sold + next_dvds_sold + no_dvds_sold

    result = total_dvds_sold

    return result


 Executed result: 7
[EXP] 23: [success_rate]: False, [output]: def solution():
    candle_initial = 10  # assuming the candle is 10 centimeters tall initially

    hours_burned = 4  # 5:00 PM - 1:00 PM = 4 hours

    candle_melt_per_hour = 2

    candle_melt = hours_burned * candle_melt_per_hour

    candle_left = candle_initial - candle_melt

    result = candle_left

    return result


 Executed result: 2
[EXP] 24: [success_rate]: True, [output]: def solution():
    discount_price = 19.5

    discount_percentage = 25

    discount_rate = discount_percentage / 100

    original_price = discount_price / (1 - discount_rate)

    result = original_price

    return result


 Executed result: 26.0
[EXP] 25: [success_rate]: True, [output]: def solution():
    total_cost = 50

    cost_chicken = 12

    cost_milk = 5 * 3

    cost_apples = 4 * 1.5

    total_cost_without_pizza = cost_chicken + cost_milk + cost_apples

    cost_pizza = total_cost - total_cost_without_pizza

    cost_pizza_per_box = 8.5

    num_pizza_boxes = cost_pizza / cost_pizza_per_box

    result = num_pizza_boxes

    return result


 Executed result: 2.0
[EXP] 26: [success_rate]: True, [output]: def solution():
    shorts = 3

    shorts_cost = 16.50

    pants = 3

    pants_cost = 22.50

    shoes = 3

    shoes_cost = 42

    shorts_total = shorts * shorts_cost

    pants_total = pants * pants_cost

    shoes_total = shoes * shoes_cost

    total_cost = shorts_total + pants_total + shoes_total

    result = total_cost

    return result


 Executed result: 243.0
[EXP] 27: [success_rate]: False, [output]: def solution():
    servings_per_carton = 15

    servings_per_day = 1

    days = 60

    total_servings = servings_per_day * days

    cartons_needed = math.ceil(total_servings / servings_per_carton)

    cost_per_carton = 4

    total_cost = cartons_needed * cost_per_carton

    result = total_cost

    return result


 Executed result: Error: return error, fail to execute
[EXP] 28: [success_rate]: True, [output]: def solution():
    total_distance = 60

    first_stop_distance = 20

    second_stop_distance = total_distance - 15

    distance_between_stops = second_stop_distance - first_stop_distance

    result = distance_between_stops

    return result


 Executed result: 25
[EXP] 29: [success_rate]: True, [output]: def solution():
    heels_1 = 33

    heels_2 = 2 * heels_1

    total_heels = heels_1 + heels_2

    boots = total_heels + 5

    result = boots

    return result


 Executed result: 104
[EXP] 30: [success_rate]: True, [output]: def solution():
    ratio = 7 / 11

    total_age = 162

    allen_age = total_age * (11 / (7 + 11))

    allen_age_in_10_years = allen_age + 10

    result = allen_age_in_10_years

    return result


 Executed result: 109.00000000000001
[EXP] 31: [success_rate]: True, [output]: def solution():
    friends_guess1 = 80

    friends_guess2 = (friends_guess1 / 2) + 20

    friends_guess3 = friends_guess1 * 1.25

    total_guesses = friends_guess1 + friends_guess2 + friends_guess3

    average_guess = total_guesses / 3

    result = average_guess

    return result


 Executed result: 80.0
[EXP] 32: [success_rate]: True, [output]: def solution():
    dogs = 10

    hours_per_day = 0.5

    hours_per_week = dogs * hours_per_day * 7

    result = hours_per_week

    return result


 Executed result: 35.0
[EXP] 33: [success_rate]: True, [output]: def solution():
    coins = 110

    gold_coins = (coins + 30) / 2

    result = gold_coins

    return result


 Executed result: 70.0
[EXP] 34: [success_rate]: True, [output]: def solution():
    raymond_jewels = 40

    aaron_jewels = (raymond_jewels / 2) + 5

    siobhan_jewels = aaron_jewels - 2

    result = siobhan_jewels

    return result


 Executed result: 23.0
[EXP] 35: [success_rate]: True, [output]: def solution():
    minutes_played = 40

    points_first_20_minutes = 4

    points_second_20_minutes = points_first_20_minutes + (points_first_20_minutes * 0.25)

    total_points = points_first_20_minutes + points_second_20_minutes

    result = total_points

    return result


 Executed result: 9.0
[EXP] 36: [success_rate]: True, [output]: def solution():
    yogurts_per_day = 2

    yogurts_per_dollar = 4

    cost_per_dollar = 5.00

    total_yogurts = yogurts_per_day * 30

    total_cost = (total_yogurts / yogurts_per_dollar) * cost_per_dollar

    result = total_cost

    return result


 Executed result: 75.0
[EXP] 37: [success_rate]: False, [output]: def solution():
    lego_sets_initial = 13

    price_per_lego_set = 15

    money_received = lego_sets_initial * price_per_lego_set

    total_spent = 8 * 20

    money_left = money_received - total_spent

    if money_left == 5:

        result = lego_sets_initial - lego_sets_sold

    else:

        result = 0

    return result


 Executed result: 0
[EXP] 38: [success_rate]: True, [output]: def solution():
    miles_per_week = 60

    days_per_week = 3

    hours_per_day = [3, 3/2, 3/2]

    total_hours = sum(hours_per_day)

    speed = miles_per_week / total_hours

    result = speed

    return result


 Executed result: 10.0
[EXP] 39: [success_rate]: False, [output]: def solution():
    skip_speed = 3

    run_speed = skip_speed * 2

    walk_speed = run_speed / 4

    skip_time = 1 / 3

    run_time = 2 / 3

    time = 6

    skip_distance = skip_time * time * skip_speed

    run_distance = run_time * time * run_speed

    walk_distance = (1 - skip_time - run_time) * time * walk_speed

    total_distance = skip_distance + run_distance + walk_distance

    result = total_distance

    return result


 Executed result: 30.0
[EXP] 40: [success_rate]: True, [output]: def solution():
    suzy_iphone_age = 1

    ben_iphone_age = suzy_iphone_age * 2

    brandon_iphone_age = ben_iphone_age * 4

    result = brandon_iphone_age

    return result


 Executed result: 8
[EXP] 41: [success_rate]: True, [output]: def solution():
    distance_of_reach_of_dragons_flames = 1000

    javelin_distance_without_gemstone = 400

    javelin_distance_with_gemstone = javelin_distance_without_gemstone * 3

    max_distance_outside_flames = distance_of_reach_of_dragons_flames - javelin_distance_with_gemstone

    result = max_distance_outside_flames

    return result


 Executed result: -200
[EXP] 42: [success_rate]: True, [output]: def solution():
    pies_initial = 5

    pieces_per_pie = 8

    total_pieces_initial = pies_initial * pieces_per_pie

    pieces_taken = total_pieces_initial - 14

    result = pieces_taken

    return result


 Executed result: 26
[EXP] 43: [success_rate]: True, [output]: def solution():
    daily_target = 2000

    daily_consumed = 1800

    remaining_calories = daily_target - daily_consumed

    calories_per_serving = 250

    servings_per_bag = 5

    serving_weight = 300 / 5

    calories_per_gram = calories_per_serving / serving_weight

    grams_per_calorie = 1 / calories_per_gram

    grams_to_eat = remaining_calories * grams_per_calorie

    result = grams_to_eat

    return result


 Executed result: 48.0
[EXP] 44: [success_rate]: False, [output]: def solution():
    beeswax_cost = 10

    beeswax_per_candle = 0.1

    candle_price = 2

    candles_made = 20

    beeswax_consumed = beeswax_per_candle * candles_made

    total_cost = beeswax_cost + beeswax_consumed

    total_revenue = candles_made * candle_price

    net_profit = total_revenue - total_cost

    result = net_profit

    return result


 Executed result: 28.0
[EXP] 45: [success_rate]: True, [output]: def solution():
    articles_mondays = 5

    articles_tuesday = articles_mondays + (2/5) * articles_mondays

    articles_wednesday = articles_tuesday * 2

    total_articles = articles_mondays + articles_tuesday + articles_wednesday

    time_per_article = 4

    total_hours = total_articles * time_per_article

    result = total_hours

    return result


 Executed result: 104.0
[EXP] 46: [success_rate]: True, [output]: def solution():
    post_it_notes_initial = 80

    post_it_notes_used = 220

    post_it_notes_remaining = 23

    post_it_notes_in_package = post_it_notes_remaining + post_it_notes_used - post_it_notes_initial

    result = post_it_notes_in_package

    return result


 Executed result: 163
[EXP] 47: [success_rate]: True, [output]: def solution():
    blue_ties = 200 / 40

    red_ties = blue_ties * 2

    blue_tie_cost = 40

    red_tie_cost = blue_tie_cost * 1.5

    blue_tie_price = blue_ties * blue_tie_cost

    red_tie_price = red_ties * red_tie_cost

    total_tie_price = blue_tie_price + red_tie_price

    result = total_tie_price

    return result


 Executed result: 800.0
[EXP] 48: [success_rate]: True, [output]: def solution():
    wire_length = 4

    piece_length = 6

    inch_to_foot = 12

    piece_length_in_inches = piece_length

    wire_length_in_inches = wire_length * inch_to_foot

    number_of_pieces = wire_length_in_inches // piece_length_in_inches

    remainder = wire_length_in_inches % piece_length_in_inches

    if remainder != 0:

        number_of_pieces += 1

    result = number_of_pieces

    return result


 Executed result: 8
[EXP] 49: [success_rate]: True, [output]: def solution():
    total_units = 15 * 8

    occupied_units = total_units * 3 / 4

    unoccupied_units = total_units - occupied_units

    result = unoccupied_units

    return result


 Executed result: 30.0
[EXP] 50: [success_rate]: True, [output]: def solution():
    eggs_per_day = 252

    eggs_per_doz = 12

    money_per_doz = 2

    total_eggs_per_week = eggs_per_day * 7

    eggs_sold_per_week = total_eggs_per_week / eggs_per_doz

    money_made_per_week = eggs_sold_per_week * money_per_doz

    result = money_made_per_week

    return result


 Executed result: 294.0
[EXP] 51: [success_rate]: False, [output]: def solution():
    mph_outward = 10

    start_time = 1

    end_time = 4

    hours_outward = end_time - start_time

    distance_outward = mph_outward * hours_outward

    mph_return = 6

    distance_return = distance_outward

    hours_return = distance_return / mph_return

    total_hours = hours_outward + hours_return

    result = total_hours

    return result


 Executed result: 8.0
[EXP] 52: [success_rate]: True, [output]: def solution():
    pounds_to_remove = 15

    pounds_per_comic_book = 0.25

    pounds_per_toys = 0.5

    comic_books_removed = 30

    total_pounds_removed = comic_books_removed * pounds_per_comic_book

    pounds_left_to_remove = pounds_to_remove - total_pounds_removed

    toys_to_remove = pounds_left_to_remove / pounds_per_toys

    result = toys_to_remove

    return result


 Executed result: 15.0
[EXP] 53: [success_rate]: True, [output]: def solution():
    revenue_thursday = (6 * 60) + (4 * 40)

    revenue_friday = 12 * 40

    difference = revenue_thursday - revenue_friday

    result = difference

    return result


 Executed result: 40
[EXP] 54: [success_rate]: True, [output]: def solution():
    kittens_initial = 7

    patchy_kittens = 3 * kittens_initial

    trixie_kittens = 12

    total_kittens = kittens_initial + patchy_kittens + trixie_kittens

    result = total_kittens

    return result


 Executed result: 40
[EXP] 55: [success_rate]: True, [output]: def solution():
    lollipops_initial = 30

    lollipops_eaten = 2

    lollipops_left = lollipops_initial - lollipops_eaten

    lollipops_per_bag = 2

    bags = lollipops_left // lollipops_per_bag

    result = bags

    return result


 Executed result: 14
[EXP] 56: [success_rate]: True, [output]: def solution():
    peter_money = 42

    movie_ticket = 7

    popcorn = 7

    cost_per_visit = movie_ticket + popcorn

    visits = peter_money // cost_per_visit

    result = visits

    return result


 Executed result: 3
[EXP] 57: [success_rate]: True, [output]: def solution():
    bridge_weight_limit = 5000

    truck_weight = 3755

    box_weight = 15

    max_boxes = (bridge_weight_limit - truck_weight) // box_weight

    result = max_boxes

    return result


 Executed result: 83
[EXP] 58: [success_rate]: True, [output]: def solution():
    bill = 40

    fee = 0.25

    delivery_fee = 3

    tip = 4

    bill_with_fee = bill + (bill * fee)

    final_bill = bill_with_fee + delivery_fee + tip

    result = final_bill

    return result


 Executed result: 57.0
[EXP] 59: [success_rate]: True, [output]: def solution():
    clusters = 6

    fruits_per_cluster = 20

    individual_fruits = 67

    fruits_in_clusters = clusters * fruits_per_cluster

    total_fruits = fruits_in_clusters + individual_fruits

    result = total_fruits

    return result


 Executed result: 187
[EXP] 60: [success_rate]: True, [output]: def solution():
    oranges_total = 25

    oranges_bad = 1

    oranges_unripe = int(0.2 * oranges_total)

    oranges_sour = 2

    oranges_good = oranges_total - oranges_bad - oranges_unripe - oranges_sour

    result = oranges_good

    return result


 Executed result: 17
[EXP] 61: [success_rate]: True, [output]: def solution():
    material_cost = 500

    jeweler_cost = 800

    total_cost = material_cost + jeweler_cost

    insurance_cost = (total_cost / 100) * 10

    total_spent = total_cost + insurance_cost

    result = total_spent

    return result


 Executed result: 1430.0
[EXP] 62: [success_rate]: False, [output]: def solution():
    annual_pension = 50000

    years_of_service = 30

    years_entitled = years_of_service - 20

    entitled_pension = annual_pension * (1 + 0.05 * years_entitled)

    result = entitled_pension

    return result


 Executed result: 75000.0
[EXP] 63: [success_rate]: True, [output]: def solution():
    initial_charge = 140

    first_half_year = 6

    second_half_year = 6

    charge_first_half_year = initial_charge * first_half_year

    charge_second_half_year = initial_charge * 0.9 * second_half_year

    total_charge = charge_first_half_year + charge_second_half_year

    result = total_charge

    return result


 Executed result: 1596.0
[EXP] 64: [success_rate]: True, [output]: def solution():
    miles_travelled = 100

    gallons_consumed = 4

    total_gallons = 12

    miles_per_gallon = miles_travelled / gallons_consumed

    total_miles = total_gallons * miles_per_gallon

    result = total_miles

    return result


 Executed result: 300.0
[EXP] 65: [success_rate]: True, [output]: def solution():
    hours_tv_per_day = 2

    hours_reading_per_day = hours_tv_per_day / 2

    hours_per_day = hours_tv_per_day + hours_reading_per_day

    hours_per_week = hours_per_day * 3

    hours_per_four_weeks = hours_per_week * 4

    result = hours_per_four_weeks

    return result


 Executed result: 36.0
[EXP] 66: [success_rate]: False, [output]: def solution():
    schools = 4

    teams = 2  # 1 girls' team and 1 boys' team per school

    players_per_team = 5

    players_total = teams * players_per_team

    coaches_per_school = 2  # 1 coach per team

    coaches_total = schools * coaches_per_school

    total_people = players_total + coaches_total

    result = total_people

    return result


 Executed result: 18
[EXP] 67: [success_rate]: True, [output]: def solution():
    diamonds = 175

    rubies = diamonds - 35

    emeralds = rubies * 2

    total_gems = diamonds + rubies + emeralds

    result = total_gems

    return result


 Executed result: 595
[EXP] 68: [success_rate]: True, [output]: def solution():
    girls = 60

    boys = girls * 2

    total_students = girls + boys

    students_per_teacher = 5

    teachers = total_students // students_per_teacher

    result = teachers

    return result


 Executed result: 36
[EXP] 69: [success_rate]: True, [output]: def solution():
    allowance_per_week = 5

    weeks = 8

    total_received = allowance_per_week * weeks

    total_money = 100

    money_initial = total_money - total_received

    result = money_initial

    return result


 Executed result: 60
[EXP] 70: [success_rate]: True, [output]: def solution():
    classes_per_day = 5

    num_days_week = 5

    num_saturday_classes = 8

    classes_per_week = classes_per_day * num_days_week + num_saturday_classes

    num_students_per_class = 15

    money_per_student = 15.00

    total_students = classes_per_week * num_students_per_class

    total_money = total_students * money_per_student

    result = total_money

    return result


 Executed result: 7425.0
[EXP] 71: [success_rate]: True, [output]: def solution():
    recipe1_instructions = 20

    recipe2_instructions = 2 * recipe1_instructions

    total_instructions = recipe1_instructions + recipe2_instructions

    result = total_instructions

    return result


 Executed result: 60
[EXP] 72: [success_rate]: True, [output]: def solution():
    brownies_sold = 43

    cheesecakes_sold = 23

    brownie_price = 3

    cheesecake_price = 4

    total_revenue_brownies = brownies_sold * brownie_price

    total_revenue_cheesecakes = cheesecakes_sold * cheesecake_price

    total_revenue = total_revenue_brownies + total_revenue_cheesecakes

    result = total_revenue

    return result


 Executed result: 221
[EXP] 73: [success_rate]: True, [output]: def solution():
    phones_cost = 5 * 150

    interest_per_phone = phones_cost * 0.02

    total_cost = phones_cost + interest_per_phone

    monthly_installment = total_cost / 3

    result = monthly_installment

    return result


 Executed result: 255.0
[EXP] 74: [success_rate]: False, [output]: def solution():
    marigold_price = 2.74

    petunia_price = 1.87

    begonia_price = 2.12

    marigolds_sold = 12

    petunias_sold = 9

    begonias_sold = 17

    marigold_total = marigold_price * marigolds_sold

    petunia_total = petunia_price * petunias_sold

    begonia_total = begonia_price * begonias_sold

    total = round(marigold_total + petunia_total + begonia_total)

    result = total

    return result


 Executed result: 86
[EXP] 75: [success_rate]: False, [output]: def solution():
    square_footage_top = 16

    square_footage_levels = [square_footage_top]

    for i in range(1, 4):

        square_footage_levels.append(square_footage_levels[i-1] / 2)

    average_square_footage = sum(square_footage_levels) / 4

    result = average_square_footage

    return result


 Executed result: 7.5
[EXP] 76: [success_rate]: True, [output]: def solution():
    first_stage_days = 180

    first_stage_cups_per_day = 1

    first_stage_cups = first_stage_days * first_stage_cups_per_day

    second_stage_days = 365 - first_stage_days

    second_stage_cups_per_day = 2

    second_stage_cups = second_stage_days * second_stage_cups_per_day

    total_cups = first_stage_cups + second_stage_cups

    total_bags = total_cups // 110

    result = total_bags

    return result


 Executed result: 5
[EXP] 77: [success_rate]: True, [output]: def solution():
    sarah_laundry = 400

    david_laundry = sarah_laundry / 4

    raymond_laundry = sarah_laundry / 2

    difference_laundry = raymond_laundry - david_laundry

    result = difference_laundry

    return result


 Executed result: 100.0
[EXP] 78: [success_rate]: False, [output]: def solution():
    package_of_3_cost = 2.50

    package_of_2_cost = 1.00

    package_of_3_buy = 18 // 3

    package_of_3_total_cost = package_of_3_buy * package_of_3_cost

    package_of_2_buy = 18 % 3

    if package_of_2_buy > 0:

        package_of_2_total_cost = (package_of_3_buy * 2) + package_of_2_cost

    else:

        package_of_2_total_cost = package_of_3_buy * package_of_3_cost

    money_saved = package_of_3_total_cost - package_of_2_total_cost

    result = money_saved

    return result


 Executed result: 0.0
[EXP] 79: [success_rate]: True, [output]: def solution():
    cost = 100

    discount = 0.30

    discount_amount = cost * discount

    final_cost = cost - discount_amount

    result = final_cost

    return result


 Executed result: 70.0
[EXP] 80: [success_rate]: True, [output]: def solution():
    water_initial = 24

    water_taken_by_girls = 1/6 * water_initial * 2

    water_taken_by_boy = 6

    water_left = water_initial - water_taken_by_girls - water_taken_by_boy

    result = water_left

    return result


 Executed result: 10.0
[EXP] 81: [success_rate]: True, [output]: def solution():
    stickers_initial = 10

    stickers_bought = 21

    stickers_birthday = 23

    total_stickers = stickers_initial + stickers_bought + stickers_birthday

    stickers_given = 9

    stickers_used = 28

    stickers_left = total_stickers - stickers_given - stickers_used

    result = stickers_left

    return result


 Executed result: 17
[EXP] 82: [success_rate]: True, [output]: def solution():
    grace_weight = 125

    alex_weight = 4 * grace_weight - 2

    combined_weight = grace_weight + alex_weight

    result = combined_weight

    return result


 Executed result: 623
[EXP] 83: [success_rate]: True, [output]: def solution():
    rose_bushes = 3

    roses_per_bush = 25

    thorns_per_rose = 8

    total_rose = rose_bushes * roses_per_bush

    total_thorns = total_rose * thorns_per_rose

    result = total_thorns

    return result


 Executed result: 600
[EXP] 84: [success_rate]: False, [output]: def solution():
    games_played = 22

    games_won = games_lost + 8

    games_lost = games_played - games_won

    result = games_won

    return result


 Executed result: Error: return error, fail to execute
[EXP] 85: [success_rate]: True, [output]: def solution():
    years_vacationed = 34 - 23

    vacations_per_year = 4

    quilt_blocks_per_year = 1

    total_quilt_blocks = years_vacationed * vacations_per_year * quilt_blocks_per_year

    result = total_quilt_blocks

    return result


 Executed result: 44
[EXP] 86: [success_rate]: True, [output]: def solution():
    alarm_time_first = 4

    alarm_time_second = alarm_time_first * 3

    alarm_time_third = alarm_time_second / 2

    total_alarm_time = alarm_time_first + alarm_time_second + alarm_time_third

    result = total_alarm_time

    return result


 Executed result: 22.0
[EXP] 87: [success_rate]: False, [output]: def solution():
    salary_initial = 600

    annual_increase = 0.1

    increase_after_five_years = 5 * salary_initial * annual_increase

    salary_after_five_years = salary_initial + increase_after_five_years

    salary_after_eight_years = salary_after_five_years * (1 + annual_increase) ** 3

    result = salary_after_eight_years

    return result


 Executed result: 1197.9000000000003
[EXP] 88: [success_rate]: True, [output]: def solution():
    total_copies = 88000

    ratio = 10

    harald_copies = total_copies / (ratio + 1)

    result = harald_copies

    return result


 Executed result: 8000.0
[EXP] 89: [success_rate]: True, [output]: def solution():
    num_friends = 16

    gift_bags_per_guest = 0.75

    gift_bags = num_friends * gift_bags_per_guest

    cost_per_gift_bag = 2

    cost = gift_bags * cost_per_gift_bag

    result = cost

    return result


 Executed result: 24.0
[EXP] 90: [success_rate]: True, [output]: def solution():
    adult_dinosaurs = 20

    adult_eating_amount = 10

    child_dinosaurs = 5

    child_eating_amount = adult_eating_amount / 2

    adult_serving = adult_dinosaurs * adult_eating_amount

    child_serving = child_dinosaurs * child_eating_amount

    total_serving = adult_serving + child_serving

    result = total_serving

    return result


 Executed result: 225.0
[EXP] 91: [success_rate]: True, [output]: def solution():
    cindy_pets = 4

    marcia_pets = cindy_pets + 2

    jan_pets = marcia_pets * 3

    total_pets = cindy_pets + marcia_pets + jan_pets

    result = total_pets

    return result


 Executed result: 28
[EXP] 92: [success_rate]: True, [output]: def solution():
    james_age = 10

    corey_age = james_age + 1

    amy_age = corey_age - 2

    jackson_age = amy_age - 5

    result = jackson_age

    return result


 Executed result: 4
[EXP] 93: [success_rate]: False, [output]: def solution():
    lee_time = 38

    lee_time_faster_than_gerald = 2

    gerald_original_time = lee_time - lee_time_faster_than_gerald

    gerald_improved_speed = 0.1

    gerald_improved_time = gerald_original_time * (1 + gerald_improved_speed)

    result = gerald_improved_time

    return result


 Executed result: 39.6
[EXP] 94: [success_rate]: True, [output]: def solution():
    dogs = 60

    cats = dogs * 2

    total_pets = dogs + cats

    rabbits = total_pets - 12

    result = dogs + cats + rabbits

    return result


 Executed result: 348
[EXP] 95: [success_rate]: True, [output]: def solution():
    total_students = 200

    boys = 2 / 5 * total_students

    girls = total_students - boys

    girls_in_girl_scout = 2 / 3 * girls

    girls_not_in_girl_scout = girls - girls_in_girl_scout

    result = girls_not_in_girl_scout

    return result


 Executed result: 40.0
[EXP] 96: [success_rate]: True, [output]: def solution():
    harry_sleep_hours = 9

    james_sleep_hours = (2/3) * harry_sleep_hours

    difference = harry_sleep_hours - james_sleep_hours

    result = difference

    return result


 Executed result: 3.0
[EXP] 97: [success_rate]: False, [output]: def solution():
    canned_tomatoes_volume = 16

    loss_of_volume = 0.5

    canned_tomatoes_needed = 32 / (1 - loss_of_volume)

    tomatoes_per_can = 3

    total_tomatoes = canned_tomatoes_needed * tomatoes_per_can

    result = total_tomatoes

    return result


 Executed result: 192.0
[EXP] 98: [success_rate]: True, [output]: def solution():
    cars_initial = 30

    cars_left = 30 - 5

    cars_driven_in_first_15_minutes = cars_left - 20

    result = cars_driven_in_first_15_minutes

    return result


 Executed result: 5
[EXP] 99: [success_rate]: True, [output]: def solution():
    potted_plants_received = 18

    initial_potted_plants = 40 * 2

    total_potted_plants = potted_plants_received + initial_potted_plants

    plants_given_away = 40

    potted_plants_left = total_potted_plants - plants_given_away

    result = potted_plants_left

    return result


 Executed result: 58
[EXP] 100: [success_rate]: False, [output]: def solution():
    friend4_doorbell_presses = 60

    friend3_doorbell_presses = friend4_doorbell_presses + 10

    friend2_doorbell_presses = friend3_doorbell_presses + friend4_doorbell_presses // 4

    friend1_doorbell_presses = friend2_doorbell_presses - friend3_doorbell_presses

    total_doorbell_presses = friend1_doorbell_presses + friend2_doorbell_presses + friend3_doorbell_presses + friend4_doorbell_presses

    result = total_doorbell_presses

    return result


 Executed result: 230
[EXP] 101: [success_rate]: True, [output]: def solution():
    total_pages = 4 + 20 + 7 + 8

    pages_read = 15

    pages_left = total_pages - pages_read

    days_left = 4

    pages_per_day = pages_left / days_left

    result = pages_per_day

    return result


 Executed result: 6.0
[EXP] 102: [success_rate]: False, [output]: def solution():
    weekdays = 5

    water_per_day = 3

    water_per_weekday = water_per_day * weekdays

    water_per_weekend = 0

    water_per_week = water_per_weekday + water_per_weekend

    result = water_per_week

    return result


 Executed result: 15
[EXP] 103: [success_rate]: False, [output]: def solution():
    city_width = 42

    city_covered_per_minute = 3

    minutes_to_cover_city = city_width / city_covered_per_minute

    result = minutes_to_cover_city

    return result


 Executed result: 14.0
[EXP] 104: [success_rate]: True, [output]: def solution():
    puzzle_pieces = 1000

    pieces_placed_poppy = puzzle_pieces / 4

    pieces_remaining = puzzle_pieces - pieces_placed_poppy

    pieces_placed_mom = pieces_remaining / 3

    pieces_left = pieces_remaining - pieces_placed_mom

    result = pieces_left

    return result


 Executed result: 500.0
[EXP] 105: [success_rate]: True, [output]: def solution():
    amir_cookies = 5

    cody_cookies = amir_cookies * 3

    total_cookies = amir_cookies + cody_cookies

    result = total_cookies

    return result


 Executed result: 20
[EXP] 106: [success_rate]: True, [output]: def solution():
    boxes = 3

    length = 5

    width = 6

    height = 4

    thickness = 1

    inner_length = length - 2 * thickness

    inner_width = width - 2 * thickness

    inner_height = height - 2 * thickness

    volume = inner_length * inner_width * inner_height

    total_volume = volume * boxes

    result = total_volume

    return result


 Executed result: 72
[EXP] 107: [success_rate]: True, [output]: def solution():
    total_tv_hours = 7

    hours_on_monday = 1

    hours_on_tuesday = 1

    hours_on_wednesday = 0.5 * unknown

    hours_on_thursday = 1 + 0.5

    hours_on_friday = 2

    total_hours_watched = hours_on_monday + hours_on_tuesday + hours_on_wednesday + hours_on_thursday + hours_on_friday

    unknown = (total_tv_hours - (hours_on_monday + hours_on_tuesday + hours_on_thursday + hours_on_friday)) / 0.5

    result = unknown

    return result


 Executed result: 3.0
[EXP] 108: [success_rate]: True, [output]: def solution():
    cookies_this_year = 110

    cookies_meant_to_bake = cookies_this_year - 15

    cookies_after_dropping = cookies_meant_to_bake + 5

    cookies_last_year = cookies_after_dropping / 2

    result = cookies_last_year

    return result


 Executed result: 50.0
[EXP] 109: [success_rate]: True, [output]: def solution():
    cost_per_gallon = 3.00

    cashback_per_gallon = 0.20

    gallons_bought = 10

    cost = cost_per_gallon * gallons_bought

    cashback = cashback_per_gallon * gallons_bought

    total_cost = cost - cashback

    result = total_cost

    return result


 Executed result: 28.0
[EXP] 110: [success_rate]: True, [output]: def solution():
    beatrice_rollups = 2 * 24

    marcell_rollups = 3 * 14

    total_rollups = beatrice_rollups + marcell_rollups

    average_rollups = total_rollups / 2

    result = average_rollups

    return result


 Executed result: 45.0
[EXP] 111: [success_rate]: False, [output]: def solution():
    time_to_shore = 64

    time_to_row_twenty_feet = 16

    distance_per_second = 20 / time_to_row_twenty_feet

    distance_to_shore = time_to_shore * distance_per_second

    water_taken_per_foot = 2 / 10

    water_taken = water_taken_per_foot * distance_to_shore * 10

    result = water_taken

    return result


 Executed result: 160.0
[EXP] 112: [success_rate]: True, [output]: def solution():
    teachers = 4

    lessons = 2

    cleanings_per_lesson = 3

    cleanings_per_day = teachers * lessons * cleanings_per_lesson

    result = cleanings_per_day

    return result


 Executed result: 24
[EXP] 113: [success_rate]: True, [output]: def solution():
    flowers_per_day = 2

    days = 15

    flowers_not_grown = 5

    total_flowers = flowers_per_day * days

    flowers_grown = total_flowers - flowers_not_grown

    result = flowers_grown

    return result


 Executed result: 25
[EXP] 114: [success_rate]: True, [output]: def solution():
    photos_jamal_phone = 1800

    photos_brittany_phone = photos_jamal_phone // 6

    photos_per_duck = photos_brittany_phone // 50

    ducks_in_photo = photos_per_duck

    result = ducks_in_photo

    return result


 Executed result: 6
[EXP] 115: [success_rate]: True, [output]: def solution():
    cost_per_board_2x4x10 = 10

    cost_per_board_4x4x10 = 16

    num_boards_2x4x10 = 10

    num_boards_4x4x10 = 5

    cost_total = (num_boards_2x4x10 * cost_per_board_2x4x10) + (num_boards_4x4x10 * cost_per_board_4x4x10)

    increase_in_price = cost_total * 0.50

    selling_price = cost_total + increase_in_price

    profit = selling_price - cost_total

    result = profit

    return result


 Executed result: 90.0
[EXP] 116: [success_rate]: True, [output]: def solution():
    sugar = 7

    water = 13

    total = 120

    ratio = sugar + water

    sugar_used = (sugar / ratio) * total

    result = sugar_used

    return result


 Executed result: 42.0
[EXP] 117: [success_rate]: True, [output]: def solution():
    pairs_of_shoes = 2

    children = 3

    cost_per_pair = 60

    total_shoes = pairs_of_shoes * children

    total_cost = total_shoes * cost_per_pair

    result = total_cost

    return result


 Executed result: 360
[EXP] 118: [success_rate]: True, [output]: def solution():
    vehicles_imported_first_day = 2 * 5

    vehicles_imported_second_day = 30 - vehicles_imported_first_day

    containers_imported_second_day = vehicles_imported_second_day // 5

    result = containers_imported_second_day

    return result


 Executed result: 4
[EXP] 119: [success_rate]: True, [output]: def solution():
    adrien_salary_four_years_ago = 40000

    lyah_salary_four_years_ago = adrien_salary_four_years_ago * (1 - 0.3)  # calculate Lylah's salary 4 years ago

    adrien_salary_now = adrien_salary_four_years_ago * 1.4  # calculate Adrien's salary now

    lyah_salary_now = lyah_salary_four_years_ago * 1.4  # calculate Lylah's salary now

    total_salary_now = adrien_salary_now + lyah_salary_now

    result = total_salary_now

    return result


 Executed result: 95200.0
[EXP] 120: [success_rate]: True, [output]: def solution():
    pads_per_week = 2

    sheets_per_pad = 30

    sheets_per_month = pads_per_week * 4 * sheets_per_pad

    result = sheets_per_month

    return result


 Executed result: 240
[EXP] 121: [success_rate]: True, [output]: def solution():
    morisette_apples = 5

    morisette_oranges = 8

    kael_apples = morisette_apples * 2

    kael_oranges = morisette_oranges / 2

    morisette_fruits = morisette_apples + morisette_oranges

    kael_fruits = kael_apples + kael_oranges

    total_fruits = morisette_fruits + kael_fruits

    result = total_fruits

    return result


 Executed result: 27.0
[EXP] 122: [success_rate]: False, [output]: def solution():
    sleep_monday = 8

    sleep_tuesday = sleep_monday - 2

    sleep_wednesday = sleep_tuesday - 2

    sleep_thursday = sleep_wednesday + 1

    sleep_friday = sleep_thursday + 1

    sleep_saturday = sleep_friday + 1

    sleep_sunday = sleep_saturday + 1

    total_sleep = sleep_monday + sleep_tuesday + sleep_wednesday + sleep_thursday + sleep_friday + sleep_saturday + sleep_sunday

    result = total_sleep

    return result


 Executed result: 44
[EXP] 123: [success_rate]: True, [output]: def solution():
    miles_per_hour_initial = 10

    hours_run_initial = 3

    miles_run_initial = miles_per_hour_initial * hours_run_initial

    miles_per_hour_second = 5

    total_hours = 7

    miles_run_second = (total_hours - hours_run_initial) * miles_per_hour_second

    total_miles = miles_run_initial + miles_run_second

    result = total_miles

    return result


 Executed result: 50
[EXP] 124: [success_rate]: True, [output]: def solution():
    letters_initial = 60

    letters_stamped = 30

    letters_one_third_stamped = letters_initial / 3

    letters_stamped_initial = letters_stamped - letters_one_third_stamped

    result = letters_stamped_initial

    return result


 Executed result: 10.0
[EXP] 125: [success_rate]: False, [output]: def solution():
    spoons_initial = 0

    spoons_in_package = 0

    husband_spoons = 5

    spoons_used_for_sampling = 3

    total_spoons = 12

    spoons_in_package = total_spoons - spoons_used_for_sampling - husband_spoons

    result = spoons_in_package

    return result


 Executed result: 4
[EXP] 126: [success_rate]: True, [output]: def solution():
    chicken_sausages = 38

    fish_sausages = chicken_sausages + 6

    total_sausages = chicken_sausages + fish_sausages

    result = total_sausages

    return result


 Executed result: 82
[EXP] 127: [success_rate]: True, [output]: def solution():
    friends_lily = 50

    friends_amy = friends_lily + 20

    total_friends = friends_lily + friends_amy

    result = total_friends

    return result


 Executed result: 120
[EXP] 128: [success_rate]: True, [output]: def solution():
    peppers_cost = 15

    watermelon_cost = 3 * peppers_cost

    orange_cost = watermelon_cost - 5

    watermelons = 4

    peppers = 20

    oranges = 10

    watermelon_total_cost = watermelons * watermelon_cost

    peppers_total_cost = peppers * peppers_cost

    oranges_total_cost = oranges * orange_cost

    total_cost = watermelon_total_cost + peppers_total_cost + oranges_total_cost

    result = total_cost

    return result


 Executed result: 880
[EXP] 129: [success_rate]: True, [output]: def solution():
    people_per_day = 500

    minutes_per_patient = 24

    time_per_day = people_per_day * minutes_per_patient / 60

    doctor_rate = 150

    patient_rate = 200

    cost = doctor_rate * time_per_day

    revenue = patient_rate * time_per_day

    profit = revenue - cost

    result = profit

    return result


 Executed result: 10000.0
[EXP] 130: [success_rate]: True, [output]: def solution():
    elves_initial = 60

    elves_quitted_after_vomit = elves_initial // 3

    elves_left_after_vomit = elves_initial - elves_quitted_after_vomit

    elves_quitted_after_kicking = 10

    elves_left = elves_left_after_vomit - elves_quitted_after_kicking

    result = elves_left

    return result


 Executed result: 30
[EXP] 131: [success_rate]: True, [output]: def solution():
    expenditure_may = 500

    expenditure_june = expenditure_may - 60

    total_expenditure = expenditure_may + expenditure_june

    result = total_expenditure

    return result


 Executed result: 940
[EXP] 132: [success_rate]: True, [output]: def solution():
    pam_roller_coaster = 2

    fred_roller_coaster = 4

    total_roller_coaster = pam_roller_coaster + fred_roller_coaster

    pam_luge = 2

    fred_luge = 2

    total_luge = pam_luge + fred_luge

    total_rides = total_roller_coaster + total_luge

    tickets_per_ride = 6

    total_tickets = total_rides * tickets_per_ride

    result = total_tickets

    return result


 Executed result: 60
[EXP] 133: [success_rate]: True, [output]: def solution():
    miles_monday = 4

    miles_tuesday = miles_monday * 6

    miles_wednesday = 41 - miles_monday - miles_tuesday

    result = miles_wednesday

    return result


 Executed result: 13
[EXP] 134: [success_rate]: True, [output]: def solution():
    car_washes_per_month = 4

    car_wash_cost = 15

    car_washes_per_year = car_washes_per_month * 12

    car_wash_cost_per_year = car_washes_per_year * car_wash_cost

    result = car_wash_cost_per_year

    return result


 Executed result: 720
[EXP] 135: [success_rate]: True, [output]: def solution():
    brian_video_games_initial = 20

    games_lost = 5

    brian_video_games_after = brian_video_games_initial - games_lost

    bobby_video_games = 3 * brian_video_games_after - 5

    result = bobby_video_games

    return result


 Executed result: 40
[EXP] 136: [success_rate]: True, [output]: def solution():
    total_unicorns = 27

    scottish_unicorns = total_unicorns / 3

    female_scottish_unicorns = scottish_unicorns * 2 / 3

    result = female_scottish_unicorns

    return result


 Executed result: 6.0
[EXP] 137: [success_rate]: True, [output]: def solution():
    subs = 2

    sub_cost = 7.50

    subs_total = subs * sub_cost

    chips = 2

    chip_cost = 1.50

    chips_total = chips * chip_cost

    cookies = 2

    cookie_cost = 1.00

    cookies_total = cookies * cookie_cost

    total_cost = subs_total + chips_total + cookies_total

    delivery_fee = 0.20 * total_cost

    total_cost_with_fee = total_cost + delivery_fee

    tip = 5.00

    total_cost_with_tip = total_cost_with_fee + tip

    result = total_cost_with_tip

    return result


 Executed result: 29.0
[EXP] 138: [success_rate]: True, [output]: def solution():
    test1_questions = 75

    test1_hours = 8

    test1_completed = test1_hours * 5

    test1_incomplete = test1_questions - test1_completed

    test2_questions = 100

    test2_hours = 6

    test2_completed = test2_hours * 5

    test2_incomplete = test2_questions - test2_completed

    total_incomplete = test1_incomplete + test2_incomplete

    result = total_incomplete

    return result


 Executed result: 105
[EXP] 139: [success_rate]: True, [output]: def solution():
    blue_gumballs = 12

    pink_gumballs = 4 * blue_gumballs + 22

    result = pink_gumballs

    return result


 Executed result: 70
[EXP] 140: [success_rate]: True, [output]: def solution():
    available_cars = 20

    automatic_cars = 12

    manual_cars = 4

    semi_automatic_cars = available_cars - automatic_cars - manual_cars

    total_cars = available_cars

    percentage_semi_automatic = (semi_automatic_cars / total_cars) * 100

    result = round(percentage_semi_automatic, 2)

    return result


 Executed result: 20.0
[EXP] 141: [success_rate]: False, [output]: def solution():
    bees_initial = 700

    queens = bees_initial / 4

    babies = queens * 2

    worker_bees = babies * 2

    result = worker_bees

    return result


 Executed result: 700.0
[EXP] 142: [success_rate]: True, [output]: def solution():
    hours_per_day = 2

    rate_per_hour = 10

    hours_per_week = hours_per_day * 7

    total_earned = hours_per_week * rate_per_hour

    result = total_earned

    return result


 Executed result: 140
[EXP] 143: [success_rate]: True, [output]: def solution():
    milk_cost = 2

    eggs_cost = 3

    light_bulbs_cost = 3

    cups_cost = 3

    roach_traps_cost = 4

    food_items = [milk_cost, eggs_cost]

    non_food_items = [light_bulbs_cost, cups_cost, roach_traps_cost]

    non_food_items_with_tax = [item * 1.1 for item in non_food_items]

    total_cost = sum(food_items) + sum(non_food_items_with_tax)

    result = total_cost

    return result


 Executed result: 16.0
[EXP] 144: [success_rate]: True, [output]: def solution():
    bleach_bottles_per_client = 2

    bleach_cost = 2

    cloths_per_client = 1

    cloths_cost = 5

    clients_initial = 3

    clients_additional = 5

    total_clients = clients_initial + clients_additional

    bleach_total = bleach_bottles_per_client * total_clients

    cloths_total = cloths_per_client * total_clients

    bleach_expense = bleach_total * bleach_cost

    cloths_expense = cloths_total * cloths_cost

    total_expense = bleach_expense + cloths_expense

    income = 92

    profit = income - total_expense

    result = profit

    return result


 Executed result: 20
[EXP] 145: [success_rate]: True, [output]: def solution():
    hectares = 10

    pineapples_per_hectare = 100

    months_per_harvest = 3

    harvests_per_year = 12 / months_per_harvest

    total_pineapples = hectares * pineapples_per_hectare * harvests_per_year

    result = total_pineapples

    return result


 Executed result: 4000.0
[EXP] 146: [success_rate]: False, [output]: def solution():
    legos_set1 = 500

    legos_set2 = legos_set1 * 3

    legos_set3 = legos_set1 // 4

    total_legos = legos_set1 + legos_set2 + legos_set3

    result = total_legos

    return result


 Executed result: 2125
[EXP] 147: [success_rate]: False, [output]: def solution():
    bees_left = 30

    bees_returned = bees_left / 2

    bees_left_again = bees_left - bees_returned

    bees_returned_again = bees_left_again * 2

    bees_returned_last = bees_left - bees_returned_again

    result = bees_returned_last

    return result


 Executed result: 0.0
[EXP] 148: [success_rate]: True, [output]: def solution():
    adult_ticket = 12

    child_ticket = 10

    total_cost = adult_ticket + child_ticket

    change = 8

    money_given = total_cost + change

    result = money_given

    return result


 Executed result: 30
[EXP] 149: [success_rate]: True, [output]: def solution():
    charlie_friends = 12

    dorothy_friends = charlie_friends / 3

    james_friends = dorothy_friends * 4

    result = james_friends

    return result


 Executed result: 16.0
[EXP] 150: [success_rate]: True, [output]: def solution():
    steve_distance = 5280 * 3  # convert 3 miles to feet

    steve_speed = 440

    steve_time = steve_distance / steve_speed

    tim_distance = 5280 * 2  # convert 2 miles to feet

    tim_speed = 264

    tim_time = tim_distance / tim_speed

    steve_awaits = tim_time - steve_time

    result = steve_awaits

    return result


 Executed result: 4.0
[EXP] 151: [success_rate]: True, [output]: def solution():
    tire_cost = 0.25

    bikes = 5

    tricycles = 3

    unicycle = 1

    total_tires = bikes * 2 + tricycles * 3 + unicycle

    total_cost = total_tires * tire_cost

    result = total_cost

    return result


 Executed result: 5.0
[EXP] 152: [success_rate]: True, [output]: def solution():
    packs = 10

    cookies_per_pack = 6

    total_cookies = packs * cookies_per_pack

    total_cost = total_cookies * 0.10

    change = 10 - total_cost

    result = change

    return result


 Executed result: 4.0
[EXP] 153: [success_rate]: False, [output]: def solution():
    fries_eaten_by_dave = 14

    fries_gobbled_by_seagull = fries_eaten_by_dave / 2

    fries_eaten_by_pigeons = 3 * 3

    fries_left_after_pigeons = fries_eaten_by_dave - fries_gobbled_by_seagull - fries_eaten_by_pigeons

    fries_taken_by_raccoon = fries_left_after_pigeons * 2 / 3

    fries_left_after_raccoon = fries_left_after_pigeons - fries_taken_by_raccoon

    fries_taken_by_ants = 1

    fries_left_after_ants = fries_left_after_raccoon - fries_taken_by_ants

    initial_fries = fries_eaten_by_dave + fries_gobbled_by_seagull + fries_eaten_by_pigeons + fries_taken_by_raccoon + fries_taken_by_ants

    result = initial_fries

    return result


 Executed result: 29.666666666666668
[EXP] 154: [success_rate]: True, [output]: def solution():
    hours_per_week_mondays = 3

    hours_per_class_mondays = 1

    hours_per_week_tuesdays = 2

    hours_per_class_tuesdays = 2

    hours_per_week_wednesdays = 3

    hours_per_class_wednesdays = 1

    hours_per_week_thursdays = 2

    hours_per_class_thursdays = 2

    hours_per_week_fridays = 3

    hours_per_class_fridays = 1

    hours_per_week = hours_per_week_mondays + hours_per_week_tuesdays + hours_per_week_wednesdays + hours_per_week_thursdays + hours_per_week_fridays

    total_classes_per_week = hours_per_week_mondays * hours_per_class_mondays + hours_per_week_tuesdays * hours_per_class_tuesdays + hours_per_week_wednesdays * hours_per_class_wednesdays + hours_per_week_thursdays * hours_per_class_thursdays + hours_per_week_fridays * hours_per_class_fridays

    total_hours_per_week = total_classes_per_week

    total_hours_per_semester = total_hours_per_week * 16

    result = total_hours_per_semester

    return result


 Executed result: 272
[EXP] 155: [success_rate]: True, [output]: def solution():
    rolls = 300

    croissants = 120

    baguettes = 60

    rolls_length = rolls * 4

    croissants_length = croissants * 6

    baguettes_length = baguettes * 2 * 12  # 2 feet = 24 inches, then convert to inches to feet

    total_length = rolls_length + croissants_length + baguettes_length

    total_length_feet = total_length / 12

    result = total_length_feet

    return result


 Executed result: 280.0
[EXP] 156: [success_rate]: True, [output]: def solution():
    monkeys_bananas = 200

    gorillas_bananas = 400

    baboons_bananas = 100

    total_bananas_per_month = monkeys_bananas + gorillas_bananas + baboons_bananas

    total_bananas_to_order = total_bananas_per_month * 2

    result = total_bananas_to_order

    return result


 Executed result: 1400
[EXP] 157: [success_rate]: False, [output]: def solution():
    football_field_length = 100

    blake_distance = football_field_length * 2 * 15

    kelly_distance = 2 * 34 * football_field_length

    difference = blake_distance - kelly_distance

    result = difference

    return result


 Executed result: -3800
[EXP] 158: [success_rate]: True, [output]: def solution():
    pens = 4

    pen_cost = 1.5

    pen_total_cost = pens * pen_cost

    notebooks = 2

    notebook_cost = 4

    notebook_total_cost = notebooks * notebook_cost

    paper_cost = 20

    total_cost = pen_total_cost + notebook_total_cost + paper_cost

    result = total_cost

    return result


 Executed result: 34.0
[EXP] 159: [success_rate]: True, [output]: def solution():
    tadpoles_initial = 11

    tadpoles_seen = 6

    tadpoles_hid = 2

    tadpoles_total = tadpoles_initial + tadpoles_seen - tadpoles_hid

    result = tadpoles_total

    return result


 Executed result: 15
[EXP] 160: [success_rate]: True, [output]: def solution():
    tank_depth_monday = 17

    tank_depth_tuesday = tank_depth_monday + 7

    tank_depth_wednesday = tank_depth_tuesday * 2 / 3

    result = tank_depth_wednesday

    return result


 Executed result: 16.0
[EXP] 161: [success_rate]: True, [output]: def solution():
    anakin_starfish = 10

    locsin_starfish = anakin_starfish - 5

    anakin_seahorses = 6

    locsin_seahorses = anakin_seahorses - 3

    anakin_clownfish = 3

    locsin_clownfish = anakin_clownfish + 2

    total_anakin = anakin_starfish + anakin_seahorses + anakin_clownfish

    total_locsin = locsin_starfish + locsin_seahorses + locsin_clownfish

    result = total_anakin + total_locsin

    return result


 Executed result: 32
[EXP] 162: [success_rate]: True, [output]: def solution():
    original_price = 20

    months = 36

    two_month_price_increases = months // 2

    total_price_increase = original_price * (20 / 100) * two_month_price_increases

    total_price = original_price + total_price_increase

    result = total_price

    return result


 Executed result: 92.0
[EXP] 163: [success_rate]: True, [output]: def solution():
    red_cars = 5

    action_figures = 3

    doll_cost = 3 * 5

    red_car_cost = 4

    total_cost_red_cars = red_cars * red_car_cost

    total_cost_action_figures = action_figures * 5

    total_cost_doll = doll_cost

    total_cost_all = total_cost_red_cars + total_cost_action_figures + total_cost_doll

    result = total_cost_all

    return result


 Executed result: 50
[EXP] 164: [success_rate]: True, [output]: def solution():
    missing_income = 35 * 3

    accountant_fee = 90

    more_money = accountant_fee - missing_income

    result = more_money

    return result


 Executed result: -15
[EXP] 165: [success_rate]: True, [output]: def solution():
    budget = 1500

    computer_cost = 1090

    scanner_cost = 157

    cd_burner_cost = 74

    printer_cost = 102

    total_cost = computer_cost + scanner_cost + cd_burner_cost + printer_cost

    money_left = budget - total_cost

    result = money_left

    return result


 Executed result: 77
[EXP] 166: [success_rate]: True, [output]: def solution():
    eggs_needed = 3

    flans_needed = 15

    eggs_per_babysitting = 9

    total_eggs = eggs_needed * flans_needed

    times_babysitting = total_eggs // eggs_per_babysitting

    result = times_babysitting

    return result


 Executed result: 5
[EXP] 167: [success_rate]: True, [output]: def solution():
    sum_of_ages_future = 28

    increase_of_sum_of_ages = 2 * 2

    sum_of_ages_now = sum_of_ages_future - increase_of_sum_of_ages

    age_of_brooke = sum_of_ages_now / 3

    age_of_seth = age_of_brooke * 2

    result = age_of_seth

    return result


 Executed result: 16.0
[EXP] 168: [success_rate]: True, [output]: def solution():
    ethel_money = 8

    jimmy_money = ethel_money * 2 + 2

    result = jimmy_money

    return result


 Executed result: 18
[EXP] 169: [success_rate]: True, [output]: def solution():
    miles_per_day = 20

    weekend_miles = 10

    days_per_week = 7

    total_miles_weekdays = miles_per_day * (days_per_week - 2)

    total_miles_weekend = weekend_miles * 2

    total_miles_week = total_miles_weekdays + total_miles_weekend

    result = total_miles_week

    return result


 Executed result: 120
[EXP] 170: [success_rate]: True, [output]: def solution():
    hat_cost = 25

    jacket_cost = hat_cost * 3

    pants_cost = (hat_cost + jacket_cost) / 2

    total_cost = hat_cost + jacket_cost + pants_cost

    result = total_cost

    return result


 Executed result: 150.0
[EXP] 171: [success_rate]: True, [output]: def solution():
    spiders = 80

    spider_legs = 8

    spider_legs_total = spiders * spider_legs

    insects = 90

    insect_legs = 6

    insect_legs_total = insects * insect_legs

    invertebrates = 3

    invertebrate_legs = 10

    invertebrate_legs_total = invertebrates * invertebrate_legs

    total_legs = spider_legs_total + insect_legs_total + invertebrate_legs_total

    result = total_legs

    return result


 Executed result: 1210
[EXP] 172: [success_rate]: False, [output]: def solution():
    sally_four_age = 8

    sally_two_age = sally_four_age + 3

    granny_red_age = sally_four_age * 2

    total_age = sally_four_age + sally_two_age + granny_red_age

    result = total_age

    return result


 Executed result: 35
[EXP] 173: [success_rate]: True, [output]: def solution():
    student_loans = 300

    credit_card = 200

    mortgage = 500

    student_loans_extra = student_loans * 1.5

    credit_card_extra = credit_card * 1.5

    mortgage_extra = mortgage * 1.5

    total_monthly_payment = student_loans_extra + credit_card_extra + mortgage_extra

    total_yearly_payment = total_monthly_payment * 12

    result = total_yearly_payment

    return result


 Executed result: 18000.0
[EXP] 174: [success_rate]: False, [output]: def solution():
    potatoes = 60

    time_to_peel = 90  # 1.5 minutes or 90 seconds

    time_to_cut = 5  # seconds

    time_per_potato = time_to_peel + time_to_cut

    total_time = potatoes * time_per_potato

    result = total_time

    return result


 Executed result: 5700
[EXP] 175: [success_rate]: False, [output]: def solution():
    cups_per_gallon = 20

    cost_per_gallon_lemons = 3

    cost_per_gallon_sugar = 2

    selling_price_per_cup = 0.5

    profit = 25

    cups_sold = cups_per_gallon

    total_cups = cups_sold

    gallons_sold = total_cups / cups_per_gallon

    total_cost_lemons = gallons_sold * cost_per_gallon_lemons

    total_cost_sugar = gallons_sold * cost_per_gallon_sugar

    total_cost = total_cost_lemons + total_cost_sugar

    total_revenue = gallons_sold * cups_per_gallon * selling_price_per_cup

        total_profit = total_revenue - total_cost

    cost_lemons = total_cost_lemons

    result = cost_lemons

    return result


 Executed result: 3.0
[EXP] 176: [success_rate]: True, [output]: def solution():
    total_asians = 240

    japanese = 80

    chinese = total_asians - japanese

    chinese_boys = 60

    chinese_girls = chinese - chinese_boys

    result = chinese_girls

    return result


 Executed result: 100
[EXP] 177: [success_rate]: True, [output]: def solution():
    salary = 6000

    rent = salary / 4

    fuel = salary / 3

    remaining = salary - rent - fuel

    donation = remaining / 2

    total_donation = donation + 200 + 700

    money_left = salary - rent - fuel - total_donation

    result = money_left

    return result


 Executed result: 350.0
[EXP] 178: [success_rate]: True, [output]: def solution():
    bo_crabs = 40

    monic_crabs = bo_crabs - 4

    rani_crabs = monic_crabs + 10

    total_crabs = bo_crabs + monic_crabs + rani_crabs

    result = total_crabs

    return result


 Executed result: 122
[EXP] 179: [success_rate]: True, [output]: def solution():
    hourly_rate = 10

    hours_first_week = 5

    hours_second_week = 8

    earnings_first_week = hourly_rate * hours_first_week

    earnings_second_week = hourly_rate * hours_second_week

    total_earnings = earnings_first_week + earnings_second_week

    result = total_earnings

    return result


 Executed result: 130
[EXP] 180: [success_rate]: True, [output]: def solution():
    total_votes = 80

    winner_votes = 3/4 * total_votes

    loser_votes = total_votes - winner_votes

    result = loser_votes

    return result


 Executed result: 20.0
[EXP] 181: [success_rate]: True, [output]: def solution():
    calla_lilies = 200

    white_carnations = calla_lilies / 5

    red_roses = 4 * white_carnations

    result = red_roses

    return result


 Executed result: 160.0
[EXP] 182: [success_rate]: False, [output]: def solution():
    jan_age = 30

    mark_age_two_years_ago = jan_age / 2 - 5

    mark_age_now = mark_age_two_years_ago + 2

    jean_age_two_years_ago = mark_age_two_years_ago + 2

    jean_age_now = jean_age_two_years_ago + 2

    result = jean_age_now

    return result


 Executed result: 14.0
[EXP] 183: [success_rate]: False, [output]: def solution():
    well_rounded_time = 55

    less_rounded_first_run = 60

    less_rounded_second_run = 60 - 3

    less_rounded_third_run = less_rounded_second_run - 3

    less_rounded_fourth_run = less_rounded_third_run - 3

    well_rounded_total_time = 4 * well_rounded_time

    less_rounded_total_time = less_rounded_first_run + less_rounded_second_run + less_rounded_third_run + less_rounded_fourth_run

    difference = well_rounded_total_time - less_rounded_total_time

    result = difference

    return result


 Executed result: -2
[EXP] 184: [success_rate]: False, [output]: def solution():
    probability_greater_than_3 = 3/6

    probability_even_numbers = 0.5**2

    probability_greater_than_3_percentage = (probability_greater_than_3 / probability_even_numbers) * 100

    result = probability_greater_than_3_percentage

    return result


 Executed result: 200.0
[EXP] 185: [success_rate]: True, [output]: def solution():
    mom_apples = 20

    jenna_apples = mom_apples / 2

    total_apples = mom_apples + jenna_apples

    result = total_apples

    return result


 Executed result: 30.0
[EXP] 186: [success_rate]: False, [output]: def solution():
    total_straw = 160

    straw_per_rat = 6

    rats = 0

        while rat_straw >= 0:

            rat_straw = total_straw % straw_per_rat

            rats += 1

            total_straw //= straw_per_rat

        return rats // 3


 Executed result: Error: return error, fail to execute
[EXP] 187: [success_rate]: True, [output]: def solution():
    debt = 100

    interest_rate = 0.02

    number_of_months = 3

    total_interest = debt * number_of_months * interest_rate

    total_amount = debt + total_interest

    result = total_amount

    return result


 Executed result: 106.0
[EXP] 188: [success_rate]: True, [output]: def solution():
    cost_per_bag = 20

    transportation_cost_per_bag = 2

    selling_price_per_bag = 30

    total_profit = 400

    cost_per_bag_total = cost_per_bag + transportation_cost_per_bag

    revenue_per_bag = selling_price_per_bag - cost_per_bag_total

    total_bags = total_profit / revenue_per_bag

    result = total_bags

    return result


 Executed result: 50.0
[EXP] 189: [success_rate]: True, [output]: def solution():
    total_cost_tickets = 20.25

    cost_food = total_cost_tickets - 4.50

    cost_rides = 2 * 33

    total_cost = total_cost_tickets + cost_food + cost_rides

    cost_per_person = total_cost / 3

    result = cost_per_person

    return result


 Executed result: 34.0
[EXP] 190: [success_rate]: False, [output]: def solution():
    peaches_per_minute = 2

    minutes_collected = 3

    peaches_collected = peaches_per_minute * minutes_collected

    result = peaches_collected

    return result


 Executed result: 6
[EXP] 191: [success_rate]: False, [output]: def solution():
    pounds_per_week = 3.5

    insects_per_duck_per_week = pounds_per_week / 10

    insects_per_duck_per_day = insects_per_duck_per_week / 7

    result = insects_per_duck_per_day

    return result


 Executed result: 0.049999999999999996
[EXP] 192: [success_rate]: True, [output]: def solution():
    trees_initial = 50

    trees_planted_per_year = 10

    trees_chopped_down_per_year = 2

    trees_planted = trees_planted_per_year * 10

    trees_chopped_down = trees_chopped_down_per_year * 10

    trees_added = trees_planted - trees_chopped_down

    total_trees = trees_initial + trees_added

    percentage = 0.3

    trees_die = total_trees * percentage

    trees_left = total_trees - trees_die

    result = trees_left

    return result


 Executed result: 91.0
[EXP] 193: [success_rate]: True, [output]: def solution():
    pink_flamingos_initial = 18

    flamingos_taken_back = pink_flamingos_initial // 3

    pink_flamingos_left = pink_flamingos_initial - flamingos_taken_back

    new_pink_flamingos = 18

    pink_flamingos_after = pink_flamingos_left + new_pink_flamingos

    white_flamingos = flamingos_taken_back

    flamingos_diff = pink_flamingos_after - white_flamingos

    result = flamingos_diff

    return result


 Executed result: 24
[EXP] 194: [success_rate]: True, [output]: def solution():
    crayons_needed = 5

    crayon_cost = 2

    total_cost = crayons_needed * crayon_cost

    money_initial = 20

    change = money_initial - total_cost

    result = change

    return result


 Executed result: 10
[EXP] 195: [success_rate]: True, [output]: def solution():
    cost_of_pen = cost_of_pencil + cost_of_eraser

    cost_of_pencil = 1.20

    cost_of_eraser = 0.30

    cost_of_single_pen = cost_of_pencil + cost_of_eraser

    cost_of_eight_pens = cost_of_single_pen * 8

    result = cost_of_eight_pens

    return result


 Executed result: 12.0
[EXP] 196: [success_rate]: True, [output]: def solution():
    carrots_total = 200

    carrots_per_restaurant = 2

    restaurants = 40

    carrots_used = restaurants * carrots_per_restaurant

    carrots_left = carrots_total - carrots_used

    result = carrots_left

    return result


 Executed result: 120
[EXP] 197: [success_rate]: True, [output]: def solution():
    total_inhabitants = 23786

    men = 8417

    women = 9092

    children = total_inhabitants - men - women

    result = children

    return result


 Executed result: 6277
[EXP] 198: [success_rate]: True, [output]: def solution():
    pokemons_initial = 20

    pokemons_collected_first_month = pokemons_initial * 3

    pokemons_collected_second_month = pokemons_collected_first_month - 20

    pokemons_collected_third_month = pokemons_collected_first_month + pokemons_collected_second_month

    pokemons_collected_third_month = pokemons_collected_third_month * 2

    pokemons_total = pokemons_initial + pokemons_collected_first_month + pokemons_collected_second_month + pokemons_collected_third_month

    result = pokemons_total

    return result


 Executed result: 320
[EXP] 199: [success_rate]: False, [output]: def solution():
    total_sentences = 1000

    rate_per_sentence_a = 5

    rate_per_sentence_b = rate_per_sentence_a * 2

    sentences_for_a = total_sentences / 3

    sentences_for_b = total_sentences - sentences_for_a

    money_for_a = sentences_for_a * rate_per_sentence_a

    money_for_b = sentences_for_b * rate_per_sentence_b

    total_money = money_for_a + money_for_b

    result = total_money

    return result


 Executed result: 8333.333333333334
[EXP] 200: [success_rate]: True, [output]: def solution():
    pails_morning = 5

    pails_afternoon = 6

    total_pails = pails_morning + pails_afternoon

    liters_per_pail = 5

    total_liters_per_day = total_pails * liters_per_pail

    result = total_liters_per_day

    return result


 Executed result: 55
[EXP] 201: [success_rate]: False, [output]: def solution():
    salary_per_week = 2000

    salary_per_year = salary_per_week * 52

    raise_amount = salary_per_year * 0.05

    total_salary_with_raise = salary_per_year + raise_amount

    award_money = 5000

    total_salary_with_award = total_salary_with_raise + award_money

    result = total_salary_with_award

    return result


 Executed result: 114200.0
[EXP] 202: [success_rate]: True, [output]: def solution():
    acres = 10

    tons_per_acre = 5

    tons_total = acres * tons_per_acre

    barrels_per_ton = 2

    barrels_total = tons_total * barrels_per_ton

    result = barrels_total

    return result


 Executed result: 100
[EXP] 203: [success_rate]: True, [output]: def solution():
    slices_per_sandwich = 2

    sandwiches = 7  # 7 days this week

    slices_for_sandwiches = slices_per_sandwich * sandwiches

    slices_per_omelet = slices_per_sandwich + 1

    omelets = 3

    slices_for_omelets = slices_per_omelet * omelets

    slices_for_macaroni = 8

    total_slices = slices_for_sandwiches + slices_for_omelets + slices_for_macaroni

    result = total_slices

    return result


 Executed result: 31
[EXP] 204: [success_rate]: True, [output]: def solution():
    green_pens = 22

    yellow_pens = 10

    blue_pens_per_bag = 9

    red_pens_per_bag = 6

    blue_pens = blue_pens_per_bag * 6

    red_pens = red_pens_per_bag * 2

    total_pens_initial = green_pens + yellow_pens

    total_pens = total_pens_initial + blue_pens + red_pens

    result = total_pens

    return result


 Executed result: 98
[EXP] 205: [success_rate]: False, [output]: def solution():
    brinley_scores = [89, 71, 92, 100, 86]

    total_score = sum(brinley_scores)

    lowest_score = min(brinley_scores)

    total_score -= lowest_score

    target_average = 93

    target_total = target_average * 6

    score_needed = target_total - total_score

    result = score_needed

    return result


 Executed result: 191
[EXP] 206: [success_rate]: True, [output]: def solution():
    bike_rides_week1 = 5

    km_per_ride = 25

    total_km_week1 = bike_rides_week1 * km_per_ride * 4

    bike_rides_week2 = 2

    km_per_ride_week2 = 60

    total_km_week2 = bike_rides_week2 * km_per_ride_week2 * 3

    total_km = total_km_week1 + total_km_week2

    result = total_km

    return result


 Executed result: 860
[EXP] 207: [success_rate]: True, [output]: def solution():
    chocolate_bars = 25

    candy_apples = 80

    weight_per_chocolate_bar = 40

    weight_per_candy_apple = weight_per_chocolate_bar / 2

    total_weight_chocolate_bars = chocolate_bars * weight_per_chocolate_bar

    total_weight_candy_apples = candy_apples * weight_per_candy_apple

    total_weight = total_weight_chocolate_bars + total_weight_candy_apples

    result = total_weight

    return result


 Executed result: 2600.0
[EXP] 208: [success_rate]: True, [output]: def solution():
    cakes_monday = 4

    cakes_tuesday = 3 * cakes_monday

    cakes_wednesday = 5 * cakes_tuesday

    total_cakes = cakes_monday + cakes_tuesday + cakes_wednesday

    result = total_cakes

    return result


 Executed result: 76
[EXP] 209: [success_rate]: False, [output]: def solution():
    cost_of_plate = 6000

    total_cost_of_plates = cost_of_plate * 6

    cost_of_cups = total_cost_of_plates - 1200

    cost_of_each_cup = cost_of_cups / 24

    result = cost_of_each_cup

    return result


 Executed result: 1450.0
[EXP] 210: [success_rate]: True, [output]: def solution():
    jacket_cost = 30

    shoe_cost = 20

    shoe_pairs = 2

    total_cost = jacket_cost + shoe_cost * shoe_pairs

    baby_sitting_earnings = 5 * 4

    lawn_mowing_earnings = 4

    initial_savings = 10

    total_earnings = baby_sitting_earnings + initial_savings

    remaining_to_pay = total_cost - total_earnings

    lawns_to_mow = -(-remaining_to_pay // lawn_mowing_earnings)

    result = lawns_to_mow

    return result


 Executed result: 10
[EXP] 211: [success_rate]: False, [output]: def solution():
    red_chickens_eggs = 3

    white_chickens_eggs = 5

    total_eggs = 42

    red_chickens_eggs_per_day = total_eggs - (white_chickens_eggs * (white_chickens_eggs - red_chickens_eggs))

    red_chickens = red_chickens_eggs_per_day / red_chickens_eggs

    result = int(red_chickens)

    return result


 Executed result: 10
[EXP] 212: [success_rate]: True, [output]: def solution():
    park_length = 6

    park_width = 1.5

    park_perimeter = 2 * (park_length + park_width)

    speed = 3

    time = park_perimeter / speed

    result = time

    return result


 Executed result: 5.0
[EXP] 213: [success_rate]: True, [output]: def solution():
    customers_first_day = 100

    customers_second_day = customers_first_day + 50

    total_customers_three_days = 500

    customers_third_day = total_customers_three_days - (customers_first_day + customers_second_day)

    result = customers_third_day

    return result


 Executed result: 250
[EXP] 214: [success_rate]: False, [output]: def solution():
    big_pool_water_per_minute = 0

    small_pool_water_per_minute = 0

    big_pool_water_4_minutes_ago = 0

    small_pool_water_4_minutes_ago = 0

    big_pool_water_now = 0

    small_pool_water_now = 0

    big_pool_water_per_minute = -4

    small_pool_water_per_minute = -4

    big_pool_water_now = big_pool_water_now * 4

    small_pool_water_now = small_pool_water_now * 1

(result)

return result


 Executed result: Error: return error, fail to execute
[EXP] 215: [success_rate]: True, [output]: def solution():
    shoes_cost = 320

    belt_cost = 32

    total_cost = shoes_cost + belt_cost

    hourly_wage = 8

    hours_worked = total_cost / hourly_wage

    result = hours_worked

    return result


 Executed result: 44.0
[EXP] 216: [success_rate]: True, [output]: def solution():
    initial_loan = 2000

    interest_rate = 0.1

    interest = initial_loan * interest_rate

    total_loan = initial_loan + interest

    monthly_payment = 165

    num_months = 12

    total_paid = monthly_payment * num_months

    remaining_balance = total_loan - total_paid

    result = remaining_balance

    return result


 Executed result: 220.0
[EXP] 217: [success_rate]: True, [output]: def solution():
    roses = 4

    dahlias = roses + 7

    total_flowers = roses + dahlias

    result = total_flowers

    return result


 Executed result: 15
[EXP] 218: [success_rate]: True, [output]: def solution():
    harriet_age = 21

    harriet_age_three_years_later = harriet_age + 3

    zack_age = 2 * harriet_age

    zack_age_three_years_later = zack_age + 3

    adrian_age = 3 * harriet_age

    adrian_age_three_years_later = adrian_age + 3

    average_age_three_years_later = (harriet_age_three_years_later + zack_age_three_years_later + adrian_age_three_years_later) / 3

    result = average_age_three_years_later

    return result


 Executed result: 45.0
[EXP] 219: [success_rate]: True, [output]: def solution():
    total_points = 251

    naomi_points = 68

    yuri_points = (naomi_points / 2) + 10

    brianna_points = naomi_points + 17

    jojo_points = total_points - (naomi_points + yuri_points + brianna_points)

    result = jojo_points

    return result


 Executed result: 54.0
[EXP] 220: [success_rate]: True, [output]: def solution():
    time_crossword = 10

    time_sudoku = 5

    puzzles_crossword = 3

    puzzles_sudoku = 8

    time_crossword_total = time_crossword * puzzles_crossword

    time_sudoku_total = time_sudoku * puzzles_sudoku

    total_time = time_crossword_total + time_sudoku_total

    result = total_time

    return result


 Executed result: 70
[EXP] 221: [success_rate]: True, [output]: def solution():
    water_initial = 120

    water_used = 90

    water_left = water_initial - water_used

    rainwater_collected = 2 * water_left

    water_total = water_left + rainwater_collected

    result = water_total

    return result


 Executed result: 90
[EXP] 222: [success_rate]: True, [output]: def solution():
    geraniums = 90

    petunias = geraniums - 40

    total_flowers = geraniums + petunias

    result = total_flowers

    return result


 Executed result: 140
[EXP] 223: [success_rate]: True, [output]: def solution():
    total_spend_first_year = 15000

    spend_second_year = total_spend_first_year / 3

    total_spend = total_spend_first_year + spend_second_year

    result = total_spend

    return result


 Executed result: 20000.0
[EXP] 224: [success_rate]: True, [output]: def solution():
    carlos_canoe_cost = 3 * 30

    benji_banana_boat_cost = 5 * 18

    total_cost = carlos_canoe_cost + benji_banana_boat_cost

    result = total_cost

    return result


 Executed result: 180
[EXP] 225: [success_rate]: True, [output]: def solution():
    bus_days = 6

    car_days = bus_days / 2

    total_days = bus_days + car_days

    result = total_days

    return result


 Executed result: 9.0
[EXP] 226: [success_rate]: True, [output]: def solution():
    water_type_initial = 40

    water_type_lost = 8

    water_type_now = water_type_initial - water_type_lost

    grass_type_initial = 20

    grass_type_added = 14

    grass_type_now = grass_type_initial + grass_type_added

    total_cards = water_type_now + grass_type_now + 30

    water_type_cards = water_type_now

    water_type_percentage = (water_type_cards / total_cards) * 100

    result = round(water_type_percentage)

    return result


 Executed result: 33
[EXP] 227: [success_rate]: True, [output]: def solution():
    base_burrito = 6.50

    extra_meat = 2.00

    extra_cheese = 1.00

    avocado = 1.00

    sauces = 0.25 * 2

    upgrade = 3.00

    total_cost = base_burrito + extra_meat + extra_cheese + avocado + sauces + upgrade

    gift_card = 5.00

    amount_owed = total_cost - gift_card

    result = amount_owed

    return result


 Executed result: 9.0
[EXP] 228: [success_rate]: True, [output]: def solution():
    total_pieces = 360

    pieces_per_minute_kalinda = 4

    pieces_per_minute_mom = pieces_per_minute_kalinda / 2

    pieces_per_minute_total = pieces_per_minute_kalinda + pieces_per_minute_mom

    time_taken_minutes = total_pieces / pieces_per_minute_total

    time_taken_hours = time_taken_minutes / 60

    result = time_taken_hours

    return result


 Executed result: 1.0
[EXP] 229: [success_rate]: True, [output]: def solution():
    total_melons = 120

    melons_harvested_after_two_months = total_melons * 0.3

    melons_left_after_two_months = total_melons - melons_harvested_after_two_months

    melons_harvested_after_two_weeks = melons_left_after_two_months * 0.75

    melons_left_after_two_weeks = melons_left_after_two_months - melons_harvested_after_two_weeks

    result = melons_left_after_two_weeks

    return result


 Executed result: 21.0
[EXP] 230: [success_rate]: False, [output]: def solution():
    cars_initial = 12

    car_cost = 20000

    total_car_cost = cars_initial * car_cost

    tax = total_car_cost * 0.1

    registration_cost = cars_initial * 1000

    total_cost = total_car_cost + tax + registration_cost

    result = total_cost

    return result


 Executed result: 276000.0
[EXP] 231: [success_rate]: True, [output]: def solution():
    robert_shells = 20

    kylie_shells_monday = robert_shells + 5

    kylie_shells_tuesday = kylie_shells_monday * 2

    result = kylie_shells_tuesday

    return result


 Executed result: 50
[EXP] 232: [success_rate]: True, [output]: def solution():
    ants = 50

    bugs = ants / 2

    total_insects = ants + bugs

    result = total_insects

    return result


 Executed result: 75.0
[EXP] 233: [success_rate]: True, [output]: def solution():
    penguins_initial = 36

    penguins_swimming = penguins_initial // 3

    penguins_eating = penguins_initial // 3

    penguins_left = penguins_initial - penguins_swimming - penguins_eating

    result = penguins_left

    return result


 Executed result: 12
[EXP] 234: [success_rate]: True, [output]: def solution():
    steve_tomatoes_per_day = 6

    girlfriend_tomatoes_per_day = steve_tomatoes_per_day / 2

    total_tomatoes_per_day = steve_tomatoes_per_day + girlfriend_tomatoes_per_day

    tomatoes_per_week = total_tomatoes_per_day * 7

    tomatoes_per_vine = 3

    vines_needed = tomatoes_per_week / tomatoes_per_vine

    result = vines_needed

    return result


 Executed result: 21.0
[EXP] 235: [success_rate]: True, [output]: def solution():
    friends = 20

    slices_per_friend = 4

    slices_needed = friends * slices_per_friend

    slices_per_pizza = 8

    pizzas_needed = slices_needed // slices_per_pizza

    result = pizzas_needed

    return result


 Executed result: 10
[EXP] 236: [success_rate]: False, [output]: def solution():
    pens_initial = 25

    pens_used_to_make = 0

    while pens_initial > 0:

        if pens_initial >= 5:

            pens_initial -= 5

            pens_used_to_make += 1

        else:

            break

    result = pens_initial + pens_used_to_make

    return result


 Executed result: 5
[EXP] 237: [success_rate]: True, [output]: def solution():
    money_initial = 20

    extra_money = 10

    total_money = money_initial + extra_money

    tripled_money = total_money * 3

    result = tripled_money

    return result


 Executed result: 90
[EXP] 238: [success_rate]: True, [output]: def solution():
    jessa_age = 20

    joan_age = jessa_age + 5

    mary_age = joan_age - 2

    total_ages = jessa_age + joan_age + mary_age

    result = total_ages

    return result


 Executed result: 68
[EXP] 239: [success_rate]: True, [output]: def solution():
    students_initial = 1000

    students_exited_A = 0.3 * students_initial

    students_remaining = students_initial - students_exited_A

    students_exited_B = 3 / 5 * students_remaining

    students_exited_C = students_remaining - students_exited_B

    result = students_exited_C

    return result


 Executed result: 280.0
[EXP] 240: [success_rate]: True, [output]: def solution():
    john_candies = 54

    robert_candies = john_candies / 2

    james_candies = robert_candies + 6

    difference = john_candies - james_candies

    result = difference

    return result


 Executed result: 21.0
[EXP] 241: [success_rate]: True, [output]: def solution():
    dolly_books = 2

    pandora_books = 1

    total_books_read = dolly_books + pandora_books

    books_read_by_dolly = total_books_read

    books_read_by_pandora = total_books_read

    total_books_read_by_both = books_read_by_dolly + books_read_by_pandora

    result = total_books_read_by_both

    return result


 Executed result: 6
[EXP] 242: [success_rate]: True, [output]: def solution():
    penpals_initial = 5

    penpals_stopped = 2

    penpals_left = penpals_initial - penpals_stopped

    letters_per_week = 2 * penpals_left

    pages_per_week = letters_per_week * 5

    minutes_per_page = 6

    minutes_per_week = pages_per_week * minutes_per_page

    hours_per_week = minutes_per_week / 60

    result = hours_per_week

    return result


 Executed result: 3.0
[EXP] 243: [success_rate]: True, [output]: def solution():
    phone_plan_minutes = 1000

    daily_calls = 15

    total_daily_calls = daily_calls * 30

    extra_minutes = 300

    total_minutes_used = total_daily_calls + extra_minutes

    minutes_left = phone_plan_minutes - total_minutes_used

    result = minutes_left

    return result


 Executed result: 250
[EXP] 244: [success_rate]: False, [output]: def solution():
    french_fries_initial = 24

    french_fries_taken_by_kyle = 5

    french_fries_taken_by_billy = french_fries_taken_by_kyle * 2

    french_fries_taken_by_colby = french_fries_taken_by_kyle - 3

    total_taken = french_fries_taken_by_kyle + french_fries_taken_by_billy + french_fries_taken_by_colby

    french_fries_left = french_fries_initial - total_taken

    french_fries_given_by_ginger = french_fries_initial + french_fries_left - 27

    result = french_fries_given_by_ginger

    return result


 Executed result: 4
[EXP] 245: [success_rate]: False, [output]: def solution():
    snails_aquarium1 = 4

    snails_aquarium2 = 32

    total_snails = snails_aquarium1 + snails_aquarium2

    difference_snails = snails_aquarium2 - snails_aquarium1

    fish = difference_snails / 2

    fish_per_aquarium = fish

    result = fish_per_aquarium

    return result


 Executed result: 14.0
[EXP] 246: [success_rate]: True, [output]: def solution():
    hourly_rate = 250

    hours_per_day = 6

    days_per_week = 4

    weeks = 5

    total_hours = hours_per_day * days_per_week * weeks

    total_cost = total_hours * hourly_rate

    discount = 0.1

    final_cost = total_cost * (1 - discount)

    result = final_cost

    return result


 Executed result: 27000.0
[EXP] 247: [success_rate]: True, [output]: def solution():
    total_cost = 12 + 43 + 15 + 4 + 22

    split_cost = total_cost / 3

    result = split_cost

    return result


 Executed result: 32.0
[EXP] 248: [success_rate]: True, [output]: def solution():
    bags_of_onions = 4

    weight_per_bag = 50

    weight_total = bags_of_onions * weight_per_bag

    cost_per_pound = 1.50

    cost_total = weight_total * cost_per_pound

    result = cost_total

    return result


 Executed result: 300.0
[EXP] 249: [success_rate]: False, [output]: def solution():
    sister_cookies_monday = 5

    sister_cookies_tuesday = 13

    sister_total_cookies = sister_cookies_monday + sister_cookies_tuesday

    sue_cookies_monday = 4 * sister_cookies_monday

    sue_cookies_tuesday = 2 * sister_cookies_tuesday

    sue_total_cookies = sue_cookies_monday + sue_cookies_tuesday

    sue_calories = sue_total_cookies * 200

    sister_calories = sister_total_cookies * 200

    difference_calories = sue_calories - sister_calories

    result = difference_calories

    return result


 Executed result: 5600
[EXP] 250: [success_rate]: False, [output]: def solution():
    students_per_class = 20

    num_classes = 3

    total_students = students_per_class * num_classes

    total_boys = total_students / 2

    first_class_girls = 15

    second_class_girls = 12

    total_girls = first_class_girls + second_class_girls

    third_class_girls = total_girls - first_class_girls - second_class_girls

    third_class_boys = students_per_class - third_class_girls

    result = third_class_boys

    return result


 Executed result: 20
[EXP] 251: [success_rate]: True, [output]: def solution():
    apps_initial = 61

    apps_deleted = 9

    apps_added = 18

    apps_after_delete = apps_initial - apps_deleted

    apps_after_download = apps_after_delete + apps_added

    result = apps_after_download

    return result


 Executed result: 70
[EXP] 252: [success_rate]: False, [output]: def solution():
    wolves_killed_last_night = 10

    cougars_killed_last_night = 15

    wolves_killed_today = wolves_killed_last_night * 3

    cougars_killed_today = cougars_killed_last_night - 3

    total_animals_killed = wolves_killed_last_night + cougars_killed_last_night + wolves_killed_today + cougars_killed_today

    result = total_animals_killed

    return result


 Executed result: 67
[EXP] 253: [success_rate]: True, [output]: def solution():
    bill_floor_initial = 3

    bill_floor_final = 4 * bill_floor_initial + 6

    result = bill_floor_final

    return result


 Executed result: 18
[EXP] 254: [success_rate]: True, [output]: def solution():
    mitchel_slides = 30

    anne_slides = mitchel_slides * 0.7

    robert_slides = anne_slides * 4

    result = robert_slides

    return result


 Executed result: 84.0
[EXP] 255: [success_rate]: True, [output]: def solution():
    stalls = 10

    cows_per_stall = 20

    total_cows = stalls * cows_per_stall

    new_cows = 40

    total_cows += new_cows

    cows_per_stall += new_cows / stalls

    cows_in_8_stalls = cows_per_stall * 8

    result = cows_in_8_stalls

    return result


 Executed result: 192.0
[EXP] 256: [success_rate]: True, [output]: def solution():
    pennies = 100

    nickels = 40

    dimes = 20

    dollar_bills = 40

    pennies_in_dollars = pennies / 100

    nickels_in_dollars = nickels * 0.05

    dimes_in_dollars = dimes * 0.10

    dollar_bills_in_dollars = dollar_bills

    total_money = pennies_in_dollars + nickels_in_dollars + dimes_in_dollars + dollar_bills_in_dollars

    result = total_money

    return result


 Executed result: 45.0
[EXP] 257: [success_rate]: False, [output]: def solution():
    sections_in_tree = 200

    weight_per_section = 400

    total_weight = sections_in_tree * weight_per_section

    weight_eaten = 30 / 100 * total_weight

    weight_left = total_weight - weight_eaten

    result = weight_left

    return result


 Executed result: 56000.0
[EXP] 258: [success_rate]: True, [output]: def solution():
    fine_per_book = 0.50

    num_books = 8

    fine_total = fine_per_book * num_books

    fee = 2.00

    total_fine = fine_total + fee

    result = total_fine

    return result


 Executed result: 6.0
[EXP] 259: [success_rate]: True, [output]: def solution():
    andrea_apples = 52

    jamal_apples = andrea_apples - 8

    jamal_bananas = jamal_apples + 4

    andrea_bananas = jamal_bananas / 2

    total_fruits = jamal_apples + jamal_bananas + andrea_apples + andrea_bananas

    result = total_fruits

    return result


 Executed result: 168.0
[EXP] 260: [success_rate]: False, [output]: def solution():
    cookies_today = 36

    cookies_tomorrow = 30

    total_cookies = cookies_today + cookies_tomorrow

    cups_per_dozen = 2

    cups_per_cookies = 1 / 12

    cups_needed = total_cookies * cups_per_cookies

    result = cups_needed

    return result


 Executed result: 5.5
[EXP] 261: [success_rate]: False, [output]: def solution():
    pennies_initial = 9300

    pennies_used = int(pennies_initial * 2 / 3)

    pennies_left = pennies_initial - pennies_used

    dollars_left = pennies_left / 100

    result = dollars_left

    return result


 Executed result: 31.0
[EXP] 262: [success_rate]: True, [output]: def solution():
    marbles_initial = 5 * 50

    marbles_received = 20

    marbles_total = marbles_initial + marbles_received

    result = marbles_total

    return result


 Executed result: 270
[EXP] 263: [success_rate]: True, [output]: def solution():
    trees_chris = 6

    trees_ferdinand = trees_chris // 2

    trees_harry = 2 * trees_ferdinand + 5

    difference = trees_harry - trees_ferdinand

    result = difference

    return result


 Executed result: 8
[EXP] 264: [success_rate]: True, [output]: def solution():
    carmen_money = 100

    samantha_money = carmen_money + 25

    daisy_money = samantha_money + 50

    total_money = carmen_money + samantha_money + daisy_money

    result = total_money

    return result


 Executed result: 400
[EXP] 265: [success_rate]: True, [output]: def solution():
    budget = 400000

    selling_price = 350000

    brokerage_fee = 0.05 * selling_price

    transfer_fee = 0.12 * selling_price

    total_price = selling_price + brokerage_fee + transfer_fee

    more_than_budget = total_price - budget

    result = more_than_budget

    return result


 Executed result: 9500.0
[EXP] 266: [success_rate]: False, [output]: def solution():
    house_price = 400000

    transfer_fee = house_price * 0.03

    brokerage_fee = house_price * 0.05

    total_fees = transfer_fee + brokerage_fee

    total_cost = house_price + total_fees + 250000

    net_proceeds = house_price - total_cost

    result = net_proceeds

    return result


 Executed result: -282000.0
[EXP] 267: [success_rate]: False, [output]: def solution():
    time_to_heat_to_300 = 20

    time_to_heat_to_400 = time_to_heat_to_300 + (time_to_heat_to_300 * 0.4)

    time_to_cook = time_to_heat_to_400 + 5

    result = time_to_cook

    return result


 Executed result: 33.0
[EXP] 268: [success_rate]: True, [output]: def solution():
    newspaper_ad_cost = 5

    newspaper_ads = 50

    tv_ad_cost = 75

    tv_ads = 15

    newspaper_cost = newspaper_ads * newspaper_ad_cost

    tv_cost = tv_ads * tv_ad_cost

    total_cost = newspaper_cost + tv_cost

    result = total_cost

    return result


 Executed result: 1375
[EXP] 269: [success_rate]: True, [output]: def solution():
    balls_initial = 16

    golf_balls = balls_initial // 2

    blue_golf_balls = golf_balls // 2

    result = blue_golf_balls

    return result


 Executed result: 4
[EXP] 270: [success_rate]: True, [output]: def solution():
    first_bag = 300

    second_bag = first_bag + 12

    third_bag = first_bag / 2

    total_mms = first_bag + second_bag + third_bag

    result = total_mms

    return result


 Executed result: 762.0
[EXP] 271: [success_rate]: True, [output]: def solution():
    bedrooms_per_house = 3

    windows_per_bedroom = 2

    additional_windows_per_house = 4

    total_windows_per_house = bedrooms_per_house * windows_per_bedroom + additional_windows_per_house

    total_windows = total_windows_per_house * 2

    result = total_windows

    return result


 Executed result: 20
[EXP] 272: [success_rate]: True, [output]: def solution():
    total_amount_paid = 20

    cost_cocoa = 4.20

    cost_laundry = 9.45

    cost_pasta = 1.35

    total_cost = cost_cocoa + cost_laundry + cost_pasta

    change = total_amount_paid - total_cost

    result = change

    return result


 Executed result: 5.000000000000002
[EXP] 273: [success_rate]: True, [output]: def solution():
    total_stitches = 1800

    body_stitches = 900

    collar_stitches = body_stitches / 10

    rosette_stitches = 2 * collar_stitches

    sleeve_stitches = (total_stitches - body_stitches - collar_stitches - rosette_stitches) / 2

    result = sleeve_stitches

    return result


 Executed result: 315.0
[EXP] 274: [success_rate]: True, [output]: def solution():
    tomato_seeds_packets = 20

    tomato_seeds_cost = 40

    tomato_seeds_total_cost = tomato_seeds_packets * tomato_seeds_cost

    celery_seeds_packets = 80

    celery_seeds_cost = 30

    celery_seeds_total_cost = celery_seeds_packets * celery_seeds_cost

    total_cost = tomato_seeds_total_cost + celery_seeds_total_cost

    result = total_cost

    return result


 Executed result: 3200
[EXP] 275: [success_rate]: True, [output]: def solution():
    lines_in_song = 54

    lines_in_first_scene = lines_in_song * 2

    sean_lines_in_first_scene = lines_in_first_scene // 3

    lines_in_second_scene = lines_in_song + 6

    sean_lines_in_second_scene = lines_in_second_scene * 4 // 5

    total_lines = sean_lines_in_first_scene + sean_lines_in_second_scene + lines_in_song

    result = total_lines

    return result


 Executed result: 138
[EXP] 276: [success_rate]: True, [output]: def solution():
    cards_initial = 80

    cards_with_A = (2/5) * cards_initial

    cards_remaining = cards_initial - cards_with_A

    cards_with_B = cards_remaining / 2

    cards_remaining = cards_remaining - cards_with_B

    cards_with_C = (5/8) * cards_remaining

    cards_remaining = cards_remaining - cards_with_C

    cards_with_D = cards_remaining

    result = cards_with_D

    return result


 Executed result: 9.0
[EXP] 277: [success_rate]: True, [output]: def solution():
    small_holes = 30

    large_holes = 15

    time_per_small_hole = 3

    time_per_large_hole = 10

    total_time_small_holes = small_holes * time_per_small_hole

    total_time_large_holes = large_holes * time_per_large_hole

    total_time = total_time_small_holes + total_time_large_holes

    hours = total_time / 60

    result = hours

    return result


 Executed result: 4.0
[EXP] 278: [success_rate]: True, [output]: def solution():
    sum_of_ages_now = 20

    increase_of_sum_of_ages = 10 * 2

    sum_of_ages_in_10_years = sum_of_ages_now + increase_of_sum_of_ages

    result = sum_of_ages_in_10_years

    return result


 Executed result: 40
[EXP] 279: [success_rate]: False, [output]: def solution():
    times_ruby_is_older = 6

    times_ruby_will_be_older = 3

    years_to_pass = 9

    rubys_age_in_9_years = (times_ruby_will_be_older + 1) * (1 + times_ruby_is_older) * years_to_pass

    rubys_age_now = rubys_age_in_9_years - years_to_pass

    sams_age_now = rubys_age_now / times_ruby_is_older

    result = sams_age_now

    return result


 Executed result: 40.5
[EXP] 280: [success_rate]: True, [output]: def solution():
    popsicles = 20

    popsicle_cost = 0.25

    popsicle_total = popsicles * popsicle_cost

    ice_cream_bars = 4

    ice_cream_bar_cost = 0.50

    ice_cream_bar_total = ice_cream_bars * ice_cream_bar_cost

    total_cost = popsicle_total + ice_cream_bar_total

    result = total_cost

    return result


 Executed result: 7.0
[EXP] 281: [success_rate]: True, [output]: def solution():
    cobra_spots = 70

    mamba_spots = cobra_spots / 2

    cobra_count = 40

    mamba_count = 60

    total_cobra_spots = cobra_count * cobra_spots

    total_mamba_spots = mamba_count * mamba_spots

    total_spots = total_cobra_spots + total_mamba_spots

    half_total_spots = total_spots / 2

    result = half_total_spots

    return result


 Executed result: 2450.0
[EXP] 282: [success_rate]: True, [output]: def solution():
    team_members = 12

    coaches = 3

    total_guests = team_members * 2

    total_people = team_members + coaches + total_guests

    pizzas_needed = (total_people + 2) // 3

    cost_per_pizza = 15

    total_cost = pizzas_needed * cost_per_pizza

    result = total_cost

    return result


 Executed result: 195
[EXP] 283: [success_rate]: True, [output]: def solution():
    topaz_gemstones = 8

    total_length_in_inches = 25

    topaz_length_in_inches = topaz_gemstones * 1

    silver_length_in_inches = total_length_in_inches - topaz_length_in_inches

    silver_length_in_inches_quarters = silver_length_in_inches * 4

    silver_beads = silver_length_in_inches_quarters

    result = silver_beads

    return result


 Executed result: 68
[EXP] 284: [success_rate]: True, [output]: def solution():
    alani_stories = 20

    alani_stories_second_week = alani_stories * 2

    braylen_stories = 40

    braylen_stories_second_week = braylen_stories * 2

    margot_stories = 60

    margot_stories_second_week = margot_stories * 2

    total_stories = alani_stories + alani_stories_second_week + braylen_stories + braylen_stories_second_week + margot_stories + margot_stories_second_week

    result = total_stories

    return result


 Executed result: 360
[EXP] 285: [success_rate]: True, [output]: def solution():
    ann_age = 9

    brother_age = ann_age * 2

    brother_age_in_3_years = brother_age + 3

    result = brother_age_in_3_years

    return result


 Executed result: 21
[EXP] 286: [success_rate]: True, [output]: def solution():
    quarters = 5

    dimes = 2

    total_cents_initial = quarters * 25 + dimes * 10

    can_of_pop_cost = 55

    total_cents_spent = can_of_pop_cost

    total_cents_left = total_cents_initial - total_cents_spent

    result = total_cents_left

    return result


 Executed result: 90
[EXP] 287: [success_rate]: True, [output]: def solution():
    total_stars = 76

    stars_in_three_rows_of_eight = 3 * 8

    stars_in_two_rows_of_six = 2 * 6

    stars_so_far = stars_in_three_rows_of_eight + stars_in_two_rows_of_six

    stars_left = total_stars - stars_so_far

    stars_in_five_star_rows = stars_left // 5

    result = stars_in_five_star_rows

    return result


 Executed result: 8
[EXP] 288: [success_rate]: True, [output]: def solution():
    flagstones = 80

    flagstone_weight = 75

    total_weight = flagstones * flagstone_weight

    truck_capacity = 2000

    trucks_needed = total_weight // truck_capacity

    if total_weight % truck_capacity != 0:

        trucks_needed += 1

    result = trucks_needed

    return result


 Executed result: 3
[EXP] 289: [success_rate]: True, [output]: def solution():
    speed_fast_lane = 60

    distance = 480

    time_fast_lane = distance / speed_fast_lane

    speed_slow_lane = speed_fast_lane / 2

    time_slow_lane = distance / speed_slow_lane

    result = time_slow_lane

    return result


 Executed result: 16.0
[EXP] 290: [success_rate]: True, [output]: def solution():
    ali_medals = 22

    izzy_medals = ali_medals - 5

    total_medals = ali_medals + izzy_medals

    medals_given_out = total_medals * 10

    result = medals_given_out

    return result


 Executed result: 390
[EXP] 291: [success_rate]: True, [output]: def solution():
    total_chocolate_bars = 8 * 5

    chocolate_bars_given_to_adults = 4 * 6

    chocolate_bars_left = total_chocolate_bars - chocolate_bars_given_to_adults

    chocolate_bars_per_child = chocolate_bars_left // 8

    result = chocolate_bars_per_child

    return result


 Executed result: 2
[EXP] 292: [success_rate]: False, [output]: def solution():
    minutes_worked = 3 * 60

    earnings_per_minutes = 5

    total_earnings = earnings_per_minutes * minutes_worked

    result = total_earnings

    return result


 Executed result: 900
[EXP] 293: [success_rate]: True, [output]: def solution():
    mike_points = 21

    jim_points = mike_points - 3

    tony_points = mike_points * 2

    extra_points = 0

    for player in [mike_points, jim_points, tony_points]:

        if player > 20:

            extra_points += 1

    total_points = mike_points + jim_points + tony_points + extra_points

    result = total_points

    return result


 Executed result: 83
[EXP] 294: [success_rate]: True, [output]: def solution():
    oranges_initial = 15

    oldest_son_years = 8

    youngest_son_years = oldest_son_years / 2

    oranges_washed = oldest_son_years + youngest_son_years

    oranges_left = oranges_initial - oranges_washed

    result = oranges_left

    return result


 Executed result: 3.0
[EXP] 295: [success_rate]: True, [output]: def solution():
    day1_pushups = 100

    day1_squats = 50

    day1_presses = 20

    day2_pushups = day1_pushups + 20

    day2_squats = day1_squats - 10

    day2_presses = day1_presses * 2

    total_pushups = day1_pushups + day2_pushups

    total_squats = day1_squats + day2_squats

    total_presses = day1_presses + day2_presses

    total_activities = total_pushups + total_squats + total_presses

    result = total_activities

    return result


 Executed result: 370
[EXP] 296: [success_rate]: True, [output]: def solution():
    rice_initial = 42

    rice_consumed_per_day = 5 * 0.2 * 2

    days_rice_last = rice_initial / rice_consumed_per_day

    weeks_rice_last = days_rice_last / 7

    result = weeks_rice_last

    return result


 Executed result: 3.0
[EXP] 297: [success_rate]: True, [output]: def solution():
    target_crates = 120

    weekend_sales = 20

    weekday_sales = 15 + 12 + 18

    total_sales = weekend_sales + weekday_sales

    crates_off_target = target_crates - total_sales

    result = crates_off_target

    return result


 Executed result: 55
[EXP] 298: [success_rate]: False, [output]: def solution():
    initial_bid = 200

    bid_increase = 50

    other_bidders = 3

    total_bids = other_bidders

    total_bid = initial_bid + (total_bids * bid_increase)

    result = total_bid

    return result


 Executed result: 350
[EXP] 299: [success_rate]: True, [output]: def solution():
    miles_driven_per_trip = 2 * 30

    trips_per_week = 5

    trips_per_year = trips_per_week * 50

    miles_driven_per_year = trips_per_year * miles_driven_per_trip

    cost_per_mile = 2

    total_cost_driving = miles_driven_per_year * cost_per_mile

    bonus_per_month = 150

    bonus_per_year = bonus_per_month * 12

    total_cost_year = total_cost_driving + bonus_per_year

    result = total_cost_year

    return result


 Executed result: 31800
[EXP] 300: [success_rate]: True, [output]: def solution():
    sunday_exercise = 23

    monday_exercise = 16

    total_exercise = sunday_exercise + monday_exercise

    tuesday_exercise = total_exercise * 2

    result = tuesday_exercise

    return result


 Executed result: 78
[EXP] 301: [success_rate]: False, [output]: def solution():
    pages_in_tabloid = 32

    pages_per_piece = 2

    pieces_of_paper = (pages_in_tabloid + pages_per_piece - 1) // pages_per_piece

    result = pieces_of_paper

    return result


 Executed result: 16
[EXP] 302: [success_rate]: True, [output]: def solution():
    money_initial = 50

    money_spent_on_food = money_initial / 2

    money_spent_on_rides = 10

    money_spent = money_spent_on_food + money_spent_on_rides

    money_left = money_initial - money_spent

    result = money_left

    return result


 Executed result: 15.0
[EXP] 303: [success_rate]: False, [output]: def solution():
    books_initial = 250

    books_sold_first_year = (books_initial - 50) / 2

    books_sold_second_year = 45

    books_sold_third_year = books_initial - 50 - books_sold_second_year - books_sold_first_year

    revenue_per_book = 20

    revenue_first_year = books_sold_first_year * revenue_per_book

    revenue_second_year = books_sold_second_year * revenue_per_book

    revenue_third_year = books_sold_third_year * revenue_per_book

    result = revenue_second_year

    return result


 Executed result: 900
[EXP] 304: [success_rate]: False, [output]: def solution():
    hours_per_day = 10

    days_per_week = 5

    hours_per_week = hours_per_day * days_per_week

    salary_per_hour = 10

    salary_per_week = hours_per_week * salary_per_hour

    bonus = 300

    salary_per_month = salary_per_week * 4 + bonus

    result = salary_per_month

    return result


 Executed result: 2300
[EXP] 305: [success_rate]: True, [output]: def solution():
    people_arm_wrestled = 20

    percentage_beaten = 0.8

    people_beaten = int(people_arm_wrestled * percentage_beaten)

    people_lost = people_arm_wrestled - people_beaten

    result = people_lost

    return result


 Executed result: 4
[EXP] 306: [success_rate]: True, [output]: def solution():
    loaves_per_day = 60

    loaves_morning = loaves_per_day * 2/3

    loaves_evening_morning = loaves_per_day - loaves_morning

    loaves_afternoon_evening = loaves_evening_morning / 2

    result = loaves_afternoon_evening

    return result


 Executed result: 10.0
[EXP] 307: [success_rate]: False, [output]: def solution():
    joey_weight_loss_per_week = 8

    joey_weight_loss_per_four_weeks = joey_weight_loss_per_week * 4

    sandy_weight_loss_per_week = joey_weight_loss_per_four_weeks / 4

    result = joey_weight_loss_per_week / sandy_weight_loss_per_week

    return result


 Executed result: 1.0
[EXP] 308: [success_rate]: True, [output]: def solution():
    savings_tub = 13 - 11

    savings_packet = 0.5

    total_savings = savings_tub * 2 + savings_packet * 4

    result = total_savings

    return result


 Executed result: 6.0
[EXP] 309: [success_rate]: True, [output]: def solution():
    extra_arms_per_three_days = 1

    extra_legs_per_five_days = 1

    extra_arms = (15 // 3) * extra_arms_per_three_days

    extra_legs = (15 // 5) * extra_legs_per_five_days

    total_extra_limbs = extra_arms + extra_legs

    result = total_extra_limbs

    return result


 Executed result: 8
[EXP] 310: [success_rate]: True, [output]: def solution():
    total_money = 6000

    suits = 6

    suit_cost = 100

    total_suit_cost = suits * suit_cost

    suitcases = 3

    suitcase_cost = 50

    total_suitcase_cost = suitcases * suitcase_cost

    flight_cost = 5 * suit_cost + 700

    total_cost = total_suit_cost + total_suitcase_cost + flight_cost

    money_saving = 2000

    money_left = total_money - money_saving - total_cost

    result = money_left

    return result


 Executed result: 2050
[EXP] 311: [success_rate]: True, [output]: def solution():
    family_members = 5

    eaters_one = 3

    eaters_two = family_members - eaters_one

    eggs_per_eater_one = 3

    eggs_per_eater_two = 2

    total_eggs_per_day = eaters_one * eggs_per_eater_one + eaters_two * eggs_per_eater_two

    total_eggs_per_week = total_eggs_per_day * 7

    result = total_eggs_per_week

    return result


 Executed result: 91
[EXP] 312: [success_rate]: True, [output]: def solution():
    quinn_age = 30

    jane_age = quinn_age - 3

    trent_age = jane_age + 5

    result = trent_age

    return result


 Executed result: 32
[EXP] 313: [success_rate]: False, [output]: def solution():
    cera_age_now = 46

    cera_age_six_years_ago = cera_age_now - 6

    cera_age_six_years_ago_half = cera_age_six_years_ago / 2

    noah_age_six_years_ago = cera_age_six_years_ago_half * 2

    noah_age_now = noah_age_six_years_ago + 6

    population_chile_six_years_ago = noah_age_six_years_ago * 3000

    population_chile_now = population_chile_six_years_ago * 2

    result = population_chile_now

    return result


 Executed result: 240000.0
[EXP] 314: [success_rate]: False, [output]: def solution():
    total_members = 105

    offense_players = defense_players * 2

    special_teams_players = defense_players / 2

    offense_players + defense_players + special_teams_players = total_members

    defense_players = (total_members - offense_players - special_teams_players) / 1

    result = defense_players

    return result


 Executed result: Error: return error, fail to execute
[EXP] 315: [success_rate]: True, [output]: def solution():
    families_6 = 2

    family_size_6 = 6

    people_6 = families_6 * family_size_6

    families_4 = 3

    family_size_4 = 4

    people_4 = families_4 * family_size_4

    total_people = people_6 + people_4

    people_couldnt_come = 8

    people_had_previous_commitments = people_couldnt_come / 4

    people_show_up = total_people - people_couldnt_come - people_had_previous_commitments

    result = people_show_up

    return result


 Executed result: 14.0
[EXP] 316: [success_rate]: True, [output]: def solution():
    marbles_initial = 50

    marbles_bought = 20

    marbles_gifted = (2/5) * marbles_bought

    total_marbles = marbles_initial + marbles_bought + marbles_gifted

    weight_of_marble = 2  # each marble weighs 2 kg

    total_weight = total_marbles * weight_of_marble

    result = total_weight

    return result


 Executed result: 156.0
[EXP] 317: [success_rate]: True, [output]: def solution():
    pool_width = 6

    pool_length = 4

    pool_depth = 5

    pool_capacity = pool_width * pool_length * pool_depth

    cost_per_foot = 0.1

    cost_to_fill = pool_capacity * cost_per_foot

    result = cost_to_fill

    return result


 Executed result: 12.0
[EXP] 318: [success_rate]: True, [output]: def solution():
    boys = 30

    girls = boys * 3

    nongendered_children = boys / 10

    total_children = boys + girls + nongendered_children

    result = total_children

    return result


 Executed result: 123.0
[EXP] 319: [success_rate]: True, [output]: def solution():
    electric_wires = 45

    ratio = 1 / 3

    electric_poles = electric_wires * ratio

    result = electric_poles

    return result


 Executed result: 15.0
[EXP] 320: [success_rate]: False, [output]: def solution():
    men_initial = 25

    women_initial = 15

    total_people_initial = men_initial + women_initial

    people_left = total_people_initial * 0.25

    men_left = men_initial - 22

    total_people_left = men_left + women_initial - people_left

    women_left = total_people_left - men_left

    result = women_left

    return result


 Executed result: 5.0
[EXP] 321: [success_rate]: True, [output]: def solution():
    book_cost = 4

    magazine_cost = book_cost / 2

    pen_cost = magazine_cost - 1

    result = pen_cost

    return result


 Executed result: 1.0
[EXP] 322: [success_rate]: False, [output]: def solution():
    jam_pencils = 26

    jam_boxes = 3

    jam_pencils_per_box = jam_pencils // jam_boxes

    jam_leftover_pencils = jam_pencils % jam_boxes

    meg_pencils = 46

    total_pencils = jam_pencils + meg_pencils

    required_boxes = (total_pencils + jam_leftover_pencils - 1) // jam_pencils_per_box + jam_boxes

    result = required_boxes

    return result


 Executed result: 12
[EXP] 323: [success_rate]: False, [output]: def solution():
    degree_decrease = 65

    milliliters_added = 15

    milliliters_pers_degree = 13

    milliliters_pers_ml = 12

    milliliters_weakener = degree_decrease * milliliters_pers_degree

    total_milliliters_weakener = milliliters_weakener + (milliliters_added * milliliters_pers_ml)

    result = total_milliliters_weakener

    return result


 Executed result: 1025
[EXP] 324: [success_rate]: False, [output]: def solution():
    new_records = 7

    old_records_per_new_record = 2

    total_old_records = new_records * old_records_per_new_record

    total_people = 5

    old_records_per_person = total_old_records / total_people

    result = old_records_per_person

    return result


 Executed result: 2.8
[EXP] 325: [success_rate]: True, [output]: def solution():
    total_employees = 100

    junior_programmers = int(2/5 * total_employees)

    senior_programmers = total_employees - junior_programmers

    junior_salary = 2000

    senior_salary = junior_salary + 400

    junior_payment = junior_programmers * junior_salary

    senior_payment = senior_programmers * senior_salary

    total_payment = junior_payment + senior_payment

    result = total_payment

    return result


 Executed result: 224000
[EXP] 326: [success_rate]: False, [output]: def solution():
    people_terminal = 20

    people_bus_terminal = 0

    people_first_stop = 5

    people_second_stop_get_down = 7

    people_second_stop_get_in = 8

    people_second_stop = people_terminal - people_first_stop - people_second_stop_get_down + people_second_stop_get_in

    people_bus_terminal = people_second_stop

    result = people_terminal - people_bus_terminal

    return result


 Executed result: 4
[EXP] 327: [success_rate]: False, [output]: def solution():
    lollipops_initial = 24

    lollipops_eaten_to_school = 2

    lollipops_given_to_friends = 14

    lollipops_bought_home = lollipops_given_to_friends * 2

    lollipops_eaten_night = 3

    lollipops_eaten_morning = 2

    lollipops_used = lollipops_eaten_to_school + lollipops_given_to_friends + lollipops_bought_home + lollipops_eaten_night + lollipops_eaten_morning

    lollipops_left = lollipops_initial - lollipops_used

    result = lollipops_left

    return result


 Executed result: -25
[EXP] 328: [success_rate]: True, [output]: def solution():
    charged_percentage = 60

    charged_percentage_goal = 100

    charged_percentage_difference = charged_percentage_goal - charged_percentage

    charge_per_minute = 1/3

    minutes_to_charge = charged_percentage_difference / charge_per_minute

    hours_to_charge = minutes_to_charge / 60

    result = hours_to_charge

    return result


 Executed result: 2.0
[EXP] 329: [success_rate]: True, [output]: def solution():
    erin_lollipops_initial = 7

    lollipops_gifted = 10

    erin_lollipops_after_gift = erin_lollipops_initial + lollipops_gifted

    lollipops_given = 3

    erin_lollipops_after_giving = erin_lollipops_after_gift - lollipops_given

    result = erin_lollipops_after_giving

    return result


 Executed result: 14
[EXP] 330: [success_rate]: True, [output]: def solution():
    money_spent_last_trip = 80

    money_spent_this_trip = 43

    money_spent_used_rewards = money_spent_last_trip // 20

    money_off_with_rewards = money_spent_used_rewards

    money_off_with_coupon = money_off_with_rewards * 2

    money_off_total = money_off_with_rewards + money_off_with_coupon

    money_paid = money_spent_this_trip - money_off_total

    result = money_paid

    return result


 Executed result: 31
[EXP] 331: [success_rate]: True, [output]: def solution():
    job_a_hourly_rate = 15

    job_a_hours_per_year = 2000

    job_a_tax_rate = 0.20

    job_a_gross_pay = job_a_hourly_rate * job_a_hours_per_year

    job_a_tax = job_a_gross_pay * job_a_tax_rate

    job_a_net_pay = job_a_gross_pay - job_a_tax

    job_b_annual_salary = 42000

    job_b_property_tax = 6000

    job_b_tax_rate = 0.10

    job_b_net_income = job_b_annual_salary - job_b_property_tax

    job_b_net_pay = job_b_net_income * (1 - job_b_tax_rate)

    job_a_net_pay = round(job_a_net_pay, 2)

    job_b_net_pay = round(job_b_net_pay, 2)

    job_b_higher_net_pay = job_b_net_pay

    job_a_higher_net_pay = job_a_net_pay

    difference = job_b_higher_net_pay - job_a_higher_net_pay

    result = round(difference, 2)

    return result


 Executed result: 8400.0
[EXP] 332: [success_rate]: True, [output]: def solution():
    castles_initial = 220

    percent_ruins = 40

    castles_ruins = castles_initial * (percent_ruins / 100)

    castles_ruins_half = castles_ruins / 2

    result = castles_ruins_half

    return result


 Executed result: 44.0
[EXP] 333: [success_rate]: False, [output]: def solution():
    furniture_united_advance = 1350

    furniture_united_installments = 6 * 350

    furniture_united_total = furniture_united_advance + furniture_united_installments

    cozy_homes_advance = 1100

    cozy_homes_installments = 9 * 250

    cozy_homes_total = cozy_homes_advance + cozy_homes_installments

    cost_difference = cozy_homes_total - furniture_united_total

    result = cost_difference

    return result


 Executed result: -100
[EXP] 334: [success_rate]: True, [output]: def solution():
    dj_guns = 8

    nick_guns = 10

    rj_guns = 1

    richard_guns = 5

    total_guns = dj_guns + nick_guns + rj_guns + richard_guns

    guns_per_person = total_guns / 4

    result = guns_per_person

    return result


 Executed result: 6.0
[EXP] 335: [success_rate]: True, [output]: def solution():
    sugar_needed_suckers = 30

    sugar_needed_fudge = 70

    batches_suckers = 8

    sugar_needed_suckers_total = sugar_needed_suckers * batches_suckers

    sugar_needed_fudge_total = sugar_needed_fudge

    total_sugar_needed = sugar_needed_suckers_total + sugar_needed_fudge_total

    result = total_sugar_needed

    return result


 Executed result: 310
[EXP] 336: [success_rate]: True, [output]: def solution():
    shares = 8

    price_per_share = 8

    stock_price_initial = price_per_share * shares

    stock_price_first_year = stock_price_initial * 1.5

    stock_price_second_year = stock_price_first_year * 0.75

    result = stock_price_second_year

    return result


 Executed result: 72.0
[EXP] 337: [success_rate]: True, [output]: def solution():
    luke_hot_dogs = 2

    thomas_hot_dogs = luke_hot_dogs * 3

    john_hot_dogs = thomas_hot_dogs / 2

    difference = john_hot_dogs - luke_hot_dogs

    result = difference

    return result


 Executed result: 1.0
[EXP] 338: [success_rate]: False, [output]: def solution():
    total_students = 200

    students_in_larger_groups = total_students // 2

    students_in_smallest_group = students_in_larger_groups - 10

    result = students_in_smallest_group

    return result


 Executed result: 90
[EXP] 339: [success_rate]: True, [output]: def solution():
    animals = 60

    chickens = (animals // 3) * 2

    cows = animals - chickens

    chicken_legs = chickens * 2

    cow_legs = cows * 4

    total_legs = chicken_legs + cow_legs

    result = total_legs

    return result


 Executed result: 160
[EXP] 340: [success_rate]: False, [output]: def solution():
    balls_initial = 3

    balls_per_week = 1

    weeks = 4

    balls_total = balls_initial + balls_per_week * weeks

    balls_lost = 3

    balls_caught = 2

    balls_left = balls_total - balls_lost + balls_caught

    result = balls_left

    return result


 Executed result: 6
[EXP] 341: [success_rate]: True, [output]: def solution():
    pink_frog = 50

    blue_beetle = pink_frog

    green_toad = pink_frog

    yellow_snake = pink_frog + 10

    red_bird = pink_frog - 20

    total_weight = pink_frog + blue_beetle + green_toad + yellow_snake + red_bird + 20

    result = total_weight

    return result


 Executed result: 260
[EXP] 342: [success_rate]: True, [output]: def solution():
    baby_outfits_initial = 24

    baby_outfits_new = 2 * baby_outfits_initial

    baby_outfits_mom_gift = 15

    total_baby_outfits = baby_outfits_initial + baby_outfits_new + baby_outfits_mom_gift

    result = total_baby_outfits

    return result


 Executed result: 87
[EXP] 343: [success_rate]: True, [output]: def solution():
    distance_per_day = 5000

    increase_distance = 1.0 / 5

    new_distance_per_day = distance_per_day * (1 + increase_distance)

    days_in_june = 30  # assuming June has 30 days

    total_distance = new_distance_per_day * days_in_june

    result = total_distance

    return result


 Executed result: 180000.0
[EXP] 344: [success_rate]: True, [output]: def solution():
    juice_box_a = 4

    juice_box_b = juice_box_a + 5

    juice_box_c = juice_box_a + 7

    difference = juice_box_c - juice_box_b

    result = difference

    return result


 Executed result: 2
[EXP] 345: [success_rate]: True, [output]: def solution():
    tables_with_four_legs = 40

    tables_with_three_legs = 50

    legs_with_four_legs = tables_with_four_legs * 4

    legs_with_three_legs = tables_with_three_legs * 3

    total_legs = legs_with_four_legs + legs_with_three_legs

    result = total_legs

    return result


 Executed result: 310
[EXP] 346: [success_rate]: True, [output]: def solution():
    cookies_per_bag = 36

    cookies_per_week = cookies_per_bag

    cookies_in_lunchbox = 4 * 5

    husband_cookies = 7

    total_cookies_taken = cookies_in_lunchbox + husband_cookies

    cookies_left = cookies_per_week - total_cookies_taken

    result = cookies_left

    return result


 Executed result: 9
[EXP] 347: [success_rate]: True, [output]: def solution():
    shirt_price = 30

    discount = 0.4

    discounted_price = shirt_price * (1 - discount)

    total_cost = 2 * discounted_price

    result = total_cost

    return result


 Executed result: 36.0
[EXP] 348: [success_rate]: True, [output]: def solution():
    profit_per_day_tractors = 10 * 100

    profit_per_day_silos = 5 * 220

    percentage_increase = ((profit_per_day_silos - profit_per_day_tractors) / profit_per_day_tractors) * 100

    result = percentage_increase

    return result


 Executed result: 10.0
[EXP] 349: [success_rate]: True, [output]: def solution():
    food_cost_per_week = 25

    food_cost_per_month = food_cost_per_week * 4

    treats_cost_per_month = 20

    medicine_cost_per_month = 100

    total_cost_per_month = food_cost_per_month + treats_cost_per_month + medicine_cost_per_month

    total_cost_per_year = total_cost_per_month * 12

    result = total_cost_per_year

    return result


 Executed result: 2640
[EXP] 350: [success_rate]: True, [output]: def solution():
    yoga_class = 1

    cooking_class = yoga_class * 3

    cheese_tasting = 0.5

    museum_tour = cooking_class / 2

    errands = 2

    total_hours = yoga_class + cooking_class + cheese_tasting + museum_tour + errands

    result = total_hours

    return result


 Executed result: 8.0
[EXP] 351: [success_rate]: True, [output]: def solution():
    plant_pots_initial = 100

    daisy_plant_pots = 30

    rose_plant_pots = 2 * daisy_plant_pots

    total_plant_pots_needed = daisy_plant_pots + rose_plant_pots

    plant_pots_left_over = plant_pots_initial - total_plant_pots_needed

    result = plant_pots_left_over

    return result


 Executed result: 10
[EXP] 352: [success_rate]: True, [output]: def solution():
    money_initial = 36

    sweater_cost = 11

    brother_gift = 4

    total_spent = sweater_cost + brother_gift

    money_saved = money_initial - total_spent

    result = money_saved

    return result


 Executed result: 21
[EXP] 353: [success_rate]: False, [output]: def solution():
    boating_time = 6

    swimming_time = boating_time / 2

    overall_activities_time = boating_time + swimming_time

    shows_time = 3 * 2

    shows_time_percentage = 0.3

    total_time = overall_activities_time + shows_time

    sightseeing_percentage = 0.4

    sightseeing_time = (total_time * sightseeing_percentage)

    result = sightseeing_time

    return result


 Executed result: 6.0
[EXP] 354: [success_rate]: True, [output]: def solution():
    phone_cost = 400

    savings_initial = 80

    first_job_hours = 20

    first_job_rate = 10

    first_job_pay = first_job_hours * first_job_rate

    second_job_hours = 15

    second_job_rate = 5

    second_job_pay = second_job_hours * second_job_rate

    total_earned = first_job_pay + second_job_pay

    total_savings = savings_initial + total_earned

    money_needed = phone_cost - total_savings

    result = money_needed

    return result


 Executed result: 45
[EXP] 355: [success_rate]: True, [output]: def solution():
    shortest_tree_height = 6

    second_tree_height = shortest_tree_height + 5

    total_height = shortest_tree_height + second_tree_height

    tallest_tree_height = 2 * total_height

    result = tallest_tree_height

    return result


 Executed result: 34
[EXP] 356: [success_rate]: True, [output]: def solution():
    money_initial = 28

    toy_cars = 6

    toy_cars_cost = toy_cars * 2

    teddy_bears = 5

    teddy_bears_cost = teddy_bears * 1

    total_cost = toy_cars_cost + teddy_bears_cost

    money_spent = total_cost

    money_left = money_initial - money_spent

    extra_money = 10

    money_left_after_extra = money_left + extra_money

    result = money_left_after_extra

    return result


 Executed result: 21
[EXP] 357: [success_rate]: False, [output]: def solution():
    budget = 90

    mini_golf_cost = 5

    arcade_tokens_cost = 5

    go_karts_cost = 10

    mini_golf_rounds = 1

    go_karts_rides = 2

    total_cost = mini_golf_cost * mini_golf_rounds + arcade_tokens_cost + go_karts_cost * go_karts_rides

    friends = budget - total_cost

    result = friends

    return result


 Executed result: 60
[EXP] 358: [success_rate]: True, [output]: def solution():
    daily_pocket_money = 5

    daily_lollipop_cost = 0.25

    daily_savings = daily_pocket_money - daily_lollipop_cost * 4

    total_savings = daily_savings * 5

    result = total_savings

    return result


 Executed result: 20.0
[EXP] 359: [success_rate]: True, [output]: def solution():
    money_initial = 10

    candy_cost_per_pound = 1.5

    money_spent_on_candy = money_initial - (money_initial % int(money_initial / candy_cost_per_pound))

    money_left = money_initial - money_spent_on_candy

    change_spent_on_gumballs = money_left / 2

    gumballs_bought = 40

    gumballs_cost = change_spent_on_gumballs / 0.05

    candy_bought = money_spent_on_candy / candy_cost_per_pound

    result = candy_bought

    return result


 Executed result: 4.0
[EXP] 360: [success_rate]: False, [output]: def solution():
    carver_age = 45

    carver_older_twice_son_age = 2 * (carver_age + 5)

    carver_son_age = (carver_older_twice_son_age - carver_age) / 2

    result = carver_son_age

    return result


 Executed result: 27.5
[EXP] 361: [success_rate]: False, [output]: def solution():
    distance_from_city1_to_city2 = 75

    distance_from_city2_to_city3 = 100

    distance_from_city3_to_city1 = distance_from_city2_to_city3 + 50

    total_distance = distance_from_city1_to_city2 + distance_from_city2_to_city3 + distance_from_city3_to_city1

    daily_distance = total_distance * 3

    days_between_services = 18000 / daily_distance

    result = days_between_services

    return result


 Executed result: 18.46153846153846
[EXP] 362: [success_rate]: True, [output]: def solution():
    rottweiler_stuffing = 8

    chihuahua_stuffing = 2

    collie_stuffing = (rottweiler_stuffing + chihuahua_stuffing) / 2

    chihuahua_beds = 4

    collie_beds = 3

    total_stuffing_needed = (chihuahua_beds * chihuahua_stuffing) + (collie_beds * collie_stuffing)

    result = total_stuffing_needed

    return result


 Executed result: 23.0
[EXP] 363: [success_rate]: True, [output]: def solution():
    distance_to_friends_house = 200

    detour_distance = 10

    total_distance_to_friends_house = distance_to_friends_house + detour_distance

    time_to_friend_house = total_distance_to_friends_house / 70

    distance_home = 240

    time_home = distance_home / 80

    total_time = time_to_friend_house + time_home

    result = total_time

    return result


 Executed result: 6.0
[EXP] 364: [success_rate]: True, [output]: def solution():
    students_initial = 96

    girls_initial = 43

    boys_initial = students_initial - girls_initial

    boys_absent = 4

    total_boys_after_absent = boys_initial - boys_absent

    result = total_boys_after_absent

    return result


 Executed result: 49
[EXP] 365: [success_rate]: True, [output]: def solution():
    girls = 6

    boys = girls * 2

    total_kids = girls + boys

    result = total_kids

    return result


 Executed result: 18
[EXP] 366: [success_rate]: True, [output]: def solution():
    total_points_needed = 42

    points_scored_on_first_test = 15

    points_scored_on_second_test = 18

    total_points_scored_so_far = points_scored_on_first_test + points_scored_on_second_test

    points_needed_on_third_test = total_points_needed - total_points_scored_so_far

    result = points_needed_on_third_test

    return result


 Executed result: 9
[EXP] 367: [success_rate]: False, [output]: def solution():
    customers_kicked_out_for_refusing_masks = 3

    customers_kicked_out_for_shoplifting = 4 * customers_kicked_out_for_refusing_masks - 5

    customers_kicked_out_for_physical_violence = 3 * customers_kicked_out_for_shoplifting

    total_customers_kicked_out = customers_kicked_out_for_refusing_masks + customers_kicked_out_for_shoplifting + customers_kicked_out_for_physical_violence

    customers_kicked_out_for_other_reasons = total_customers_kicked_out - (customers_kicked_out_for_refusing_masks + customers_kicked_out_for_shoplifting + customers_kicked_out_for_physical_violence)

    result = customers_kicked_out_for_other_reasons

    return result


 Executed result: 0
[EXP] 368: [success_rate]: False, [output]: def solution():
    erin_points_now = 14

    sara_points = 8

    erin_points_than_sara = erin_points_now - sara_points

    erin_points_before = erin_points_than_sara / 3

    result = erin_points_before

    return result


 Executed result: 2.0
[EXP] 369: [success_rate]: True, [output]: def solution():
    seniors = 44

    frame_cost = 20

    logo_cost = frame_cost * 0.20

    total_frame_cost = frame_cost + logo_cost

    pin_cost = 5

    cord_cost = seniors * 0.25 * 12

    total_cost = seniors * total_frame_cost + 2 * pin_cost + cord_cost

    result = total_cost

    return result


 Executed result: 1198.0
[EXP] 370: [success_rate]: True, [output]: def solution():
    wallpaper_cost = 400

    savings = 0.2

    material_cost = wallpaper_cost * savings

    total_cost = wallpaper_cost - material_cost

    result = total_cost

    return result


 Executed result: 320.0
[EXP] 371: [success_rate]: False, [output]: def solution():
    pairs_sold_friday = 14

    pairs_sold_saturday = 2 * pairs_sold_friday

    pairs_sold_sunday = pairs_sold_saturday / 2

    total_pairs_sold = pairs_sold_friday + pairs_sold_saturday + pairs_sold_sunday

    shoes_returned = 6

    shoes_sold = total_pairs_sold * 2 - shoes_returned

    result = shoes_sold

    return result


 Executed result: 106.0
[EXP] 372: [success_rate]: True, [output]: def solution():
    tuesday_practice = 1

    thursday_practice = 2

    saturday_practice = tuesday_practice * 2

    total_practice = tuesday_practice + thursday_practice + saturday_practice

    result = total_practice

    return result


 Executed result: 5
[EXP] 373: [success_rate]: True, [output]: def solution():
    total_cost = 400000

    faulty_cost = total_cost * 0.4

    functioning_cost = total_cost - faulty_cost

    result = functioning_cost

    return result


 Executed result: 240000.0
[EXP] 374: [success_rate]: True, [output]: def solution():
    sheep_initial = 30

    milk_half = 1

    milk_full = 2

    half_sheep = sheep_initial // 2

    full_sheep = sheep_initial - half_sheep

    milk_half_sheep = half_sheep * milk_half

    milk_full_sheep = full_sheep * milk_full

    milk_total = milk_half_sheep + milk_full_sheep

    result = milk_total

    return result


 Executed result: 45
[EXP] 375: [success_rate]: True, [output]: def solution():
    rolls_initial = 12

    rolls_given_to_children = 6

    rolls_left = rolls_initial - rolls_given_to_children

    rolls_broken_into_pieces = 8

    pieces_given_to_chickens = rolls_left * rolls_broken_into_pieces

    result = pieces_given_to_chickens

    return result


 Executed result: 48
[EXP] 376: [success_rate]: True, [output]: def solution():
    pupils = 40

    pupils_blue = pupils // 2

    pupils_remaining = pupils - pupils_blue

    pupils_green = pupils_remaining // 4

    pupils_yellow = pupils_remaining - pupils_green

    result = pupils_yellow

    return result


 Executed result: 15
[EXP] 377: [success_rate]: True, [output]: def solution():
    apples_sold_monday = 56 / 4

    apples_picked_monday = apples_sold_monday

    apples_picked_tuesday = 12

    apples_picked_wednesday = 2 * apples_picked_tuesday

    apples_picked_total = apples_picked_monday + apples_picked_tuesday + apples_picked_wednesday

    result = apples_picked_total

    return result


 Executed result: 50.0
[EXP] 378: [success_rate]: True, [output]: def solution():
    total_socks = 50

    socks_washed = 10 * 2 + 15

    socks_missing = total_socks - socks_washed

    result = socks_missing

    return result


 Executed result: 15
[EXP] 379: [success_rate]: True, [output]: def solution():
    cookies_initial = 23

    cookies_received = 42

    total_cookies = cookies_initial + cookies_received

    cookies_eaten = 44

    cookies_left = total_cookies - cookies_eaten

    result = cookies_left

    return result


 Executed result: 21
[EXP] 380: [success_rate]: False, [output]: def solution():
    total_amount = 3650

    interest_rate = 10 / 100

    months = 5

    total_interest = total_amount * interest_rate * months

    total_payable = total_amount + total_interest

    monthly_payment = total_payable / months

    result = monthly_payment

    return result


 Executed result: 1095.0
[EXP] 381: [success_rate]: True, [output]: def solution():
    cho_distance = 14 * 8

    chloe_distance = 9 * 5

    cho_hiked_further = cho_distance - chloe_distance

    result = cho_hiked_further

    return result


 Executed result: 67
[EXP] 382: [success_rate]: True, [output]: def solution():
    axel_silver_pesos = 50

    axel_gold_pesos = 80

    anna_silver_pesos = axel_silver_pesos * 2

    anna_gold_pesos = axel_gold_pesos + 40

    total_axel_pesos = axel_silver_pesos + axel_gold_pesos

    total_anna_pesos = anna_silver_pesos + anna_gold_pesos

    total_pesos = total_axel_pesos + total_anna_pesos

    result = total_pesos

    return result


 Executed result: 350
[EXP] 383: [success_rate]: False, [output]: def solution():
    supplies_cost = 18

    pitchers = 3

    cups_per_pitcher = 12

    cups_total = pitchers * cups_per_pitcher

    cups_per_hour = 4

    profit_per_cup = 1

    profit_per_hour = cups_per_hour * profit_per_cup

    result = profit_per_hour

    return result


 Executed result: 4
[EXP] 384: [success_rate]: True, [output]: def solution():
    land_left = 12.8

    land_sold = 3/5

    land_initial = land_left / (1 - land_sold)

    result = land_initial

    return result


 Executed result: 32.0
[EXP] 385: [success_rate]: True, [output]: def solution():
    total_choir_members = 52

    female_choir_members = total_choir_members * 0.5

    performing_female_members = female_choir_members * 0.5

    additional_teachers = 3

    total_singing_members = performing_female_members + additional_teachers

    result = total_singing_members

    return result


 Executed result: 16.0
[EXP] 386: [success_rate]: True, [output]: def solution():
    test_scores = [65, 94, 81, 86, 74]

    total_score = sum(test_scores)

    average_score = total_score / len(test_scores)

    result = average_score

    return result


 Executed result: 80.0
[EXP] 387: [success_rate]: True, [output]: def solution():
    eraser_cost = 2

    pencil_cost = 3

    erasers = 6

    pencils = 8

    cost_of_erasers = eraser_cost * erasers

    cost_of_pencils = pencil_cost * pencils

    total_cost = cost_of_erasers + cost_of_pencils

    result = total_cost

    return result


 Executed result: 36
[EXP] 388: [success_rate]: True, [output]: def solution():
    messages_to_ms_thompson = 66

    messages_to_mr_yu = messages_to_ms_thompson / 3

    total_messages = messages_to_ms_thompson + messages_to_mr_yu

    result = total_messages

    return result


 Executed result: 88.0
[EXP] 389: [success_rate]: True, [output]: def solution():
    rides = 9

    ticket_price = 2

    ticket_cost = ticket_price * 2

    bracelet_cost = 30

    bracelet_saves = ticket_cost * rides - bracelet_cost

    result = bracelet_saves

    return result


 Executed result: 6
[EXP] 390: [success_rate]: True, [output]: def solution():
    gifts_family = 6

    gifts_friends = 4

    gifts_teachers = 2

    total_gifts = gifts_family + gifts_friends + gifts_teachers

    ribbon_available = 144

    ribbon_per_gift = ribbon_available // total_gifts

    result = ribbon_per_gift

    return result


 Executed result: 12
[EXP] 391: [success_rate]: True, [output]: def solution():
    ratio_betty = 5

    ratio_sam = 6

    total_popsicles = 165

    total_betty = total_popsicles * (ratio_betty / (ratio_betty + ratio_sam))

    total_sam = total_popsicles - total_betty

    difference = total_sam - total_betty

    result = difference

    return result


 Executed result: 15.0
[EXP] 392: [success_rate]: True, [output]: def solution():
    cable_package = 60

    netflix = 10

    hulu = 10

    disney_plus = 10

    hulu_and_disney_plus = hulu + disney_plus

    discount = (hulu_and_disney_plus * 0.2)

    bundle_price = hulu_and_disney_plus - discount

    total_streaming_cost = netflix + bundle_price

    savings = cable_package - total_streaming_cost

    result = savings

    return result


 Executed result: 34.0
[EXP] 393: [success_rate]: True, [output]: def solution():
    writing_time = 4

    recording_time = writing_time / 2

    editing_time = 90 / 60

    total_time = writing_time + recording_time + editing_time

    editing_time_percentage = (editing_time / total_time) * 100

    result = editing_time_percentage

    return result


 Executed result: 20.0
[EXP] 394: [success_rate]: True, [output]: def solution():
    rows = 6

    columns = 6

    total_books = rows * columns

    double_total = total_books * 2

    books_to_add = 20

    total_books_to_carry = double_total + books_to_add

    result = total_books_to_carry

    return result


 Executed result: 92
[EXP] 395: [success_rate]: True, [output]: def solution():
    valentines_initial = 20

    valentines_from_dad = 2 * 15

    valentines_given_to_classmates = 24

    valentines_given_to_family = 5

    valentines_received_from_family_friends = 17

    valentines_received = valentines_initial + valentines_from_dad - valentines_given_to_classmates - valentines_given_to_family + valentines_received_from_family_friends

    result = valentines_received

    return result


 Executed result: 38
[EXP] 396: [success_rate]: True, [output]: def solution():
    slices_initial = 12

    slices_given_bill = int(slices_initial * 1/3)

    slices_given_mark = int(slices_initial * 1/4)

    slices_eaten = 2

    slices_left = slices_initial - slices_given_bill - slices_given_mark - slices_eaten

    result = slices_left

    return result


 Executed result: 3
[EXP] 397: [success_rate]: True, [output]: def solution():
    mark_money = 50

    bike_cost = 300

    daily_salary = 10

    days_needed = (bike_cost - mark_money) / daily_salary

    result = days_needed

    return result


 Executed result: 25.0
[EXP] 398: [success_rate]: True, [output]: def solution():
    spiders = 90

    millipedes = spiders // 3

    stink_bugs = 2 * millipedes - 12

    total_bugs = spiders + millipedes + stink_bugs

    result = total_bugs

    return result


 Executed result: 168
[EXP] 399: [success_rate]: True, [output]: def solution():
    erica_age = 30

    beth_age = erica_age + 5

    alice_age = beth_age + 7

    age_difference = alice_age - erica_age

    result = age_difference

    return result


 Executed result: 12
[EXP] 400: [success_rate]: True, [output]: def solution():
    glass_of_milk = 8

    glasses_consumed = 2

    ounces_consumed = glass_of_milk * glasses_consumed

    calories_per_ounce = 3

    total_calories = ounces_consumed * calories_per_ounce

    result = total_calories

    return result


 Executed result: 48
[EXP] 401: [success_rate]: True, [output]: def solution():
    builder_days_per_month = 4 * 6

    builder_days_per_year = builder_days_per_month * 12

    builder_daily_salary = 50

    builder_yearly_salary = builder_days_per_year * builder_daily_salary

    result = builder_yearly_salary

    return result


 Executed result: 14400
[EXP] 402: [success_rate]: True, [output]: def solution():
    flour_per_batch = 3

    milk_per_batch = 1

    num_batches = 4

    total_flour = flour_per_batch * num_batches

    total_milk = milk_per_batch * num_batches

    bags_flour = total_flour // 2

    bottles_milk = total_milk // 2

    difference = bags_flour - bottles_milk

    result = difference

    return result


 Executed result: 4
[EXP] 403: [success_rate]: True, [output]: def solution():
    watts = 900

    hours_initial = 8

    hours_reduced = 5

    hours_per_day = hours_initial - hours_reduced

    energy_per_hour = watts / 1000  # convert watts to kilowatts

    energy_per_day = energy_per_hour * hours_per_day

    energy_per_month = energy_per_day * 30

    result = energy_per_month

    return result


 Executed result: 81.0
[EXP] 404: [success_rate]: True, [output]: def solution():
    stripes_total = 2 * 17 + 36 + 36 / 2

    zebras = 4

    result = stripes_total / zebras

    return result


 Executed result: 22.0
[EXP] 405: [success_rate]: False, [output]: def solution():
    people = 20

    sandwiches_per_person = 4

    total_sandwiches = people * sandwiches_per_person

    meat_per_sandwich = 1

    cheese_per_sandwich = 1

    total_meat = total_sandwiches * meat_per_sandwich

    total_cheese = total_sandwiches * cheese_per_sandwich

    meat_cost = total_meat * 7

    cheese_cost = total_cheese * 3

    total_cost = meat_cost + cheese_cost

    result = total_cost

    return result


 Executed result: 800
[EXP] 406: [success_rate]: False, [output]: def solution():
    cannolis_initial = 40

    corn_initial = cannolis_initial * 2

    cannolis_additional = 60

    corns_additional = cannolis_additional - 40

    total_corns = corn_initial - corns_additional

    total_cannolis = cannolis_initial + cannolis_additional

    result = total_corns + total_cannolis

    return result


 Executed result: 160
[EXP] 407: [success_rate]: False, [output]: def solution():
    steps_goal = 10000

    steps_school_walk = steps_goal / 2

    steps_friend_walk = 1000

    steps_left = steps_goal - (steps_school_walk + steps_friend_walk)

    steps_jog = steps_left

    result = steps_jog

    return result


 Executed result: 4000.0
[EXP] 408: [success_rate]: False, [output]: def solution():
    book_pages = 45

    words_per_page = 200

    total_words = book_pages * words_per_page

    words_per_minute = 300

    minutes_to_finish = total_words / words_per_minute

    minutes_to_airport = 60 + 10

    minutes_early = minutes_to_airport - minutes_to_finish

    result = minutes_early

    return result


 Executed result: 40.0
[EXP] 409: [success_rate]: False, [output]: def solution():
    employees_may = 40

    hours_per_week = 40

    pay_per_hour = 15

    total_hours_may = employees_may * hours_per_week

    total_pay_may = total_hours_may * pay_per_hour

    employees_june = employees_may - employees_may // 4

    total_hours_june = employees_june * hours_per_week

    total_pay_june = total_hours_june * pay_per_hour

    total_pay = total_pay_may + total_pay_june

    result = total_pay

    return result


 Executed result: 42000
[EXP] 410: [success_rate]: False, [output]: def solution():
    money_initial = 10

    taffy_price = 3

    discount_per_pound = taffy_price / 2

    taffy_cost = 2 * taffy_price - len(str(discount_per_pound).split('.')[1])

    seashells_cost = 1.50

    magnets_cost = 4 * 0.25

    total_cost = taffy_cost + seashells_cost + magnets_cost

    money_left = money_initial - total_cost

    result = money_left

    return result


 Executed result: 2.5
[EXP] 411: [success_rate]: True, [output]: def solution():
    package1 = 400

    package2 = 2 * package1

    discounted_packages = (package1 + package2) * 0.8

    finale = 150

    total = discounted_packages + finale

    result = total

    return result


 Executed result: 1110.0
[EXP] 412: [success_rate]: True, [output]: def solution():
    cookies_per_day = 2

    days = 30

    cookies_needed = cookies_per_day * days

    cookies_per_dozen = 12

    dozens_needed = cookies_needed // cookies_per_dozen

    result = dozens_needed

    return result


 Executed result: 5
[EXP] 413: [success_rate]: True, [output]: def solution():
    total_candles = 50000

    candles_with_defect = total_candles * 0.05

    candles_with_explosion = total_candles * 0.01

    candles_with_both_issues = candles_with_defect * 0.01

    result = candles_with_both_issues

    return result


 Executed result: 25.0
[EXP] 414: [success_rate]: True, [output]: def solution():
    blouses_initial = 4

    blouses_price = 20

    discount = 0.30

    discount_amount = blouses_price * discount

    discounted_price = blouses_price - discount_amount

    total_cost = discounted_price * blouses_initial

    result = total_cost

    return result


 Executed result: 56.0
[EXP] 415: [success_rate]: False, [output]: def solution():
    apples_joanne_tallest = 30

    apples_joanne_shortest = apples_joanne_tallest / 2

    apples_joanne_average = 0

    apples_joanne_total = apples_joanne_tallest + apples_joanne_shortest + apples_joanne_average

    apples_joanne_sister_tallest = apples_joanne_tallest * 2

    apples_joanne_sister_shortest = apples_joanne_shortest * 3

    apples_joanne_sister_average = 0

    apples_sister_total = apples_joanne_sister_tallest + apples_joanne_sister_shortest + apples_joanne_sister_average

    apples_total = apples_joanne_total + apples_sister_total

    apples_joanne_average = (apples_total - apples_joanne_tallest - apples_joanne_shortest) / 1

    result = apples_joanne_average

    return result


 Executed result: 105.0
[EXP] 416: [success_rate]: False, [output]: def solution():
    heads = 180

    bumps = 304

    camels = bumps // 2

    dromedaries = heads - camels

    result = dromedaries

    return result


 Executed result: 28
[EXP] 417: [success_rate]: True, [output]: def solution():
    day1_to_day4_distance = 200 * 4

    day5_and_day6_distance = day1_to_day4_distance * 0.30

    day7_distance = 0

    day8_to_day14_distance = 300 * 7

    total_distance = day1_to_day4_distance + day5_and_day6_distance + day7_distance + day8_to_day14_distance

    result = total_distance

    return result


 Executed result: 3140.0
[EXP] 418: [success_rate]: True, [output]: def solution():
    peter_locker = 5

    zack_locker = peter_locker * 4

    timothy_locker = zack_locker * 2

    result = timothy_locker

    return result


 Executed result: 40
[EXP] 419: [success_rate]: True, [output]: def solution():
    stanley_elevation = 10000

    comb_fell = 4000

    stanley_elevation_after = stanley_elevation - comb_fell

    oliver_elevation = 3000

    distance_to_stanley = stanley_elevation_after - oliver_elevation

    result = distance_to_stanley

    return result


 Executed result: 3000
[EXP] 420: [success_rate]: True, [output]: def solution():
    money_initial = 5000

    money_from_bank1 = 4000

    money_from_bank2 = 2 * money_from_bank1

    total_money = money_initial + money_from_bank1 + money_from_bank2

    result = total_money

    return result


 Executed result: 17000
[EXP] 421: [success_rate]: True, [output]: def solution():
    cats_initial = 50

    cats_per_boat = 5

    boats = 4

    cats_removed = cats_per_boat * boats

    cats_left = cats_initial - cats_removed

    cats_remaining = cats_left - int(cats_left * 3/5)

    result = cats_remaining

    return result


 Executed result: 12
[EXP] 422: [success_rate]: True, [output]: def solution():
    introductory_price = 8

    normal_price = 12

    price_increase = 14

    number_months_intro = 6

    number_months_normal = 8

    total_price_intro = introductory_price * number_months_intro

    total_price_normal = normal_price * number_months_normal

    total_price_increase = price_increase * (24 - (number_months_intro + number_months_normal))

    total_price = total_price_intro + total_price_normal + total_price_increase

    result = total_price

    return result


 Executed result: 284
[EXP] 423: [success_rate]: False, [output]: def solution():
    tattered_jeans = 28

    jogger_jeans = tattered_jeans - 6

    total_saved = 6

    saved_from_jogger_jeans = total_saved / 3

    saved_from_tattered_jeans = total_saved - saved_from_jogger_jeans

    jogger_jeans_cost = jogger_jeans + saved_from_jogger_jeans

    tattered_jeans_cost = tattered_jeans + saved_from_tattered_jeans

    difference = jogger_jeans_cost - tattered_jeans_cost

    result = difference

    return result


 Executed result: -8.0
[EXP] 424: [success_rate]: True, [output]: def solution():
    bus_capacity = 60

    num_buses = 4

    total_bus_capacity = bus_capacity * num_buses

    minibus_capacity = 30

    num_minibuses = 6

    total_minibus_capacity = minibus_capacity * num_minibuses

    minivan_capacity = 15

    num_minivans = 10

    total_minivan_capacity = minivan_capacity * num_minivans

    total_capacity = total_bus_capacity + total_minibus_capacity + total_minivan_capacity

    result = total_capacity

    return result


 Executed result: 570
[EXP] 425: [success_rate]: False, [output]: def solution():
    home_made_feeders = 3

    store_bought_feeders = 3

    total_feeders = home_made_feeders + store_bought_feeders

    home_made_birds = 20 + 10

    store_bought_birds = 20

    total_birds_per_feeder = (home_made_feeders * home_made_birds) + (store_bought_feeders * store_bought_birds)

    total_birds_per_day = total_birds_per_feeder * total_feeders

    result = total_birds_per_day

    return result


 Executed result: 900
[EXP] 426: [success_rate]: True, [output]: def solution():
    bagel_cost = 4

    soup_cost = 1.25 * bagel_cost

    cake_cost = bagel_cost / 2

    total_cost = bagel_cost + soup_cost + cake_cost

    result = total_cost

    return result


 Executed result: 11.0
[EXP] 427: [success_rate]: False, [output]: def solution():
    amusement_park_cost = 100

    spending_cash = 50

    cards_sold = spending_cash / 1.5

    cards_kept = cards_sold / 2

    cards_initial = cards_sold + cards_kept

    result = cards_initial

    return result


 Executed result: 50.0
[EXP] 428: [success_rate]: False, [output]: def solution():
    total_guests = 36

    prepared_hotdogs = total_guests * 1.5

    actual_guests = 40

    extra_hotdogs = actual_guests - total_guests

    guests_with_two_hotdogs = total_guests + extra_hotdogs

    guests_without_second_hotdog = total_guests

    result = guests_without_second_hotdog

    return result


 Executed result: 36
[EXP] 429: [success_rate]: True, [output]: def solution():
    letters_in_indras_name = 6

    letters_in_half_indras_name = letters_in_indras_name // 2

    letters_in_sisters_name = letters_in_half_indras_name + 4

    total_letters = letters_in_indras_name + letters_in_sisters_name

    result = total_letters

    return result


 Executed result: 13
[EXP] 430: [success_rate]: True, [output]: def solution():
    pot_pans_cost = 120

    mixing_bowls_cost = 20

    utensils_cost = 5 * 5

    total_cost_without_discount = pot_pans_cost + mixing_bowls_cost + utensils_cost

    discount = 0.20

    discount_amount = total_cost_without_discount * discount

    total_cost_with_discount = total_cost_without_discount - discount_amount

    result = total_cost_with_discount

    return result


 Executed result: 132.0
[EXP] 431: [success_rate]: True, [output]: def solution():
    skipping_rope = 6

    board_game = 11

    playground_ball = 2

    total_cost = skipping_rope + board_game + playground_ball

    dora_allowance = 2

    mom_giving = 16

    total_money = dora_allowance + mom_giving

    money_needed = total_cost - total_money

    result = money_needed

    return result


 Executed result: 1
[EXP] 432: [success_rate]: True, [output]: def solution():
    prince_thaddeus = 100

    prince_arthur = prince_thaddeus * 3 / 4

    prince_walter = prince_arthur * 2

    prince_bruce = prince_walter / 5

    result = prince_bruce

    return result


 Executed result: 30.0
[EXP] 433: [success_rate]: True, [output]: def solution():
    gallons_initial = 15

    containers = 5

    amount_per_container = gallons_initial / containers

    amount_josey_needed = amount_per_container / 4

    gallons_josey_needed = amount_josey_needed

    pints_josey_needed = gallons_josey_needed * 8

    result = pints_josey_needed

    return result


 Executed result: 6.0
[EXP] 434: [success_rate]: False, [output]: def solution():
    money_spent = 5

    money_left = 0.01 * money_spent

    money_initial = money_spent - money_left

    money_initial_cents = int(money_initial * 100)

    num_chips = 3

    cost_per_chip = 0.40

    total_spent_on_chips = num_chips * cost_per_chip

    money_spent_cents = int(total_spent_on_chips * 100)

    money_left_cents = money_initial_cents - money_spent_cents

    total_candy_bars = (money_left_cents * 100) / 75

    result = int(total_candy_bars)

    return result


 Executed result: 500
[EXP] 435: [success_rate]: True, [output]: def solution():
    lollipops_initial = 25

    lollipops_kept = 5

    lollipops_shared = lollipops_initial - lollipops_kept

    friends = 4

    lollipops_per_friend = lollipops_shared // friends

    result = lollipops_per_friend

    return result


 Executed result: 5
[EXP] 436: [success_rate]: True, [output]: def solution():
    cake_weight_initial = 20

    cake_pieces = 8

    mom_piece = 1

    rory_piece = 1

    pieces_taken = mom_piece + rory_piece

    pieces_left = cake_pieces - pieces_taken

    cake_weight_left = cake_weight_initial / cake_pieces * pieces_left

    result = cake_weight_left

    return result


 Executed result: 15.0
[EXP] 437: [success_rate]: True, [output]: def solution():
    oranges_sitti = 34

    oranges_juris = 22

    total_oranges = oranges_sitti + oranges_juris

    friends = 6

    oranges_per_person = total_oranges // (friends + 2)

    result = oranges_per_person

    return result


 Executed result: 7
[EXP] 438: [success_rate]: True, [output]: def solution():
    total_onions = 2 * 2

    cost_onions = total_onions * 2.00

    cost_stock = 2 * 2.00

    total_cost = cost_onions + cost_stock

    servings = 6

    cost_per_serving = round(total_cost / servings)

    result = cost_per_serving

    return result


 Executed result: 2
[EXP] 439: [success_rate]: False, [output]: def solution():
    time_taken_by_wayne = 4

    time_taken_by_bernadette = time_taken_by_wayne * 4

    time_bernadette_leaves = time_taken_by_bernadette - 5

    time_wayne_leaves = time_taken_by_wayne

    difference = time_bernadette_leaves - time_wayne_leaves

    result = difference

    return result


 Executed result: 7
[EXP] 440: [success_rate]: True, [output]: def solution():
    area = 360

    length = 3

    length_in_feet = length * 3  # convert yards to feet

    width = area / length_in_feet

    perimeter = 2 * (length_in_feet + width)

    result = perimeter

    return result


 Executed result: 98.0
[EXP] 441: [success_rate]: True, [output]: def solution():
    elizabeth_red = 1

    elizabeth_clear = 2

    elizabeth_total = elizabeth_red * 20 + elizabeth_clear * 20

    margareth_blue = 3

    margareth_red = 4

    margareth_total = margareth_blue * 20 + margareth_red * 20

    elizabeth_difference = margareth_total - elizabeth_total

    result = elizabeth_difference

    return result


 Executed result: 80
[EXP] 442: [success_rate]: False, [output]: def solution():
    initial_temperature = 40

    hours_baking = 3

    degrees_rise_per_hour = 5

    cooling_after_opening_window = 2

    window_open_time = 0.5  # 30 minutes

    temperature_after_baking = initial_temperature + (hours_baking * degrees_rise_per_hour)

    temperature_after_opening_window = temperature_after_baking - ((window_open_time / 0.1) * cooling_after_opening_window)

    result = temperature_after_opening_window

    return result


 Executed result: 45.0
[EXP] 443: [success_rate]: False, [output]: def solution():
    jon_swim_time = 40

    james_swim_time = jon_swim_time - (jon_swim_time * 0.1)

    jon_bike_time = 80

    james_bike_time = jon_bike_time + 5

    jon_run_time = 50

    total_jon_time = jon_swim_time + jon_bike_time + jon_run_time

    total_james_time = james_swim_time + james_bike_time + james_run_time

    james_run_time = total_james_time - total_jon_time + jon_run_time

    result = james_run_time

    return result


 Executed result: Error: return error, fail to execute
[EXP] 444: [success_rate]: True, [output]: def solution():
    movie_c_hours = 1.25

    movie_c_minutes = movie_c_hours * 60

    movie_b_minutes = movie_c_minutes + 5

    movie_a_minutes = movie_b_minutes / 4

    result = movie_a_minutes

    return result


 Executed result: 20.0
[EXP] 445: [success_rate]: True, [output]: def solution():
    distance_run = 30 / 60 * 32  # convert 30 minutes to hours

    hay_used = distance_run / 2  # 1/2 bails of hay per mile

    hay_cost = hay_used * 3  # cost of hay in dollars

    money_initial = 30  # 6 five-dollar bills

    money_spent = hay_cost

    money_left = money_initial - money_spent

    result = money_left

    return result


 Executed result: 6.0
[EXP] 446: [success_rate]: False, [output]: def solution():
    eggs_from_cases = 4 * 12

    loose_eggs = 2

    total_eggs = eggs_from_cases + loose_eggs

    eggnog_per_tray = 5

    eggs_per_eggnog = 5

    total_eggs_per_tray = eggnog_per_tray * eggs_per_eggnog

    trays_possible = total_eggs // total_eggnogs_per_tray

    result = trays_possible

    return result


 Executed result: Error: return error, fail to execute
[EXP] 447: [success_rate]: True, [output]: def solution():
    joey_initial = 214

    joey_scored = 26

    joey_points = joey_initial + joey_scored

    marcy_initial = 225

    marcy_scored = 10

    marcy_points = marcy_initial + marcy_scored

    joey_leads = joey_points - marcy_points

    result = joey_leads

    return result


 Executed result: 5
[EXP] 448: [success_rate]: True, [output]: def solution():
    case_sneakers = 48

    cost_case_sneakers = 576

    sneakers_sold_flash_sale = 17

    revenue_sneakers_sold_flash_sale = sneakers_sold_flash_sale * 20

    sneakers_sold_department_store = case_sneakers - sneakers_sold_flash_sale

    revenue_sneakers_sold_department_store = sneakers_sold_department_store * 25

    total_revenue = revenue_sneakers_sold_flash_sale + revenue_sneakers_sold_department_store

    total_cost = cost_case_sneakers

    profit = total_revenue - total_cost

    result = profit

    return result


 Executed result: 539
[EXP] 449: [success_rate]: True, [output]: def solution():
    packets_initial = 10

    small_packets = 6

    large_packets = 4

    colors_per_small_packet = 8

    colors_per_large_packet = 16

    colors_in_small_packets = small_packets * colors_per_small_packet

    colors_in_large_packets = large_packets * colors_per_large_packet

    total_colors = colors_in_small_packets + colors_in_large_packets

    result = total_colors

    return result


 Executed result: 112
[EXP] 450: [success_rate]: False, [output]: def solution():
    total_expenses_with_super_ticket = 20

    extra_for_soda = 1

    total_expenses_without_super_ticket = total_expenses_with_super_ticket + 2

    expensive_tickets_without_super_ticket = 12

    cost_of_soda = 3

    cost_of_popcorn = total_expenses_without_super_ticket - expensive_tickets_without_super_ticket - cost_of_soda - extra_for_soda

    result = cost_of_popcorn

    return result


 Executed result: 6
[EXP] 451: [success_rate]: True, [output]: def solution():
    cost_per_balloon_initial = 900 / 20

    cost_per_balloon_increased = cost_per_balloon_initial + 20

    cost_to_fill_170_after_price_increase = 170 * cost_per_balloon_increased

    result = cost_to_fill_170_after_price_increase

    return result


 Executed result: 11050.0
[EXP] 452: [success_rate]: True, [output]: def solution():
    speed1 = 60

    time1 = 2

    distance1 = speed1 * time1

    speed2 = 30

    time2 = 1

    distance2 = speed2 * time2

    total_distance = distance1 + distance2

    total_time = time1 + time2

    average_speed = total_distance / total_time

    result = average_speed

    return result


 Executed result: 50.0
[EXP] 453: [success_rate]: True, [output]: def solution():
    sapphires_initial = 8

    sapphires_traded = 3

    rubies_gotten = 2

    sapphires_left = sapphires_initial - sapphires_traded

    rubies_worth = rubies_gotten * 1200

    sapphires_worth = sapphires_left * 800

    total_worth = rubies_worth + sapphires_worth

    result = total_worth

    return result


 Executed result: 6400
[EXP] 454: [success_rate]: False, [output]: def solution():
    marin_apples_per_day = 4

    nancy_apples_per_day = 4

    total_apples_per_day = marin_apples_per_day + nancy_apples_per_day

    total_apples_in_30_days = total_apples_per_day * 30

    result = total_apples_in_30_days

    return result


 Executed result: 240
[EXP] 455: [success_rate]: True, [output]: def solution():
    raised_beds = 10

    bed_length = 8

    bed_width = 2

    bed_height = 2

    volume_per_bed = bed_length * bed_width * bed_height

    total_volume = raised_beds * volume_per_bed

    bags_needed = total_volume // 2

    cost_per_bag = 12

    total_cost = cost_per_bag * bags_needed

    result = total_cost

    return result


 Executed result: 1920
[EXP] 456: [success_rate]: True, [output]: def solution():
    red_cards = 15

    green_cards = red_cards * 1.6

    yellow_cards = red_cards + green_cards

    total_cards = red_cards + green_cards + yellow_cards

    result = total_cards

    return result


 Executed result: 78.0
[EXP] 457: [success_rate]: True, [output]: def solution():
    fairies_initial = 50

    fairies_arrived = fairies_initial / 2

    total_fairies = fairies_initial + fairies_arrived

    fairies_left = total_fairies - 30

    result = fairies_left

    return result


 Executed result: 45.0
[EXP] 458: [success_rate]: True, [output]: def solution():
    total_puppies = 8 + 12

    puppies_with_spots = 3 + 4

    percentage_puppies_with_spots = (puppies_with_spots / total_puppies) * 100

    result = percentage_puppies_with_spots

    return result


 Executed result: 35.0
[EXP] 459: [success_rate]: True, [output]: def solution():
    sugar_cubes = 2 * 1

    carrots = 4 * 12

    hay = 42 * 75

    oats = 20 * 65

    total_weight = sugar_cubes + carrots + hay + oats

    trips = -(-total_weight // 2250)

    result = trips

    return result


 Executed result: 2
[EXP] 460: [success_rate]: True, [output]: def solution():
    cans_drunk_week = 3

    cans_per_week = 2

    bottles_drunk_week = 5

    bottles_per_week = 3

    cans_in_four_weeks = cans_drunk_week * 4

    bottles_in_four_weeks = bottles_drunk_week * 4

    cans_cents = cans_in_four_weeks * cans_per_week

    bottles_cents = bottles_in_four_weeks * bottles_per_week

    total_cents = cans_cents + bottles_cents

    result = total_cents

    return result


 Executed result: 84
[EXP] 461: [success_rate]: True, [output]: def solution():
    frederick_plants = 10

    toni_plants = frederick_plants * 1.6  # 60% more than Frederick

    shondra_plants = toni_plants - 7

    result = shondra_plants

    return result


 Executed result: 9.0
[EXP] 462: [success_rate]: True, [output]: def solution():
    ali_money_initial = 21

    leila_money = 100

    half_leila_money = leila_money / 2

    ali_money_recieved = half_leila_money

    ali_money_total = ali_money_initial + ali_money_recieved

    result = ali_money_total

    return result


 Executed result: 71.0
[EXP] 463: [success_rate]: True, [output]: def solution():
    pizza_cost = 15

    tip = pizza_cost / 5

    total_amount = pizza_cost + tip

    result = total_amount

    return result


 Executed result: 18.0
[EXP] 464: [success_rate]: False, [output]: def solution():
    initial_place = 1

    moved_back = 5

    moved_up = 2

    moved_back_again = 3

    moved_up_again = 1

    new_place = initial_place + moved_back - moved_up - moved_back_again + moved_up_again

    result = new_place

    return result


 Executed result: 2
[EXP] 465: [success_rate]: True, [output]: def solution():
    basketball_cards = 6 * 25

    baseball_cards = 5 * 40

    total_cards = basketball_cards + baseball_cards

    cards_kept = 50

    cards_given_to_students = total_cards - cards_kept

    cards_per_student = 10

    students = cards_given_to_students // cards_per_student

    result = students

    return result


 Executed result: 30
[EXP] 466: [success_rate]: True, [output]: def solution():
    apples_becky = 20

    price_per_apple_becky = 0.45

    price_becky = apples_becky * price_per_apple_becky

    discount_becky = 1

    total_becky = price_becky - discount_becky

    apples_kelly = 20

    price_per_apple_kelly = 0.50

    price_kelly = apples_kelly * price_per_apple_kelly

    discount_kelly = price_kelly * 0.10

    total_kelly = price_kelly - discount_kelly

    difference = total_kelly - total_becky

    result = difference

    return result


 Executed result: 1.0
[EXP] 467: [success_rate]: True, [output]: def solution():
    rooms = 80

    sheets_per_room = 2

    comforters_per_room = 1

    pillowcases_per_room = sheets_per_room * 2

    towels_per_room = pillowcases_per_room * 2

    sheets_total = rooms * sheets_per_room

    comforters_total = rooms * comforters_per_room

    pillowcases_total = rooms * pillowcases_per_room

    towels_total = rooms * towels_per_room

    laundry_pieces = sheets_total + comforters_total + pillowcases_total + towels_total

    result = laundry_pieces

    return result


 Executed result: 1200
[EXP] 468: [success_rate]: True, [output]: def solution():
    shoes_initial = 200

    shoes_gained_monday = 5 * 2  # each pair consists of 2 shoes

    shoes_gained_wednesday = 15 * 2

    shoes_gained_friday = 30 * 2

    shoes_total = shoes_initial + shoes_gained_monday + shoes_gained_wednesday + shoes_gained_friday

    shoes_removed_saturday = 180

    shoes_on_sunday = shoes_total - shoes_removed_saturday

    result = shoes_on_sunday

    return result


 Executed result: 120
[EXP] 469: [success_rate]: False, [output]: def solution():
    jars_of_sprinkles = 6

    sprinkles_per_jar = 8

    total_sprinkles = jars_of_sprinkles * sprinkles_per_jar

    cupcakes_per_pan = 12

    pans_required = math.ceil(total_sprinkles / cupcakes_per_pan)

    result = pans_required

    return result


 Executed result: Error: return error, fail to execute
[EXP] 470: [success_rate]: True, [output]: def solution():
    pen_price = 2

    paper_price = 3 * pen_price - 1

    total_cost = pen_price + paper_price

    cost_paid = 10

    change = cost_paid - total_cost

    result = change

    return result


 Executed result: 3
[EXP] 471: [success_rate]: True, [output]: def solution():
    students = 30

    pencils_per_student = 10

    total_pencils_initial = students * pencils_per_student

    pencils_used = total_pencils_initial * (1/5)

    pencils_remaining = total_pencils_initial - pencils_used

    pencils_left = pencils_remaining * (1/3)

    result = pencils_left

    return result


 Executed result: 80.0
[EXP] 472: [success_rate]: True, [output]: def solution():
    cookies_wanted = 5

    cookies_from_carrot_sticks = cookies_wanted - 2

    carrot_sticks = cookies_from_carrot_sticks * 2

    result = carrot_sticks

    return result


 Executed result: 6
[EXP] 473: [success_rate]: False, [output]: def solution():
    shark_length = 10

    remoras_length = 2 * 6

    combined_length = remoras_length

    percentage = (combined_length / shark_length) * 100

    result = percentage

    return result


 Executed result: 120.0
[EXP] 474: [success_rate]: True, [output]: def solution():
    no_computers = 20

    total_students = no_computers / (1 - 3/4)

    result = total_students

    return result


 Executed result: 80.0
[EXP] 475: [success_rate]: False, [output]: def solution():
    minutes_to_break_in = 240

    days_until_tryout = 3

    days_to_walk = days_until_tryout * 7

    minutes_per_week = minutes_to_break_in / days_to_walk

    minutes_per_day = minutes_per_week / 4

    result = minutes_per_day

    return result


 Executed result: 2.857142857142857
[EXP] 476: [success_rate]: True, [output]: def solution():
    money_spent = 300

    cost_per_book = 15

    total_books = money_spent / cost_per_book

    books_per_child = total_books / 4

    result = int(books_per_child)

    return result


 Executed result: 5
[EXP] 477: [success_rate]: True, [output]: def solution():
    total_kids = 32

    kids_allergic_to_dairy = 9

    kids_allergic_to_peanuts = 6

    kids_allergic_to_both = 3

    kids_allergic_to_dairy_or_peanuts = kids_allergic_to_dairy + kids_allergic_to_peanuts - kids_allergic_to_both

    kids_not_allergic = total_kids - kids_allergic_to_dairy_or_peanuts

    result = kids_not_allergic

    return result


 Executed result: 20
[EXP] 478: [success_rate]: True, [output]: def solution():
    employees_per_group = 200

    groups = 3

    guides_per_group = 7

    employees_total = employees_per_group * groups

    guides_total = guides_per_group * groups

    total_people = employees_total + guides_total

    result = total_people

    return result


 Executed result: 621
[EXP] 479: [success_rate]: True, [output]: def solution():
    ticket_cost = 5000

    normal_hotel_cost = 1500

    hotel_cost = normal_hotel_cost * 1.2

    hotel_cost_per_day = hotel_cost

    total_hotel_cost = hotel_cost_per_day * 3

    total_trip_cost = ticket_cost * 2 + total_hotel_cost

    result = total_trip_cost

    return result


 Executed result: 15400.0
[EXP] 480: [success_rate]: True, [output]: def solution():
    ben_blue_tubes = 4

    ben_yellow_tubes = 3

    jasper_blue_tubes = ben_blue_tubes / 2

    jasper_yellow_tubes = ben_yellow_tubes * 3

    result = jasper_blue_tubes + jasper_yellow_tubes

    return result


 Executed result: 11.0
[EXP] 481: [success_rate]: True, [output]: def solution():
    weight_1959_penny = 48

    weight_2010_penny = (3/4) * weight_1959_penny

    total_weight = weight_1959_penny + weight_2010_penny

    result = total_weight

    return result


 Executed result: 84.0
[EXP] 482: [success_rate]: True, [output]: def solution():
    goal = 200

    keegan_earnings = 83

    tasha_earnings = 91

    total_earnings = keegan_earnings + tasha_earnings

    money_needed = goal - total_earnings

    result = money_needed

    return result


 Executed result: 26
[EXP] 483: [success_rate]: True, [output]: def solution():
    gabriel_songs = 20

    luri_songs = 3 * gabriel_songs

    gabriel_extra_songs = 100 - gabriel_songs

    luri_extra_songs = 100 - luri_songs

    difference = gabriel_extra_songs - luri_extra_songs

    result = difference

    return result


 Executed result: 40
[EXP] 484: [success_rate]: True, [output]: def solution():
    total_oranges = 60

    oranges_eaten = 2/5 * total_oranges

    money_given_per_orange = 10

    money_given = money_given_per_orange * oranges_eaten

    result = money_given

    return result


 Executed result: 240.0
[EXP] 485: [success_rate]: True, [output]: def solution():
    shoes_cost = 80

    bag_cost = 3 * shoes_cost - 20

    result = bag_cost

    return result


 Executed result: 220
[EXP] 486: [success_rate]: True, [output]: def solution():
    miles_per_day = 12

    days_per_week = 5

    total_miles_per_week = miles_per_day * days_per_week

    miles_per_hour = 10

    hours_per_week = total_miles_per_week / miles_per_hour

    result = hours_per_week

    return result


 Executed result: 6.0
[EXP] 487: [success_rate]: True, [output]: def solution():
    horses = 4

    oats_per_meal_per_horse = 5

    meals_per_day = 2

    days = 5

    oats_per_day_per_horse = oats_per_meal_per_horse * meals_per_day

    total_oats_per_day = horses * oats_per_day_per_horse

    total_oats_needed = total_oats_per_day * days

    total_oats_per_bag = 50

    total_bags_needed = total_oats_needed // total_oats_per_bag

    result = total_bags_needed

    return result


 Executed result: 4
[EXP] 488: [success_rate]: True, [output]: def solution():
    puppies = 27

    pom_puppies = puppies * 2 // 3

    girl_pom_puppies = pom_puppies // 3

    result = girl_pom_puppies

    return result


 Executed result: 6
[EXP] 489: [success_rate]: True, [output]: def solution():
    highest_temperature_southlandia = -48

    highest_temperature_northlandia = 21

    highest_temperature_midlandia = -3

    total_temperatures = highest_temperature_southlandia + highest_temperature_northlandia + highest_temperature_midlandia

    average_temperature = total_temperatures / 3

    result = average_temperature

    return result


 Executed result: -10.0
[EXP] 490: [success_rate]: True, [output]: def solution():
    cost = 12

    savings_initial = 4

    daily_savings = 2

    money_needed = cost - savings_initial

    days_needed = money_needed // daily_savings

    result = days_needed

    return result


 Executed result: 4
[EXP] 491: [success_rate]: True, [output]: def solution():
    eggs_initial = 64

    eggs_per_tray = 24

    trays = 2

    eggs_placed = eggs_per_tray * trays

    eggs_left = eggs_initial - eggs_placed

    result = eggs_left

    return result


 Executed result: 16
[EXP] 492: [success_rate]: True, [output]: def solution():
    small_pizza_cost = 8

    family_pizza_cost = small_pizza_cost * 3

    total_cost = small_pizza_cost + family_pizza_cost

    result = total_cost

    return result


 Executed result: 32
[EXP] 493: [success_rate]: False, [output]: def solution():
    razors_per_pack = 4

    cost_per_pack = 4.00

    packs_bought = 2

    razors_bought = razors_per_pack * packs_bought

    cost_before_discount = cost_per_pack * packs_bought

    discount = 1  # buy one get one free

    cost_after_discount = cost_before_discount / discount

    cost_after_coupon = cost_after_discount - 2.00

    cost_per_razor = cost_after_coupon / razors_bought

    result = cost_per_razor * 100  # convert to cents

    return result


 Executed result: 75.0
[EXP] 494: [success_rate]: False, [output]: def solution():
    cheerleaders_heights = [64, 64, 64, 64, 64, 64, 64, 64, 64, 60]

    four_cheerleaders_height = 4 * 64

    three_cheerleaders_height = 3 * 64

    two_cheerleaders_height = 2 * 64

    shortest_cheerleader_height = 60

    total_height = four_cheerleaders_height + three_cheerleaders_height + two_cheerleaders_height + shortest_cheerleader_height

    result = total_height / 12

    return result


 Executed result: 53.0
[EXP] 495: [success_rate]: True, [output]: def solution():
    hours_worked_per_day = 8

    minutes_walked_per_hour = 5

    days_worked = 5

    total_minutes_walked_per_day = hours_worked_per_day * minutes_walked_per_hour

    total_minutes_walked = total_minutes_walked_per_day * days_worked

    result = total_minutes_walked

    return result


 Executed result: 200
[EXP] 496: [success_rate]: False, [output]: def solution():
    age_brett = 14

    age_brett_four_years_later = age_brett + 4

    age_angelia_later = age_brett_four_years_later * 3

    age_angelia_now = age_angelia_later - 4

    result = age_angelia_now

    return result


 Executed result: 50
[EXP] 497: [success_rate]: False, [output]: def solution():
    rides_per_day = 2

    days = 14

    morning_cost = 6

    afternoon_cost = 2

    total_morning_cost = morning_cost * rides_per_day * days

    total_afternoon_cost = afternoon_cost * rides_per_day * days

    total_cost = total_morning_cost + total_afternoon_cost

    result = total_cost

    return result


 Executed result: 224
[EXP] 498: [success_rate]: True, [output]: def solution():
    ashleys_oranges = 5 * 10

    brianne_oranges = ashleys_oranges + 20

    total_oranges = ashleys_oranges + brianne_oranges

    oranges_per_pie = 3

    pies = total_oranges // oranges_per_pie

    result = pies

    return result


 Executed result: 40
[EXP] 499: [success_rate]: True, [output]: def solution():
    first_venue_fee = 200

    second_venue_cost = 25

    first_venue_food_cost = 5

    num_guests = 1

    while True:

        first_venue_cost = first_venue_fee + (num_guests * first_venue_food_cost)

        if first_venue_cost == second_venue_cost * num_guests:

            break

        num_guests += 1

    result = num_guests

    return result


 Executed result: 10
[EXP] 500: [success_rate]: False, [output]: def solution():
    total_insects = 43

    bodhi_insects = total_insects

    david_insects = bodhi_insects / 2

    lily_insects = david_insects + 7

    result = lily_insects

    return result


 Executed result: 28.5
[EXP] 501: [success_rate]: True, [output]: def solution():
    yards_per_skein = 364

    yarn_used_by_mariah = 1 / 4

    yarn_used_by_grandma = 1 / 2

    mariah_yarn = yards_per_skein * yarn_used_by_mariah

    grandma_yarn = yards_per_skein * yarn_used_by_grandma

    total_yarn = mariah_yarn + grandma_yarn

    result = total_yarn

    return result


 Executed result: 273.0
[EXP] 502: [success_rate]: True, [output]: def solution():
    friends = 5

    friends_who_want_5_gifts = 2

    friends_who_want_2_gifts = 3

    gifts_for_friends_who_want_5 = friends_who_want_5_gifts * 5

    gifts_for_friends_who_want_2 = friends_who_want_2_gifts * 2

    total_gifts = gifts_for_friends_who_want_5 + gifts_for_friends_who_want_2

    extra_gifts = 10

    total_gifts_bought = total_gifts + extra_gifts

    result = total_gifts_bought

    return result


 Executed result: 26
[EXP] 503: [success_rate]: True, [output]: def solution():
    chair_width = 3

    rug_width = chair_width + 5

    couch_length = 2 * rug_width + 2

    result = couch_length

    return result


 Executed result: 18
[EXP] 504: [success_rate]: True, [output]: def solution():
    cost_for_all_gums = 7

    cost_for_grape_gum = 2

    cost_for_green_apple_gum = 2 / 2

    cost_for_strawberry_gum = cost_for_all_gums - cost_for_grape_gum - cost_for_green_apple_gum

    cost_per_strawberry_gum = cost_for_strawberry_gum / 2

    result = cost_per_strawberry_gum

    return result


 Executed result: 2.0
[EXP] 505: [success_rate]: False, [output]: def solution():
    sticks_per_2x4 = 200

    sticks_per_2x8 = 400

    cost_per_2x4 = 4

    sticks_total = 0

    for money_spent in range(0, money + 1):

        sticks = 0

        remaining_money = money_spent

        while remaining_money >= cost_per_2x4:

            sticks += sticks_per_2x4

            remaining_money -= cost_per_2x4

        if sticks > sticks_total:

            sticks_total = sticks

            result = sticks

    return result


 Executed result: 200
[EXP] 506: [success_rate]: True, [output]: def solution():
    dogs = 6

    legs_per_dog = 4

    snowshoes_per_pair = 12.00

    total_legs = dogs * legs_per_dog

    total_pairs = total_legs / 2

    total_cost = total_pairs * snowshoes_per_pair

    result = total_cost

    return result


 Executed result: 144.0
[EXP] 507: [success_rate]: False, [output]: def solution():
    bus_trips_per_week = 2

    bus_cost_per_trip = 2.20

    total_cost_per_week = bus_trips_per_week * bus_cost_per_trip

    weekly_pass_cost = 20

    weekly_savings = total_cost_per_week - weekly_pass_cost

    result = weekly_savings

    return result


 Executed result: -15.6
[EXP] 508: [success_rate]: True, [output]: def solution():
    farm_cows = 30

    zoo_cows = 2 * farm_cows

    farm_sheep = 20 / 2

    zoo_sheep = 20

    farm_animals = farm_cows + farm_sheep

    zoo_animals = zoo_cows + zoo_sheep

    total_animals = farm_animals + zoo_animals

    result = total_animals

    return result


 Executed result: 120.0
[EXP] 509: [success_rate]: False, [output]: def solution():
    rose_onions = 12

    rose_potatoes = 4

    rose_total = rose_onions + rose_potatoes

    sophia_total = rose_total / 5

    result = int(sophia_total)

    return result


 Executed result: 3
[EXP] 510: [success_rate]: False, [output]: def solution():
    weight_loss_goal = 30

    days_to_reach_goal = (datetime.date(2023, 7, 19) - datetime.date(2023, 12, 31)).days

    calories_per_pound = 3500

    daily_calorie_deficit = (weight_loss_goal * calories_per_pound) / days_to_reach_goal

    result = daily_calorie_deficit

    return result


 Executed result: Error: return error, fail to execute
[EXP] 511: [success_rate]: True, [output]: def solution():
    money_earned = 30

    days_worked = 7

    money_earned_total = money_earned * days_worked

    money_spent = 100

    money_left = money_earned_total - money_spent

    result = money_left

    return result


 Executed result: 110
[EXP] 512: [success_rate]: True, [output]: def solution():
    water_per_km = 60

    laps = 8

    distance_per_lap = 0.25

    total_distance = laps * distance_per_lap

    total_water = water_per_km * total_distance

    result = total_water

    return result


 Executed result: 120.0
[EXP] 513: [success_rate]: True, [output]: def solution():
    julie_money_initial = 500

    percent_spent_on_clothes = 0.2

    percent_spent_on_cds = 0.25

    money_spent_on_clothes = julie_money_initial * percent_spent_on_clothes

    julie_money_after_clothes = julie_money_initial - money_spent_on_clothes

    money_spent_on_cds = julie_money_after_clothes * percent_spent_on_cds

    julie_money_after_cds = julie_money_after_clothes - money_spent_on_cds

    result = julie_money_after_cds

    return result


 Executed result: 300.0
[EXP] 514: [success_rate]: True, [output]: def solution():
    house_lot_cost = 120000

    house_cost = 3 * house_lot_cost // 4

    result = house_cost

    return result


 Executed result: 90000
[EXP] 515: [success_rate]: True, [output]: def solution():
    canvas_bags_per_pack = 5

    canvas_bags_total = canvas_bags_per_pack * 8

    cost_per_bag = 4

    selling_price_per_bag = 8

    cost_total = cost_per_bag * canvas_bags_total

    profit_per_bag = selling_price_per_bag - cost_per_bag

    profit_total = profit_per_bag * canvas_bags_total

    result = profit_total

    return result


 Executed result: 160
[EXP] 516: [success_rate]: True, [output]: def solution():
    punches_per_minute = 25

    minutes_per_round = 3

    rounds = 5

    total_minutes = minutes_per_round * rounds

    total_punches = punches_per_minute * total_minutes

    result = total_punches

    return result


 Executed result: 375
[EXP] 517: [success_rate]: True, [output]: def solution():
    suzanne_cookies = 36

    josh_cookies = suzanne_cookies / 4

    kelsie_cookies = josh_cookies * 2

    result = kelsie_cookies

    return result


 Executed result: 18.0
[EXP] 518: [success_rate]: True, [output]: def solution():
    bills_dollar10 = 4

    bills_dollar20 = 6

    total_money = (bills_dollar10 * 10) + (bills_dollar20 * 20)

    money_given_sister = total_money / 2

    money_remaining = total_money - money_given_sister

    money_for_dinner = money_remaining * 3 / 5

    money_after_dinner = money_remaining - money_for_dinner

    result = money_after_dinner

    return result


 Executed result: 32.0
[EXP] 519: [success_rate]: False, [output]: def solution():
    rob_time = 2 * 60  # 2 hours is 120 minutes

    royce_time = rob_time + 40

    result = royce_time

    return result


 Executed result: 160
[EXP] 520: [success_rate]: True, [output]: def solution():
    items = ['hat', 'scarf', 'sweater', 'mittens', 'socks']

    wool_per_item = [2, 4, 12, 1, 2]

    wool_needed_per_child = sum(wool_per_item)

    wool_needed = wool_needed_per_child * 3

    result = wool_needed

    return result


 Executed result: 63
[EXP] 521: [success_rate]: True, [output]: def solution():
    total_problems = 100

    problems_done_monday = 12

    problems_done_tuesday = 12 * 3

    problems_done_wednesday = (total_problems - (problems_done_monday + problems_done_tuesday)) // 4

    problems_left = total_problems - (problems_done_monday + problems_done_tuesday + problems_done_wednesday)

    result = problems_left

    return result


 Executed result: 39
[EXP] 522: [success_rate]: True, [output]: def solution():
    tony_quarts_per_hour = 6

    bobby_quarts_per_hour = tony_quarts_per_hour - 1

    kathy_quarts_per_hour = 2 * bobby_quarts_per_hour

    ricky_quarts_per_hour = kathy_quarts_per_hour - 2

    total_quarts_per_hour = tony_quarts_per_hour + bobby_quarts_per_hour + kathy_quarts_per_hour + ricky_quarts_per_hour

    result = total_quarts_per_hour

    return result


 Executed result: 29
[EXP] 523: [success_rate]: True, [output]: def solution():
    loaves_initial = 200

    loaves_sold_morning = 93

    loaves_sold_afternoon = 39

    total_loaves_sold = loaves_sold_morning + loaves_sold_afternoon

    loaves_returned = 6

    loaves_left = loaves_initial - total_loaves_sold + loaves_returned

    result = loaves_left

    return result


 Executed result: 74
[EXP] 524: [success_rate]: True, [output]: def solution():
    red_tulips = 36

    blue_tulips = 24

    red_tulips_per_row = 6

    blue_tulips_per_row = 8

    red_rows = red_tulips // red_tulips_per_row

    blue_rows = blue_tulips // blue_tulips_per_row

    total_rows = red_rows + blue_rows

    result = total_rows

    return result


 Executed result: 9
[EXP] 525: [success_rate]: False, [output]: def solution():
    raisins_initial = 27

    raisins_used_per_batch = 0.75

    batches = raisins_initial // raisins_used_per_batch

    result = batches

    return result


 Executed result: 36.0
[EXP] 526: [success_rate]: False, [output]: def solution():
    daily_consumption = 12

    additional_consumption = 2

    daily_consumption_total = daily_consumption + additional_consumption

    consumption_per_hour = daily_consumption_total * 1.5

    weekly_consumption = consumption_per_hour * 24 * 7

    weekly_consumption_before = daily_consumption * 1.5 * 24 * 7

    weekly_consumption_difference = weekly_consumption - weekly_consumption_before

    result = weekly_consumption_difference

    return result


 Executed result: 504.0
[EXP] 527: [success_rate]: False, [output]: def solution():
    house_area = 1

    painting_speed_single_person = 0.5 / 5

    painting_speed_five_people = painting_speed_single_person * 5

    house_hours = house_area / painting_speed_five_people

    result = house_hours

    return result


 Executed result: 2.0
[EXP] 528: [success_rate]: False, [output]: def solution():
    ophelia_sofas = 20

    ophelia_chairs = ophelia_sofas + 2

    jenna_chairs = ophelia_chairs * 3

    jenna_sofas = ophelia_chairs + 2

    total_sofas = ophelia_sofas + jenna_sofas

    total_chairs = ophelia_chairs + jenna_chairs

    result = (total_sofas, total_chairs)

    return result


 Executed result: (44, 88)
[EXP] 529: [success_rate]: False, [output]: def solution():
    price_cds = 4

    total_paid = 48

    price_headphones = total_paid - price_cds

    price_per_cd = price_headphones / 12

    result = price_per_cd

    return result


 Executed result: 3.6666666666666665
[EXP] 530: [success_rate]: False, [output]: def solution():
    hours_per_week = 4

    extra_hours_week1 = 5

    extra_hours_week2 = 5

    extra_hours_week3 = 6

    total_hours = 0

    for i in range(8):

        if i == 0:

            total_hours += extra_hours_week1

        elif i == 1:

        elif i == 4:

            total_hours += extra_hours_week2

        elif i == 6:

            total_hours += extra_hours_week3

        else:

            total_hours += hours_per_week

    result = total_hours

    return result


 Executed result: 20
[EXP] 531: [success_rate]: False, [output]: def solution():
    passengers_initial = 48

    passengers_off_first_stop = 8

    passengers_on_first_stop = passengers_off_first_stop * 5

    passengers_after_first_stop = passengers_initial - passengers_off_first_stop + passengers_on_first_stop

    passengers_off_second_stop = 21

    passengers_on_second_stop = passengers_off_second_stop * 3

    passengers_after_second_stop = passengers_after_first_stop - passengers_off_second_stop + passengers_on_second_stop

    result = passengers_after_second_stop

    return result


 Executed result: 122
[EXP] 532: [success_rate]: False, [output]: def solution():
    jame_age_five_years_later = 27

    jame_age_now = jame_age_five_years_later - 5

    cousin_age_eight_years_later = 2 * jame_age_five_years_later - 5

    cousin_age_now = cousin_age_eight_years_later - 8

    age_difference = abs(jame_age_now - cousin_age_now)

    result = age_difference

    return result


 Executed result: 19
[EXP] 533: [success_rate]: True, [output]: def solution():
    total_cost = 2400

    computer_cost = 1100

    printer_cost = computer_cost - 400

    monitor_cost = (total_cost - computer_cost - printer_cost) / 2

    result = monitor_cost

    return result


 Executed result: 300.0
[EXP] 534: [success_rate]: False, [output]: def solution():
    number_of_kids = 20

    boys_groups = number_of_kids // 2

    shells_brought_by_boys = 60

    shells_brought_by_girls = shells_brought_by_boys + 4 * shells_brought_by_boys

    shells_per_girl = shells_brought_by_girls // boys_groups

    result = shells_per_girl

    return result


 Executed result: 30
[EXP] 535: [success_rate]: False, [output]: def solution():
    nick_candies = 0

    george_candies_initial = 3 + 5 = 8

    george_candies = george_candies_initial

    nick_candies = 2 * george_candies

    result = nick_candies

    return result


 Executed result: 0
[EXP] 536: [success_rate]: True, [output]: def solution():
    chenny_age = 10

    alyana_age = chenny_age - 4

    anne_age = alyana_age + 2

    result = anne_age

    return result


 Executed result: 8
[EXP] 537: [success_rate]: True, [output]: def solution():
    book1 = 31

    book2 = 50

    book3 = book2 - 5

    book4 = book1 * 2

    total_thickness = book1 + book2 + book3 + book4

    result = total_thickness

    return result


 Executed result: 188
[EXP] 538: [success_rate]: True, [output]: def solution():
    vlogs_per_month = 72

    vlogs_uploaded_first_week = 18

    vlogs_uploaded_second_week = 21

    vlogs_uploaded_third_week = 15

    total_vlogs_uploaded = vlogs_uploaded_first_week + vlogs_uploaded_second_week + vlogs_uploaded_third_week

    vlogs_left_to_upload = vlogs_per_month - total_vlogs_uploaded

    result = vlogs_left_to_upload

    return result


 Executed result: 18
[EXP] 539: [success_rate]: False, [output]: def solution():
    dinner_bill = 50

    additional_tip = 0.20

    total_bill = dinner_bill * (1 + additional_tip)

    wife_share = total_bill / 2

    my_share = total_bill - wife_share

    result = my_share

    return result


 Executed result: 30.0
[EXP] 540: [success_rate]: True, [output]: def solution():
    dollars_initial = 18

    boys = 3

    share_per_boy = dollars_initial / boys

    eldest_dollars = share_per_boy

    eldest_dollars += 5

    eldest_dollars += 10

    eldest_dollars -= 8

    tripled_dollars = eldest_dollars * 3

    result = tripled_dollars

    return result


 Executed result: 39.0
[EXP] 541: [success_rate]: False, [output]: def solution():
    monthly_target = 1125

    days_in_month = 30

    days_in_first_half = days_in_month // 2

    days_in_second_half = days_in_month - days_in_first_half

    savings_per_day_first_half = monthly_target / days_in_month

    savings_per_day_second_half = savings_per_day_first_half * 2

    result = savings_per_day_second_half

    return result


 Executed result: 75.0
[EXP] 542: [success_rate]: True, [output]: def solution():
    total_cost_apples = 3 * 1.5

    total_cost_oranges = 5 * 0.8

    total_cost_peaches = 6 * 0.75

    total_cost = total_cost_apples + total_cost_oranges + total_cost_peaches

    cost_given = 20

    change = cost_given - total_cost

    result = change

    return result


 Executed result: 7.0
[EXP] 543: [success_rate]: True, [output]: def solution():
    jairus_tasks = 20

    jenny_tasks = 20

    jairus_per_task = 0.8

    jenny_per_task = 0.5

    jairus_total = jairus_tasks * jairus_per_task

    jenny_total = jenny_tasks * jenny_per_task

    difference = jairus_total - jenny_total

    result = difference

    return result


 Executed result: 6.0
[EXP] 544: [success_rate]: True, [output]: def solution():
    total_money = 100

    brad_money = total_money / (1 + 4)

    jeff_money = total_money - brad_money

    result = jeff_money

    return result


 Executed result: 80.0
[EXP] 545: [success_rate]: True, [output]: def solution():
    distance_to_work = 3

    distance_back = distance_to_work

    daily_distance = distance_to_work + distance_back

    weekly_distance = daily_distance * 5

    result = weekly_distance

    return result


 Executed result: 30
[EXP] 546: [success_rate]: False, [output]: def solution():
    alphabet_length = 26

    full_write = alphabet_length * 2

    half_write = alphabet_length // 2

    total_write = full_write + half_write + full_write

    result = total_write

    return result


 Executed result: 117
[EXP] 547: [success_rate]: True, [output]: def solution():
    families_notified = 3

    for i in range(3):

        families_notified *= 3

    result = families_notified

    return result


 Executed result: 81
[EXP] 548: [success_rate]: True, [output]: def solution():
    weight_final = 70

    weight_lost_per_month = 10

    months_lost = 3

    weight_lost = weight_lost_per_month * months_lost

    weight_initial = weight_final + weight_lost

    result = weight_initial

    return result


 Executed result: 100
[EXP] 549: [success_rate]: False, [output]: def solution():
    james_toys = 80

    toys_in_set = 5 * james_toys

    toys_jonathan_needed = toys_in_set + 2

    toys_jonathan_currently_have = toys_jonathan_needed - 2

    result = toys_jonathan_currently_have

    return result


 Executed result: 400
[EXP] 550: [success_rate]: True, [output]: def solution():
    notebook_price = 1.5

    pen_price = 0.25

    calculator_price = 12

    geometry_set_price = 10

    notebook_quantity = 5

    pen_quantity = 2

    calculator_quantity = 1

    geometry_set_quantity = 1

    total_without_discount = (notebook_quantity * notebook_price) + (pen_quantity * pen_price) + (calculator_quantity * calculator_price) + (geometry_set_quantity * geometry_set_price)

    discount = total_without_discount * 0.1

    total_with_discount = total_without_discount - discount

    result = round(total_with_discount, 2)

    return result


 Executed result: 27.0
[EXP] 551: [success_rate]: True, [output]: def solution():
    hamburgers = 5

    hamburger_cost = 4

    fries = 10

    fries_cost = 0.3

    drinks = 5

    drinks_cost = 2

    total_cost = hamburgers * hamburger_cost + fries * fries_cost + drinks * drinks_cost

    fifty_dollar_bill = 50

    change = fifty_dollar_bill - total_cost

    result = change

    return result


 Executed result: 17.0
[EXP] 552: [success_rate]: True, [output]: def solution():
    sales = 2500

    commission_below_1000 = 0.3 * 1000

    commission_above_1000 = 0.1 * (sales - 1000)

    commission = commission_below_1000 + commission_above_1000

    result = commission

    return result


 Executed result: 450.0
[EXP] 553: [success_rate]: True, [output]: def solution():
    cases_initial = 2

    bottles_per_case = 24

    total_bottles_initial = cases_initial * bottles_per_case

    guests = 70

    bottles_per_guest = 2

    total_bottles_needed = guests * bottles_per_guest

    bottles_to_buy = total_bottles_needed - total_bottles_initial

    result = bottles_to_buy

    return result


 Executed result: 92
[EXP] 554: [success_rate]: True, [output]: def solution():
    time_cold = 16

    time_warm = 2 * time_cold + 2

    time_cold_three_miles = time_cold * 3

    time_warm_three_miles = time_warm * 3

    difference = time_warm_three_miles - time_cold_three_miles

    result = difference

    return result


 Executed result: 54
[EXP] 555: [success_rate]: True, [output]: def solution():
    hourly_rate = 2

    hours_per_day = 5

    days_per_week = 4

    hours_per_week = hours_per_day * days_per_week

    money_per_week = hourly_rate * hours_per_week

    money_needed = 80

    weeks_needed = money_needed / money_per_week

    result = weeks_needed

    return result


 Executed result: 2.0
[EXP] 556: [success_rate]: True, [output]: def solution():
    fish_sub_cost = 40

    cold_cut_combo_cost = 3 * fish_sub_cost

    total_cost = fish_sub_cost + cold_cut_combo_cost

    result = total_cost

    return result


 Executed result: 160
[EXP] 557: [success_rate]: True, [output]: def solution():
    buttons_total = 21

    buttons_with_two_holes = 7

    buttons_with_four_holes = buttons_total - buttons_with_two_holes

    total_holes = buttons_with_two_holes * 2 + buttons_with_four_holes * 4

    result = total_holes

    return result


 Executed result: 70
[EXP] 558: [success_rate]: True, [output]: def solution():
    lockers_timothy = 24

    locker_zack = lockers_timothy / 2

    locker_peter = locker_zack / 4

    result = locker_peter

    return result


 Executed result: 3.0
[EXP] 559: [success_rate]: True, [output]: def solution():
    daily_recommended_cups = 4

    octavia_cups = daily_recommended_cups / 2

    juan_cups = octavia_cups * 10

    difference = juan_cups - daily_recommended_cups

    result = difference

    return result


 Executed result: 16.0
[EXP] 560: [success_rate]: False, [output]: def solution():
    cages_of_hamsters = 3

    hamsters_per_cage = 10

    total_hamsters = cages_of_hamsters * hamsters_per_cage

    cages_of_guinea_pigs = 3

    guinea_pigs_per_cage = 5

    total_guinea_pigs = cages_of_guinea_pigs * guinea_pigs_per_cage

    total rodents = total_hamsters + total_guinea_pigs

    result = total rodents

    return result


 Executed result: Error: return error, fail to execute
[EXP] 561: [success_rate]: True, [output]: def solution():
    mark_weight = 150

    susan_weight = mark_weight - 20

    bob_weight = 2 * susan_weight

    total_weight = mark_weight + susan_weight + bob_weight

    average_weight = total_weight / 3

    result = average_weight

    return result


 Executed result: 180.0
[EXP] 562: [success_rate]: True, [output]: def solution():
    angle_pyramid = 32

    angle_sun_per_hour = 5

    hours = 10

    angle_sun = angle_sun_per_hour * hours

    angle_total = angle_pyramid + angle_sun

    result = angle_total

    return result


 Executed result: 82
[EXP] 563: [success_rate]: True, [output]: def solution():
    son1_age = 12

    son2_age = son1_age - 4

    total_candles = son1_age + son2_age

    cost_per_candle = 3 / 5

    total_cost = total_candles * cost_per_candle

    result = total_cost

    return result


 Executed result: 12.0
[EXP] 564: [success_rate]: False, [output]: def solution():
    pages_read_per_minute = 2

    minutes_per_night = 1.5

    pages_per_night = pages_read_per_minute * minutes_per_night

    pages_read_first_week = 7 * pages_per_night

    pages_read_second_week = 100

    pages_read_two_weeks = pages_read_first_week + pages_read_second_week

    result = pages_read_two_weeks

    return result


 Executed result: 121.0
[EXP] 565: [success_rate]: True, [output]: def solution():
    sandwiches_initial = 12

    sandwiches_cody_eaten = round(sandwiches_initial * 1/3)

    sandwiches_trevor_eaten = round(sandwiches_initial * 1/4)

    sandwiches_eaten = sandwiches_cody_eaten + sandwiches_trevor_eaten

    sandwiches_left = sandwiches_initial - sandwiches_eaten

    result = sandwiches_left

    return result


 Executed result: 5
[EXP] 566: [success_rate]: True, [output]: def solution():
    shiloh_age = 44

    increase_age = 7

    future_shiloh_age = shiloh_age + increase_age

    nephew_future_age = future_shiloh_age / 3

    current_nephew_age = nephew_future_age - increase_age

    result = current_nephew_age

    return result


 Executed result: 10.0
[EXP] 567: [success_rate]: False, [output]: def solution():
    first_tooth = 5.00

    second_tooth = 1.00

    third_tooth = 1.00

    fourth_tooth = 0.50

    fifth_tooth = 0.50

    total_money = first_tooth + second_tooth + third_tooth + fourth_tooth + fifth_tooth

    result = total_money

    return result


 Executed result: 8.0
[EXP] 568: [success_rate]: True, [output]: def solution():
    richie_goals = 80

    mark_goals = richie_goals - 20

    anna_goals = richie_goals - 45

    total_goals = richie_goals + mark_goals + anna_goals

    result = total_goals

    return result


 Executed result: 175
[EXP] 569: [success_rate]: True, [output]: def solution():
    liam_made = 63

    mitchell_sells = 21

    mitchell_price = 4

    mitchell_made = mitchell_sells * mitchell_price

    difference = mitchell_made - liam_made

    result = difference

    return result


 Executed result: 21
[EXP] 570: [success_rate]: False, [output]: def solution():
    total_money = 70

    money_per_day = total_money / 7

    days_spent_on_wooden_figure = 4

    money_spent_on_wooden_figure = days_spent_on_wooden_figure * money_per_day

    wooden_action_figures = money_spent_on_wooden_figure // 5

    remaining_money = total_money - money_spent_on_wooden_figure

    days_left = 7 - days_spent_on_wooden_figure

    money_spent_on_plastic_figure = remaining_money / days_left

    plastic_action_figures = money_spent_on_plastic_figure // 2

    total_action_figures = wooden_action_figures + plastic_action_figures

    result = total_action_figures

    return result


 Executed result: 13.0
[EXP] 571: [success_rate]: True, [output]: def solution():
    spaying_cost = 200

    vaccine_cost = 3 * 20

    vase_cost = 4 * 12

    total_cost = spaying_cost + vaccine_cost + vase_cost

    result = total_cost

    return result


 Executed result: 308
[EXP] 572: [success_rate]: True, [output]: def solution():
    roses_per_week = 40

    total_roses_per_week = 20 + 15 + 30

    total_roses_per_month = total_roses_per_week * 4

    roses_lacked = total_roses_per_month - roses_per_week * 4

    result = roses_lacked

    return result


 Executed result: 100
[EXP] 573: [success_rate]: True, [output]: def solution():
    savings_initial = 3000

    savings_removed_per_month = 100

    months = 2 * 12

    savings_removed = savings_removed_per_month * months

    savings_left = savings_initial - savings_removed

    result = savings_left

    return result


 Executed result: 600
[EXP] 574: [success_rate]: True, [output]: def solution():
    bread_cost = 3

    bread_per_sandwich = 10

    sandwich_cost = 30

    sandwiches_sold = 10

    revenue = sandwiches_sold * 7

    bread_cost_per_sandwich = bread_cost / bread_per_sandwich

    total_cost = bread_cost_per_sandwich * sandwiches_sold + sandwich_cost

    profit = revenue - total_cost

    result = profit

    return result


 Executed result: 37.0
[EXP] 575: [success_rate]: True, [output]: def solution():
    crayons_initial = 64 * 3

    crayon_pieces_per_muffin = 8

    muffins = crayons_initial // crayon_pieces_per_muffin

    money_per_muffin = 1.50

    total_money = muffins * money_per_muffin

    result = total_money

    return result


 Executed result: 36.0
[EXP] 576: [success_rate]: True, [output]: def solution():
    room_length = 18

    room_width = 12

    total_area = room_length * room_width

    carpet_cost = total_area * 12

    padding_cost = total_area * 2

    removal_cost = room_length * room_width * 4

    installation_cost = total_area * 34

    total_cost = carpet_cost + padding_cost + removal_cost + installation_cost

    result = total_cost

    return result


 Executed result: 11232
[EXP] 577: [success_rate]: True, [output]: def solution():
    total_birds = 50 + 0 + 120 + 20 + 90

    total_days = 7

    birds_per_day = total_birds / total_days

    result = birds_per_day

    return result


 Executed result: 40.0
[EXP] 578: [success_rate]: True, [output]: def solution():
    starting_value = 20

    value_plus_half = starting_value + (starting_value / 2)

    value_plus_half_divided_by_5 = value_plus_half / 5

    final_value = value_plus_half_divided_by_5 * (starting_value - 12)

    result = final_value

    return result


 Executed result: 48.0
[EXP] 579: [success_rate]: True, [output]: def solution():
    boy_cards = 5

    brother_cards = boy_cards - 3

    total_cards = boy_cards + brother_cards

    result = total_cards

    return result


 Executed result: 7
[EXP] 580: [success_rate]: False, [output]: def solution():
    set_temperature = 450

    actual_temperature = 468

    percentage_diff = ((actual_temperature - set_temperature) / set_temperature) * 100

    new_set_temperature = (520 * (1 + percentage_diff / 100))

    result = new_set_temperature

    return result


 Executed result: 540.8000000000001
[EXP] 581: [success_rate]: True, [output]: def solution():
    movie1_length = 1 * 60 + 30

    movie2_length = 2 * 60 + 5

    total_minutes = movie1_length + movie2_length

    result = total_minutes

    return result


 Executed result: 215
[EXP] 582: [success_rate]: True, [output]: def solution():
    herb_house_cost = 76000

    juan_house_cost = herb_house_cost * 70 / 100

    total_house_cost = herb_house_cost + juan_house_cost

    result = total_house_cost

    return result


 Executed result: 129200.0
[EXP] 583: [success_rate]: False, [output]: def solution():
    cups_initial = 12

    dishes = cups_initial * 2

    friend_cups = 40

    friend_dishes = friend_cups + 20

    total_cups = cups_initial + friend_cups

    total_dishes = dishes + friend_dishes

    result = total_cups + total_dishes

    return result


 Executed result: 136
[EXP] 584: [success_rate]: False, [output]: def solution():
    contacts_per_box = 90

    days_contacts_last = 45

    cost_per_box = 100

    discount = 0.1

    discount_amount = cost_per_box * discount

    discounted_cost_per_box = cost_per_box - discount_amount

    total_cost = 2 * discounted_cost_per_box

    total_contacts = 2 * contacts_per_box * 45

    cost_per_contact = total_cost / total_contacts

    result = cost_per_contact

    return result


 Executed result: 0.022222222222222223
[EXP] 585: [success_rate]: True, [output]: def solution():
    john_rate = 10

    jill_rate = john_rate

    jill_saturday_hours = 2

    jill_sunday_hours = 1

    jill_total_hours = jill_saturday_hours + jill_sunday_hours

    john_saturday_hours = 2 * jill_saturday_hours

    john_sunday_hours = 3 * jill_sunday_hours

    john_total_hours = john_saturday_hours + john_sunday_hours

    jill_earnings = jill_rate * jill_total_hours

    john_earnings = john_rate * john_total_hours

    john_jill_diff = john_earnings - jill_earnings

    result = john_jill_diff

    return result


 Executed result: 40
[EXP] 586: [success_rate]: True, [output]: def solution():
    calories_burned_aerobics = 2 * 500

    calories_burned_running = 1 * 600

    total_calories_burned = calories_burned_aerobics + calories_burned_running

    water_needs = total_calories_burned / 200 * 100

    result = water_needs

    return result


 Executed result: 800.0
[EXP] 587: [success_rate]: False, [output]: def solution():
    total_jelly_bean = 4500

    blue_jelly_bean = total_jelly_bean * 1.01

    green_jelly_bean = total_jelly_bean * 1.01 / 0.99

    red_jelly_bean = blue_jelly_bean * 0.99

    difference = green_jelly_bean - red_jelly_bean

    result = difference

    return result


 Executed result: 91.35909090909081
[EXP] 588: [success_rate]: True, [output]: def solution():
    typing_speed_initial = 47

    typing_speed_second = 52

    typing_speed_third = typing_speed_second + 5

    average = (typing_speed_initial + typing_speed_second + typing_speed_third) / 3

    result = average

    return result


 Executed result: 52.0
[EXP] 589: [success_rate]: True, [output]: def solution():
    loss_per_week = -1.25

    gain_per_week = 1.75

    difference_per_week = gain_per_week - loss_per_week

    difference_after_five_weeks = difference_per_week * 5

    result = difference_after_five_weeks

    return result


 Executed result: 15.0
[EXP] 590: [success_rate]: False, [output]: def solution():
    people_invited_via_email = 100

    people_invited_by_people_invited_via_email = 2 * people_invited_via_email

    total_people_invited_via_email = people_invited_via_email + people_invited_by_people_invited_via_email

    people_invited_directly = 10

    people_invited_by_people_invited_directly = 8 * 2

    total_people_invited_directly = people_invited_directly + people_invited_by_people_invited_directly

    total_people_invited = total_people_invited_via_email + total_people_invited_directly

    result = total_people_invited

    return result


 Executed result: 326
[EXP] 591: [success_rate]: True, [output]: def solution():
    affenpinscher_weight = 10

    dachshund_weight = 2 * affenpinscher_weight

    papillon_weight = dachshund_weight / 4

    mastiff_weight = 44 * papillon_weight

    result = mastiff_weight

    return result


 Executed result: 220.0
[EXP] 592: [success_rate]: True, [output]: def solution():
    boots_cost_amazon = 16

    shipping_cost_amazon = 4

    boots_cost_ebay = 13

    shipping_cost_ebay = 2 * shipping_cost_amazon

    total_cost_amazon = boots_cost_amazon + shipping_cost_amazon

    total_cost_ebay = boots_cost_ebay + shipping_cost_ebay

    difference = total_cost_ebay - total_cost_amazon

    result = difference

    return result


 Executed result: 1
[EXP] 593: [success_rate]: True, [output]: def solution():
    window_height = 20

    beanstalk_height_initial = 4

    days = 0

    while beanstalk_height_initial < window_height:

        beanstalk_height_initial *= 2

        days += 1

    result = days

    return result


 Executed result: 3
[EXP] 594: [success_rate]: False, [output]: def solution():
    grams_per_cup = 100

    grams_of_protein_per_cup = 3

    grams_of_protein_per_day = grams_of_protein_per_cup

    grams_of_mushrooms_per_day = 200

    grams_of_protein_per_week = grams_of_protein_per_day * 7

    result = grams_of_protein_per_week

    return result


 Executed result: 21
[EXP] 595: [success_rate]: False, [output]: def solution():
    age_five_years_ago = age / 2

    age_now = age_five_years_ago + 5

    age_in_three_years = age_now + 3

    result = age_in_three_years

    return result


 Executed result: Error: return error, fail to execute
[EXP] 596: [success_rate]: True, [output]: def solution():
    base_cost = 2 * 2000

    porcelain_crown_cost = 500

    total_cost = base_cost + porcelain_crown_cost

    deposit = 600

    money_needed = total_cost - deposit

    hourly_wage = 15

    hours_needed = money_needed / hourly_wage

    result = hours_needed

    return result


 Executed result: 260.0
[EXP] 597: [success_rate]: False, [output]: def solution():
    smallest_angle = x

    middle_angle = 2 * smallest_angle

    largest_angle = 3 * smallest_angle

    sum_of_angles = smallest_angle + middle_angle + largest_angle

    sum_of_angles = 180

    largest_angle = 180 - smallest_angle - middle_angle

    result = largest_angle

    return result


 Executed result: Error: return error, fail to execute
[EXP] 598: [success_rate]: True, [output]: def solution():
    quarters = 8

    dimes = 6

    nickels = 14

    pennies = 15

    total_cents = 25 * quarters + 10 * dimes + 5 * nickels + pennies

    cost_per_gumball = 5

    total_gumballs = total_cents // cost_per_gumball

    result = total_gumballs

    return result


 Executed result: 69
[EXP] 599: [success_rate]: True, [output]: def solution():
    dogs = 5

    cats = 2

    birds = 10

    dog_legs = dogs * 4

    cat_legs = cats * 4

    bird_legs = birds * 2

    total_legs = dog_legs + cat_legs + bird_legs

    result = total_legs

    return result


 Executed result: 48
[EXP] 600: [success_rate]: True, [output]: def solution():
    initial_weight = 8

    increase_percentage = 50

    increased_weight = initial_weight + (initial_weight * (increase_percentage / 100))

    reduced_weight = increased_weight - 2

    result = reduced_weight

    return result


 Executed result: 10.0
[EXP] 601: [success_rate]: False, [output]: def solution():
    games_initial = 5

    games_per_month_for_1st_year = 1

    games_per_month_for_2nd_year = 2

    games_per_month_for_3rd_year = 4

    total_games_1st_year = games_per_month_for_1st_year * 12 + 5

    total_games_2nd_year = total_games_1st_year + games_per_month_for_2nd_year * 12 + 5

    total_games_3rd_year = total_games_2nd_year + games_per_month_for_3rd_year * 12 + 5

    total_games = games_initial + total_games_1st_year + total_games_2nd_year + total_games_3rd_year

    result = total_games

    return result


 Executed result: 167
[EXP] 602: [success_rate]: True, [output]: def solution():
    miles_per_hour = 1200 / 3

    additional_miles = 2000

    additional_hours = additional_miles / miles_per_hour

    result = additional_hours

    return result


 Executed result: 5.0
[EXP] 603: [success_rate]: True, [output]: def solution():
    pounds_ruiz_makes_in_two_hours = 120

    pounds_marissa_makes_in_one_hour = pounds_ruiz_makes_in_two_hours * 3 / 4

    pounds_ruiz_makes_in_one_hour = pounds_ruiz_makes_in_two_hours / 2

    pounds_ruiz_makes_in_twelve_hours = pounds_ruiz_makes_in_one_hour * 12

    pounds_marissa_makes_in_twelve_hours = pounds_marissa_makes_in_one_hour * 12

    total_pounds = pounds_ruiz_makes_in_twelve_hours + pounds_marissa_makes_in_twelve_hours

    result = total_pounds

    return result


 Executed result: 1800.0
[EXP] 604: [success_rate]: True, [output]: def solution():
    money_initial = 100

    money_spent_monday = 8

    money_spent_tuesday = 8 * 2

    money_spent_wednesday = money_spent_tuesday * 4

    total_money_spent = money_spent_monday + money_spent_tuesday + money_spent_wednesday

    money_left = money_initial - total_money_spent

    result = money_left

    return result


 Executed result: 12
[EXP] 605: [success_rate]: True, [output]: def solution():
    cups_sold_per_hour_1 = 15

    price_per_cup_1 = 0.5

    hours_sold_1 = 4

    total_cups_sold_1 = cups_sold_per_hour_1 * hours_sold_1

    total_money_1 = total_cups_sold_1 * price_per_cup_1

    cups_sold_per_hour_2 = 10

    price_per_cup_2 = 0.6

    hours_sold_2 = 2

    total_cups_sold_2 = cups_sold_per_hour_2 * hours_sold_2

    total_money_2 = total_cups_sold_2 * price_per_cup_2

    total_money = total_money_1 + total_money_2

    result = total_money

    return result


 Executed result: 42.0
[EXP] 606: [success_rate]: False, [output]: def solution():
    tire_rotations_initial = 10440000

    tire_rotations_per_mile = 725

    miles_driven_per_month = 400

    months_per_year = 12

    total_rotations_per_month = tire_rotations_per_mile * miles_driven_per_month

    total_rotations_per_year = total_rotations_per_month * months_per_year

    years_before_replacement = tire_rotations_initial / total_rotations_per_year

    result = years_before_replacement

    return result


 Executed result: 3.0
[EXP] 607: [success_rate]: False, [output]: def solution():
    cost_bottle = 24.00

    washings = 120

    pumps_per_wash = 2

    washings_per_bottle = washings / pumps_per_wash

    cost_per_wash = cost_bottle / washings_per_bottle

    cost_per_pump = cost_per_wash / pumps_per_wash

    cost_per_pump_cents = cost_per_pump * 100

    result = cost_per_pump_cents

    return result


 Executed result: 20.0
[EXP] 608: [success_rate]: True, [output]: def solution():
    joe_money = 50

    shirt_price = 25

    shorts_price = 35

    total_price = shirt_price + shorts_price

    total_price_discounted = total_price * 0.7

    money_spent = total_price_discounted

    money_left = joe_money - money_spent

    result = money_left

    return result


 Executed result: 8.0
[EXP] 609: [success_rate]: False, [output]: def solution():
    croissants_per_day = 4

    croissants_per_week = croissants_per_day * 7

    croissants_per_dozen = 12

    butter_required_per_dozen = 0.25

    butter_required_per_croissant = butter_required_per_dozen / croissants_per_dozen

    butter_required = butter_required_per_croissant * croissants_per_week

    result = butter_required

    return result


 Executed result: 0.5833333333333333
[EXP] 610: [success_rate]: False, [output]: def solution():
    cost_per_meter = 194

    lewis_street_length = 490

    lewis_street_cost = cost_per_meter * lewis_street_length

    monica_street_cost = cost_per_meter * 150

    difference = lewis_street_cost - monica_street_cost

    result = difference

    return result


 Executed result: 65960
[EXP] 611: [success_rate]: False, [output]: def solution():
    funding_initial = 100000

    months_initial = 5

    months_researched = 5 * 10

    funding_per_month = funding_initial / months_initial

    funding_per_month_after_initial = funding_per_month * 1.5

    total_funding = funding_initial

    for i in range(months_researched - months_initial):

        total_funding += funding_per_month_after_initial

    result = total_funding

    return result


 Executed result: 1450000.0
[EXP] 612: [success_rate]: True, [output]: def solution():
    steak1 = 6

    beef_tips = 8

    steak2 = 16

    total_meat = steak1 + beef_tips + steak2

    result = total_meat

    return result


 Executed result: 30
[EXP] 613: [success_rate]: True, [output]: def solution():
    members = 1000

    posts_per_member_per_day = 3

    days_in_march = 31

    posts_per_day = members * posts_per_member_per_day

    total_posts_in_march = posts_per_day * days_in_march

    result = total_posts_in_march

    return result


 Executed result: 93000
[EXP] 614: [success_rate]: True, [output]: def solution():
    laundry_per_week = 2

    water_per_load = 20

    cost_per_gallon = 0.15

    water_per_year = laundry_per_week * 52 * water_per_load * 1

    cost_per_year = water_per_year * cost_per_gallon

    result = cost_per_year

    return result


 Executed result: 312.0
[EXP] 615: [success_rate]: True, [output]: def solution():
    aquarium_cost = 10.0

    rocks_cost = 2 * 2.5

    coral_cost = 3 * 2.0

    fish_cost = 20 * 0.5

    fish_food_cost = 2.0

    total_cost = aquarium_cost + rocks_cost + coral_cost + fish_cost + fish_food_cost

    result = total_cost

    return result


 Executed result: 33.0
[EXP] 616: [success_rate]: True, [output]: def solution():
    beanstalk_height_after_first_week = 3

    beanstalk_height_doubled = beanstalk_height_after_first_week * 2

    beanstalk_height_after_third_week = beanstalk_height_doubled + 4

    result = beanstalk_height_after_third_week

    return result


 Executed result: 10
[EXP] 617: [success_rate]: True, [output]: def solution():
    bull_weight = 750

    meat_per_hour = 15

    hours_per_day = 10

    meat_per_day = meat_per_hour * hours_per_day

    days_to_sell = bull_weight / meat_per_day

    result = int(days_to_sell)

    return result


 Executed result: 5
[EXP] 618: [success_rate]: True, [output]: def solution():
    rows = 4

    seats_per_row = 18

    total_seats = rows * seats_per_row

    administrators = total_seats // 4

    remaining_seats = total_seats - administrators

    parents = remaining_seats // 3

    students = remaining_seats - parents

    result = students

    return result


 Executed result: 36
[EXP] 619: [success_rate]: True, [output]: def solution():
    street_lights_per_pole = 4

    poles_per_intersection = 6

    intersections = 4

    total_street_lights = street_lights_per_pole * poles_per_intersection * intersections

    non_functioning_street_lights = 20

    functioning_street_lights = total_street_lights - non_functioning_street_lights

    result = functioning_street_lights

    return result


 Executed result: 76
[EXP] 620: [success_rate]: True, [output]: def solution():
    dvd1_plays = 1000 - 356

    dvd2_plays = 1000 - 135

    total_plays = dvd1_plays + dvd2_plays

    result = total_plays

    return result


 Executed result: 1509
[EXP] 621: [success_rate]: True, [output]: def solution():
    weeks = 6

    sessions_per_week = 2

    hours_per_session = 2

    hours_total = weeks * sessions_per_week * hours_per_session

    cost_per_hour = 125

    cost_total = hours_total * cost_per_hour

    result = cost_total

    return result


 Executed result: 3000
[EXP] 622: [success_rate]: True, [output]: def solution():
    gum_initial = 20

    time_at_school = 8

    pieces_per_hour = 1/2

    pieces_chewed_at_school = time_at_school * pieces_per_hour

    pieces_chewed_way_home = 1

    pieces_chewed_after_dinner = 1

    pieces_given_to_sister = (gum_initial - pieces_chewed_at_school - pieces_chewed_way_home - pieces_chewed_after_dinner) // 2

    total_pieces_chewed = pieces_chewed_at_school + pieces_chewed_way_home + pieces_chewed_after_dinner + pieces_given_to_sister

    gum_left = gum_initial - total_pieces_chewed

    result = gum_left

    return result


 Executed result: 7.0
[EXP] 623: [success_rate]: True, [output]: def solution():
    age_in_12_years = 16

    age_now = age_in_12_years - 12

    age_in_4_years = age_now + 4

    result = age_in_4_years

    return result


 Executed result: 8
[EXP] 624: [success_rate]: True, [output]: def solution():
    baseball_coach_baseballs = 9

    baseball_coach_baseballs_cost = 3

    baseball_coach_total_cost = baseball_coach_baseballs * baseball_coach_baseballs_cost

    basketball_coach_baseballs = 8

    basketball_coach_baseballs_cost = 14

    basketball_coach_total_cost = basketball_coach_baseballs * basketball_coach_baseballs_cost

    difference = basketball_coach_total_cost - baseball_coach_total_cost

    result = difference

    return result


 Executed result: 85
[EXP] 625: [success_rate]: True, [output]: def solution():
    rows = 10

    flowers_per_row = 20

    total_flowers = rows * flowers_per_row

    flowers_bloomed = total_flowers * 4 / 5

    result = flowers_bloomed

    return result


 Executed result: 160.0
[EXP] 626: [success_rate]: True, [output]: def solution():
    internet_speed_kb_per_second = 20

    internet_speed_mb_per_second = internet_speed_kb_per_second / 1000

    hours_in_an_hour = 3600

    internet_speed_mb_per_hour = internet_speed_mb_per_second * hours_in_an_hour

    result = internet_speed_mb_per_hour

    return result


 Executed result: 72.0
[EXP] 627: [success_rate]: True, [output]: def solution():
    cars_per_day_initial = 10

    cars_per_day_after = cars_per_day_initial - 4

    days_first_part = 3

    days_second_part = 4

    cars_towed_first_part = cars_per_day_initial * days_first_part

    cars_towed_second_part = cars_per_day_after * days_second_part

    total_cars_towed = cars_towed_first_part + cars_towed_second_part

    result = total_cars_towed

    return result


 Executed result: 54
[EXP] 628: [success_rate]: True, [output]: def solution():
    height_required = 48  # 4 feet = 48 inches

    adam_height_initial = 40

    adam_height_growth = 2

    years_past = 0

    while adam_height_initial < height_required:

        adam_height_initial += adam_height_growth

        years_past += 1

    result = years_past

    return result


 Executed result: 4
[EXP] 629: [success_rate]: True, [output]: def solution():
    cars_sold = 10

    car_price = 25000

    profit_per_car = car_price - (car_price * 0.3)

    total_profit = profit_per_car * cars_sold

    commission = total_profit * 0.1

    result = commission

    return result


 Executed result: 17500.0
[EXP] 630: [success_rate]: True, [output]: def solution():
    total_riders = 100

    wave_length = 30

    riders_who_stay_upright = total_riders * (25 / 100)

    women_who_stay_upright = riders_who_stay_upright * (60 / 100)

    men_who_stay_upright = riders_who_stay_upright - women_who_stay_upright

    result = men_who_stay_upright

    return result


 Executed result: 10.0
[EXP] 631: [success_rate]: True, [output]: def solution():
    price_of_diamond = 2000

    price_of_gold = (4/5) * price_of_diamond

    price_of_silver = price_of_gold - 400

    total_price = price_of_diamond + price_of_gold + price_of_silver

    result = total_price

    return result


 Executed result: 4800.0
[EXP] 632: [success_rate]: True, [output]: def solution():
    snowflake_stamps = 16

    truck_stamps = snowflake_stamps + 3

    rose_stamps = truck_stamps - 9

    total_stamps = snowflake_stamps + truck_stamps + rose_stamps

    result = total_stamps

    return result


 Executed result: 45
[EXP] 633: [success_rate]: True, [output]: def solution():
    bob_miles_ahead = 75

    bob_speed = 55

    tom_speed = 70

    distance_to_catch_up = bob_miles_ahead

    time_taken = distance_to_catch_up / (tom_speed - bob_speed)

    result = time_taken

    return result


 Executed result: 5.0
[EXP] 634: [success_rate]: True, [output]: def solution():
    naomi_catches = 17

    darren_catches = naomi_catches - 6

    tommy_catches = darren_catches + 3

    result = tommy_catches

    return result


 Executed result: 14
[EXP] 635: [success_rate]: False, [output]: def solution():
    classes_initial = 10

    cost_per_class = 60 / classes_initial

    threshold = 10

    classes_allowed_to_miss = classes_initial - (threshold / cost_per_class)

    result = classes_allowed_to_miss

    return result


 Executed result: 8.333333333333334
[EXP] 636: [success_rate]: True, [output]: def solution():
    jewel_customers_per_day = 50

    jewel_customers_per_week = jewel_customers_per_day * 7

    julie_customers_per_day = jewel_customers_per_day * 2

    julie_customers_per_week = julie_customers_per_day * 7

    total_customers_per_week = jewel_customers_per_week + julie_customers_per_week

    result = total_customers_per_week

    return result


 Executed result: 1050
[EXP] 637: [success_rate]: False, [output]: def solution():
    paisley_miles = 4

    paisley_miles Reggie_miles = 5

    reggie_miles_lf_lynn = 3

    lynn_miles = reggie_miles - reggie_miles_lf_lynn

    result = lynn_miles

    return result


 Executed result: Error: return error, fail to execute
[EXP] 638: [success_rate]: True, [output]: def solution():
    cost_per_apple = 5.20 / 4

    cost_per_orange = 3.30 / 3

    cost_of_5_apples = 5 * cost_per_apple

    cost_of_5_oranges = 5 * cost_per_orange

    total_cost = cost_of_5_apples + cost_of_5_oranges

    result = total_cost

    return result


 Executed result: 12.0
[EXP] 639: [success_rate]: True, [output]: def solution():
    length = 6

    width = 4

    depth = 3

    volume = length * width * depth

    time_per_foot = 3

    total_time = volume * time_per_foot

    result = total_time

    return result


 Executed result: 216
[EXP] 640: [success_rate]: False, [output]: def solution():
    base_price = 30000

    king_cab_cost = 7500

    leather_seats_cost = king_cab_cost / 3

    running_boards_cost = leather_seats_cost - 500

    external_light_package_cost = 1500

    total_cost = base_price + king_cab_cost + leather_seats_cost + running_boards_cost + external_light_package_cost

    result = total_cost

    return result


 Executed result: 43500.0
[EXP] 641: [success_rate]: False, [output]: def solution():
    monthly_salary = 20000

    raise_percentage = 0.05

    raise_percentage_amount = monthly_salary * raise_percentage

    new_monthly_salary = monthly_salary + raise_percentage_amount

    bonus = new_monthly_salary / 2

    total_bonus = bonus * 12

    total_salary_per_year = new_monthly_salary * 12 + total_bonus

    result = total_salary_per_year

    return result


 Executed result: 378000.0
[EXP] 642: [success_rate]: False, [output]: def solution():
    suit_cost = 750

    dress_pant_cost = suit_cost / 5

    dress_shirt_cost = 60

    total_suit_cost = 10 * suit_cost

    total_dress_pant_cost = 10 * dress_pant_cost

    total_dress_shirt_cost = 10 * 3 * dress_shirt_cost

    total_cost = total_suit_cost + total_dress_pant_cost + total_dress_shirt_cost

    result = total_cost

    return result


 Executed result: 10800.0
[EXP] 643: [success_rate]: True, [output]: def solution():
    articles_website1 = 20

    articles_website2 = 10

    days_in_february = 28

    total_articles_website1 = articles_website1 * days_in_february

    total_articles_website2 = articles_website2 * days_in_february

    total_articles = total_articles_website1 + total_articles_website2

    result = total_articles

    return result


 Executed result: 840
[EXP] 644: [success_rate]: True, [output]: def solution():
    steve_age = 60

    wife_age = steve_age + 4

    son_age = wife_age / 2

    son_wife_age = son_age - 3

    result = son_wife_age

    return result


 Executed result: 29.0
[EXP] 645: [success_rate]: True, [output]: def solution():
    portions_per_bag = 8

    portion_size = 2

    total_flour_per_bag = portions_per_bag * portion_size

    total_flour_in_three_bags = total_flour_per_bag * 3

    result = total_flour_in_three_bags

    return result


 Executed result: 48
[EXP] 646: [success_rate]: True, [output]: def solution():
    alisa_speed = 12

    alisa_time = 4.5

    alisa_distance = alisa_speed * alisa_time

    stanley_speed = 10

    stanley_time = 2.5

    stanley_distance = stanley_speed * stanley_time

    total_distance = alisa_distance + stanley_distance

    result = total_distance

    return result


 Executed result: 79.0
[EXP] 647: [success_rate]: False, [output]: def solution():
    feet_soil = 24

    feet_clay = 8

    feet_total = feet_soil + feet_clay

    hours_soil = feet_soil / 4

    hours_clay = feet_clay / 4 / 2

    total_hours = hours_soil + hours_clay

    result = total_hours

    return result


 Executed result: 7.0
[EXP] 648: [success_rate]: False, [output]: def solution():
    people = 2 + 1 + 25  # himself, his teacher, and 25 classmates

    cupcakes_per_person = 2

    total_cupcakes = people * cupcakes_per_person

    result = total_cupcakes

    return result


 Executed result: 56
[EXP] 649: [success_rate]: True, [output]: def solution():
    initial_likes = 2000

    new_likes_three_weeks_later = 70 * initial_likes

    total_likes_three_weeks_later = initial_likes + new_likes_three_weeks_later

    new_likes_recently = 20000

    total_likes_recently = total_likes_three_weeks_later + new_likes_recently

    result = total_likes_recently

    return result


 Executed result: 162000
[EXP] 650: [success_rate]: False, [output]: def solution():
    price_per_pomegranate_tuplesday = 20

    discount_on_tuplesday = 2

    number_of_pomegranates_tuplesday = 20

    total_cost_tuplesday = price_per_pomegranate_tuplesday * number_of_pomegranates_tuplesday

    total_cost_tuplesday_after_discount = total_cost_tuplesday - discount_on_tuplesday

    price_per_pomegranate_dayafter = 30

    total_cost_dayafter = price_per_pomegranate_dayafter * number_of_pomegranates_tuplesday

    discount_on_dayafter = total_cost_dayafter * 0.10

    total_cost_dayafter_after_discount = total_cost_dayafter - discount_on_dayafter

    difference_in_cost = total_cost_tuplesday_after_discount - total_cost_dayafter_after_discount

    result = difference_in_cost

    return result


 Executed result: -142.0
[EXP] 651: [success_rate]: False, [output]: def solution():
    sales_red_first_month = 400

    sales_green_first_month = 2 * sales_red_first_month

    total_sales_first_month = sales_red_first_month + sales_green_first_month

    sales_red_second_month = 3/4 * total_sales_first_month

    sales_green_second_month = total_sales_first_month - sales_red_second_month

    total_sales_second_month = sales_red_second_month + sales_green_second_month

    total_sales_in_two_months = total_sales_first_month + total_sales_second_month

    result = total_sales_in_two_months

    return result


 Executed result: 2400.0
[EXP] 652: [success_rate]: True, [output]: def solution():
    start_time = 5

    end_time = 9

    hours = end_time - start_time - 1

    first_hour_cost = 15

    additional_hour_cost = 2 * first_hour_cost

    total_cost = first_hour_cost + (hours - 1) * additional_hour_cost

    result = total_cost

    return result


 Executed result: 75
[EXP] 653: [success_rate]: True, [output]: def solution():
    salary_initial = 200

    salary_after = 420

    salary_expected = 300

    salary_withheld = salary_expected - (salary_after - salary_initial)

    result = salary_withheld

    return result


 Executed result: 80
[EXP] 654: [success_rate]: True, [output]: def solution():
    deviled_eggs_per_guest = 3

    guests = 16

    total_deviled_eggs = deviled_eggs_per_guest * guests

    deviled_eggs_per_dish = 2

    eggs_needed = total_deviled_eggs / deviled_eggs_per_dish

    eggs_per_dozen = 12

    dozens_needed = eggs_needed / eggs_per_dozen

    result = dozens_needed

    return result


 Executed result: 2.0
[EXP] 655: [success_rate]: True, [output]: def solution():
    pages_required = 15

    pages_written = pages_required / 3

    pages_left = pages_required - pages_written

    result = pages_left

    return result


 Executed result: 10.0
[EXP] 656: [success_rate]: True, [output]: def solution():
    pages_in_book = 200

    pages_per_day = 10

    days_required = pages_in_book / pages_per_day

    deadline_days = 30

    days_before_deadline = deadline_days - days_required

    result = days_before_deadline

    return result


 Executed result: 10.0
[EXP] 657: [success_rate]: True, [output]: def solution():
    plane_cost = 150000

    hanger_cost = 5000

    fuel_cost = 2 * hanger_cost

    monthly_cost = hanger_cost + fuel_cost

    yearly_cost = monthly_cost * 12

    total_cost = plane_cost + yearly_cost

    result = total_cost

    return result


 Executed result: 330000
[EXP] 658: [success_rate]: True, [output]: def solution():
    rice_cooking_time = 30

    pork_cooking_time = rice_cooking_time + 20

    beans_cooking_time = (rice_cooking_time + pork_cooking_time) / 2

    total_cooking_time = rice_cooking_time + pork_cooking_time + beans_cooking_time

    result = total_cooking_time

    return result


 Executed result: 120.0
[EXP] 659: [success_rate]: True, [output]: def solution():
    cost_almonds_per_pound = 10

    cost_walnuts_per_pound = 15

    mixture1_almonds = 0.5

    mixture1_walnuts = 0.33

    mixture2_almonds = 0.2

    mixture2_walnuts = 0.33

    cost_mixture1 = (cost_almonds_per_pound * mixture1_almonds) + (cost_walnuts_per_pound * mixture1_walnuts)

    cost_mixture2 = (cost_almonds_per_pound * mixture2_almonds) + (cost_walnuts_per_pound * mixture2_walnuts)

    difference = cost_mixture1 - cost_mixture2

    result = difference

    return result


 Executed result: 2.999999999999999
[EXP] 660: [success_rate]: False, [output]: def solution():
    total_animal_legs = 70

    total_animal_heads = 20

    total_animals = total_animal_heads

    sheep_legs = total_animal_legs - 2 * (total_animal_heads - total_animals)

    sheep = sheep_legs / 4

    result = sheep

    return result


 Executed result: 17.5
[EXP] 661: [success_rate]: True, [output]: def solution():
    normal_cost_per_pound = 5

    expensive_cost_per_pound = normal_cost_per_pound * 1.2

    coffee_needed_per_week = 7

    total_normal_cost = coffee_needed_per_week * normal_cost_per_pound

    total_expensive_cost = coffee_needed_per_week * expensive_cost_per_pound

    total_donut_cost = 2

    total_cost = total_expensive_cost + total_donut_cost

    result = total_cost

    return result


 Executed result: 44.0
[EXP] 662: [success_rate]: True, [output]: def solution():
    total_spent = 20.00

    chip_cost = 2.00 * 2

    fried_chicken_cost = 8.00

    soda_cost = 1.00

    total_purchased = chip_cost + fried_chicken_cost + soda_cost

    cost_of_apple_pie = total_spent - total_purchased

    result = cost_of_apple_pie

    return result


 Executed result: 7.0
[EXP] 663: [success_rate]: True, [output]: def solution():
    newspapers_total = 600

    newspapers_district_a = 198

    newspapers_district_c = 209

    newspapers_district_b = newspapers_total - newspapers_district_a - newspapers_district_c

    result = newspapers_district_b

    return result


 Executed result: 193
[EXP] 664: [success_rate]: True, [output]: def solution():
    class_meetings = 4

    class_hours_per_meeting = 2

    class_hours_per_week = class_meetings * class_hours_per_meeting

    weeks_in_class = 6

    total_class_hours = class_hours_per_week * weeks_in_class

    recipes_per_hours = 1.5

    recipes_learned = total_class_hours / recipes_per_hours

    result = recipes_learned

    return result


 Executed result: 32.0
[EXP] 665: [success_rate]: True, [output]: def solution():
    teachers_total = 150

    history_teachers = 0.6 * teachers_total

    math_teachers = teachers_total - history_teachers

    hours_sleep_per_teacher = 6

    total_hours_sleep = math_teachers * hours_sleep_per_teacher

    result = total_hours_sleep

    return result


 Executed result: 360.0
[EXP] 666: [success_rate]: True, [output]: def solution():
    aurelia_money = 120

    kassidy_money = aurelia_money * 3 / 4

    rayna_money = kassidy_money + 60

    total_money = aurelia_money + kassidy_money + rayna_money

    shared_money = total_money / 3

    result = shared_money

    return result


 Executed result: 120.0
[EXP] 667: [success_rate]: True, [output]: def solution():
    quarters = 4

    minutes_per_quarter = 12

    extra_minutes = 5

    total_minutes = quarters * minutes_per_quarter + extra_minutes

    result = total_minutes

    return result


 Executed result: 53
[EXP] 668: [success_rate]: True, [output]: def solution():
    employees = 50

    percentage_management = 0.2

    employees_management = employees * percentage_management

    percentage_overseeing = 0.3

    employees_overseeing = employees_management * percentage_overseeing

    result = employees_overseeing

    return result


 Executed result: 3.0
[EXP] 669: [success_rate]: True, [output]: def solution():
    muffins = 16

    flour_per_muffin = 5

    sugar_per_muffin = 3

    salt_per_muffin = 0.25

    flour_needed = muffins * flour_per_muffin

    sugar_needed = muffins * sugar_per_muffin

    salt_needed = muffins * salt_per_muffin

    dry_ingredients_needed = flour_needed + sugar_needed + salt_needed

    result = dry_ingredients_needed

    return result


 Executed result: 132.0
[EXP] 670: [success_rate]: True, [output]: def solution():
    robert_candy = 3

    cindy_candy = 5

    aaron_candy = 4

    total_candy = robert_candy + cindy_candy + aaron_candy

    share_candy = total_candy / 3

    result = share_candy

    return result


 Executed result: 4.0
[EXP] 671: [success_rate]: True, [output]: def solution():
    type_a_candies = 7

    type_b_candies = 10

    type_a_cost = 0.5

    type_b_cost = 0.75

    total_cost = (type_a_candies * type_a_cost) + (type_b_candies * type_b_cost)

    paid = 15

    change = paid - total_cost

    result = change

    return result


 Executed result: 4.0
[EXP] 672: [success_rate]: True, [output]: def solution():
    good_days_in_past = 12

    good_days_in_first_eight = 8

    good_days_in_last_three = 2

    good_days_left = good_days_in_past - good_days_in_first_eight - good_days_in_last_three

    result = good_days_left

    return result


 Executed result: 2
[EXP] 673: [success_rate]: True, [output]: def solution():
    janey_books = 21

    books_sally_has = (janey_books - 3) / 2

    result = books_sally_has

    return result


 Executed result: 9.0
[EXP] 674: [success_rate]: True, [output]: def solution():
    height_initial = 20 * 12  # convert feet to inches

    height_target = 600

    growth_rate = 30

    days = (height_target - height_initial) / growth_rate

    result = int(days)

    return result


 Executed result: 12
[EXP] 675: [success_rate]: False, [output]: def solution():
    toys_initial = 4

    dogs_initial = 4

    dogs_added = 8

    toys_needed = dogs_added

    dogs_total = dogs_initial + dogs_added

    toys_total = toys_initial + toys_needed

    dogs_fewer = dogs_total // 2

    toys_needed_again = dogs_fewer - dogs_total

    dogs_gone = 3

    toys_needed_after = dogs_gone

    result = toys_total + toys_needed_again - toys_needed_after

    return result


 Executed result: 3
[EXP] 676: [success_rate]: True, [output]: def solution():
    total_amount = 1200

    dylans_investment = 2 / 5 * total_amount

    remaining_amount = total_amount - dylans_investment

    frances_investment = 2 / 3 * remaining_amount

    skylers_investment = remaining_amount - frances_investment

    result = skylers_investment

    return result


 Executed result: 240.0
[EXP] 677: [success_rate]: True, [output]: def solution():
    signatures_Carol = 20

    signatures_Jennifer = 44

    total_signatures = signatures_Carol + signatures_Jennifer

    signatures_needed = 100 - total_signatures

    return signatures_needed


 Executed result: 36
[EXP] 678: [success_rate]: True, [output]: def solution():
    lorie_hourly_wage = 10

    karen_hourly_wage = lorie_hourly_wage * 2

    hours_worked_per_day = 3

    days = 2

    karen_daily_income = karen_hourly_wage * hours_worked_per_day

    karen_total_income = karen_daily_income * days

    result = karen_total_income

    return result


 Executed result: 120
[EXP] 679: [success_rate]: False, [output]: def solution():
    potatoes_initial = 96

    hash_browns_per_potatoes = 36

    hash_browns_total = potatoes_initial * hash_browns_per_potatoes

    result = hash_browns_total

    return result


 Executed result: 3456
[EXP] 680: [success_rate]: False, [output]: def solution():
    elevator_load = 700  # kg

    adult_weight = 80  # kg

    adults_riding = 8

    total_weight = adult_weight * adults_riding

    excess_weight = total_weight - elevator_load

    result = excess_weight

    return result


 Executed result: -60
[EXP] 681: [success_rate]: True, [output]: def solution():
    katarina_cookies = 68

    max_cookies = katarina_cookies + 5

    cookie_monster_cookies = max_cookies - 12

    summer_cookies = max_cookies + 23

    total_cookies = katarina_cookies + max_cookies + cookie_monster_cookies + summer_cookies

    result = total_cookies

    return result


 Executed result: 298
[EXP] 682: [success_rate]: True, [output]: def solution():
    final_length = 140

    lace_trim = 20

    extended_length = final_length - lace_trim

    original_length = extended_length / 1.5

    result = original_length

    return result


 Executed result: 80.0
[EXP] 683: [success_rate]: True, [output]: def solution():
    turtle_time = 1 * 60

    rabbit_time = 40

    half_lawn_time = (turtle_time + rabbit_time) / 2

    result = half_lawn_time

    return result


 Executed result: 50.0
[EXP] 684: [success_rate]: True, [output]: def solution():
    time_initial = 30

    time_to_corner = 6

    time_to_fire_station = 13

    time_spent = time_to_corner + time_to_fire_station

    time_left = time_initial - time_spent

    result = time_left

    return result


 Executed result: 11
[EXP] 685: [success_rate]: True, [output]: def solution():
    apples_cost = 1 * 4

    bananas_cost = 2 * 2

    oranges_cost = 2 * 3

    total_cost = apples_cost + bananas_cost + oranges_cost

    result = total_cost

    return result


 Executed result: 14
[EXP] 686: [success_rate]: True, [output]: def solution():
    greta_cookies = 30

    celinda_cookies = 2 * greta_cookies

    total_cookies = greta_cookies + celinda_cookies

    cookies_eaten = 10

    cookies_in_box = total_cookies - cookies_eaten

    result = cookies_in_box

    return result


 Executed result: 80
[EXP] 687: [success_rate]: False, [output]: def solution():
    triplet_age = (44 - 7) / 2

    twin_age = triplet_age + 7

    result = twin_age

    return result


 Executed result: 25.5
[EXP] 688: [success_rate]: True, [output]: def solution():
    john_math_homework = 20

    john_reading_homework = 40

    john_history_homework = 20

    total_homework = john_math_homework + john_reading_homework + john_history_homework

    hours_to_dinner = 3

    minutes_to_dinner = hours_to_dinner * 60

    time_for_nap = minutes_to_dinner - total_homework

    result = time_for_nap

    return result


 Executed result: 100
[EXP] 689: [success_rate]: False, [output]: def solution():
    lollipops_initial = 5

    candies_initial = 4

    cost_per_lollipop = 0.40

    cost_per_candy = 3.20 / 4

    cost_lollipops = lollipops_initial * cost_per_lollipop

    cost_candies = candies_initial * cost_per_candy

    cost_total = cost_lollipops + cost_candies

    cost_ten_lollipops = cost_lollipops * 2

    cost_ten_candies = cost_candies * 2

    cost_ten_lollipops_and_candies = cost_ten_lollipops + cost_ten_candies

    result = cost_ten_lollipops_and_candies

    return result


 Executed result: 10.4
[EXP] 690: [success_rate]: True, [output]: def solution():
    rong_savings = 20

    neil_savings = rong_savings + rong_savings * 2/5

    total_savings_rong = rong_savings * 12 * 10

    total_savings_neil = neil_savings * 12 * 10

    result = total_savings_rong + total_savings_neil

    return result


 Executed result: 5760.0
[EXP] 691: [success_rate]: False, [output]: def solution():
    total_bill = 20 * 2

    percent = 0.6

    bill_with_heartworm = total_bill + (total_bill * percent)

    bill_paid = 125

    money_left = bill_paid - bill_with_heartworm

    result = money_left

    return result


 Executed result: 61.0
[EXP] 692: [success_rate]: True, [output]: def solution():
    cost_per_apple = 0.5

    cost_per_banana = 2 * 0.5

    cost_per_orange = 3 * cost_per_banana

    cost_per_apples = cost_per_apple * 12

    cost_per_bananas = cost_per_banana * 5

    cost_per_oranges = cost_per_orange * 7

    cost_per_crate = cost_per_apples + cost_per_bananas + cost_per_oranges

    result = cost_per_crate

    return result


 Executed result: 32.0
[EXP] 693: [success_rate]: True, [output]: def solution():
    red_squares = 14

    blue_squares = red_squares + 4

    green_squares = blue_squares + 6

    white_squares = green_squares - 12

    total_squares = red_squares + blue_squares + green_squares + white_squares

    square_foot_total = total_squares * 1 * 1

    result = square_foot_total

    return result


 Executed result: 68
[EXP] 694: [success_rate]: True, [output]: def solution():
    high_chairs = 8

    regular_chairs = high_chairs * 5

    total_adults = 42

    total_babies = 15

    total_people = total_adults + total_babies

    chairs_needed = total_people - high_chairs - regular_chairs

    result = chairs_needed

    return result


 Executed result: 9
[EXP] 695: [success_rate]: True, [output]: def solution():
    deer_total = 50

    percent_bucks = 0.5

    bucks_total = deer_total * percent_bucks

    percent_bucks_8_points = 0.2

    bucks_8_points = bucks_total * percent_bucks_8_points

    result = int(bucks_8_points)

    return result


 Executed result: 5
[EXP] 696: [success_rate]: False, [output]: def solution():
    adam_points = 50

    betty_points = adam_points + (0.3 * adam_points)

    tom_points = betty_points - (betty_points * (30 / 100))

    marta_points = tom_points * 3

    total_points = adam_points + betty_points + marta_points + tom_points

    points_missing = 400 - total_points

    result = points_missing

    return result


 Executed result: 103.0
[EXP] 697: [success_rate]: True, [output]: def solution():
    great_grand_babies = 3 * 3 * 3

    result = great_grand_babies

    return result


 Executed result: 27
[EXP] 698: [success_rate]: False, [output]: def solution():
    paycheck = 2400.00

    percentage_retirement = 0.5

    retirement = paycheck * percentage_retirement

    paycheck_left = paycheck - retirement

    percentage_car = 0.2

    car_payment = paycheck_left * percentage_car

    paycheck_left_after_car = paycheck_left - car_payment

    result = paycheck_left_after_car

    return result


 Executed result: 960.0
[EXP] 699: [success_rate]: True, [output]: def solution():
    space_for_pencils = 20

    pencils_missing = 4

    pencils_in_box = space_for_pencils - pencils_missing

    pencils_in_pairs = pencils_in_box // 2

    result = pencils_in_pairs

    return result


 Executed result: 8
[EXP] 700: [success_rate]: True, [output]: def solution():
    fireworks_total = 15 * 20

    fireworks_seen = fireworks_total * 0.4

    fireworks_hannah_sets_off = 3 * 5

    fireworks_hannah_sees = fireworks_seen + fireworks_hannah_sets_off

    result = fireworks_hannah_sees

    return result


 Executed result: 135.0
[EXP] 701: [success_rate]: True, [output]: def solution():
    people = 1 + 12 + 7

    seats = people

    drinks_per_seat = 2

    snacks_per_seat = 3

    total_drinks = drinks_per_seat * seats

    total_snacks = snacks_per_seat * seats

    total_items = total_drinks + total_snacks

    cost_per_item = 2

    total_cost = total_items * cost_per_item

    result = total_cost

    return result


 Executed result: 200
[EXP] 702: [success_rate]: True, [output]: def solution():
    gissela_truck = 4000

    gordy_truck = gissela_truck + 800

    gary_truck = 11600 - (gissela_truck + gordy_truck)

    result = gary_truck

    return result


 Executed result: 2800
[EXP] 703: [success_rate]: True, [output]: def solution():
    males = 8

    females = 6

    dumplings_female = 3

    dumplings_male = dumplings_female + 1

    dumplings_total = (females * dumplings_female) + (males * dumplings_male)

    result = dumplings_total

    return result


 Executed result: 50
[EXP] 704: [success_rate]: True, [output]: def solution():
    money_initial = 100

    ratio_gerald = 3

    ratio_julia = 2

    total_ratio = ratio_gerald + ratio_julia

    share_gerald = (ratio_gerald / total_ratio) * money_initial

    money_gerald = share_gerald

    money_spent = 10

    money_left = money_gerald - money_spent

    result = money_left

    return result


 Executed result: 50.0
[EXP] 705: [success_rate]: True, [output]: def solution():
    cat_speed = 15

    turtle_speed = cat_speed / 5

    turtle_distance_in_1_second = turtle_speed

    turtle_distance_in_40_seconds = turtle_distance_in_1_second * 40

    result = turtle_distance_in_40_seconds

    return result


 Executed result: 120.0
[EXP] 706: [success_rate]: True, [output]: def solution():
    total_goal = 6300

    total_raised = 2100

    hours_raised = 3

    amount_per_hour = total_raised / hours_raised

    hours_left = (total_goal - total_raised) / amount_per_hour

    result = hours_left + hours_raised

    return result


 Executed result: 9.0
[EXP] 707: [success_rate]: False, [output]: def solution():
    river_water = 100

    city_used = 40

    industrial_purpose = city_used * 80 / 100

    non_industrial_purpose = city_used - industrial_purpose

    percent_non_industrial = (non_industrial_purpose / city_used) * 100

    result = percent_non_industrial

    return result


 Executed result: 20.0
[EXP] 708: [success_rate]: True, [output]: def solution():
    tutoring_price_per_day = 12

    days_per_week = 7

    days_per_two_weeks = days_per_week * 2

    tutoring_price_for_two_weeks = tutoring_price_per_day * days_per_two_weeks

    result = tutoring_price_for_two_weeks

    return result


 Executed result: 168
[EXP] 709: [success_rate]: False, [output]: def solution():
    chocolate_quarts_per_hour = 100 / 2

    chocolate_quarts_in_48_hours = chocolate_quarts_per_hour * 24

    vanilla_quarts_per_hour = 50 / 4

    vanilla_quarts_in_48_hours = vanilla_quarts_per_hour * 12

    total_quarts_in_48_hours = chocolate_quarts_in_48_hours + vanilla_quarts_in_48_hours

    result = total_quarts_in_48_hours

    return result


 Executed result: 1350.0
[EXP] 710: [success_rate]: True, [output]: def solution():
    croissants = 5

    croissant_price = 3.00

    croissant_total = croissants * croissant_price

    cinnamon_rolls = 4

    cinnamon_roll_price = 2.50

    cinnamon_rolls_total = cinnamon_rolls * cinnamon_roll_price

    mini_quiches = 3

    mini_quiche_price = 4.00

    mini_quiches_total = mini_quiches * mini_quiche_price

    blueberry_muffins = 13

    blueberry_muffin_price = 1.00

    blueberry_muffins_total = blueberry_muffins * blueberry_muffin_price

    total = croissant_total + cinnamon_rolls_total + mini_quiches_total + blueberry_muffins_total

    discount = total * 0.10

    total_after_discount = total - discount

    result = total_after_discount

    return result


 Executed result: 45.0
[EXP] 711: [success_rate]: False, [output]: def solution():
    erin_money = 6

    price_per_scoop = 1.50

    free_scoops = 2

    scoops_cost = price_per_scoop * (free_scoops + 1)

    total_scoops = free_scoops + 1

        total_scoops += 1

    result = total_scoops

    return result


 Executed result: 4
[EXP] 712: [success_rate]: True, [output]: def solution():
    ginger_candy_initial = 100

    amy_candy_initial = 100

    ginger_candy_consumption = 4

    amy_candy_consumption = 3

    days = 14  # 2 weeks

    ginger_candy_left = ginger_candy_initial - (ginger_candy_consumption * days)

    amy_candy_left = amy_candy_initial - (amy_candy_consumption * days)

    ginger_candy_left_after_amy = amy_candy_left - ginger_candy_left

    result = ginger_candy_left_after_amy

    return result


 Executed result: 14
[EXP] 713: [success_rate]: True, [output]: def solution():
    bathroom_sq_ft = 36

    sq_ft_covered = 2/3 * bathroom_sq_ft

    tiles_per_sq_ft = 24

    tiles_needed = sq_ft_covered * tiles_per_sq_ft

    result = tiles_needed

    return result


 Executed result: 576.0
[EXP] 714: [success_rate]: True, [output]: def solution():
    initial_cost = 20

    cost_per_pound = 1.5

    total_cost_to_pick = initial_cost + cost_per_pound * 30

    store_cost = 2.5 * 30

    difference = store_cost - total_cost_to_pick

    result = difference

    return result


 Executed result: 10.0
[EXP] 715: [success_rate]: True, [output]: def solution():
    computers_initial = 500

    price_per_computer = 700

    price_increase = 0.10

    price_per_computer_new = price_per_computer * (1 + price_increase)

    total_cost = computers_initial * price_per_computer_new

    result = total_cost

    return result


 Executed result: 385000.00000000006
[EXP] 716: [success_rate]: True, [output]: def solution():
    eggs = 6

    cheese_oz = 2

    ham_oz = 2

    calories_per_egg = 75

    cheese_calories_per_oz = 120

    ham_calories_per_oz = 40

    total_calories_eggs = eggs * calories_per_egg

    total_calories_cheese = cheese_oz * cheese_calories_per_oz

    total_calories_ham = ham_oz * ham_calories_per_oz

    total_calories = total_calories_eggs + total_calories_cheese + total_calories_ham

    result = total_calories

    return result


 Executed result: 770
[EXP] 717: [success_rate]: True, [output]: def solution():
    pencil_cost = 0.5

    eraser_cost = 0.25

    pencils = 6

    erasers = 8

    total_cost = (pencils * pencil_cost) + (erasers * eraser_cost)

    total_paid = 10

    change = total_paid - total_cost

    result = change

    return result


 Executed result: 5.0
[EXP] 718: [success_rate]: True, [output]: def solution():
    people_applying = 100

    people_receiving_interviews = people_applying * 0.3

    people_receiving_job_offer = people_receiving_interviews * 0.2

    people_accepting_position = people_receiving_job_offer * 0.333

    result = people_accepting_position

    return result


 Executed result: 1.9980000000000002
[EXP] 719: [success_rate]: True, [output]: def solution():
    sacks_initial = 20

    sacks_given_cousin = 3

    sacks_given_brother = 4

    sacks_left = sacks_initial - sacks_given_cousin - sacks_given_brother

    kilograms_per_sack = 25

    total_kilograms_given = sacks_given_cousin * kilograms_per_sack + sacks_given_brother * kilograms_per_sack

    result = total_kilograms_given

    return result


 Executed result: 175
[EXP] 720: [success_rate]: True, [output]: def solution():
    boxes_this_week = 3 + 5

    boxes_last_week = 4

    boxes_diff = boxes_this_week - boxes_last_week

    result = boxes_diff

    return result


 Executed result: 4
[EXP] 721: [success_rate]: True, [output]: def solution():
    total_minutes = 5

    minutes_with_arms_down = total_minutes - 2

    minutes_with_arms_up = 2

    total_taps_down = minutes_with_arms_down * (300 + 250)

    total_taps_up = minutes_with_arms_up * (200 + 200)

    total_taps = total_taps_down + total_taps_up

    result = total_taps

    return result


 Executed result: 2450
[EXP] 722: [success_rate]: True, [output]: def solution():
    damage_car = 450

    fine = 120

    buckets_of_asphalt = 3

    asphalt_cost = buckets_of_asphalt * 25

    total_cost = fine + asphalt_cost

    money_saved = damage_car - total_cost

    result = money_saved

    return result


 Executed result: 255
[EXP] 723: [success_rate]: True, [output]: def solution():
    normal_chairs_initial = 170

    baby_chairs_initial = 23

    normal_chairs_sent = 20

    baby_chairs_sent = 13

    normal_chairs_left = normal_chairs_initial - normal_chairs_sent

    baby_chairs_left = baby_chairs_initial - baby_chairs_sent

    total_chairs_left = normal_chairs_left + baby_chairs_left

    result = total_chairs_left

    return result


 Executed result: 160
[EXP] 724: [success_rate]: True, [output]: def solution():
    slices_per_pizza = 12

    pizzas_ordered = 5

    total_slices = slices_per_pizza * pizzas_ordered

    slices_eaten_bryce_friends = 2/3 * slices_per_pizza * 3

    slices_eaten_remaining_friends = 3/4 * slices_per_pizza * 2

    slices_left = total_slices - (slices_eaten_bryce_friends + slices_eaten_remaining_friends)

    result = slices_left

    return result


 Executed result: 18.0
[EXP] 725: [success_rate]: True, [output]: def solution():
    cat_sausages = 9

    cat_minutes = 30

    dog_minutes = cat_minutes * (2/3)

    total_minutes = cat_minutes + dog_minutes

    average_minutes = total_minutes / 2

    result = average_minutes

    return result


 Executed result: 25.0
[EXP] 726: [success_rate]: False, [output]: def solution():
    topher_shoe_length_inches = (8 * 12) + 4  # convert 8 feet 4 inches to inches

    topheer_shoe_length = topher_shoe_length_inches

    bobby_shoe_length_inches = (topher_shoe_length - 10) / 9

    result = bobby_shoe_length_inches

    return result


 Executed result: Error: return error, fail to execute
[EXP] 727: [success_rate]: True, [output]: def solution():
    student_cars = 64

    student_windows_per_car = 4

    total_student_windows = student_cars * student_windows_per_car

    student_windows_smashed = total_student_windows * 0.25

    teacher_cars = 32

    teacher_windows_per_car = 2

    total_teacher_windows = teacher_cars * teacher_windows_per_car

    teacher_windows_smashed = total_teacher_windows * 0.75

    total_windows_smashed = student_windows_smashed + teacher_windows_smashed

    result = total_windows_smashed

    return result


 Executed result: 112.0
[EXP] 728: [success_rate]: True, [output]: def solution():
    light_blue = 15

    dark_blue = 45

    light_green = 40

    dark_green = 50

    total_spools = light_blue + dark_blue + light_green + dark_green

    blue_spools = light_blue + dark_blue

    percent_blue = (blue_spools / total_spools) * 100

    result = percent_blue

    return result


 Executed result: 40.0
[EXP] 729: [success_rate]: True, [output]: def solution():
    people_initial = 5000

    people_voted_by_midday = 2 / 5 * people_initial

    people_left_at_midday = people_initial - people_voted_by_midday

    people_voted_by_1600 = 2 / 3 * people_left_at_midday

    people_left_by_1600 = people_left_at_midday - people_voted_by_1600

    result = people_left_by_1600

    return result


 Executed result: 1000.0
[EXP] 730: [success_rate]: True, [output]: def solution():
    gum_per_day = 4

    gum_per_pack = 15

    days = 30

    total_gum_needed = gum_per_day * days

    packs_needed = total_gum_needed // gum_per_pack

    result = packs_needed

    return result


 Executed result: 8
[EXP] 731: [success_rate]: False, [output]: def solution():
    graham_crackers_per_sleeve = 8

    sleeves_per_box = 3

    graham_crackers_per_box = graham_crackers_per_sleeve * sleeves_per_box

    kids_smores = 9 * 2

    adults_smores = 6

    total_smores = kids_smores + adults_smores

    total_graham_crackers_needed = total_smores * 8

    boxes_needed = total_graham_crackers_needed // graham_crackers_per_box

    result = boxes_needed

    return result


 Executed result: 8
[EXP] 732: [success_rate]: True, [output]: def solution():
    dora_age = 15

    father_age = dora_age * 2 + 8

    mother_age = father_age - 4

    total_age = dora_age + father_age + mother_age

    result = total_age

    return result


 Executed result: 87
[EXP] 733: [success_rate]: False, [output]: def solution():
    total_money = 20

    siblings = 3

    money_per_sibling = total_money / siblings

    result = money_per_sibling

    return result


 Executed result: 6.666666666666667
[EXP] 734: [success_rate]: True, [output]: def solution():
    math_science_weight = 2

    french_weight = 4

    english_weight = 3

    history_weight = english_weight * 2

    total_weight = math_science_weight * 2 + french_weight + english_weight + history_weight

    result = total_weight

    return result


 Executed result: 17
[EXP] 735: [success_rate]: True, [output]: def solution():
    votes_total = 100

    votes_candidate_a = votes_total * 0.2

    votes_candidate_b = votes_candidate_a * 1.5

    votes_candidate_c = votes_total - votes_candidate_a - votes_candidate_b

    result = votes_candidate_c

    return result


 Executed result: 50.0
[EXP] 736: [success_rate]: False, [output]: def solution():
    boris_apples = 100

    beck_apples = boris_apples - 23

    boris_apples_after = boris_apples - 10

    beck_apples_after = beck_apples - 10

    result = boris_apples_after - beck_apples_after

    return result


 Executed result: 23
[EXP] 737: [success_rate]: True, [output]: def solution():
    water_initial = 32

    giant_cubes = 3

    giant_ounces = giant_cubes * 4

    medium_cubes = 7

    medium_ounces = medium_cubes * 2

    small_cubes = 8

    small_ounces = small_cubes * 0.5

    total_ounces_used = giant_ounces + medium_ounces + small_ounces

    water_left = water_initial - total_ounces_used

    result = water_left

    return result


 Executed result: 2.0
[EXP] 738: [success_rate]: True, [output]: def solution():
    clara_books = 20

    steven_books = clara_books / 2

    alice_books = steven_books + 6

    difference = clara_books - alice_books

    result = difference

    return result


 Executed result: 4.0
[EXP] 739: [success_rate]: True, [output]: def solution():
    gallon_cost = 5

    half_gallon_cost = gallon_cost - 2

    gallon_jars = 10

    half_gallon_jars = 16

    cost_gallon_jars = gallon_jars * gallon_cost

    cost_half_gallon_jars = half_gallon_jars * half_gallon_cost

    total_cost = cost_gallon_jars + cost_half_gallon_jars

    result = total_cost

    return result


 Executed result: 98
[EXP] 740: [success_rate]: True, [output]: def solution():
    students = 50

    students_baking = 10

    students_basketball = 5

    students_music = students_basketball * 2

    students_video_games = students - students_baking - students_basketball - students_music

    result = students_video_games

    return result


 Executed result: 25
[EXP] 741: [success_rate]: True, [output]: def solution():
    birds_initial = 12

    birds_missed = 1/3 * birds_initial

    birds_left = birds_initial - birds_missed

    birds_joined = 20

    birds_total = birds_left + birds_joined

    result = birds_total

    return result


 Executed result: 28.0
[EXP] 742: [success_rate]: True, [output]: def solution():
    total_students = 80

    students_per_class = total_students // 2

    girls_per_class = students_per_class * 0.4

    boys_per_class = students_per_class - girls_per_class

    result = boys_per_class

    return result


 Executed result: 24.0
[EXP] 743: [success_rate]: True, [output]: def solution():
    slices_initial = 2

    slices_added = 3

    slices_total = slices_initial + slices_added

    slices_triple = slices_total * 3

    slices_eaten = 2

    slices_stolen = 5

    slices_left = slices_triple - slices_eaten - slices_stolen

    result = slices_left

    return result


 Executed result: 8
[EXP] 744: [success_rate]: True, [output]: def solution():
    dogs = 8

    cats = 5

    birds = 3

    horses = 12

    total_animals = dogs + cats + birds + horses

    days_in_a_week = 7

    animals_per_day = total_animals / days_in_a_week

    result = animals_per_day

    return result


 Executed result: 4.0
[EXP] 745: [success_rate]: True, [output]: def solution():
    cost_per_pack = 1800

    num_packs = 3

    total_cost = cost_per_pack * num_packs

    card1 = 4000

    card2 = 1000

    card3 = 30

    avg_card_price = 50

    total_card_value = card1 + card2 + (card3 * avg_card_price)

    profit = total_card_value - total_cost

    result = profit

    return result


 Executed result: 1100
[EXP] 746: [success_rate]: True, [output]: def solution():
    adult1 = 26

    adult2 = 26

    child1 = 12

    child2 = 12

    total1 = adult1 * 2 + child1 * 2

    adult3 = 14

    adult4 = 14

    child3 = 10

    child4 = 10

    total2 = adult3 * 2 + child3 * 2

    result = total1 - total2

    return result


 Executed result: 28
[EXP] 747: [success_rate]: True, [output]: def solution():
    tomatoes_sold = 500

    price_per_tomato_old = 0.5

    price_per_tomato_new = 0.4

    money_saved_per_day = tomatoes_sold * (price_per_tomato_old - price_per_tomato_new)

    money_saved_per_week = money_saved_per_day * 7

    result = money_saved_per_week

    return result


 Executed result: 349.9999999999999
[EXP] 748: [success_rate]: True, [output]: def solution():
    sean_marbles = 56

    sean_has_half_as_many_marbles_as_cal = sean_marbles * 2

    cal_marbles = sean_has_half_as_many_marbles_as_cal

    carl_marbles = sean_marbles * 4

    total_marbles = carl_marbles + cal_marbles

    result = total_marbles

    return result


 Executed result: 336
[EXP] 749: [success_rate]: False, [output]: def solution():
    students = 54

    groups_required = 6

    groups_actual = 12

    groups_needed = (groups_actual - groups_required) * (students // groups_required + 1)

    result = groups_needed

    return result


 Executed result: 60
[EXP] 750: [success_rate]: True, [output]: def solution():
    chairs_rented_weekdays = 60

    chairs_rented_weekends = 100

    weekdays_in_month = 20  # 4 weeks * 5 weekdays/week

    weekends_in_month = 8  # 4 weeks * 2 weekends/week

    chairs_rented_in_month = (weekdays_in_month * chairs_rented_weekdays) + (weekends_in_month * chairs_rented_weekends)

    months = 2

    chairs_rented_in_two_months = chairs_rented_in_month * months

    result = chairs_rented_in_two_months

    return result


 Executed result: 4000
[EXP] 751: [success_rate]: True, [output]: def solution():
    bananas_initial = 48

    bananas_stolen_first = bananas_initial / 2

    bananas_left_after_first = bananas_initial - bananas_stolen_first

    bananas_added_second = 25

    bananas_after_adding_second = bananas_left_after_first + bananas_added_second

    bananas_stolen_second = 12

    bananas_left_after_second = bananas_after_adding_second - bananas_stolen_second

    bananas_added_third = 6

    result = bananas_left_after_second + bananas_added_third

    return result


 Executed result: 43.0
[EXP] 752: [success_rate]: False, [output]: def solution():
    roommates = 4

    electricity_bill_per_month = 100

    total_electricity_bill_per_year = electricity_bill_per_month * 12

    electricity_bill_per_roommate_per_year = total_electricity_bill_per_year / roommates

    result = electricity_bill_per_roommate_per_year

    return result


 Executed result: 300.0
[EXP] 753: [success_rate]: False, [output]: def solution():
    glasses_initial = 8 * 12

    plates_initial = 4 * 12

    glasses_returned = glasses_initial - 10

    plates_returned = plates_initial - 6

    result = [glasses_returned, plates_returned]

    return result


 Executed result: [86, 42]
[EXP] 754: [success_rate]: False, [output]: def solution():
    small_stickers_initial = 30

    large_stickers_initial = 40

    small_stickers_traded = int(0.9 * small_stickers_initial)

    large_stickers_traded = int(0.5 * large_stickers_initial)

    large_stickers_left = large_stickers_initial - large_stickers_traded

    buttons_got = 0

    for small_sticker in range(small_stickers_traded):

        buttons_got += 1

    result = buttons_got

    return result


 Executed result: 27
[EXP] 755: [success_rate]: True, [output]: def solution():
    monday_matches = 2

    friday_matches = 1

    saturday_matches = monday_matches * 2

    total_matches = monday_matches + friday_matches + saturday_matches

    result = total_matches

    return result


 Executed result: 7
[EXP] 756: [success_rate]: True, [output]: def solution():
    total_votes = 33

    votes_against = total_votes // 3

    votes_in_favor = votes_against * 2

    result = votes_in_favor

    return result


 Executed result: 22
[EXP] 757: [success_rate]: True, [output]: def solution():
    extra_small_shirts = 11

    small_shirts = 2 * extra_small_shirts

    medium_shirts = small_shirts - 4

    large_shirts = medium_shirts / 2

    extra_large_shirts = large_shirts + 6

    total_shirts = extra_small_shirts + small_shirts + medium_shirts + large_shirts + extra_large_shirts

    result = total_shirts

    return result


 Executed result: 75.0
[EXP] 758: [success_rate]: True, [output]: def solution():
    original_price = 140

    discount = 0.05

    discount_amount = original_price * discount

    price_after_discount = original_price - discount_amount

    result = price_after_discount

    return result


 Executed result: 133.0
[EXP] 759: [success_rate]: True, [output]: def solution():
    songs_per_playlist = 300

    playlists = 20

    songs_total = songs_per_playlist * playlists

    hours_per_song = 10

    hours_total = songs_total * hours_per_song

    result = hours_total

    return result


 Executed result: 60000
[EXP] 760: [success_rate]: True, [output]: def solution():
    people = 50

    horse2_winners = int(0.2 * people)

    remaining_people = people - horse2_winners

    horse7_winners = int(0.6 * remaining_people)

    horse12_winners = people - horse2_winners - horse7_winners

    result = horse12_winners

    return result


 Executed result: 16
[EXP] 761: [success_rate]: False, [output]: def solution():
    pomeranian_girls = 6

    pomeranians = pomeranian_girls * 3

    total_puppies = pomeranians * 3

    result = total_puppies

    return result


 Executed result: 54
[EXP] 762: [success_rate]: True, [output]: def solution():
    jayden_money = 70

    ava_allowance = 90

    half_of_ava_allowance = ava_allowance / 2

    total_money_jayden_has = jayden_money + half_of_ava_allowance

    camera_cost = 200

    money_needed = camera_cost - total_money_jayden_has

    result = money_needed

    return result


 Executed result: 85.0
[EXP] 763: [success_rate]: False, [output]: def solution():
    shingles_needed = 250

    house1_shingles = shingles_needed / 2

    house2_shingles = house1_shingles * 2

    house3_shingles = house1_shingles * 2

    result = house3_shingles

    return result


 Executed result: 250.0
[EXP] 764: [success_rate]: True, [output]: def solution():
    leila_cucumbers = 3

    leila_cucumber_cost = leila_cucumbers * 2

    jack_tomatoes = 5

    jack_tomato_cost = jack_tomatoes * 1

    chase_lettuce = 1

    chase_lettuce_cost = chase_lettuce * 3

    total_cost = leila_cucumber_cost + jack_tomato_cost + chase_lettuce_cost

    result = total_cost

    return result


 Executed result: 14
[EXP] 765: [success_rate]: True, [output]: def solution():
    bananas = 200

    pears = bananas * 1.45

    total_fruits = bananas + pears

    result = total_fruits

    return result


 Executed result: 490.0
[EXP] 766: [success_rate]: True, [output]: def solution():
    marissa_money_initial = 80

    ball_cost = 20

    money_spent_on_ball = ball_cost

    money_left = marissa_money_initial - money_spent_on_ball

    money_per_candy_bar = 5

    candy_bars_bought = money_left // money_per_candy_bar

    result = candy_bars_bought

    return result


 Executed result: 12
[EXP] 767: [success_rate]: True, [output]: def solution():
    kilograms_oranges_per_liter = 5

    liters_of_juice = 4

    kilograms_oranges_needed = kilograms_oranges_per_liter * liters_of_juice

    cost_per_kilogram = 3

    cost_of_oranges = kilograms_oranges_needed * cost_per_kilogram

    result = cost_of_oranges

    return result


 Executed result: 60
[EXP] 768: [success_rate]: False, [output]: def solution():
    ezra_books_read = 300

    ahmed_books_read = ezra_books_read / 2

    ezra_read_more = 150

    total_ezra_books_read = ezra_books_read + ezra_read_more

    total_books_read = total_ezra_books_read + ahmed_books_read

    result = total_books_read

    return result


 Executed result: 600.0
[EXP] 769: [success_rate]: False, [output]: def solution():
    classes_monday = 4

    hours_monday = 5

    hours_teached_monday = hours_monday * classes_monday

    classes_wednesday = 2

    hours_wednesday = 2

    hours_teached_wednesday = hours_wednesday * classes_wednesday

    total_hours_teached = hours_teached_monday + hours_teached_wednesday

    total_classes = classes_monday + classes_wednesday

    hours_rate = 15

    extra_pay = (total_classes > 3) * 5

    total_pay = total_hours_teached * hours_rate + extra_pay

    result = total_pay

    return result


 Executed result: 365
[EXP] 770: [success_rate]: False, [output]: def solution():
    vanilla_scents_sold = 5

    fruity_scents_sold = 2

    difference = vanilla_scents_sold - fruity_scents_sold

    result = difference

    return result


 Executed result: 3
[EXP] 771: [success_rate]: True, [output]: def solution():
    eggplants_sold = 20

    eggplants_price = 3

    total_eggplants_revenue = eggplants_sold * eggplants_price

    corn_revenue = 135 - total_eggplants_revenue

    corn_sold = 25

    corn_price = corn_revenue / corn_sold

    result = corn_price

    return result


 Executed result: 3.0
[EXP] 772: [success_rate]: True, [output]: def solution():
    sat_hours = 7

    sun_hours = 5

    total_hours = sat_hours + sun_hours

    reading_time = 3

    remaining_hours = total_hours - reading_time

    video_game_time = remaining_hours * 1/3

    soccer_time = remaining_hours - video_game_time

    percentage_soccer = (soccer_time / total_hours) * 100

    result = percentage_soccer

    return result


 Executed result: 50.0
[EXP] 773: [success_rate]: True, [output]: def solution():
    pencils_initial = 50

    pencils_given_to_brandon = pencils_initial / 2

    pencils_left = pencils_initial - pencils_given_to_brandon

    pencils_given_to_charlie = pencils_left * 3 / 5

    pencils_left_after_charlie = pencils_left - pencils_given_to_charlie

    result = pencils_left_after_charlie

    return result


 Executed result: 10.0
[EXP] 774: [success_rate]: True, [output]: def solution():
    distance = 150

    rate = 75

    time_at_museum = 6

    time_to_museum = distance / rate

    time_back = time_to_museum

    total_time = time_to_museum + time_at_museum + time_back

    result = total_time

    return result


 Executed result: 10.0
[EXP] 775: [success_rate]: True, [output]: def solution():
    wheels_in_box = 650

    wheels_needed = 4 * 57 + 2 * 73

    wheels_left = wheels_in_box - wheels_needed

    result = wheels_left

    return result


 Executed result: 276
[EXP] 776: [success_rate]: True, [output]: def solution():
    laptop_price = 1000

    discount = laptop_price * 0.2

    price_after_discount = laptop_price - discount

    result = price_after_discount

    return result


 Executed result: 800.0
[EXP] 777: [success_rate]: True, [output]: def solution():
    movies_initial = 600

    movies_in_series = int(movies_initial / 3)

    cost_of_series = movies_in_series * 6

    movies_left = movies_initial - movies_in_series

    movies_older = int(movies_left * 0.4)

    cost_of_older_movies = movies_older * 5

    cost_of_normal_movies = (movies_left - movies_older) * 10

    total_cost = cost_of_series + cost_of_older_movies + cost_of_normal_movies

    result = total_cost

    return result


 Executed result: 4400
[EXP] 778: [success_rate]: True, [output]: def solution():
    peaches = 6

    peaches_cost = peaches * 2

    plums = 8

    plums_cost = plums * 1

    apricots = 6

    apricots_cost = apricots * 3

    total_cost = peaches_cost + plums_cost + apricots_cost

    result = total_cost

    return result


 Executed result: 38
[EXP] 779: [success_rate]: True, [output]: def solution():
    driving_speed = 50

    hiking_speed = driving_speed / 2 - 5

    time_driving = 6 - 1.5

    distance_driving = time_driving * driving_speed

    distance_hiking = 1.5 * hiking_speed

    distance_total = distance_driving + distance_hiking

    result = distance_total

    return result


 Executed result: 255.0
[EXP] 780: [success_rate]: False, [output]: def solution():
    emma_enemies = 0

    emma_berry = 0

    emma_time = 0

    ava_enemies = 0

    ava_berry = 0

    ava_time = 0

    emma_total = 0

    ava_total = 0

    ava_enemies = emma_enemies + 8

    ava_berry = emma_berry + 3

    ava_time = emma_time - 4

    emma_score = (emma_enemies * 10) + (emma_berry * 5) - (60 - emma_time) * 30

    ava_score = (ava_enemies * 10) + (ava_berry * 5) - (60 - ava_time) * 30

    score_diff = ava_score - emma_score

    result = score_diff

    return result


 Executed result: -25
[EXP] 781: [success_rate]: True, [output]: def solution():
    total_cost = 64

    cost_of_two_pizzas = 30

    cost_of_one_pizza = (total_cost - cost_of_two_pizzas) / 2

    result = cost_of_one_pizza

    return result


 Executed result: 17.0
[EXP] 782: [success_rate]: False, [output]: def solution():
    bike_ride_perday = 3

    days_regular = 5

    days_twice = 2

    bike_rides_regular = bike_ride_perday * days_regular

    bike_rides_twice = bike_ride_perday * 2 * days_twice

    total_bike_rides = bike_rides_regular + bike_rides_twice

    result = total_bike_rides

    return result


 Executed result: 27
[EXP] 783: [success_rate]: False, [output]: def solution():
    fish_initial = 7

    orange_fish_initial = 3

    white_fish_initial = 4

    fish_total = orange_fish_initial + white_fish_initial

    fish_after_purchase = fish_initial

    white_fish_after_purchase = white_fish_initial

    orange_fish_after_purchase = orange_fish_initial

    result = fish_purchased // 17

    return result


 Executed result: Error: return error, fail to execute
[EXP] 784: [success_rate]: False, [output]: def solution():
    distance_per_day = 5

    distance_per_week = distance_per_day * 5

    fuel_consumed_per_week = distance_per_week / 10

    fuel_cost_per_week = fuel_consumed_per_week * 3

    result = fuel_cost_per_week

    return result


 Executed result: 7.5
[EXP] 785: [success_rate]: True, [output]: def solution():
    twenties = 10

    value_per_twenty = 20

    value_per_quarter = 0.25

    total_twentieths = twenties * value_per_twenty

    total_quarters = 140 * value_per_quarter

    total_spent_twenties = (3/5) * total_twentieths

    total_spent = total_spent_twenties + total_quarters

    result = total_spent

    return result


 Executed result: 155.0
[EXP] 786: [success_rate]: True, [output]: def solution():
    tomato_plants = 5

    tomato_per_plant = 22

    eggplant_plants = 8

    eggplant_per_plant = 4

    tomatoes = tomato_plants * tomato_per_plant

    eggplants = eggplant_plants * eggplant_per_plant

    total_fruits = tomatoes + eggplants

    result = total_fruits

    return result


 Executed result: 142
[EXP] 787: [success_rate]: True, [output]: def solution():
    total_tvs = 40

    fraction_smart_tvs = 1 / 4

    fraction_analog_tvs = 1 / 8

    fraction_oled_tvs = 1 - (fraction_smart_tvs + fraction_analog_tvs)

    oled_tvs = total_tvs * fraction_oled_tvs

    result = oled_tvs

    return result


 Executed result: 25.0
[EXP] 788: [success_rate]: True, [output]: def solution():
    trip_cost = 300

    help_from_school = trip_cost / 2

    john_money = 50

    money_missing = trip_cost - help_from_school - john_money

    result = money_missing

    return result


 Executed result: 100.0
[EXP] 789: [success_rate]: True, [output]: def solution():
    temperature_day = 45

    temperature_night = temperature_day - 33

    pipes_freezing_temp = 32

    temp_difference = pipes_freezing_temp - temperature_night

    logs_needed = temp_difference / 5

    result = round(logs_needed)

    return result


 Executed result: 4
[EXP] 790: [success_rate]: False, [output]: def solution():
    people_initial = 90

    people_per_group = 9

    total_groups = people_initial // people_per_group

    groups_with_seashells = total_groups * 3 / 5

    seashells_per_group = 2

    total_seashells = groups_with_seashells * seashells_per_group

    result = total_seashells

    return result


 Executed result: 12.0
[EXP] 791: [success_rate]: False, [output]: def solution():
    people_initial = 172

    people_off_first_stop = 47

    people_on_first_stop = people_initial - people_off_first_stop

    people_on_second_stop = people_on_first_stop

    people_off_second_stop = 38

    people_on_train = people_on_second_stop - people_off_second_stop

    result = people_on_train

    return result


 Executed result: 87
[EXP] 792: [success_rate]: True, [output]: def solution():
    bottle_caps_daily = 10

    value_per_cap = 0.25

    days_in_month = 30

    total_bottle_caps = bottle_caps_daily * days_in_month

    total_money = total_bottle_caps * value_per_cap

    result = total_money

    return result


 Executed result: 75.0
[EXP] 793: [success_rate]: True, [output]: def solution():
    regular_hourly_rate = 20

    hours_worked = 8

    special_hourly_rate = 1.5 * regular_hourly_rate

    extra_hours = 11 - hours_worked

    regular_pay = regular_hourly_rate * hours_worked

    extra_pay = special_hourly_rate * extra_hours

    total_pay = regular_pay + extra_pay

    result = total_pay

    return result


 Executed result: 250.0
[EXP] 794: [success_rate]: True, [output]: def solution():
    female_lions = 12

    male_lions = female_lions // 2

    lion_cubs = 14

    total_lions = female_lions + male_lions + lion_cubs

    result = total_lions

    return result


 Executed result: 32
[EXP] 795: [success_rate]: True, [output]: def solution():
    original_price = 40

    discount = 0.25

    discounted_price = original_price - (original_price * discount)

    payment = 50

    change = payment - discounted_price

    result = change

    return result


 Executed result: 20.0
[EXP] 796: [success_rate]: False, [output]: def solution():
    initial_employees = 200

    new_employees_per_month = 20

    months = 3

    total_employees = initial_employees + (new_employees_per_month * months)

    salary_per_employee = 4000

    total_salary = total_employees * salary_per_employee

    result = total_salary

    return result


 Executed result: 1040000
[EXP] 797: [success_rate]: True, [output]: def solution():
    deck_the_halls_time = 150

    jingle_bells_time = 240

    caroling_time = deck_the_halls_time * 2 + jingle_bells_time

    result = caroling_time

    return result


 Executed result: 540
[EXP] 798: [success_rate]: True, [output]: def solution():
    billy_initial_rate = 10

    billy_raise1 = 0.50

    billy_raise2 = 1

    billy_rate_after_2_months = billy_initial_rate + billy_raise1

    billy_rate_after_anniversary = billy_rate_after_2_months + billy_raise2

    billy_earnings = billy_rate_after_anniversary * 20

    sally_rate = billy_initial_rate + 0.50

    sally_earnings = sally_rate * 20

    billy_sally_diff = billy_earnings - sally_earnings

    result = billy_sally_diff

    return result


 Executed result: 20.0
[EXP] 799: [success_rate]: True, [output]: def solution():
    loaf_bread_cost = 2

    bagels_cost = 1

    num_loaves = 3

    num_bagels = 2

    cost_loaves = loaf_bread_cost * num_loaves

    cost_bagels = bagels_cost * num_bagels

    cost_difference = cost_loaves - cost_bagels

    result = cost_difference

    return result


 Executed result: 4
[EXP] 800: [success_rate]: True, [output]: def solution():
    pierson_points = 278

    half_pierson_points = pierson_points // 2

    nikita_points = half_pierson_points + 11

    total_points = pierson_points + nikita_points

    result = total_points

    return result


 Executed result: 428
[EXP] 801: [success_rate]: True, [output]: def solution():
    classes = 40

    students_per_class = 25

    teachers_per_class = 3

    total_students = classes * students_per_class

    total_teachers = classes * teachers_per_class

    teachers_trees = total_teachers * 2

    students_trees = total_students

    total_trees = students_trees + teachers_trees

    result = total_trees

    return result


 Executed result: 1240
[EXP] 802: [success_rate]: False, [output]: def solution():
    stuffed_puppies = 3

    stuffed_koalas = 5

    stuffed_zebras = 2

    stuffed_frogs = 4

    total_stuffed_animals = stuffed_puppies + stuffed_koalas + stuffed_zebras + stuffed_frogs

    desired_percentage = 0.3

    desired_stuffed_goats = (total_stuffed_animals * desired_percentage) / 100

    result = round(desired_stuffed_goats)

    return result


 Executed result: 0
[EXP] 803: [success_rate]: True, [output]: def solution():
    hours_played = 0

    days_half_hour = 2 * 7

    hours_half_hour = days_half_hour * 0.5

    days_two_hours = 7

    hours_two_hours = days_two_hours * 2

    hours_played = hours_half_hour + hours_two_hours

    hours_needed = 30 - hours_played

    result = hours_needed

    return result


 Executed result: 9.0
[EXP] 804: [success_rate]: True, [output]: def solution():
    car1_speed = 60

    car2_speed = 70

    distance_covered_by_car1 = car1_speed * 2

    distance_covered_by_car2 = car2_speed * 2

    distance_between_cars = distance_covered_by_car2 - distance_covered_by_car1

    result = distance_between_cars

    return result


 Executed result: 20
[EXP] 805: [success_rate]: True, [output]: def solution():
    diamond_cost = 600

    gold_cost = 300

    premium = 0.3

    total_cost = diamond_cost + gold_cost

    premium_cost = total_cost * premium

    total_paid = total_cost + premium_cost

    result = total_paid

    return result


 Executed result: 1170.0
[EXP] 806: [success_rate]: False, [output]: def solution():
    passing_third_graders = 340

    total_third_graders = 500

    passing_fourth_graders = 40

    total_fourth_graders = 100

    passing_fifth_graders = passing_fourth_graders * 2

    total_fifth_graders = 400

    passing_students = passing_third_graders + passing_fourth_graders + passing_fifth_graders

    total_students = total_third_graders + total_fourth_graders + total_fifth_graders

    overall_pass_rate = (passing_students / total_students) * 100

    result = overall_pass_rate

    return result


 Executed result: 46.0
[EXP] 807: [success_rate]: True, [output]: def solution():
    chips_per_inch = 12

    chips_per_bag = 72

    bags_milo_has = 2

    chips_milo_has = chips_per_bag * bags_milo_has

    mosaic_height = 3

    mosaic_width = chips_milo_has // (chips_per_inch * mosaic_height)

    result = mosaic_width

    return result


 Executed result: 4
[EXP] 808: [success_rate]: False, [output]: def solution():
    tea_left = 10

    student1_tea = 1.5

    student1_students = 4

    student1_tea_drunk = student1_students * student1_tea

    student2_tea = 2

    student2_students = 16

    student2_tea_drunk = student2_students * student2_tea

    total_tea_drunk = student1_tea_drunk + student2_tea_drunk

    tea_at_start = tea_left + total_tea_drunk

    result = tea_at_start

    return result


 Executed result: 48.0
[EXP] 809: [success_rate]: False, [output]: def solution():
    total_to_order = 100

    candies_sold = 150

    new_candies_ordered = 100

    total_candies = total_to_order + new_candies_ordered

    candies_sold = candies_sold + new_candies_ordered

    candies_left_to_sell = total_candies - candies_sold

    result = candies_left_to_sell

    return result


 Executed result: -50
[EXP] 810: [success_rate]: True, [output]: def solution():
    students_initial = 10

    months = 5  # May is the 5th month

    months_multiply = 2 ** months

    students_added = students_initial * (months_multiply - 1)

    result = students_added

    return result


 Executed result: 310
[EXP] 811: [success_rate]: True, [output]: def solution():
    total_cost = 105

    cost_per_branch = 0.25

    total_branches = total_cost / cost_per_branch

    average_branches_per_day = total_branches / 7

    result = average_branches_per_day

    return result


 Executed result: 60.0
[EXP] 812: [success_rate]: True, [output]: def solution():
    flowers_1 = 3

    petals_1 = 5

    total_petals_1 = flowers_1 * petals_1

    flowers_2 = 4

    petals_2 = 6

    total_petals_2 = flowers_2 * petals_2

    flowers_3 = 5

    petals_3 = 4

    total_petals_3 = flowers_3 * petals_3

    flowers_4 = 6

    petals_4 = 7

    total_petals_4 = flowers_4 * petals_4

    total_petals = total_petals_1 + total_petals_2 + total_petals_3 + total_petals_4

    petals_lost = 1 * 5 + 1 * 6 + 1 * 4 + 1 * 7

    total_petals_in_vase = total_petals - petals_lost

    result = total_petals_in_vase

    return result


 Executed result: 79
[EXP] 813: [success_rate]: False, [output]: def solution():
    marshmallows_initial = 35

    s'mores_john = 9

    s'mores_deSean = 9

    total_s'mores = s'mores_john + s'mores_deSean

    marshmallows_used = total_s'mores

    marshmallows_dropped = 3

    total_marshmallows_used = marshmallows_used + marshmallows_dropped

    marshmallows_left = marshmallows_initial - total_marshmallows_used

    result = marshmallows_left

    return result


 Executed result: Error: return error, fail to execute
[EXP] 814: [success_rate]: False, [output]: def solution():
    friends_play_time = 4 * 60 

    jack_play_time = 20

    friend1_play_time = jack_play_time / 2

    friend2_play_time = jack_play_time / 2

    friend3_play_time = jack_play_time * 1.5

    total_play_time = jack_play_time + friend1_play_time + friend2_play_time + friend3_play_time

    jack_quarters = total_play_time // jack_play_time

    friend1_quarters = total_play_time // friend1_play_time * 2

    friend2_quarters = total_play_time // friend2_play_time * 2

    friend3_quarters = total_play_time // friend3_play_time

    total_quarters = jack_quarters + friend1_quarters + friend2_quarters + friend3_quarters

    result = total_quarters

    return result


 Executed result: 33.0
[EXP] 815: [success_rate]: True, [output]: def solution():
    jar_size = 10

    zest = fragrance = salt = sugar = oil = 0

    zest = fragrance = 1

    salt = sugar = zest * 2

    oil = salt * 2

    result = oil

    return result


 Executed result: 4
[EXP] 816: [success_rate]: True, [output]: def solution():
    goats_initial = 3

    goat_cost = 500

    goats_spent = goats_initial * goat_cost

    cows_initial = 2

    cow_cost = 1500

    cows_spent = cows_initial * cow_cost

    total_spent = goats_spent + cows_spent

    result = total_spent

    return result


 Executed result: 4500
[EXP] 817: [success_rate]: True, [output]: def solution():
    total_cupcakes_needed = 63

    cupcakes_initial = 8 + 40

    cupcakes_to_buy = total_cupcakes_needed - cupcakes_initial

    result = cupcakes_to_buy

    return result


 Executed result: 15
[EXP] 818: [success_rate]: True, [output]: def solution():
    robert_cars = 20

    joe_cars = robert_cars * 2

    joe_cars_sold = joe_cars * 20 / 100

    joe_cars_given = joe_cars_sold * 2

    total_cars_sold_and_given = joe_cars_sold + joe_cars_given

    joe_cars_left = joe_cars - joe_cars_sold - joe_cars_given

    result = joe_cars_left

    return result


 Executed result: 16.0
[EXP] 819: [success_rate]: False, [output]: def solution():
    charity_total = 175000

    organization_donation = 50000

    student_donation = charity_total - organization_donation

    students = 20

    student_contribution = student_donation / students

    result = student_contribution

    return result


 Executed result: 6250.0
[EXP] 820: [success_rate]: True, [output]: def solution():
    day_one_hours = 8

    day_two_hours = day_one_hours / 2

    total_hours = day_one_hours + day_two_hours

    total_minutes = total_hours * 60

    result = total_minutes

    return result


 Executed result: 720.0
[EXP] 821: [success_rate]: True, [output]: def solution():
    cars_initial = 50

    cars_added = 20

    total_cars = cars_initial + cars_added

    cars_gone = total_cars / 2

    cars_left = total_cars - cars_gone

    result = cars_left

    return result


 Executed result: 35.0
[EXP] 822: [success_rate]: True, [output]: def solution():
    cycles_per_day = 30

    tasks_per_cycle = 5

    task_pay = 1.20

    cycles_per_week = cycles_per_day * 7

    total_tasks_per_week = cycles_per_week * tasks_per_cycle

    total_pay = total_tasks_per_week * task_pay

    result = total_pay

    return result


 Executed result: 1260.0
[EXP] 823: [success_rate]: False, [output]: def solution():
    sasha_points_game1 = 14

    julie_points_game1 = sasha_points_game1 - 4

    sasha_points_game2 = julie_points_game1 - 6

    total_sasha_points = sasha_points_game1 + sasha_points_game2

    result = total_sasha_points

    return result


 Executed result: 18
[EXP] 824: [success_rate]: True, [output]: def solution():
    cat_food_packages = 8

    dog_food_packages = 6

    cat_food_tins_per_package = 11

    dog_food_tins_per_package = 6

    total_cat_food_tins = cat_food_packages * cat_food_tins_per_package

    total_dog_food_tins = dog_food_packages * dog_food_tins_per_package

    difference = total_cat_food_tins - total_dog_food_tins

    result = difference

    return result


 Executed result: 52
[EXP] 825: [success_rate]: False, [output]: def solution():
    total_cards = 341

    sum_cards = 0

    for i in range(10):

        PJ_cards = i

        Smendrick_cards = 3 * PJ_cards

        Becca_cards = Smendrick_cards + 12

        sum_cards = PJ_cards + Smendrick_cards + Becca_cards

        if sum_cards == total_cards:

            result = Becca_cards

            return result


 Executed result: None
[EXP] 826: [success_rate]: True, [output]: def solution():
    green_eggs = 5

    blue_eggs = 2 * green_eggs

    pink_eggs = blue_eggs - 1

    yellow_eggs = pink_eggs // 3

    total_eggs = green_eggs + blue_eggs + pink_eggs + yellow_eggs

    result = total_eggs

    return result


 Executed result: 27
[EXP] 827: [success_rate]: False, [output]: def solution():
    book_weight = 4

    book_cost = 32

    miles = 20

    shipping_cost_per_pound = 0.35

    shipping_cost_per_mile = 0.08

    total_shipping_cost = book_weight * shipping_cost_per_pound + miles * shipping_cost_per_mile

    refund = 0.75 * book_cost

    total_loss = total_shipping_cost - refund

    result = total_loss

    return result


 Executed result: -21.0
[EXP] 828: [success_rate]: True, [output]: def solution():
    money_initial = 40

    money_received = 100

    total_money = money_initial + money_received

    money_spent = 2 * 30 + 20

    money_left = total_money - money_spent

    result = money_left

    return result


 Executed result: 60
[EXP] 829: [success_rate]: False, [output]: def solution():
    production_per_week = 8,000

    total_production = 0

    total_production += production_per_week

    production_per_week = production_per_week * 3

    production_per_week = production_per_week / 2

    result = 50000 - total_production

    return result


 Executed result: 50000
[EXP] 830: [success_rate]: True, [output]: def solution():
    tiktok_videos_per_week = 18

    tiktok_video_duration = 4  # minutes

    total_tiktok_minutes_per_week = tiktok_videos_per_week * tiktok_video_duration

    tiktok_songs_per_week = 2  # hours

    tiktok_songs_hour = 60  # minutes per hour

    tiktok_songs_minutes_per_week = tiktok_songs_per_week * tiktok_songs_hour

    tiktok_makeup_per_day = 15  # minutes

    tiktok_makeup_days_per_week = 6

    tiktok_makeup_minutes_per_week = tiktok_makeup_per_day * tiktok_makeup_days_per_week

    tiktok_minutes_per_week = total_tiktok_minutes_per_week + tiktok_songs_minutes_per_week + tiktok_makeup_minutes_per_week

    tiktok_minutes_per_month = tiktok_minutes_per_week * 4

    result = tiktok_minutes_per_month

    return result


 Executed result: 1128
[EXP] 831: [success_rate]: False, [output]: def solution():
    base_cost = 129.00

    base_items = 4 + 2 + 1 + 10

    extra_items = 6 + 2 + 20

    extra_cost = extra_items * 15

    total_cost = base_cost + extra_cost

    result = total_cost

    return result


 Executed result: 549.0
[EXP] 832: [success_rate]: True, [output]: def solution():
    eva_saved = 20

    anthony_saved = eva_saved + 10

    roy_saved = anthony_saved + (anthony_saved * 0.4)

    result = roy_saved

    return result


 Executed result: 42.0
[EXP] 833: [success_rate]: False, [output]: def solution():
    pompei_mountain = 1

    saskay_mountain = pompei_mountain * 12

    kagiyami_mountain = saskay_mountain * 4

    naruto_mountain = kagiyami_mountain * 10

    naruto_mountain_feet = naruto_mountain * 12

    result = naruto_mountain_feet

    return result


 Executed result: 5760
[EXP] 834: [success_rate]: True, [output]: def solution():
    speed = 8

    hours_traveled_first_part = 4

    hours_traveled_second_part = 6

    total_distance_first_part = speed * hours_traveled_first_part

    total_distance_second_part = speed * hours_traveled_second_part

    total_distance = total_distance_first_part + total_distance_second_part

    result = total_distance

    return result


 Executed result: 80
[EXP] 835: [success_rate]: False, [output]: def solution():
    speed_kangaroo = 18 / 3

    speed_turtle = speed_kangaroo / 2

    time_turtles = 18 / (4 * speed_turtle)

    result = time_turtles

    return result


 Executed result: 1.5
[EXP] 836: [success_rate]: True, [output]: def solution():
    kora_dishes = 20

    rory_dishes = kora_dishes + 20

    jada_dishes = rory_dishes * 2

    total_dishes = kora_dishes + rory_dishes + jada_dishes

    result = total_dishes

    return result


 Executed result: 140
[EXP] 837: [success_rate]: True, [output]: def solution():
    laptop_price = 600

    discount = 200

    reduction = laptop_price - discount

    money_saved = 150 + 80

    money_needed = reduction - money_saved

    purse_money = money_needed - 50

    result = purse_money

    return result


 Executed result: 120
[EXP] 838: [success_rate]: True, [output]: def solution():
    large_apples = 3

    large_apple_slices = 5

    large_slices = large_apples * large_apple_slices

    small_apples = 5

    small_apple_slices = 3

    small_slices = small_apples * small_apple_slices

    total_slices = large_slices + small_slices

    eaten_slices = 15

    slices_left = total_slices - eaten_slices

    result = slices_left

    return result


 Executed result: 15
[EXP] 839: [success_rate]: True, [output]: def solution():
    milk_per_cow = 5

    daily_target = 25

    cows_needed = (daily_target / milk_per_cow) - 3

    result = cows_needed

    return result


 Executed result: 2.0
[EXP] 840: [success_rate]: False, [output]: def solution():
    glue_stick1 = 1/6

    glue_stick2 = 2/3

    glue_stick3 = 1/2

    glue_stick_length = 12

    glue_stick1_used = 1 - glue_stick1

    glue_stick2_used = 1 - glue_stick2

    glue_stick3_used = 1 - glue_stick3

    glue_stick1_length_used = glue_stick_length * glue_stick1_used

    glue_stick2_length_used = glue_stick_length * glue_stick2_used

    glue_stick3_length_used = glue_stick_length * glue_stick3_used

    result = glue_stick1_length_used + glue_stick2_length_used + glue_stick3_length_used

    return result


 Executed result: 20.0
[EXP] 841: [success_rate]: True, [output]: def solution():
    money_initial = 5000

    gift_money = 200

    total_money = money_initial + gift_money

    car_cost = 10000

    phone_cost = 800

    total_cost = car_cost + phone_cost

    money_needed = total_cost - total_money

    result = money_needed

    return result


 Executed result: 5600
[EXP] 842: [success_rate]: True, [output]: def solution():
    price = 70

    bills = 4 * 20

    total_paid = bills

    change = total_paid - price

    result = change

    return result


 Executed result: 10
[EXP] 843: [success_rate]: True, [output]: def solution():
    money_initial = 2 * 20

    squirt_guns = 6

    cost_per_squirt_gun = 2

    cost_of_squirt_guns = squirt_guns * cost_per_squirt_gun

    water_balloon_packs = 3

    cost_per_water_balloon_pack = 3

    cost_of_water_balloon_packs = water_balloon_packs * cost_per_water_balloon_pack

    total_cost = cost_of_squirt_guns + cost_of_water_balloon_packs

    money_spent = total_cost

    money_left = money_initial - money_spent

    result = money_left

    return result


 Executed result: 19
[EXP] 844: [success_rate]: False, [output]: def solution():
    jack_dishes = 60

    jack_socks = jack_dishes / 2

    jack_socks_peter = jack_socks * 2

    peter_dishes = jack_dishes

    total_socks = jack_socks + jack_socks_peter

    total_dishes = jack_dishes + peter_dishes

    result = total_socks + total_dishes

    return result


 Executed result: 210.0
[EXP] 845: [success_rate]: True, [output]: def solution():
    total_students = 20

    students_good_in_math_only = 5

    students_good_in_english_only = 8

    students_good_in_both = total_students - students_good_in_math_only - students_good_in_english_only

    students_good_in_math = students_good_in_math_only + students_good_in_both

    result = students_good_in_math

    return result


 Executed result: 12
[EXP] 846: [success_rate]: True, [output]: def solution():
    concert_length = 2 * 60  # 2 hours in minutes

    setup_time = 2 + 2  # time it takes for a group to setup and exit

    performance_time = 6

    total_time_per_group = setup_time + performance_time

    intermission_time = 10

    total_time_available = concert_length - intermission_time

    max_groups = total_time_available // (total_time_per_group)

    result = max_groups

    return result


 Executed result: 11
[EXP] 847: [success_rate]: True, [output]: def solution():
    principal = 300

    rate = 0.75

    time = 3

    simple_interest = principal * rate * time

    total_amount = principal + simple_interest

    result = total_amount

    return result


 Executed result: 975.0
[EXP] 848: [success_rate]: True, [output]: def solution():
    white_shirts_initial = 40

    floral_shirts_initial = 50

    white_shirts_with_collars = white_shirts_initial // 2

    floral_shirts_with_buttons = 20

    total_floral_shirts_no_buttons = floral_shirts_initial - floral_shirts_with_buttons

    total_white_shirts_no_collars = white_shirts_initial - white_shirts_with_collars

    difference = total_floral_shirts_no_buttons - total_white_shirts_no_collars

    result = difference

    return result


 Executed result: 10
[EXP] 849: [success_rate]: True, [output]: def solution():
    eggs_initial = 900

    eggs_per_tray = 30

    trays = eggs_initial // eggs_per_tray

    earnings = trays * 2.5

    result = earnings

    return result


 Executed result: 75.0
[EXP] 850: [success_rate]: False, [output]: def solution():
    farm_x_goats = 55

    farm_x_goats_sold = 10

    farm_y_goats = 45

    farm_y_goats_sold = 2 * farm_y_goats_sold

    farm_x_goats_left = farm_x_goats - farm_x_goats_sold

    farm_y_goats_left = farm_y_goats - farm_y_goats_sold

    total_goats = farm_x_goats_left + farm_y_goats_left

    result = total_goats

    return result


 Executed result: Error: return error, fail to execute
[EXP] 851: [success_rate]: True, [output]: def solution():
    shoes_per_month = 2

    shoes_per_year = shoes_per_month * 12

    total_spend = 2640

    average_per_pair = total_spend / shoes_per_year

    result = average_per_pair

    return result


 Executed result: 110.0
[EXP] 852: [success_rate]: True, [output]: def solution():
    cost_green = 25

    cost_red = 18

    green_baskets = 3

    red_baskets = 3

    cost_green_total = cost_green * green_baskets

    cost_red_total = cost_red * red_baskets

    discount = red_baskets * 2

    total_cost = cost_green_total + cost_red_total - discount

    result = total_cost

    return result


 Executed result: 123
[EXP] 853: [success_rate]: True, [output]: def solution():
    rooms = 90

    half_rooms = rooms / 2

    minutes_per_room = 20

    minutes_to_clean_half_rooms = half_rooms * minutes_per_room

    hours_to_clean_half_rooms = minutes_to_clean_half_rooms / 60

    result = hours_to_clean_half_rooms

    return result


 Executed result: 15.0
[EXP] 854: [success_rate]: True, [output]: def solution():
    homes_first_year = 12

    homes_second_year = homes_first_year * 3

    homes_third_year = homes_first_year + homes_second_year

    homes_third_year_doubled = homes_third_year * 2

    total_homes = homes_first_year + homes_second_year + homes_third_year_doubled

    result = total_homes

    return result


 Executed result: 144
[EXP] 855: [success_rate]: False, [output]: def solution():
    sum_of_ages = 87

    mom_age = 3 * brother_age - 1

    sister_age = age - 2

    brother_age = age + 3

    result = age

    return result


 Executed result: Error: return error, fail to execute
[EXP] 856: [success_rate]: True, [output]: def solution():
    students = 27

    glue_sticks_per_student = 2

    glue_sticks_per_pack = 8

    glue_sticks_total = students * glue_sticks_per_student

    packs_total = (glue_sticks_total + glue_sticks_per_pack - 1) // glue_sticks_per_pack

    result = packs_total

    return result


 Executed result: 7
[EXP] 857: [success_rate]: True, [output]: def solution():
    water_flow_day1 = 4000

    water_flow_day2 = water_flow_day1 * 2

    water_flow_day3 = water_flow_day2 + 6000

    result = water_flow_day3

    return result


 Executed result: 14000
[EXP] 858: [success_rate]: False, [output]: def solution():
    infected_initial = 10

    people_infected_per_day = 6

    days = 3

    total_infected = 0

    for day in range(days):

        infected = infected_initial

        total_infected += infected

        infected_initial = infected * people_infected_per_day

    result = total_infected

    return result


 Executed result: 430
[EXP] 859: [success_rate]: True, [output]: def solution():
    rafaela_tips = 40 * 20

    julieta_tips = rafaela_tips * 0.9

    total_tips = rafaela_tips + julieta_tips

    result = total_tips

    return result


 Executed result: 1520.0
[EXP] 860: [success_rate]: True, [output]: def solution():
    oranges_initial = 12

    oranges_given_to_daughters = 2 * 3

    oranges_given_to_boy = 3

    oranges_given = oranges_given_to_daughters + oranges_given_to_boy

    oranges_left = oranges_initial - oranges_given

    result = oranges_left

    return result


 Executed result: 3
[EXP] 861: [success_rate]: False, [output]: def solution():
    claire_badges_month = 1

    amber_badges_month = claire_badges_month * 2

    wendy_badges_month = claire_badges_month * 3

    claire_badges_year = claire_badges_month * 12

    amber_badges_year = amber_badges_month * 12

    wendy_badges_year = wendy_badges_month * 12

    wendy_more_than_amber = wendy_badges_year - amber_badges_year

    result = wendy_more_than_amber

    return result


 Executed result: 12
[EXP] 862: [success_rate]: True, [output]: def solution():
    hours = 5  # 5 hours between 1:00 PM and 6:00 PM

    loaves_per_hour = 2

    slices_per_loaf = 8

    slices_per_hour = loaves_per_hour * slices_per_loaf

    total_slices = slices_per_hour * hours

    price_per_slice = 0.50

    total_money = total_slices * price_per_slice

    result = total_money

    return result


 Executed result: 40.0
[EXP] 863: [success_rate]: True, [output]: def solution():
    gold_coins = 70

    gold_than_silver = 30

    silver_coins = gold_coins - gold_than_silver

    total_coins = gold_coins + silver_coins

    result = total_coins

    return result


 Executed result: 110
[EXP] 864: [success_rate]: True, [output]: def solution():
    burritos_ordered = 600

    students_at_picnic = 50

    burritos_given_per_student = 10

    total_burritos_given = students_at_picnic * burritos_given_per_student

    burritos_eaten_by_mr_george = 20

    burritos_leftover = burritos_ordered - total_burritos_given - burritos_eaten_by_mr_george

    result = burritos_leftover

    return result


 Executed result: 80
[EXP] 865: [success_rate]: True, [output]: def solution():
    red_cars = 12

    green_cars = red_cars - 2

    blue_cars = green_cars * 3

    total_cars = red_cars + green_cars + blue_cars

    yellow_cars = 75 - total_cars

    result = yellow_cars

    return result


 Executed result: 23
[EXP] 866: [success_rate]: False, [output]: def solution():
    total_books = 85

    sofie_books = 25

    anne_books = sofie_books - 25

    fawn_books = anne_books + 12

    result = fawn_books

    return result


 Executed result: 12
[EXP] 867: [success_rate]: True, [output]: def solution():
    potatoes_weight = 5

    sweet_potatoes_weight = 2 * potatoes_weight

    carrots_weight = sweet_potatoes_weight - 3

    result = carrots_weight

    return result


 Executed result: 7
[EXP] 868: [success_rate]: True, [output]: def solution():
    kids = 30

    cups_per_kid = 4

    cups_total = kids * cups_per_kid

    jello_boxes_per_cups = 10

    jello_ounces_per_box = 3

    jello_ounces_per_cups = jello_ounces_per_box

    jello_boxes_total = cups_total / jello_boxes_per_cups

    jello_cost_per_box = 1.25

    jello_cost_total = jello_boxes_total * jello_cost_per_box

    result = jello_cost_total

    return result


 Executed result: 15.0
[EXP] 869: [success_rate]: True, [output]: def solution():
    phones = 5

    phone_cost = 700

    total_cost = phones * phone_cost

    cash_given = 4000

    change = cash_given - total_cost

    result = change

    return result


 Executed result: 500
[EXP] 870: [success_rate]: True, [output]: def solution():
    total_cost = 400

    madeline_shares = 0.6

    keenan_shares = 1 - madeline_shares

    monthly_cost_keenan = total_cost * keenan_shares

    weekly_cost_keenan = monthly_cost_keenan / 4

    result = weekly_cost_keenan

    return result


 Executed result: 40.0
[EXP] 871: [success_rate]: True, [output]: def solution():
    pizza_pieces_initial = 60

    day1_eaten = int(2/5 * pizza_pieces_initial)

    remaining_pieces = pizza_pieces_initial - day1_eaten

    day2_eaten = 10

    remaining_pieces_after_day2 = remaining_pieces - day2_eaten

    day3_eaten = int(7/13 * remaining_pieces_after_day2)

    total_eaten = day1_eaten + day2_eaten + day3_eaten

    result = total_eaten

    return result


 Executed result: 48
[EXP] 872: [success_rate]: True, [output]: def solution():
    cost_per_soda = 21.0 / 7

    cost_per_water = 8.0 / 4

    soda_cost = 3 * cost_per_soda

    water_cost = 2 * cost_per_water

    total_cost = soda_cost + water_cost

    result = total_cost

    return result


 Executed result: 13.0
[EXP] 873: [success_rate]: True, [output]: def solution():
    money_initial = 12.48

    total_cost = 16 * 0.03

    money_spent = total_cost

    money_left = money_initial - money_spent

    result = money_left

    return result


 Executed result: 12.0
[EXP] 874: [success_rate]: True, [output]: def solution():
    money_per_hour = 33 / 3

    hours_walked = 12

    money_earned = money_per_hour * hours_walked

    result = money_earned

    return result


 Executed result: 132.0
[EXP] 875: [success_rate]: True, [output]: def solution():
    marbles_initial = 52

    marbles_received = 28

    total_marbles = marbles_initial + marbles_received

    marbles_lost = total_marbles / 4

    marbles_left = total_marbles - marbles_lost

    result = marbles_left

    return result


 Executed result: 60.0
[EXP] 876: [success_rate]: True, [output]: def solution():
    multiple_choice_questions = 10

    true_false_questions = 20

    long_answer_questions = 5

    multiple_choice_score = 0.8 * multiple_choice_questions

    true_false_score = 0.9 * true_false_questions

    long_answer_score = 0.6 * long_answer_questions * 5

    total_score = multiple_choice_score + true_false_score + long_answer_score

    result = total_score

    return result


 Executed result: 41.0
[EXP] 877: [success_rate]: True, [output]: def solution():
    chickens_initial = 300

    chickens_sold = int(chickens_initial * 3 / 5)

    price_per_chicken = 50

    revenue = chickens_sold * price_per_chicken

    cost = revenue - 2000

    result = cost

    return result


 Executed result: 7000
[EXP] 878: [success_rate]: True, [output]: def solution():
    total_glasses_sold = 32

    glasses_sold_by_julie = 14

    glasses_sold_by_micah_and_mitchell = total_glasses_sold - glasses_sold_by_julie

    glasses_sold_by_micah = glasses_sold_by_micah_and_mitchell / 2

    difference = glasses_sold_by_julie - glasses_sold_by_micah

    result = difference

    return result


 Executed result: 5.0
[EXP] 879: [success_rate]: False, [output]: def solution():
    hair_cost = 400

    manicure_cost = hair_cost / 4

    pedicure_cost = manicure_cost * 3

    total_cost = hair_cost + manicure_cost + pedicure_cost

    result = total_cost

    return result


 Executed result: 800.0
[EXP] 880: [success_rate]: False, [output]: def solution():
    rope_length = 20

    rope_cost = 2

    rope_profit = rope_length * rope_cost

    new_rope_length = rope_profit / 1.5

    result = rope_profit - new_rope_length

    return result


 Executed result: 13.333333333333332
[EXP] 881: [success_rate]: True, [output]: def solution():
    future_age_melanie = 18

    present_age_melanie = future_age_melanie - 10

    current_triple = present_age_melanie * 3

    years_diff = current_triple - present_age_melanie

    result = years_diff

    return result


 Executed result: 16
[EXP] 882: [success_rate]: False, [output]: def solution():
    cost_bacon = 10

    cost_chicken = cost_bacon * 2

    cost_strawberries = 3 * 4

    cost_apples = cost_strawberries / 2 * 7

    total_cost = cost_bacon + cost_chicken + cost_strawberries + cost_apples

    budget = 65

    money_left = budget - total_cost

    result = money_left

    return result


 Executed result: -19.0
[EXP] 883: [success_rate]: True, [output]: def solution():
    final_concert_minutes = 65

    encore_minutes = 15

    total_minutes = final_concert_minutes - encore_minutes

    usual_concert_minutes = total_minutes / 2

    result = usual_concert_minutes

    return result


 Executed result: 25.0
[EXP] 884: [success_rate]: True, [output]: def solution():
    argo_toys_initial = 200

    toys_given_to_alysa = 40

    toys_given_to_bonnie = 80

    toys_given_to_nicky = 30

    toys_given_total = toys_given_to_alysa + toys_given_to_bonnie + toys_given_to_nicky

    argo_toys_after = argo_toys_initial - toys_given_total

    result = argo_toys_after

    return result


 Executed result: 50
[EXP] 885: [success_rate]: True, [output]: def solution():
    chimichangas_tuesday = 125

    chimichangas_wednesday = 125

    chimichangas_friday = chimichangas_tuesday * 2

    total_chimichangas = chimichangas_tuesday + chimichangas_wednesday + chimichangas_friday

    result = total_chimichangas

    return result


 Executed result: 500
[EXP] 886: [success_rate]: True, [output]: def solution():
    microphones_initial = 50

    microphones_unarranged = microphones_initial * 0.20

    microphones_arranged = microphones_initial - microphones_unarranged

    pairs_arranged = microphones_arranged // 2

    result = pairs_arranged

    return result


 Executed result: 20.0
[EXP] 887: [success_rate]: True, [output]: def solution():
    birds_nesting = 6

    birds_flying = birds_nesting * 2 // 3

    birds_feeding = 3 * 8

    total_birds = birds_nesting + birds_flying + birds_feeding

    result = total_birds

    return result


 Executed result: 34
[EXP] 888: [success_rate]: True, [output]: def solution():
    cookies_initial = 55

    cookies_eaten = 5

    cookies_left = cookies_initial - cookies_eaten

    cookies_per_jar = cookies_left / 5

    result = cookies_per_jar

    return result


 Executed result: 10.0
[EXP] 889: [success_rate]: True, [output]: def solution():
    orchids = 5

    daisies = 4

    orchid_petals = 5

    daisy_petals = 10

    orchid_total_petals = orchids * orchid_petals

    daisy_total_petals = daisies * daisy_petals

    daisy_more_petals = daisy_total_petals - orchid_total_petals

    result = daisy_more_petals

    return result


 Executed result: 15
[EXP] 890: [success_rate]: True, [output]: def solution():
    total_plants = 100

    indoor_plants = total_plants // 4

    remaining_plants = total_plants - indoor_plants

    outdoor_plants = remaining_plants * 2 // 3

    flowering_plants = remaining_plants - outdoor_plants

    percentage = (flowering_plants / total_plants) * 100

    result = round(percentage, 2)

    return result


 Executed result: 25.0
[EXP] 891: [success_rate]: False, [output]: def solution():
    thingamabob_speed = 1

    whatchamacallit_speed = thingamabob_speed * 11 + thingamabob_speed

    whirligig_speed = whatchamacallit_speed * 5

    result = whirligig_speed

    return result


 Executed result: 60
[EXP] 892: [success_rate]: True, [output]: def solution():
    total_cost = 11

    cost_of_salad = 6

    cost_of_yogurt = cost_of_salad / 2

    cost_of_carrots = total_cost - (cost_of_salad + cost_of_yogurt)

    cost_of_one_carrot = cost_of_carrots / 2

    result = cost_of_one_carrot

    return result


 Executed result: 1.0
[EXP] 893: [success_rate]: True, [output]: def solution():
    hours_per_day = 8

    days_per_week = 5

    hours_per_week = hours_per_day * days_per_week

    pay_per_hour_initial = 10

    pay_per_hour_increased = pay_per_hour_initial + 2

    pay_per_week = pay_per_hour_increased * hours_per_week

    result = pay_per_week

    return result


 Executed result: 480
[EXP] 894: [success_rate]: False, [output]: def solution():
    total_money = 80

    joe_lawns = 6

    kamala_lawns = joe_lawns * 3

    alba_lawns = joe_lawns * 5

    total_lawns = kamala_lawns + joe_lawns + alba_lawns

    money_from_lawns = total_lawns * 6

    money_from_lemonade = total_money - money_from_lawns

    result = money_from_lemonade

    return result


 Executed result: -244
[EXP] 895: [success_rate]: True, [output]: def solution():
    martin_weight = 55

    carl_weight = martin_weight + 16

    christian_weight = carl_weight + 8

    harry_weight = christian_weight - 5

    result = harry_weight

    return result


 Executed result: 74
[EXP] 896: [success_rate]: True, [output]: def solution():
    rental_hours = 10

    hours_per_rental = 3

    total_rental_hours = rental_hours * hours_per_rental

    hourly_payment = 25

    total_payment = total_rental_hours * hourly_payment

    car_payment = 500

    profit = total_payment - car_payment

    result = profit

    return result


 Executed result: 250
[EXP] 897: [success_rate]: False, [output]: def solution():
    martha_initial = 7 - 5

    joseph_notebooks = martha_initial * 3

    result = martha_initial - joseph_notebooks

    return result


 Executed result: -4
[EXP] 898: [success_rate]: True, [output]: def solution():
    diana_miles = 50

    anis_miles = diana_miles * (1 + 1/5)

    total_miles = diana_miles + anis_miles

    result = total_miles

    return result


 Executed result: 110.0
[EXP] 899: [success_rate]: True, [output]: def solution():
    cookies_initial = 100

    cookies_taken = 4

    cookies_left = cookies_initial - cookies_taken

    cookies_per_nephew = cookies_left // 6

    result = cookies_per_nephew

    return result


 Executed result: 16
[EXP] 900: [success_rate]: False, [output]: def solution():
    denise_pages_yesterday = 10

    daniel_pages_yesterday = 13

    denise_pages_today = denise_pages_yesterday + daniel_pages_yesterday

    daniel_pages_today = 0

    total_denise = denise_pages_yesterday + denise_pages_today

    total_daniel = daniel_pages_yesterday

    result = total_denise - total_daniel

    return result


 Executed result: 20
[EXP] 901: [success_rate]: False, [output]: def solution():
    bowls_for_adults = 4

    bowls_for_children = 8

    number_of_adults = 3

    number_of_children = 2

    total_bowls = number_of_adults * bowls_for_adults + number_of_children * bowls_for_children

    children_leftover_bowls = total_bowls - number_of_adults * bowls_for_adults

    bowls_per_child = children_leftover_bowls // number_of_children

    result = bowls_per_child

    return result


 Executed result: 8
[EXP] 902: [success_rate]: True, [output]: def solution():
    notebook_cost = 1.5

    ballpen_cost = 0.5

    notebooks_bought = 5

    items_bought = 5 + 1

    total_cost = notebook_cost * notebooks_bought + ballpen_cost

    result = total_cost

    return result


 Executed result: 8.0
[EXP] 903: [success_rate]: False, [output]: def solution():
    small_masks = 20

    large_masks = 8

    material_per_small_mask = 2

    material_per_large_mask = 2.25

    material_needed = (small_masks * material_per_small_mask) + (large_masks * material_per_large_mask)

    result = material_needed

    return result


 Executed result: 58.0
[EXP] 904: [success_rate]: True, [output]: def solution():
    movies = 9

    views_per_movie = 3

    total_views = movies * views_per_movie

    cost = 216

    cost_per_view = cost / total_views

    result = cost_per_view

    return result


 Executed result: 8.0
[EXP] 905: [success_rate]: True, [output]: def solution():
    sleep_hours = 10

    work_hours = sleep_hours - 2

    walk_hours = 1

    free_time = 24 - (sleep_hours + work_hours + walk_hours)

    result = free_time

    return result


 Executed result: 5
[EXP] 906: [success_rate]: False, [output]: def solution():
    blue_boxes_initial = 7

    blue_boxes_used = 3

    blue_boxes_left = blue_boxes_initial - blue_boxes_used

    red_boxes_initial = 9

    red_boxes_third = red_boxes_initial // 3

    red_boxes_used = red_boxes_third

    red_boxes_left = red_boxes_initial - red_boxes_used

    result = (blue_boxes_left, red_boxes_left)

    return result


 Executed result: (4, 6)
[EXP] 907: [success_rate]: True, [output]: def solution():
    sarah_books = 9

    joseph_books_initial = 2 * sarah_books

    joseph_books_after = joseph_books_initial - 2

    result = joseph_books_after

    return result


 Executed result: 16
[EXP] 908: [success_rate]: True, [output]: def solution():
    marbles_initial = 30

    marbles_given_jamie = int(marbles_initial * 0.2)  # 1/5 of marbles

    marbles_given_donald = 10

    marbles_left = marbles_initial - (marbles_given_jamie + marbles_given_donald)

    result = marbles_left

    return result


 Executed result: 14
[EXP] 909: [success_rate]: False, [output]: def solution():
	Duncan_age_now = 60

	Duncan_age_eight_years_ago = Duncan_age_now - 8

	Duncan_age_eight_years_ago_in_terms_of_Adam_age_four_years_ago = 2 * (Duncan_age_eight_years_ago - 4)

	Adam_age_four_years_ago = Duncan_age_eight_years_ago_in_terms_of_Adam_age_four_years_ago / 2 + 4

	Adam_age_now = Adam_age_four_years_ago + 4

	Adam_age_in_8_years = Adam_age_now + 8

	result = Adam_age_in_8_years

	return result


 Executed result: 64.0
[EXP] 910: [success_rate]: True, [output]: def solution():
    brown_farm = 200

    smith_farm = 2 * brown_farm + 100

    total_farms = brown_farm + smith_farm

    result = total_farms

    return result


 Executed result: 700
[EXP] 911: [success_rate]: True, [output]: def solution():
    packages_per_hour = 50 - 10

    packages_per_day = packages_per_hour * 8

    money_per_package = 0.20

    money_per_day = packages_per_day * money_per_package

    result = money_per_day

    return result


 Executed result: 64.0
[EXP] 912: [success_rate]: False, [output]: def solution():
    minutes_per_puzzle = 45

    extreme_sudoku_minutes = minutes_per_puzzle * 4

    total_minutes = minutes_per_puzzle + extreme_sudoku_minutes

    bottles_of_water = total_minutes / 30

    result = bottles_of_water

    return result


 Executed result: 7.5
[EXP] 913: [success_rate]: True, [output]: def solution():
    total_bologna = 58

    red_balloons = 20

    bologna_per_red_balloon = 2

    bologna_per_yellow_balloon = 3

    bologna_spent_on_red_balloons = red_balloons * bologna_per_red_balloon

    bologna_spent_on_yellow_balloons = total_bologna - bologna_spent_on_red_balloons

    yellow_balloons = bologna_spent_on_yellow_balloons // bologna_per_yellow_balloon

    result = yellow_balloons

    return result


 Executed result: 6
[EXP] 914: [success_rate]: True, [output]: def solution():
    miles_per_day = 100

    days_in_month = 30

    total_miles = miles_per_day * days_in_month

    tune_up_miles = 1000

    tune_ups = total_miles // tune_up_miles

    result = tune_ups

    return result


 Executed result: 3
[EXP] 915: [success_rate]: True, [output]: def solution():
    hours_tuesday = 5

    hours_wednesday = hours_tuesday * 2

    hours_thursday = hours_wednesday - 2

    total_hours = hours_tuesday + hours_wednesday + hours_thursday

    result = total_hours

    return result


 Executed result: 23
[EXP] 916: [success_rate]: False, [output]: def solution():
    money_spent = 11 + (1 * 2 * 0.5) + (2 * 7)

    money_initial = money_spent

    money_per_child = money_initial / 2

    result = money_per_child

    return result


 Executed result: 13.0
[EXP] 917: [success_rate]: True, [output]: def solution():
    apples = 3

    bananas = 5

    oranges = 6

    total_fruit = apples + bananas + oranges

    fruit_eaten = 2

    fruit_left = total_fruit - fruit_eaten

    result = fruit_left

    return result


 Executed result: 12
[EXP] 918: [success_rate]: True, [output]: def solution():
    students_playing_tennis = 6

    students_playing_volleyball = students_playing_tennis * 2

    students_playing_soccer = 16 + 22

    total_students = students_playing_tennis + students_playing_volleyball + students_playing_soccer

    result = total_students

    return result


 Executed result: 56
[EXP] 919: [success_rate]: True, [output]: def solution():
    students = 30

    lollipop_price = 0.8

    lollipop_cost = 0.5

    lollipops_sold = students * 10

    revenue = lollipop_price * lollipops_sold

    cost = lollipop_cost * lollipops_sold

    profit = revenue - cost

    result = profit

    return result


 Executed result: 90.0
[EXP] 920: [success_rate]: True, [output]: def solution():
    cats = 3

    dogs = 3 * cats

    rabbits = dogs - 2

    fish = 3 * rabbits

    gerbils = fish // 3

    total_pets = cats + dogs + rabbits + fish + gerbils

    result = total_pets

    return result


 Executed result: 47
[EXP] 921: [success_rate]: True, [output]: def solution():
    slices_initial = 24

    abby_slices_per_day = 2

    josh_slices_per_day = abby_slices_per_day * 2

    total_slices_per_day = abby_slices_per_day + josh_slices_per_day

    days_left = slices_initial // total_slices_per_day

    result = days_left

    return result


 Executed result: 4
[EXP] 922: [success_rate]: True, [output]: def solution():
    martha_age_initial = 5

    shells_per_month = 1

    years_to_martha_ten = 10 - martha_age_initial

    total_shells = years_to_martha_ten * 12 * shells_per_month

    result = total_shells

    return result


 Executed result: 60
[EXP] 923: [success_rate]: False, [output]: def solution():
    total_cups = 27

    rows = 3

    initial_mint_cups = total_cups - 15

    mint_cups_per_row = initial_mint_cups // rows

    result = mint_cups_per_row

    return result


 Executed result: 4
[EXP] 924: [success_rate]: True, [output]: def solution():
    total_beries = 24

    total_hours = 8

    total_trips = total_hours / 4

    berries_per_trip = total_beries / total_trips

    result = berries_per_trip

    return result


 Executed result: 12.0
[EXP] 925: [success_rate]: True, [output]: def solution():
    water_in_pool = 10000

    water_in_tank = water_in_pool / 2

    gallons_consumed_per_day = 500

    days = 6

    water_consumed = gallons_consumed_per_day * days

    water_remaining = water_in_tank - water_consumed

    result = water_remaining

    return result


 Executed result: 2000.0
[EXP] 926: [success_rate]: False, [output]: def solution():
    money_initial = 150

    money_spent_tickets = 5 * 10 + 8 * 7

    money_spent_snacks = 2 * 8 + 4 * 2

    money_spent_total = money_spent_tickets + money_spent_snacks

    money_left = money_initial - money_spent_total

    result = money_left

    return result


 Executed result: 20
[EXP] 927: [success_rate]: True, [output]: def solution():
    mini_cinnamon_rolls = 200

    mini_blueberry_muffins = 300

    calories_per_cinnamon_roll = 600

    calories_per_blueberry_muffin = 450

    mini_cinnamon_rolls_calories = mini_cinnamon_rolls * (1 / 3) * calories_per_cinnamon_roll

    mini_blueberry_muffins_calories = mini_blueberry_muffins * (1 / 3) * calories_per_blueberry_muffin

    total_calories = mini_cinnamon_rolls_calories + mini_blueberry_muffins_calories

    result = total_calories

    return result


 Executed result: 85000.0
[EXP] 928: [success_rate]: False, [output]: def solution():
    junebugs_removed_monday = 39

    junebugs_removed_tuesday = 2 * junebugs_removed_monday

    junebugs_removed_wednesday = 2 * junebugs_removed_tuesday

    junebugs_removed_thursday = 48

    junebugs_removed_friday = 57

    total_junebugs_removed = junebugs_removed_monday + junebugs_removed_tuesday + junebugs_removed_wednesday + junebugs_removed_thursday + junebugs_removed_friday

    average_junebugs_removed_per_day = total_junebugs_removed / 5

    result = average_junebugs_removed_per_day

    return result


 Executed result: 75.6
[EXP] 929: [success_rate]: True, [output]: def solution():
    bus_speed = 60

    bus_hours = 5

    bus_distance = bus_speed * bus_hours

    car_speed = 30

    car_hours = 8

    car_distance = car_speed * car_hours

    bus_further = bus_distance - car_distance

    result = bus_further

    return result


 Executed result: 60
[EXP] 930: [success_rate]: True, [output]: def solution():
    total_toys = 62

    blocks = 31

    stuffed_animals = 8

    stacking_rings = 9

    bouncy_balls = total_toys - blocks - stuffed_animals - stacking_rings

    result = bouncy_balls

    return result


 Executed result: 14
[EXP] 931: [success_rate]: False, [output]: def solution():
    jean_age = 0

    paul_age = jean_age + 10

    total_age = 100

    peter_age = total_age - paul_age - jean_age

    result = peter_age

    return result


 Executed result: 90
[EXP] 932: [success_rate]: True, [output]: def solution():
    friends = 4

    maria_balloons = 1

    friend_balloons_initial = 2 * friends

    total_balloons_initial = friend_balloons_initial + maria_balloons

    additional_balloons = 3 * (friends + 1)

    total_balloons = total_balloons_initial + additional_balloons

    result = total_balloons

    return result


 Executed result: 24
[EXP] 933: [success_rate]: True, [output]: def solution():
    boxes_donated = 10

    boxes_per_person = 5

    total_boxes_donated = boxes_donated * boxes_per_person

    total_boxes = total_boxes_donated + 10

    boxes_per_table = 2

    total_tables_required = (total_boxes + boxes_per_table - 1) // boxes_per_table

    tables_owned = 15

    tables_needed = total_tables_required - tables_owned

    result = tables_needed

    return result


 Executed result: 15
[EXP] 934: [success_rate]: False, [output]: def solution():
    zoey_seeds = 40

    zoey_distance_per_seed = 10

    total_distance_zoey = zoey_seeds * zoey_distance_per_seed

    sydney_seeds = 35

    sydney_distance_per_seed = 12

    total_distance_sydney = sydney_seeds * sydney_distance_per_seed

    total_distance = total_distance_zoey + total_distance_sydney

    average_distance = total_distance / (zoey_seeds + sydney_seeds)

    result = average_distance

    return result


 Executed result: 10.933333333333334
[EXP] 935: [success_rate]: True, [output]: def solution():
    widgets_per_hour_3000 = 60

    widgets_per_hour_9000 = 45

    widgets_per_hour_diff = widgets_per_hour_3000 - widgets_per_hour_9000

    widgets_per_day_3000 = widgets_per_hour_3000 * 24

    widgets_per_day_9000 = widgets_per_hour_9000 * 24

    widgets_per_month_3000 = widgets_per_day_3000 * 30

    widgets_per_month_9000 = widgets_per_day_9000 * 30

    revenue_per_widget = 6

    revenue_per_month_3000 = widgets_per_month_3000 * revenue_per_widget

    revenue_per_month_9000 = widgets_per_month_9000 * revenue_per_widget

    revenue_diff = revenue_per_month_3000 - revenue_per_month_9000

    result = revenue_diff

    return result


 Executed result: 64800
[EXP] 936: [success_rate]: False, [output]: def solution():
    arrival_time = 17  # 5 pm = 17 hours

    departure_time = 10  # 10 am = 10 hours

    total_hours = departure_time - arrival_time

    total_hours_after_12 = total_hours - 12

    extra_cost = total_hours_after_12 * 70

    cost_with_option = 1000 + extra_cost

    cost_without_option = 1600

    savings = cost_without_option - cost_with_option

    result = savings

    return result


 Executed result: 1930
[EXP] 937: [success_rate]: True, [output]: def solution():
    goats = 15

    sheep = 12

    pounds_per_goat = 5

    pounds_per_sheep = 2 * pounds_per_goat - 3

    total_pounds_goats = goats * pounds_per_goat

    total_pounds_sheep = sheep * pounds_per_sheep

    total_pounds = total_pounds_goats + total_pounds_sheep

    result = total_pounds

    return result


 Executed result: 159
[EXP] 938: [success_rate]: False, [output]: def solution():
    hourly_wage = 50

    hours_worked = 6

    weekly_earnings = hourly_wage * hours_worked

    money_spent_on_gas = 50

    money_to_deposit = 100

    total_money = weekly_earnings - money_spent_on_gas + money_to_deposit

    money_for_pens = total_money - 10 * 5  # 5 pencils for 10 dollars each

    pens_cost = 25

    num_pens = money_for_pens // pens_cost

    result = num_pens

    return result


 Executed result: 12
[EXP] 939: [success_rate]: True, [output]: def solution():
    craig_words = 20

    craig_letters = 15

    craig_letters_total = craig_words * craig_letters

    brother_letters = craig_letters_total + 50

    result = craig_letters_total + brother_letters

    return result


 Executed result: 650
[EXP] 940: [success_rate]: True, [output]: def solution():
    children_per_row = 8

    rows_per_school = 7

    schools = 5

    total_children = children_per_row * rows_per_school * schools

    result = total_children

    return result


 Executed result: 280
[EXP] 941: [success_rate]: True, [output]: def solution():
    pupils = 29

    coupons = 9

    bottles_per_coupon = 100

    bottles_per_pupil = 2

    total_bottles_available = coupons * bottles_per_coupon

    total_bottles_given_to_pupils = pupils * bottles_per_pupil

    bottles_left = total_bottles_available - total_bottles_given_to_pupils

    result = bottles_left

    return result


 Executed result: 842
[EXP] 942: [success_rate]: False, [output]: def solution():
    visit_fee = 40

    labor_hours = 2.25

    labor_cost = labor_hours * 35

    parts_cost = 60

    total_cost = visit_fee + labor_cost + parts_cost

    result = total_cost

    return result


 Executed result: 178.75
[EXP] 943: [success_rate]: False, [output]: def solution():
    new_CDs = 10

    price_CD = 15

    discount = 0.4

    price_CD_discounted = price_CD * (1 - discount)

    total_cost = new_CDs * price_CD_discounted

    CDs_sold = 5

    price_sold = 40

    money_made = price_sold * CDs_sold

    money_out = total_cost - money_made

    result = money_out

    return result


 Executed result: -110.0
[EXP] 944: [success_rate]: True, [output]: def solution():
    yams = 6

    yams_price = 1.5

    yams_income = yams * yams_price

    sweet_potatoes = 10

    sweet_potatoes_price = 2

    sweet_potatoes_income = sweet_potatoes * sweet_potatoes_price

    carrots = 4

    carrots_price = 1.25

    carrots_income = carrots * carrots_price

    total_income = yams_income + sweet_potatoes_income + carrots_income

    result = total_income

    return result


 Executed result: 34.0
[EXP] 945: [success_rate]: True, [output]: def solution():
    distance = 20

    swimming_speed = 2

    portion_swum = 0.6

    distance_swum = distance * portion_swum

    time_swimming = distance_swum / swimming_speed

    rest_time = time_swimming / 2

    remaining_distance = distance - distance_swum

    remaining_distance_swum = remaining_distance

    remaining_swimming_speed = swimming_speed / 2

    remaining_time = remaining_distance_swum / remaining_swimming_speed

    total_time = time_swimming + rest_time + remaining_time

    result = total_time

    return result


 Executed result: 17.0
[EXP] 946: [success_rate]: True, [output]: def solution():
    sam_loaves = 70

    bakery_loaves = 7 * sam_loaves - 40

    result = bakery_loaves

    return result


 Executed result: 450
[EXP] 947: [success_rate]: True, [output]: def solution():
    stickers_initial = 15

    stickers_lost = 7

    stickers_gained = 5

    stickers_total = stickers_initial - stickers_lost + stickers_gained

    result = stickers_total

    return result


 Executed result: 13
[EXP] 948: [success_rate]: True, [output]: def solution():
    new_york_times = 6

    wall_street_journal = 10

    new_york_times_cost = new_york_times * 5

    wall_street_journal_cost = wall_street_journal * 15

    new_york_times_commission = new_york_times_cost * 0.1

    wall_street_journal_commission = wall_street_journal_cost * 0.08

    total_commission = new_york_times_commission + wall_street_journal_commission

    result = total_commission

    return result


 Executed result: 15.0
[EXP] 949: [success_rate]: False, [output]: def solution():
    deanna_age = 26

    leo_age = (deanna_age * 2) + 5

    result = leo_age

    return result


 Executed result: 57
[EXP] 950: [success_rate]: False, [output]: def solution():
    total_points = 45

    difference_Bahati_Azibo = 20

    difference_Bahati_Dinar = 10

    Bahati_points = total_points - (difference_Bahati_Azibo + difference_Bahati_Dinar)

    Azibo_points = Bahati_points - difference_Bahati_Azibo

    result = Azibo_points

    return result


 Executed result: -5
[EXP] 951: [success_rate]: True, [output]: def solution():
    pages_per_inch = 100

    book_thickness = 1.5

    pages_in_book = pages_per_inch * book_thickness * 2

    result = pages_in_book

    return result


 Executed result: 300.0
[EXP] 952: [success_rate]: False, [output]: def solution():
    reports_per_minute = 30

    time_minutes = (11 * 60) - 60  # 11:00 PM to 8:00 AM is 3 hours, so 3 * 60 minutes

    reports_stapled = reports_per_minute * time_minutes

    result = reports_stapled

    return result


 Executed result: 18000
[EXP] 953: [success_rate]: False, [output]: def solution():
    bedtime = 60 * 10

    wake_up_time = 60 * 6

    bed_sleep_time = wake_up_time - bedtime

    sleepwalking_start = 60 * 2 + 15

    sleepwalking_start = 2 * 60 + 15

    sleepwalking_end = 2 * 60 + 38

    sleepwalking_time = sleepwalking_end - sleepwalking_start

    wake_up_early = wake_up_time - 5 * 60

    total_sleep_time = bed_sleep_time + (bed_sleep_time - (wake_up_early / 60) * 60)

    result = total_sleep_time

    return result


 Executed result: -540.0
[EXP] 954: [success_rate]: True, [output]: def solution():
    measuring_cups = 2 * 12

    measuring_spoons = measuring_cups * 2 / 3

    measuring_spoons_given = 6

    measuring_spoons_left = measuring_spoons - measuring_spoons_given

    total_utensils = measuring_cups + measuring_spoons_left

    result = total_utensils

    return result


 Executed result: 34.0
[EXP] 955: [success_rate]: False, [output]: def solution():
    capacity = 1000

    percentage_occu = 1 / 5

    occupied = capacity * percentage_occu

    unoccupied = capacity - occupied

    result = unoccupied

    return result


 Executed result: 800.0
[EXP] 956: [success_rate]: True, [output]: def solution():
    emails_per_day = 16

    work_emails = 7

    family_emails = int((emails_per_day - work_emails) * 2/3)

    remainder_emails = emails_per_day - work_emails - family_emails

    boyfriend_emails = int(remainder_emails / 3)

    result = boyfriend_emails

    return result


 Executed result: 1
[EXP] 957: [success_rate]: True, [output]: def solution():
    aliya_age = 3

    shawna_age = aliya_age * 3

    father_age = shawna_age * 5

    result = father_age

    return result


 Executed result: 45
[EXP] 958: [success_rate]: False, [output]: def solution():
    audience_reported = 48

    overstated_amount = 0.2 * audience_reported

    actual_audience = audience_reported - overstated_amount

    result = actual_audience

    return result


 Executed result: 38.4
[EXP] 959: [success_rate]: True, [output]: def solution():
    jason_balls = 2

    jeffrey_balls = jason_balls / 2

    jordan_balls = jason_balls * 2

    total_balls = jason_balls + jeffrey_balls + jordan_balls

    result = total_balls

    return result


 Executed result: 7.0
[EXP] 960: [success_rate]: False, [output]: def solution():
    total_holes_after_first_day = 10

    holes_dug_second_day = 13

    total_holes_after_second_day = total_holes_after_first_day + holes_dug_second_day

    holes_dug_third_day = 8

    holes_flooded_third_day = 2

    total_holes_after_third_day = total_holes_after_second_day + holes_dug_third_day - holes_flooded_third_day

    total_holes_fourth_day = total_holes_after_third_day * 4

    result = total_holes_fourth_day - total_holes_after_third_day

    return result


 Executed result: 87
[EXP] 961: [success_rate]: True, [output]: def solution():
    amora_chips = 70

    lainey_chips = 70

    collins_chips = amora_chips + 15

    total_chips = amora_chips + lainey_chips + collins_chips

    result = total_chips

    return result


 Executed result: 225
[EXP] 962: [success_rate]: True, [output]: def solution():
    supplies = 400

    travel_tickets = supplies * 1.5

    total_cost = supplies + travel_tickets

    result = total_cost

    return result


 Executed result: 1000.0
[EXP] 963: [success_rate]: False, [output]: def solution():
    pokemon_all = 339

    alex_pokemon = stan_pokemon + 5

    stan_pokemon = 4 * adelwolfe_pokemon - 13

    result = stan_pokemon - 5

    return result


 Executed result: Error: return error, fail to execute
[EXP] 964: [success_rate]: True, [output]: def solution():
    minutes_per_episode = 20

    episodes_total = minutes_per_episode / 2

    total_minutes = minutes_per_episode * episodes_total

    result = total_minutes

    return result


 Executed result: 200.0
[EXP] 965: [success_rate]: True, [output]: def solution():
    speed_south = 30

    time_south = 10

    distance_south = speed_south * time_south

    speed_north = 18

    time_north = 2

    distance_north = speed_north * time_north

    speed_south_again = 22

    time_south_again = 5

    distance_south_again = speed_south_again * time_south_again

    total_distance = distance_south - distance_north + distance_south_again

    return total_distance


 Executed result: 374
[EXP] 966: [success_rate]: True, [output]: def solution():
    batch_of_brownies = 12

    office_brownies = 6

    home_brownies = 48

    total_brownies = batch_of_brownies + office_brownies + home_brownies

    brownies_eaten = 18

    brownies_left = total_brownies - brownies_eaten

    result = brownies_left

    return result


 Executed result: 48
[EXP] 967: [success_rate]: True, [output]: def solution():
    nani_age = 8

    brother_age = nani_age * 2

    sister_age = nani_age - (nani_age * 25) / 100

    total_age = nani_age + brother_age + sister_age

    result = total_age

    return result


 Executed result: 30.0
[EXP] 968: [success_rate]: True, [output]: def solution():
    racquets_initial = 12

    synthetic_racquets = 3

    polyester_racquets = 5

    hybrid_racquets = 4

    synthetic_time = synthetic_racquets * 15

    polyester_time = polyester_racquets * 22

    hybrid_time = hybrid_racquets * 18

    total_time = synthetic_time + polyester_time + hybrid_time

    result = total_time

    return result


 Executed result: 227
[EXP] 969: [success_rate]: True, [output]: def solution():
    phone_price = 600

    total_phones = 4

    phone_cost = 0

    for i in range(total_phones):

        if i < 2:

            phone_cost += phone_price

        else:

            phone_cost += phone_price / 2

    result = phone_cost

    return result


 Executed result: 1800.0
[EXP] 970: [success_rate]: True, [output]: def solution():
    carlton_players = 13

    zeke_players = carlton_players + 7

    total_players = carlton_players + zeke_players

    result = total_players

    return result


 Executed result: 33
[EXP] 971: [success_rate]: True, [output]: def solution():
    length = 15

    width = 10

    perimeter = 2 * (length + width)

    slats_per_foot = 2

    total_slats = perimeter * slats_per_foot

    result = total_slats

    return result


 Executed result: 100
[EXP] 972: [success_rate]: False, [output]: def solution():
    boxes_initial = 12

    boxes_given = 2 * 2

    oranges_initial = boxes_initial * 20

    oranges_given = boxes_given * 20

    oranges_kept = int(oranges_initial - oranges_given) / 4

    oranges_sold = oranges_initial - oranges_kept * 4

    result = oranges_sold

    return result


 Executed result: 80.0
[EXP] 973: [success_rate]: True, [output]: def solution():
    usa_states = 50

    india_states = (usa_states // 2) + 4

    total_states = usa_states + india_states

    result = total_states

    return result


 Executed result: 79
[EXP] 974: [success_rate]: True, [output]: def solution():
    dictionary_cost = 18

    dinosaur_book_cost = 13

    childrens_cookbook_cost = 8

    total_cost = dictionary_cost + dinosaur_book_cost + childrens_cookbook_cost

    money_saved = 14

    money_to_make = total_cost - money_saved

    money_per_hour = 5

    hours_to_work = money_to_make / money_per_hour

    result = hours_to_work

    return result


 Executed result: 5.0
[EXP] 975: [success_rate]: True, [output]: def solution():
    cherries = 60

    robert_cherries = 30

    richard_cherries = robert_cherries - 10

    jerry_cherries = cherries - (robert_cherries + richard_cherries)

    robert_cherries_more_than_jerry = robert_cherries - jerry_cherries

    result = robert_cherries_more_than_jerry

    return result


 Executed result: 20
[EXP] 976: [success_rate]: False, [output]: def solution():
    gingerbread_sold_saturday = 10

    apple_pies_sold_saturday = 10 - 4

    gingerbread_sold_sunday = gingerbread_sold_saturday + 5

    apple_pies_sold_sunday = 15

    revenue_per_box_gingerbread = 6

    revenue_per_box_apple_pie = 15

    total_revenue_saturday = (gingerbread_sold_saturday * revenue_per_box_gingerbread) + (apple_pies_sold_saturday * revenue_per_box_apple_pie)

    total_revenue_sunday = (gingerbread_sold_sunday * revenue_per_box_gingerbread) + (apple_pies_sold_sunday * revenue_per_box_apple_pie)

    total_revenue = total_revenue_saturday + total_revenue_sunday

    result = total_revenue

    return result


 Executed result: 465
[EXP] 977: [success_rate]: True, [output]: def solution():
    hours_outside_per_day = 4

    days = 8

    hours_outside_total = hours_outside_per_day * days

    sunscreen_per_hour = 1

    sunscreen_needed = hours_outside_total * sunscreen_per_hour

    sunscreen_per_bottle = 8

    bottles_needed = sunscreen_needed / sunscreen_per_bottle

    result = bottles_needed

    return result


 Executed result: 4.0
[EXP] 978: [success_rate]: True, [output]: def solution():
    blue_car_cost = 100

    red_car_discount = 0.4

    red_car_cost = blue_car_cost * (1 - red_car_discount)

    total_cost = blue_car_cost + red_car_cost

    result = total_cost

    return result


 Executed result: 160.0
[EXP] 979: [success_rate]: False, [output]: def solution():
    emil_age-now = 19

    emil_age_fut = 24

    emil_father_age_fut = emil_age_fut * 2

    emil_brother_age_fut = emil_age_fut / 2

    emil_father_age_now = emil_father_age_fut - emil_age_fut + emil_age_now

    emil_brother_age_now = emil_brother_age_fut - emil_age_fut + emil_age_now

    result = emil_father_age_now + emil_brother_age_now

    return result


 Executed result: Error: return error, fail to execute
[EXP] 980: [success_rate]: True, [output]: def solution():
    beads_mom = 20

    beads_sister = beads_mom + 10

    beads_friend = beads_mom * 2

    total_beads = beads_mom + beads_sister + beads_friend

    result = total_beads

    return result


 Executed result: 90
[EXP] 981: [success_rate]: True, [output]: def solution():
    pounds_crawfish_thursday = 3

    pounds_crawfish_friday = 4 * pounds_crawfish_thursday

    pounds_crawfish_saturday = pounds_crawfish_friday / 2

    total_pounds_crawfish = pounds_crawfish_thursday + pounds_crawfish_friday + pounds_crawfish_saturday

    servings = total_pounds_crawfish / 3

    result = servings

    return result


 Executed result: 7.0
[EXP] 982: [success_rate]: True, [output]: def solution():
    students_in_class = 30

    football_players = (20 / 100) * students_in_class

    remaining_students = students_in_class - football_players

    cheerleaders_and_band = (25 / 100) * remaining_students

    total_students_leaving = football_players + cheerleaders_and_band

    result = total_students_leaving

    return result


 Executed result: 12.0
[EXP] 983: [success_rate]: True, [output]: def solution():
    sophie_boots = 5

    charlie_boots = sophie_boots * 5

    average_boot_size = (sophie_boots + charlie_boots) / 2

    result = average_boot_size

    return result


 Executed result: 15.0
[EXP] 984: [success_rate]: False, [output]: def solution():
    length_of_bed = 111

    distance_between_plants = 1.5

    width_of_plant = 12

    plants_already_owned = 17

    total_space = length_of_bed * 12

    space_in_feet = total_space / 12

    plants_required = int(space_in_feet / (distance_between_plants + width_of_plant))

    plants_required = plants_required + plants_already_owned

    total_plants = plants_required

    cost_per_plant = 6

    total_cost = total_plants * cost_per_plant

    result = total_cost

    return result


 Executed result: 150
[EXP] 985: [success_rate]: True, [output]: def solution():
    edgar_pretzels_per_day = 18

    brother_pretzels_per_day = edgar_pretzels_per_day / 2

    brother_pretzels_per_week = brother_pretzels_per_day * 7

    result = brother_pretzels_per_week

    return result


 Executed result: 63.0
[EXP] 986: [success_rate]: True, [output]: def solution():
    petunias_per_basket = 3

    sweet_potato_vines_per_basket = 2

    baskets = 5

    petunias_total = petunias_per_basket * baskets

    sweet_potato_vines_total = sweet_potato_vines_per_basket * baskets

    total_plants = petunias_total + sweet_potato_vines_total

    petunias_cost = petunias_total * 3

    sweet_potato_vines_cost = sweet_potato_vines_total * 2.50

    total_cost = petunias_cost + sweet_potato_vines_cost

    result = total_cost

    return result


 Executed result: 70.0
[EXP] 987: [success_rate]: True, [output]: def solution():
    soil_total = 30

    sunflowers = 4

    sunflowers_pounds = sunflowers * 3

    carnations = 10

    carnations_pounds = carnations * 1.5

    total_pounds_used = sunflowers_pounds + carnations_pounds

    roses = soil_total - total_pounds_used

    result = roses

    return result


 Executed result: 3.0
[EXP] 988: [success_rate]: True, [output]: def solution():
    monthly_income = 2000

    monthly_savings = 0.25 * monthly_income

    annual_savings = monthly_savings * 12

    cost_of_shoes = 1000

    shoes_bought = annual_savings // cost_of_shoes

    result = shoes_bought

    return result


 Executed result: 6.0
[EXP] 989: [success_rate]: False, [output]: def solution():
    shrimp_per_minute_peling = 6

    shrimp_per_minute_sauteing = 30 / 10

    shrimp_total = 90

    time_peling = shrimp_total / shrimp_per_minute_peling

    time_sauteing = shrimp_total / shrimp_per_minute_sauteing

    total_time = max(time_peling, time_sauteing)

    result = total_time

    return result


 Executed result: 30.0
[EXP] 990: [success_rate]: True, [output]: def solution():
    low_rate = 2

    high_rate = 3

    no_ac_rate = 2

    low_time = 3

    high_time = 4

    no_ac_time = 2

    temperature_change = (low_rate * low_time) + (high_rate * high_time) - (no_ac_rate * no_ac_time)

    result = temperature_change

    return result


 Executed result: 14
[EXP] 991: [success_rate]: True, [output]: def solution():
    comet_period = 75

    bill_father_age = 30

    bill_age_when_second_sighting = 3 * bill_father_age

    bill_age_when_first_sighting = bill_age_when_second_sighting - comet_period

    result = bill_age_when_first_sighting

    return result


 Executed result: 15
[EXP] 992: [success_rate]: True, [output]: def solution():
    checks_per_month = 1 + 1 + 2

    checks_per_quarter = 1

    total_checks_per_year = 12 * checks_per_month + 4 * checks_per_quarter

    result = total_checks_per_year

    return result


 Executed result: 52
[EXP] 993: [success_rate]: False, [output]: def solution():
    total_flights = 2

    flights_first_plane_to_greece = (3 / 4) * total_flights

    remaining_flights = total_flights - flights_first_plane_to_greece

    flights_first_plane_to_france_and_germany = remaining_flights / 2

    flights_to_poland_second_plane = 44

    flights_first_plane = 2 * flights_to_poland_second_plane

    flights_first_plane_to_france = flights_first_plane_to_france_and_germany

    result = flights_first_plane_to_france

    return result


 Executed result: 0.25
[EXP] 994: [success_rate]: True, [output]: def solution():
    tobit_howls = 20

    chikote_howls = 2 * tobit_howls

    igneous_howls = tobit_howls + chikote_howls

    total_howls = tobit_howls + chikote_howls + igneous_howls

    minutes_howls = total_howls / 60

    result = minutes_howls

    return result


 Executed result: 2.0
[EXP] 995: [success_rate]: True, [output]: def solution():
    adam_money_initial = 0

    mom_money = 6

    dad_money = 2 * 6

    total_given = mom_money + dad_money

    money_needed = 30

    money_contributed = money_needed - total_given

    result = money_contributed

    return result


 Executed result: 12
[EXP] 996: [success_rate]: False, [output]: def solution():
    sum_of_ages = 20

    akbar_age = 3

    alessandro_age = 4

    total_children = 4

    remaining_ages = sum_of_ages - akbar_age - alessandro_age

    average_age = remaining_ages / (total_children - 2)

    helene_age = average_age * 2

    wilfred_age = sum_of_ages - akbar_age - alessandro_age - helene_age

    result = wilfred_age

    return result


 Executed result: 0.0
[EXP] 997: [success_rate]: False, [output]: def solution():
    donations_neighbors = 500

    donations_online = 1500

    donations_friend = 200

    donations_total = donations_neighbors + donations_online + donations_friend

    donations_lawyer = donations_total * 3

    result = donations_lawyer

    return result


 Executed result: 6600
[EXP] 998: [success_rate]: True, [output]: def solution():
    cookies_total = 100 * 15

    cookies_given = cookies_total // 2

    cookies_per_person = 15

    people_in_church = cookies_given // cookies_per_person

    result = people_in_church

    return result


 Executed result: 50
[EXP] 999: [success_rate]: False, [output]: def solution():
    slices_per_kid = 4

    slices_per_adult = slices_per_kid * 2

    total_slices = slices_per_kid * 4

    adult_slices = slices_per_adult * 2

    adult_percentage = (adult_slices / total_slices) * 100

    result = adult_percentage

    return result


 Executed result: 100.0
[EXP] 1000: [success_rate]: True, [output]: def solution():
    hours_at_clinic = 9

    time_per_inpatient = 0.33

    num_inpatients = 9

    time_for_inpatients = num_inpatients * time_per_inpatient

    time_per_appointment = 0.5

    num_appointments = 10

    time_for_appointments = num_appointments * time_per_appointment

    total_time_spent = time_for_inpatients + time_for_appointments

    time_left = hours_at_clinic - total_time_spent

    result = time_left

    return result


 Executed result: 1.0299999999999994
[EXP] 1001: [success_rate]: False, [output]: def solution():
    make_batter_time = 20

    bake_time = 30

    cool_time = 2 * 60

    frost_time = 10

    total_time = make_batter_time + bake_time + cool_time + frost_time

    latest_start_time = 300 - total_time

    result = latest_start_time

    return result


 Executed result: 120
[EXP] 1002: [success_rate]: True, [output]: def solution():
    lisa_boxes = 3.5

    peter_boxes = 4.5

    total_boxes = lisa_boxes + peter_boxes

    total_chocolates = 64

    chocolates_per_box = total_chocolates / total_boxes

    result = chocolates_per_box

    return result


 Executed result: 8.0
[EXP] 1003: [success_rate]: False, [output]: def solution():
    rent_cost = 25

    student_cost = 1.5

    students = 10

    days_per_week = 3

    weeks_per_month = 4

    total_students_per_week = students * days_per_week

    total_cost_per_week = rent_cost + (total_students_per_week * student_cost)

    total_cost_per_month = total_cost_per_week * weeks_per_month

    result = total_cost_per_month

    return result


 Executed result: 280.0
[EXP] 1004: [success_rate]: True, [output]: def solution():
    peter_boxes = 4

    peter_chocolates = 64

    martha_boxes = 7

    martha_chocolates = 56

    chocolates_per_box_peter = peter_chocolates // peter_boxes

    chocolates_per_box_martha = martha_chocolates // martha_boxes

    chocolates_per_box_difference = chocolates_per_box_peter - chocolates_per_box_martha

    result = chocolates_per_box_difference

    return result


 Executed result: 8
[EXP] 1005: [success_rate]: True, [output]: def solution():
    total_population = 50

    female_population = total_population * 3/5

    babies_per_female = 4

    babies_per_month = female_population * babies_per_female

    months_in_year = 12

    total_babies = babies_per_month * months_in_year

    total_population_new = total_population + total_babies

    result = total_population_new

    return result


 Executed result: 1490.0
[EXP] 1006: [success_rate]: True, [output]: def solution():
    width = 14

    length = 25

    depth = 4

    volume = width * length * depth

    gallons_needed = volume * 5.9

    cost_per_gallon = 0.10

    total_cost = gallons_needed * cost_per_gallon

    result = total_cost

    return result


 Executed result: 826.0
[EXP] 1007: [success_rate]: True, [output]: def solution():
    red_sticks = 9

    blue_sticks = red_sticks + 5

    yellow_sticks = blue_sticks - 3

    total_sticks = red_sticks + blue_sticks + yellow_sticks

    result = total_sticks

    return result


 Executed result: 34
[EXP] 1008: [success_rate]: True, [output]: def solution():
    matteo_speed = 55

    matteo_time = 4

    matteo_distance = matteo_speed * matteo_time

    shandy_speed = 45

    shandy_time = 10

    shandy_distance = shandy_speed * shandy_time

    distance_diff = shandy_distance - matteo_distance

    result = distance_diff

    return result


 Executed result: 230
[EXP] 1009: [success_rate]: False, [output]: def solution():
    total_students = 3000

    students_over_16 = total_students / 2

    students_male_over_16 = students_over_16 / 4

    students_female_over_16 = students_over_16 - students_male_over_16

    students_under_16 = total_students - students_over_16

    students_male_under_16 = students_under_16 / 2

    students_female_under_16 = students_under_16 - students_male_under_16

    students_female = students_female_over_16 + students_female_under_16

    result = students_female

    return result


 Executed result: 1875.0
[EXP] 1010: [success_rate]: True, [output]: def solution():
    bethany_laps = 10

    trey_laps = bethany_laps + 4

    shaelyn_laps = trey_laps / 2

    quinn_laps = shaelyn_laps - 2

    difference = bethany_laps - quinn_laps

    result = difference

    return result


 Executed result: 5.0
[EXP] 1011: [success_rate]: True, [output]: def solution():
    tank_capacity = 18000

    water_pumped_first_day = tank_capacity / 4

    msb_pump_first_day = water_pumped_first_day * 3 / 4

    total_water_pumped_first_day = water_pumped_first_day + msb_pump_first_day

    water_pumped_second_day = water_pumped_first_day * 2 / 3

    msb_pump_second_day = msb_pump_first_day / 3

    total_water_pumped_second_day = water_pumped_second_day + msb_pump_second_day

    total_water_pumped = total_water_pumped_first_day + total_water_pumped_second_day

    water_remaining = tank_capacity - total_water_pumped

    result = water_remaining

    return result


 Executed result: 6000.0
[EXP] 1012: [success_rate]: False, [output]: def solution():
    power_initial = ?

    loss_9 = 9 / 100

    loss_7 = 7 / 100

    hours_9 = 5

    hours_7 = 3

    total_loss_9 = 1 - (1 - loss_9) ** hours_9

    total_loss_7 = 1 - (1 - loss_7) ** hours_7

    total_loss = 1 - (1 - total_loss_9) * (1 - total_loss_7)

    power_left = power_initial * total_loss

    result = power_left

    return result


 Executed result: Error: return error, fail to execute
[EXP] 1013: [success_rate]: True, [output]: def solution():
    car_price = 10000

    down_payment = 0.20 * car_price

    hourly_wages = 10

    hourly_tips = 15

    hourly_income = hourly_wages + hourly_tips

    weekly_income = hourly_income * 40

    weeks_to_save = down_payment / weekly_income

    result = weeks_to_save

    return result


 Executed result: 2.0
[EXP] 1014: [success_rate]: True, [output]: def solution():
    money_initial = 10

    peaches = 3

    peaches_cost = peaches * 0.5

    pears = 4

    pears_cost = pears * 0.5

    kiwis = 2

    kiwis_cost = kiwis * 1

    apples = 5

    apples_cost = apples * 0.75

    total_cost = peaches_cost + pears_cost + kiwis_cost + apples_cost

    money_left = money_initial - total_cost

    plum_cost = 0.25

    plums = int(money_left / plum_cost)

    result = plums

    return result


 Executed result: 3
[EXP] 1015: [success_rate]: True, [output]: def solution():
    packs_total = 15

    pieces_per_pack = 60

    total_pieces = packs_total * pieces_per_pack

    total_pieces_given = total_pieces - 2 * pieces_per_pack

    friends = 10

    pieces_per_friend = total_pieces_given // friends

    result = pieces_per_friend

    return result


 Executed result: 78
[EXP] 1016: [success_rate]: False, [output]: def solution():
    price_initial = 120

    increase_rate = 0.05

    years = 3

    for year in range(years):

        price_initial *= (1 + increase_rate)

    result = round(price_initial)

    return result


 Executed result: 139
[EXP] 1017: [success_rate]: False, [output]: def solution():
    pictures_uploaded = 72

    albums = 8

    selfies_per_album = 0

    portraits_per_album = 0

    selfies = 3 * selfies_per_album

    portraits = 2 * portraits_per_album

    total_pictures_in_albums = selfies + portraits

    pictures_left = pictures_uploaded - total_pictures_in_albums

    pictures_per_album = pictures_left // albums

    remainings = pictures_left % albums

    selfies += remainings

    result = selfies

    return result


 Executed result: 0
[EXP] 1018: [success_rate]: True, [output]: def solution():
    pages_per_minute = 3

    total_pages = 18

    minutes_spent_reading = total_pages / pages_per_minute

    result = minutes_spent_reading * 10

    return result


 Executed result: 60.0
[EXP] 1019: [success_rate]: True, [output]: def solution():
    guests_initial = 100

    guests_checked_out_early = 24

    guests_checked_out_late = 15

    guests_arrived_afternoon = 15 * 2

    guests_arrived_evening = 7

    guests_checked_out = guests_checked_out_early + guests_checked_out_late

    guests_arrived = guests_arrived_afternoon + guests_arrived_evening

    guests_now = guests_initial - guests_checked_out + guests_arrived

    result = guests_now

    return result


 Executed result: 98
[EXP] 1020: [success_rate]: True, [output]: def solution():
    bananas_wednesday = 4

    bananas_thursday = 6

    bananas_friday = bananas_wednesday * 3

    total_bananas = bananas_wednesday + bananas_thursday + bananas_friday

    result = total_bananas

    return result


 Executed result: 22
[EXP] 1021: [success_rate]: False, [output]: def solution():
    total_questions = 60

    easy_questions = 0.4 * total_questions

    average_and_diff_questions = total_questions - easy_questions

    average_and_diff_questions_per_type = average_and_diff_questions / 2

    easy_questions_correct = 0.75 * easy_questions

    average_and_diff_questions_correct = average_and_diff_questions_per_type * 2

    total_correct = easy_questions_correct + average_and_diff_questions_correct

    result = total_correct

    return result


 Executed result: 54.0
[EXP] 1022: [success_rate]: False, [output]: def solution():
    small_stuffed_animal_price = 4

    large_stuffed_animal_price = small_stuffed_animal_price * 3

    sales = 120

    small_stuffed_animals_sold = (sales * 2) / (small_stuffed_animal_price + large_stuffed_animal_price)

    result = small_stuffed_animals_sold

    return result


 Executed result: 15.0
[EXP] 1023: [success_rate]: True, [output]: def solution():
    man_sandwiches_per_day = 5

    wife_sandwiches_per_day = 4

    son_sandwiches_per_day = 2

    total_sandwiches_per_day = man_sandwiches_per_day + wife_sandwiches_per_day + son_sandwiches_per_day

    total_sandwiches_per_week = total_sandwiches_per_day * 7

    result = total_sandwiches_per_week

    return result


 Executed result: 77
[EXP] 1024: [success_rate]: True, [output]: def solution():
    cookies_sold = 80

    cookie_price = 1

    cookie_income = cookies_sold * cookie_price

    cupcakes_sold = 60

    cupcake_price = 4

    cupcake_income = cupcakes_sold * cupcake_price

    total_income = cookie_income + cupcake_income

    money_given_sisters = 2 * 10

    money_left = total_income - money_given_sisters

    result = money_left

    return result


 Executed result: 300
[EXP] 1025: [success_rate]: True, [output]: def solution():
    eggs_initial = 100

    eggs_found_by_smith_twins = 2 * 30

    eggs_found_by_friends = eggs_initial - eggs_found_by_smith_twins - 10

    result = eggs_found_by_friends

    return result


 Executed result: 30
[EXP] 1026: [success_rate]: True, [output]: def solution():
    ore_per_dwarf_with_iron_pickaxe = 12 * 2

    ore_per_dwarf_with_steel_pickaxe = ore_per_dwarf_with_iron_pickaxe * 1.5

    ore_per_dwarf_per_day = ore_per_dwarf_with_steel_pickaxe

    ore_per_dwarf_per_month = ore_per_dwarf_per_day * 30

    ore_mined_by_40_dwarves_per_month = ore_per_dwarf_per_month * 40

    result = ore_mined_by_40_dwarves_per_month

    return result


 Executed result: 43200.0
[EXP] 1027: [success_rate]: True, [output]: def solution():
    package1 = 2

    package1_cost = 3

    package2 = 4

    package2_cost = 6

    package3 = 8

    package3_cost = (package1_cost / package1) * package3

    result = package3_cost

    return result


 Executed result: 12.0
[EXP] 1028: [success_rate]: True, [output]: def solution():
    cost_bedroom_set = 3000

    sell_old_bedroom = 1000

    remaining_cost = cost_bedroom_set - sell_old_bedroom

    monthly_rate = 0.10

    monthly_payment = remaining_cost * monthly_rate

    result = monthly_payment

    return result


 Executed result: 200.0
[EXP] 1029: [success_rate]: False, [output]: def solution():
    red_balloons = 25

    burst_red_balloons = 0.4 * red_balloons

    red_balloons_left = red_balloons - burst_red_balloons

    yellow_balloons = 12

    burst_yellow_balloons = 0.5 * yellow_balloons

    yellow_balloons_left = yellow_balloons - burst_yellow_balloons

    blue_balloons = 8

    added_blue_balloons = 0.75 * blue_balloons

    total_balloons = red_balloons_left + yellow_balloons_left + added_blue_balloons

    result = total_balloons

    return result


 Executed result: 27.0
[EXP] 1030: [success_rate]: False, [output]: def solution():
    probability_substitute = 0.5

    probability_extension = 0.4

    probability_convinced = 0.2

    total_probability_to_turn_in_homework = 1 - (probability_substitute * (1 - probability_extension) * (1 - probability_convinced))

    result = total_probability_to_turn_in_homework * 100

    return result


 Executed result: 76.0
[EXP] 1031: [success_rate]: True, [output]: def solution():
    seats_initial = 6000

    seats_reserved = 950 + 300

    seats_available = seats_initial - seats_reserved

    tickets_per_graduate = seats_available // 950

    result = tickets_per_graduate

    return result


 Executed result: 5
[EXP] 1032: [success_rate]: True, [output]: def solution():
    large_jelly_beans = 75

    medium_jelly_beans = 2 * large_jelly_beans

    small_jelly_beans_per_medium = 3

    small_jelly_beans = medium_jelly_beans * small_jelly_beans_per_medium

    result = small_jelly_beans

    return result


 Executed result: 450
[EXP] 1033: [success_rate]: True, [output]: def solution():
    jury_pay_per_day = 15

    parking_fee_per_day = 3

    total_hours = 6 * 3

    total_pay = (jury_pay_per_day - parking_fee_per_day) * 3

    jury_pay_per_hour = total_pay / total_hours

    result = jury_pay_per_hour

    return result


 Executed result: 2.0
[EXP] 1034: [success_rate]: False, [output]: def solution():
    money_initial = 200

    book_cost = 3 * 16

    pencil_cost = 3 * 6

    total_cost = book_cost + pencil_cost

    money_left = money_initial - total_cost

    result = money_left

    return result


 Executed result: 134
[EXP] 1035: [success_rate]: False, [output]: def solution():
    driveway_width = 24

    distance_between_soda_bottles = 3

    time_per_soda = 5

    total_bottles = driveway_width // distance_between_soda_bottles

    total_time = total_bottles * time_per_soda

    result = total_time

    return result


 Executed result: 40
[EXP] 1036: [success_rate]: True, [output]: def solution():
    apples_per_box = 40

    number_of_boxes = 2

    apples_total = apples_per_box * number_of_boxes

    apples_per_pack = 8

    total_packs = apples_total // apples_per_pack

    result = total_packs

    return result


 Executed result: 10
[EXP] 1037: [success_rate]: True, [output]: def solution():
    parmesan_cost = 11

    mozzarella_cost = 6

    parmesan_pounds = 2

    mozzarella_pounds = 3

    total_cost = (parmesan_pounds * parmesan_cost) + (mozzarella_pounds * mozzarella_cost)

    cash_initial = 50

    cash_left = cash_initial - total_cost

    result = cash_left

    return result


 Executed result: 10
[EXP] 1038: [success_rate]: True, [output]: def solution():
    money_lost = 4 * 50000

    income_before_college = 25000

    degree_income_multiplier = 3

    income_after_degree = income_before_college * degree_income_multiplier

    time_to_earn = money_lost / (income_after_degree - income_before_college)

    result = time_to_earn

    return result


 Executed result: 4.0
[EXP] 1039: [success_rate]: False, [output]: def solution():
    bed_length = 6

    bed_width = 8

    fabric_length = bed_length + 2

    fabric_width = bed_width + 2

    fabric_area = fabric_length * fabric_width

    result = fabric_area

    return result


 Executed result: 80
[EXP] 1040: [success_rate]: False, [output]: def solution():
    letters_monday = 425

    letters_tuesday = (letters_monday // 5) * 17 + 17

    letters_wednesday = 2 * letters_tuesday + 5

    total_letters = letters_monday + letters_tuesday + letters_wednesday

    result = total_letters

    return result


 Executed result: 4816
[EXP] 1041: [success_rate]: True, [output]: def solution():
    chicken_salad_people = 10

    pasta_salad_people = 6

    chicken_salad_cost = chicken_salad_people * 6.50

    pasta_salad_cost = pasta_salad_people * 6

    total_cost = chicken_salad_cost + pasta_salad_cost

    result = total_cost

    return result


 Executed result: 101.0
[EXP] 1042: [success_rate]: False, [output]: def solution():
    money_lost_first_race = -5

    money_won_second_race = 2 * money_lost_first_race + 1

    money_lost_third_race = 1.5 * money_won_second_race

    total_money_lost = money_lost_first_race + money_won_second_race + money_lost_third_race

    average_money_lost = total_money_lost / 3

    result = average_money_lost

    return result


 Executed result: -9.166666666666666
[EXP] 1043: [success_rate]: True, [output]: def solution():
    south_america_countries = 26

    cities_per_country = 5

    people_per_city = 1000

    total_people_per_country = cities_per_country * people_per_city

    total_people = south_america_countries * total_people_per_country

    result = total_people

    return result


 Executed result: 130000
[EXP] 1044: [success_rate]: False, [output]: def solution():
    xavier_initial_height = 4

    xavier_growth = 3

    xavier_height_now = xavier_initial_height + (xavier_growth / 12)

    cole_initial_height = 50

    cole_growth = 2

    cole_height_now = cole_initial_height + cole_growth

    difference = cole_height_now - xavier_height_now

    result = difference

    return result


 Executed result: 47.75
[EXP] 1045: [success_rate]: False, [output]: def solution():
    total_amount = 1920

    second_person_share = total_amount / 3

    first_person_share = second_person_share - 80

    result = first_person_share

    return result


 Executed result: 560.0
[EXP] 1046: [success_rate]: False, [output]: def solution():
    painters_initial = 4

    work_per_day = 3 / 8

    num_of_days = 3 * 7

    total_hours = work_per_day * 24 * num_of_days

    hours_per_painter = total_hours / painters_initial

    result = hours_per_painter

    return result


 Executed result: 47.25
[EXP] 1047: [success_rate]: False, [output]: def solution():
    balls_total = 19

    balls_third_set = 0.5 * balls_total

    balls_second_set = balls_third_set * 2

    balls_first_set = balls_second_set + 4

    result = balls_first_set

    return result


 Executed result: 23.0
[EXP] 1048: [success_rate]: False, [output]: def solution():
    car_price_initial = 20000

    num_years = 2010 - 2007

    depreciation_rate = 0.21

    price_after_year = car_price_initial * (1 - depreciation_rate) ** num_years

    result = price_after_year

    return result


 Executed result: 9860.78
[EXP] 1049: [success_rate]: True, [output]: def solution():
    books_initial = 50

    english_books = books_initial // 2

    german_books = books_initial // 10

    spanish_books = books_initial - english_books - german_books

    result = spanish_books

    return result


 Executed result: 20
[EXP] 1050: [success_rate]: True, [output]: def solution():
    distance_total = 1955

    distance_driven = 325 * 4

    distance_left = distance_total - distance_driven

    result = distance_left

    return result


 Executed result: 655
[EXP] 1051: [success_rate]: True, [output]: def solution():
    cups_per_day = 8

    days = 30

    cups_in_gallon = 16

    cups_total = cups_per_day * days

    gallons_total = cups_total / cups_in_gallon

    result = gallons_total

    return result


 Executed result: 15.0
[EXP] 1052: [success_rate]: False, [output]: def solution():
    people_initial = 120

    people_boarded_first = 20

    people_boarded_second = 50

    people_departed_second = 2 * 50

    people_total_second = people_initial + people_boarded_first + people_boarded_second - people_departed_second

    people_departed_third = 80

    people_total_third = people_total_second - people_departed_third

    result = people_total_third

    return result


 Executed result: 10
[EXP] 1053: [success_rate]: True, [output]: def solution():
    top_cost = 10

    shorts_cost = top_cost + 5

    shoes_cost = 48 / 2

    socks_cost = 8 - 2

    total_cost = top_cost + shorts_cost + shoes_cost + socks_cost

    result = total_cost

    return result


 Executed result: 55.0
[EXP] 1054: [success_rate]: True, [output]: def solution():
    area = 200

    tile_cost = 12

    tile_length = 1

    num_tiles = area / (tile_length ** 2)

    total_cost = num_tiles * tile_cost

    result = total_cost

    return result


 Executed result: 2400.0
[EXP] 1055: [success_rate]: True, [output]: def solution():
    normal_cost = 120

    increase = 0.6

    cost_with_increase = normal_cost * (1 + increase)

    cost_per_year = cost_with_increase * 12

    result = cost_per_year

    return result


 Executed result: 2304.0
[EXP] 1056: [success_rate]: True, [output]: def solution():
    twin_beds = 4

    king_bed = 1

    twin_sets_per_load = 2

    king_sets_per_load = 1

    loads_per_week = (twin_beds // twin_sets_per_load) + (king_bed // king_sets_per_load)

    loads_per_year = loads_per_week * 52

    result = loads_per_year

    return result


 Executed result: 156
[EXP] 1057: [success_rate]: True, [output]: def solution():
    movies_per_saturday = 4

    movies_per_sunday = movies_per_saturday / 2

    total_movies_per_week = movies_per_saturday + movies_per_sunday

    total_movies_in_four_weeks = total_movies_per_week * 4

    result = total_movies_in_four_weeks

    return result


 Executed result: 24.0
[EXP] 1058: [success_rate]: True, [output]: def solution():
    stickers_initial = 100

    stickers_collected_last_year = 50

    stickers_collected_this_year = 50 * 2

    stickers_collected_total = stickers_collected_last_year + stickers_collected_this_year

    stickers_total = stickers_initial + stickers_collected_total

    result = stickers_total

    return result


 Executed result: 250
[EXP] 1059: [success_rate]: False, [output]: def solution():
    grams_of_food = 720

    grams_per_day = 60 * 2

    days = grams_of_food // grams_per_day

    result = days

    return result


 Executed result: 6
[EXP] 1060: [success_rate]: False, [output]: def solution():
    total_slices = 4 * 8

    slices_b Becky = 10

    slices_jake = Becky - 3

    slices_silvia = 2 * slices_jake

    total_slices_eaten = slices_b Becky + slices_jake + slices_silvia

    result = total_slices_eaten

    return result


 Executed result: Error: return error, fail to execute
[EXP] 1061: [success_rate]: False, [output]: def solution():
    meal_time = 98

    donovan_time = meal_time // 2

    betsy_time = donovan_time + 18

    result = betsy_time

    return result


 Executed result: 67
[EXP] 1062: [success_rate]: True, [output]: def solution():
    cast_cost = 200

    visit_cost = 0.5 * 300

    painkiller_cost = 30 * 4

    parking_cost = 2 * 6

    total_cost = cast_cost + visit_cost + painkiller_cost + parking_cost

    result = total_cost

    return result


 Executed result: 482.0
[EXP] 1063: [success_rate]: True, [output]: def solution():
    emails_per_day = 80

    percentage_not_responded = 20

    percentage_responded = 100 - percentage_not_responded

    emails_per_day_responded = emails_per_day * (percentage_responded / 100)

    emails_per_week = emails_per_day_responded * 5

    result = emails_per_week

    return result


 Executed result: 320.0
[EXP] 1064: [success_rate]: True, [output]: def solution():
    classes_monday = 32

    classes_tuesday = classes_monday * 2

    classes_wednesday = classes_monday * 3

    classes_thursday = 30

    classes_friday = 25

    total_classes = classes_monday + classes_tuesday + classes_wednesday + classes_thursday + classes_friday

    result = total_classes

    return result


 Executed result: 247
[EXP] 1065: [success_rate]: True, [output]: def solution():
    john_scores = [100, 100, 100, 80]

    total_score = sum(john_scores)

    average_score = total_score / 4

    result = average_score

    return result


 Executed result: 95.0
[EXP] 1066: [success_rate]: True, [output]: def solution():
    glee_club_pizzas = 20

    glee_club_pizzas_eaten = 70 / 100 * glee_club_pizzas

    glee_club_pizzas_left = glee_club_pizzas - glee_club_pizzas_eaten

    football_team_pizzas = 2 * glee_club_pizzas

    football_team_pizzas_eaten = 80 / 100 * football_team_pizzas

    football_team_pizzas_left = football_team_pizzas - football_team_pizzas_eaten

    pizzas_left = glee_club_pizzas_left + football_team_pizzas_left

    result = pizzas_left

    return result


 Executed result: 14.0
[EXP] 1067: [success_rate]: True, [output]: def solution():
    small_coupons = 700

    big_coupons = 2 * small_coupons

    total_coupons = small_coupons + big_coupons

    cost_small = small_coupons * 0.05

    cost_big = big_coupons * 0.15

    total_cost = cost_small + cost_big

    result = total_cost

    return result


 Executed result: 245.0
[EXP] 1068: [success_rate]: True, [output]: def solution():
    meatballs_per_sub = 4

    sub_sandwiches_ordered_initial = 10 - 3

    sub_sandwiches_eaten_by_mark = 4

    sub_sandwiches_left = sub_sandwiches_ordered_initial - sub_sandwiches_eaten_by_mark

    sub_sandwiches_ordered_additional = 3

    sub_sandwiches_total = sub_sandwiches_left + sub_sandwiches_ordered_additional

    meatballs_left = sub_sandwiches_total * meatballs_per_sub

    result = meatballs_left

    return result


 Executed result: 24
[EXP] 1069: [success_rate]: True, [output]: def solution():
    trucks_initial = 20

    tons_per_truck = 20

    tons_initial = trucks_initial * tons_per_truck

    quarter_trucks_failed = trucks_initial // 4

    tons_failed = quarter_trucks_failed * tons_per_truck

    tons_reached = tons_initial - tons_failed

    result = tons_reached

    return result


 Executed result: 300
[EXP] 1070: [success_rate]: True, [output]: def solution():
    butter_cost = 4

    butter_discount = 0.5

    total_butter = 6

    total_cost = 0

    for i in range(total_butter):

        if i % 2 == 0:

            cost = butter_cost

        else:

            cost = butter_cost * butter_discount

        total_cost += cost

    result = total_cost

    return result


 Executed result: 18.0
[EXP] 1071: [success_rate]: True, [output]: def solution():
    total_guests = 25 + 7 + 13

    total_guests_attending = total_guests - 4

    cost_per_guest = 6

    base_cost = 125

    total_cost = base_cost + (total_guests_attending - 20) * cost_per_guest

    result = total_cost

    return result


 Executed result: 251
[EXP] 1072: [success_rate]: False, [output]: def solution():
    maggie_money_initial = 4 * 60

    riza_money_initial = 3 * 60

    maggie_money_spent = maggie_money_initial / 4

    riza_money_spent = riza_money_initial / 3

    maggie_money_left = maggie_money_initial - maggie_money_spent

    riza_money_left = riza_money_initial - riza_money_spent

    total_money_left = maggie_money_left + riza_money_left

    result = total_money_left

    return result


 Executed result: 300.0
[EXP] 1073: [success_rate]: True, [output]: def solution():
    bananas_initial = 315

    days = 7

    monkey1_bananas_per_day = 10

    monkey2_bananas_per_day = monkey1_bananas_per_day + 4

    total_monkey1_bananas = monkey1_bananas_per_day * days

    total_monkey2_bananas = monkey2_bananas_per_day * days

    total_monkey3_bananas = bananas_initial - total_monkey1_bananas - total_monkey2_bananas

    monkey3_bananas_per_day = total_monkey3_bananas // days

    result = monkey3_bananas_per_day

    return result


 Executed result: 21
[EXP] 1074: [success_rate]: False, [output]: def solution():
edium_size = 500

pieces_placed = 500 + 500

result = pieces_placed

return result


 Executed result: 1000
[EXP] 1075: [success_rate]: False, [output]: def solution():
    roses = 15

    rose_cost = 15

    dollars = 5 * 5

    total_cost = roses * rose_cost

    total_paid = dollars

    change = total_paid - total_cost

    quarters = int(change * 4 / 25)

    result = quarters

    return result


 Executed result: -32
[EXP] 1076: [success_rate]: True, [output]: def solution():
    milkshakes_sold = 6

    milkshakes_price = 5.50

    milkshakes_revenue = milkshakes_sold * milkshakes_price

    burger_platters_sold = 9

    burger_platters_price = 11

    burger_platters_revenue = burger_platters_sold * burger_platters_price

    sodas_sold = 20

    sodas_price = 1.50

    sodas_revenue = sodas_sold * sodas_price

    total_revenue = milkshakes_revenue + burger_platters_revenue + sodas_revenue

    result = total_revenue

    return result


 Executed result: 162.0
[EXP] 1077: [success_rate]: False, [output]: def solution():
    time_train1_arrives = 0  # in minutes

    time_train1_stays = 20  # in minutes

    time_train2_arrives = time_train1_arrives + time_train1_stays + 30  # in minutes

    time_train2_stays = time_train1_stays / 4  # in minutes

    time_train3_arrives = time_train2_arrives + time_train2_stays  # in minutes

    time_train3_stays = 0  # in minutes

    time_train4_arrives = time_train3_arrives + 20  # in minutes

    time_waited = time_train4_arrives - time_train1_arrives

    result = time_waited

    return result


 Executed result: 75.0
[EXP] 1078: [success_rate]: True, [output]: def solution():
    toothpicks_needed = 200

    toothpicks_saved_per_week = 10

    weeks_saved_so_far = 12

    total_toothpicks_saved = toothpicks_saved_per_week * weeks_saved_so_far

    toothpicks_left_to_save = toothpicks_needed - total_toothpicks_saved

    weeks_left_to_save = toothpicks_left_to_save // toothpicks_saved_per_week

    result = weeks_left_to_save

    return result


 Executed result: 8
[EXP] 1079: [success_rate]: True, [output]: def solution():
    original_price = 2000

    price_after_discount = 0.75 * 2000

    price_sold = 1.2 * price_after_discount

    discount = (original_price - price_sold) / original_price * 100

    result = discount

    return result


 Executed result: 10.0
[EXP] 1080: [success_rate]: False, [output]: def solution():
    springs = 5

    jellyfish_per_second = 1

    jellyfish_per_hour = jellyfish_per_second * 60

    jellyfish_per_four_hours = jellyfish_per_hour * 4

    jellyfish_total = springs * jellyfish_per_four_hours

    result = jellyfish_total

    return result


 Executed result: 1200
[EXP] 1081: [success_rate]: True, [output]: def solution():
    binkie_score = 90

    frankie_score = binkie_score * 2 + 15

    result = frankie_score

    return result


 Executed result: 195
[EXP] 1082: [success_rate]: True, [output]: def solution():
    distance_to_store = 4

    distance_back_home = distance_to_store

    distance_total = distance_to_store + distance_back_home

    time_to_store = distance_to_store / 4

    time_back_home = distance_back_home / 4

    time_total = time_to_store + time_back_home

    result = time_total

    return result


 Executed result: 2.0
[EXP] 1083: [success_rate]: True, [output]: def solution():
    bananas_per_bunch = 4

    bunches_bought = 10

    total_bananas = bananas_per_bunch * bunches_bought

    individual_price = 0.8

    bunch_price = 3.0

    individual_cost = total_bananas * individual_price

    bunch_cost = bunches_bought * bunch_price

    savings = individual_cost - bunch_cost

    result = savings

    return result


 Executed result: 2.0
[EXP] 1084: [success_rate]: False, [output]: def solution():
    total_fence = 100

    fence_for_harry = 60

    fence_for_sam = fence_for_harry - 60

    fence_left_over = total_fence - fence_for_harry - fence_for_sam

    result = fence_left_over

    return result


 Executed result: 40
[EXP] 1085: [success_rate]: False, [output]: def solution():
    inches_per_year = 8

    years = 13

    total_inches = inches_per_year * years

    result = total_inches

    return result


 Executed result: 104
[EXP] 1086: [success_rate]: True, [output]: def solution():
    total_bikes = 300

    trekking_bikes = total_bikes / 2

    bmx_bikes = 0.15 * total_bikes

    mtb_bikes = total_bikes - trekking_bikes - bmx_bikes

    mtb_price = 500

    bmx_price = mtb_price / 2

    trekking_price = 450

    mtb_income = mtb_bikes * mtb_price

    bmx_income = bmx_bikes * bmx_price

    trekking_income = trekking_bikes * trekking_price

    total_income = mtb_income + bmx_income + trekking_income

    result = total_income

    return result


 Executed result: 131250.0
[EXP] 1087: [success_rate]: False, [output]: def solution():
    bales_per_hour_farmer = 5

    bales_per_hour_truck = 3

    hours_worked = 6

    total_bales_made = bales_per_hour_farmer * hours_worked + bales_per_hour_truck * hours_worked

    total_bales = total_bales_made

    result = total_bales

    return result


 Executed result: 48
[EXP] 1088: [success_rate]: False, [output]: def solution():
    minutes_per_period = 40

    normal_minutes_per_day = 6 * minutes_per_period

    extra_minutes_per_day = 2 * minutes_per_period

    total_minutes_per_day = normal_minutes_per_day + extra_minutes_per_day

    minutes_per_week = total_minutes_per_day * 5

    minutes_per_weekend = minutes_per_week * (1/16)

    total_minutes_per_week = minutes_per_week + minutes_per_weekend

    hours_per_week = total_minutes_per_week / 60

    result = hours_per_week

    return result


 Executed result: 28.333333333333332
[EXP] 1089: [success_rate]: True, [output]: def solution():
    initial_height = 3 * 24

    height_after_first_bounce = initial_height * 2 / 3

    height_after_second_bounce = height_after_first_bounce * 2 / 3

    result = height_after_second_bounce

    return result


 Executed result: 32.0
[EXP] 1090: [success_rate]: True, [output]: def solution():
    child1_height = 6 * 12  # convert feet to inches

    child2_height = child1_height + 2

    child3_height = child2_height - 5

    child4_height = child3_height + 3

    result = child4_height

    return result


 Executed result: 72
[EXP] 1091: [success_rate]: True, [output]: def solution():
    apples_total = 2000

    apples_per_bag = 10

    bags = apples_total // apples_per_bag

    money_per_bag = 5

    money_earned = bags * money_per_bag

    result = money_earned

    return result


 Executed result: 1000
[EXP] 1092: [success_rate]: True, [output]: def solution():
    meat_left_raptors = 270

    meat_left_before_raptors = meat_left_raptors * 2

    meat_left_before_trex = meat_left_before_raptors * 2

    result = meat_left_before_trex

    return result


 Executed result: 1080
[EXP] 1093: [success_rate]: True, [output]: def solution():
    north_wall = 10 * 8

    south_wall = 10 * 8

    east_wall = 5 * 8

    west_wall = 5 * 8

    total_square_feet = north_wall + south_wall + east_wall + west_wall

    gallons_of_paint = total_square_feet / 20

    cost_of_paint = gallons_of_paint * 12

    result = cost_of_paint

    return result


 Executed result: 144.0
[EXP] 1094: [success_rate]: False, [output]: def solution():
    sodas_initial = 12

    sodas_shaken = 3

    sodas_taken_by_ellen = 1

    sodas_taken_by_brother = 1

    sodas_taken_by_friend = 2

    sodas_left = sodas_initial - sodas_taken_by_ellen - sodas_taken_by_brother - sodas_taken_by_friend

    sodas_left_shaken = sodas_shaken

    sodas_left_unshaken = sodas_initial - sodas_taken_by_ellen - sodas_taken_by_brother - sodas_taken_by_friend

    probability_shaken = (sodas_left_shaken / sodas_taken_by_friend) * 100

    result = probability_shaken

    return result


 Executed result: 150.0
[EXP] 1095: [success_rate]: True, [output]: def solution():
    speed_train1 = 60

    speed_train2 = speed_train1 / 2

    distance_covered_by_train1 = speed_train1 * 3

    distance_covered_by_train2 = speed_train2 * 3

    distance_between_trains = distance_covered_by_train1 + distance_covered_by_train2

    result = distance_between_trains

    return result


 Executed result: 270.0
[EXP] 1096: [success_rate]: False, [output]: def solution():
    days_in_march = 31

    days_helping = days_in_march - (0.20 * days_in_march)

    hours_per_day = 3

    people_per_hour = 2

    total_people_helped = people_per_hour * hours_per_day * days_helping

    result = total_people_helped

    return result


 Executed result: 148.8
[EXP] 1097: [success_rate]: True, [output]: def solution():
    cars = 20

    buses = 12

    people_per_car = 3

    people_per_bus = 35

    people_in_cars = cars * people_per_car

    people_in_buses = buses * people_per_bus

    total_people = people_in_cars + people_in_buses

    result = total_people

    return result


 Executed result: 480
[EXP] 1098: [success_rate]: True, [output]: def solution():
    age_of_mike = 24

    age_of_martha = age_of_mike - 4

    age_of_jeff = age_of_martha + 10

    result = age_of_jeff

    return result


 Executed result: 30
[EXP] 1099: [success_rate]: True, [output]: def solution():
    slide1_length = 300

    slide1_speed = 60

    slide2_length = 240

    slide2_speed = 80

    time1 = slide1_length / slide1_speed

    time2 = slide2_length / slide2_speed

    difference = time1 - time2

    result = difference

    return result


 Executed result: 2.0
[EXP] 1100: [success_rate]: True, [output]: def solution():
    lunch_minutes = 30

    break_minutes = 2 * 15

    total_minutes_per_day = lunch_minutes + break_minutes

    total_minutes_after_five_days = total_minutes_per_day * 5

    hours_after_five_days = total_minutes_after_five_days / 60

    result = hours_after_five_days

    return result


 Executed result: 5.0
[EXP] 1101: [success_rate]: True, [output]: def solution():
    total_miles = 52

    amber_miles = 8

    micah_miles = 3.5 * amber_miles

    ahito_miles = total_miles - amber_miles - micah_miles

    result = ahito_miles

    return result


 Executed result: 16.0
[EXP] 1102: [success_rate]: True, [output]: def solution():
    amount_initial = 85.00

    amount_returned = 15.00

    amount_spent = 0

    amount_spent += (20 - (20 * 0.2))

    amount_spent += (30 - (30 * 0.1))

    new_balance = amount_initial - amount_returned + amount_spent

    result = new_balance

    return result


 Executed result: 113.0
[EXP] 1103: [success_rate]: False, [output]: def solution():
    jellyfish_changed_color = 6

    large_jellyfish_color_change_rate = 1 / 3

    large_jellyfish_total = jellyfish_changed_color / large_jellyfish_color_change_rate

    large_jellyfish = large_jellyfish_total

    one_fifth_large_jellyfish = large_jellyfish_total / 5

    all_jellyfish = one_fifth_large_jellyfish * 5

    result = all_jellyfish

    return result


 Executed result: 18.0
[EXP] 1104: [success_rate]: True, [output]: def solution():
    chris_age = 4

    ben_age = chris_age * 2

    caroline_age = ben_age * 3

    result = caroline_age

    return result


 Executed result: 24
[EXP] 1105: [success_rate]: False, [output]: def solution():
    salary = 100000  # in dollars

    percentage_saved = 0.2  # 20%

    percentage_spent = 0.4  # 40%

    required_savings = salary * 20 * 12  # 20 years, 12 months in a year

    saved_each_month = salary * percentage_saved  # 20% of salary each month

    years_needed = required_savings / saved_each_month

    result = years_needed

    return result


 Executed result: 1200.0
[EXP] 1106: [success_rate]: True, [output]: def solution():
    ribbon_length = 100

    cuts_initial = 4

    cuts_final = 5

    cuts = cuts_initial * cuts_final

    length_each_cut = ribbon_length / cuts

    result = length_each_cut

    return result


 Executed result: 5.0
[EXP] 1107: [success_rate]: True, [output]: def solution():
    boys = 240

    total_students = boys / 0.4

    girls = total_students - boys

    result = girls

    return result


 Executed result: 360.0
[EXP] 1108: [success_rate]: True, [output]: def solution():
    pots = 19

    soil = 26

    total = pots + soil

    coupon = 7

    total_after_coupon = total - coupon

    result = total_after_coupon

    return result


 Executed result: 38
[EXP] 1109: [success_rate]: True, [output]: def solution():
    women_in_4_inch_heels = 3

    women_in_2_inch_heels = 3

    total_heels = women_in_4_inch_heels * 4 + women_in_2_inch_heels * 2

    result = total_heels / (women_in_4_inch_heels + women_in_2_inch_heels)

    return result


 Executed result: 3.0
[EXP] 1110: [success_rate]: False, [output]: def solution():
    miles_total = 9300

    miles_per_walk = 125

    number_of_walks = 2

    miles_walked_per_day = miles_total / number_of_walks

    miles_needed_per_day = miles_walked_per_day

    result = miles_needed_per_day - miles_per_walk

    return result


 Executed result: 4525.0
[EXP] 1111: [success_rate]: True, [output]: def solution():
    red_balls = 3

    blue_balls = 11

    green_balls = 25

    red_price = 9

    blue_price = 5

    green_price = 3

    total_revenue_red = red_balls * red_price

    total_revenue_blue = blue_balls * blue_price

    total_revenue_green = green_balls * green_price

    total_revenue = total_revenue_red + total_revenue_blue + total_revenue_green

    result = total_revenue

    return result


 Executed result: 157
[EXP] 1112: [success_rate]: True, [output]: def solution():
    apples_initial = 12

    peter_apples = apples_initial / 4

    paul_apples = apples_initial / 3

    james_apples = apples_initial - peter_apples - paul_apples

    result = james_apples

    return result


 Executed result: 5.0
[EXP] 1113: [success_rate]: True, [output]: def solution():
    temp_initial = 2

    temp_dropped = 8

    temp_increased = 3

    temp_morning = temp_initial - temp_dropped + temp_increased

    result = temp_morning

    return result


 Executed result: -3
[EXP] 1114: [success_rate]: True, [output]: def solution():
    money_initial = 21

    money_saved = 11

    money_spent_on_comic_book = 5

    money_spent_on_puzzle = 19

    money_spent = money_spent_on_comic_book + money_spent_on_puzzle

    money_left = money_initial + money_saved - money_spent

    result = money_left

    return result


 Executed result: 8
[EXP] 1115: [success_rate]: False, [output]: def solution():
    budget_initial = 16

    budget_spent = 4

    budget_left = budget_initial - budget_spent

    budget_left = 2

    money_per_book = budget_left / 2

    result = money_per_book

    return result


 Executed result: 1.0
[EXP] 1116: [success_rate]: True, [output]: def solution():
    students_last_year = 50

    increase_percentage = 20

    increase_amount = (students_last_year * increase_percentage) / 100

    students_this_year = students_last_year + increase_amount

    result = students_this_year

    return result


 Executed result: 60.0
[EXP] 1117: [success_rate]: False, [output]: def solution():
    light_blinks_per_minute = 255

    light_blinks_wanted = 459

    minutes_taken = light_blinks_wanted / light_blinks_per_minute

    result = minutes_taken

    return result


 Executed result: 1.8
[EXP] 1118: [success_rate]: True, [output]: def solution():
    male_guppies_initial = 4

    female_guppies_initial = 7

    male_goldfishes_initial = 3

    female_goldfishes_initial = 5

    male_guppies_bought = 2

    female_guppies_bought = 1

    male_goldfishes_bought = 2

    female_goldfishes_bought = 3

    total_male_guppies = male_guppies_initial + male_guppies_bought

    total_female_guppies = female_guppies_initial + female_guppies_bought

    total_male_goldfishes = male_goldfishes_initial + male_goldfishes_bought

    total_female_goldfishes = female_goldfishes_initial + female_goldfishes_bought

    total_males = total_male_guppies + total_male_goldfishes

    total_females = total_female_guppies + total_female_goldfishes

    difference = total_females - total_males

    result = difference

    return result


 Executed result: 5
[EXP] 1119: [success_rate]: True, [output]: def solution():
    amalia_time = 4

    megan_time = amalia_time + 2

    dior_time = amalia_time + 4

    total_time = amalia_time + megan_time + dior_time

    result = total_time

    return result


 Executed result: 18
[EXP] 1120: [success_rate]: False, [output]: def solution():
    trips_per_month = 2

    distance_per_trip = 2 * 70  # 2 hours * 70 mph

    distance_per_month = trips_per_month * distance_per_trip

    result = distance_per_month

    return result


 Executed result: 280
[EXP] 1121: [success_rate]: True, [output]: def solution():
    sofie_walks_per_day = 10

    sofie_walks_in_seven_days = sofie_walks_per_day * 7

    brian_walks_per_day = sofie_walks_in_seven_days / 2

    result = brian_walks_per_day

    return result


 Executed result: 35.0
[EXP] 1122: [success_rate]: False, [output]: def solution():
    total_toys_required = 400

    toys_completed_by_hour = (2 * 6 + 2 * 4) * 10

    toys_left = total_toys_required - toys_completed_by_hour

    toys_per_hour_fifth_worker = toys_left / 10

    result = toys_per_hour_fifth_worker

    return result


 Executed result: 20.0
[EXP] 1123: [success_rate]: True, [output]: def solution():
    Korys_dog_weight = 60

    Elijah_dog1_weight = Korys_dog_weight / 4

    Elijah_dog2_weight = Korys_dog_weight / 2

    Elijah_dogs_total_weight = Elijah_dog1_weight + Elijah_dog2_weight

    total_weight = Korys_dog_weight + Elijah_dogs_total_weight

    result = total_weight

    return result


 Executed result: 105.0
[EXP] 1124: [success_rate]: False, [output]: def solution():
    stickers_given_to_luis = 0.5

    stickers_used_by_luis = 0.5

    stickers_given_to_kris = stickers_given_to_luis * (1 - stickers_used_by_luis)

    stickers_kept_by_kris = 9

    stickers_given_to_rob = stickers_given_to_kris - stickers_kept_by_kris

    stickers_initial = stickers_kept_by_kris + stickers_given_to_rob + (stickers_given_to_kris / (1 - stickers_used_by_luis)) * stickers_used_by_luis

    result = stickers_initial

    return result


 Executed result: 0.5
[EXP] 1125: [success_rate]: True, [output]: def solution():
    large_bags = 3

    large_bags_weight = 10

    total_ounces = large_bags * large_bags_weight

    total_mms = total_ounces * 30

    small_bags_per_bag = 10

    total_small_bags = total_mms // small_bags_per_bag

    result = total_small_bags

    return result


 Executed result: 90
[EXP] 1126: [success_rate]: True, [output]: def solution():
    distance_albatross_fly = 400

    circumference_earth = 40000

    distance_half_around_earth = circumference_earth / 2

    days_to_fly_half_around_earth = distance_half_around_earth / distance_albatross_fly

    result = days_to_fly_half_around_earth

    return result


 Executed result: 50.0
[EXP] 1127: [success_rate]: True, [output]: def solution():
    average_speed = 120

    second_fastest_speed = average_speed * 5

    fastest_speed = second_fastest_speed * 1.25

    result = fastest_speed

    return result


 Executed result: 750.0
[EXP] 1128: [success_rate]: False, [output]: def solution():
    liam_age_now = 16

    liam_age_two_years_ago = liam_age_now - 2

    liam_age_two_years_ago_twice = liam_age_two_years_ago * 2

    vince_age_two_years_ago = liam_age_two_years_ago_twice

    vince_age_now = vince_age_two_years_ago + 2

    result = vince_age_now

    return result


 Executed result: 30
[EXP] 1129: [success_rate]: False, [output]: def solution():
    total_eggs = 56

    arnold_eggs = total_eggs / 2

    camden_eggs = 30

    sarah_eggs = camden_eggs - 12

    camden_than_arnold = camden_eggs - arnold_eggs

    result = camden_than_arnold

    return result


 Executed result: 2.0
[EXP] 1130: [success_rate]: True, [output]: def solution():
    crayons = 200

    crayons_per_box = 8

    boxes = crayons // crayons_per_box

    crayons_left = crayons % crayons_per_box

    total_weight_crayons = crayons

    total_weight_boxes = boxes

    total_weight_crayons_ounces = total_weight_crayons * 1

    total_weight_boxes_ounces = total_weight_boxes * 8

    total_weight_ounces = total_weight_crayons_ounces + total_weight_boxes_ounces

    total_weight_pounds = total_weight_ounces // 16

    result = total_weight_pounds

    return result


 Executed result: 25
[EXP] 1131: [success_rate]: True, [output]: def solution():
    height = 80

    usable_height = height * 0.8

    usable_logs = usable_height / 4

    planks_per_log = 5

    planks_total = usable_logs * planks_per_log

    price_per_plank = 1.2

    total_price = planks_total * price_per_plank

    result = total_price

    return result


 Executed result: 96.0
[EXP] 1132: [success_rate]: True, [output]: def solution():
    valerie_salary = 5000

    brother_salary = 2 * valerie_salary

    mother_salary = 2 * (valerie_salary + brother_salary)

    total_salary = valerie_salary + brother_salary + mother_salary

    result = total_salary

    return result


 Executed result: 45000
[EXP] 1133: [success_rate]: False, [output]: def solution():
    beach_walk = 2

    sidewalk_walk = 1

    total_walk = beach_walk + sidewalk_walk

    beach_time = 40

    sidewalk_time = beach_time * 2

    total_time = beach_time + sidewalk_time

    result = total_time

    return result


 Executed result: 120
[EXP] 1134: [success_rate]: True, [output]: def solution():
    money_saved_per_week = 4

    weeks_saved_already = 8

    money_saved_already = money_saved_per_week * weeks_saved_already

    total_money_needed = 60

    money_left_to_save = total_money_needed - money_saved_already

    money_per_week_needed = money_left_to_save

    weeks_left_to_save = money_left_to_save / money_saved_per_week

    result = weeks_left_to_save

    return result


 Executed result: 7.0
[EXP] 1135: [success_rate]: True, [output]: def solution():
    tree1_blue_birds = 7

    tree2_blue_birds = 7

    tree3_blue_birds = 7

    tree4_blue_birds = 4

    tree5_blue_birds = 4

    tree6_blue_birds = 3

    total_blue_birds = tree1_blue_birds + tree2_blue_birds + tree3_blue_birds + tree4_blue_birds + tree5_blue_birds + tree6_blue_birds

    result = total_blue_birds

    return result


 Executed result: 32
[EXP] 1136: [success_rate]: False, [output]: def solution():
    marbles_initial = 0

    marbles_received = 2 * 12

    marbles_total = marbles_initial + marbles_received

    marbles_lost = 10

    marbles_left = marbles_total - marbles_lost

    result = marbles_left

    return result


 Executed result: 14
[EXP] 1137: [success_rate]: False, [output]: def solution():
    mug_two_temperature = 33

    water_taken_out = 4

    water_taken_in = 1

    current_temperature = mug_two_temperature - water_taken_out + water_taken_in

    degrees_required = 40

    result = current_temperature

    return result


 Executed result: 30
[EXP] 1138: [success_rate]: True, [output]: def solution():
    cows_initial = 50

    chickens_initial = 20

    cows_per_day = 20

    chickens_per_day = 10

    days = 3 * 7

    cows_added = cows_per_day * days

    chickens_added = chickens_per_day * days

    cows_total = cows_initial + cows_added

    chickens_total = chickens_initial + chickens_added

    result = cows_total + chickens_total

    return result


 Executed result: 700
[EXP] 1139: [success_rate]: True, [output]: def solution():
    cost_per_pack = 10

    bagels_per_pack = 9

    total_cost = cost_per_pack * 4

    discount = total_cost * 0.1

    total_cost_after_discount = total_cost - discount

    total_bagels = bagels_per_pack * 4

    cost_per_bagel = total_cost_after_discount / total_bagels

    result = cost_per_bagel

    return result


 Executed result: 1.0
[EXP] 1140: [success_rate]: True, [output]: def solution():
    scoops_eaten = 23 - 5

    potatoes_per_scoop = 6 - 3

    scoops_per_scoop = 3 - 1

    potatoes_eaten = scoops_eaten * (potatoes_per_scoop / scoops_per_scoop)

    result = potatoes_eaten

    return result


 Executed result: 27.0
[EXP] 1141: [success_rate]: True, [output]: def solution():
    eggs_per_day_initial = 3

    days_initial = 30

    eggs_eaten_initial = eggs_per_day_initial * days_initial

    eggs_per_day_later = 5

    days_later = 30

    eggs_eaten_later = eggs_per_day_later * days_later

    total_eggs_eaten = eggs_eaten_initial + eggs_eaten_later

    eggs_per_dozen = 12

    dozen_eggs_needed = total_eggs_eaten // eggs_per_dozen

    result = dozen_eggs_needed

    return result


 Executed result: 20
[EXP] 1142: [success_rate]: True, [output]: def solution():
    total_jellybeans = 60

    green_jellybeans = 17

    red_jellybeans = 2 * green_jellybeans

    blue_jellybeans = total_jellybeans - green_jellybeans - red_jellybeans

    result = blue_jellybeans

    return result


 Executed result: 9
[EXP] 1143: [success_rate]: True, [output]: def solution():
    trees = 5

    lemons_per_tree_per_year = 6

    years_in_a_decade = 10

    lemons_per_year = trees * lemons_per_tree_per_year

    lemons_in_a_decade = lemons_per_year * years_in_a_decade

    result = lemons_in_a_decade

    return result


 Executed result: 300
[EXP] 1144: [success_rate]: False, [output]: def solution():
    total_passengers = 84

    ratio_men_to_women = 5 / 9

    women_on_bus = total_passengers * ratio_men_to_women

    women_alight = 20

    women_remaining = women_on_bus - women_alight

    result = women_remaining

    return result


 Executed result: 26.66666666666667
[EXP] 1145: [success_rate]: False, [output]: def solution():
    sunflower_cost = 2

    bouquet_cost = 8

    sunflowers_per_bouquet = 12

    sunflowers_sold_per_day = (bouquet_cost * 56) / sunflowers_per_bouquet - (sunflower_cost * 26)

    days = 3

    total_sunflowers_sold = sunflowers_sold_per_day * days

    result = total_sunflowers_sold

    return result


 Executed result: -43.99999999999999
[EXP] 1146: [success_rate]: True, [output]: def solution():
    adam_dollars = 100

    rocks = adam_dollars // 5

    unsold_rocks = rocks

    revenue = rocks * 0.6 * 7

    cost = rocks * 5

    loss = cost - revenue

    result = loss

    return result


 Executed result: 16.0
[EXP] 1147: [success_rate]: False, [output]: def solution():
    large_scenes = 45

    medium_scenes = 36

    small_scenes = 49

    large_per_day = 5

    medium_per_day = 6

    small_per_day = 7

    large_days = large_scenes // large_per_day

    medium_days = medium_scenes // medium_per_day

    small_days = small_scenes // small_per_day

    max_days = max(large_days, medium_days, small_days)

    result = max_days

    return result


 Executed result: 9
[EXP] 1148: [success_rate]: True, [output]: def solution():
    total_eggs = 3 * 12

    children = 4

    eggs_per_child = total_eggs // children

    result = eggs_per_child

    return result


 Executed result: 9
[EXP] 1149: [success_rate]: True, [output]: def solution():
    fish_initial = 3

    fish_food_per_day = 1

    days_in_may = 31

    food_per_fish_per_day = fish_food_per_day

    total_food_per_day = fish_initial * food_per_fish_per_day

    total_food_per_month = total_food_per_day * days_in_may

    result = total_food_per_month

    return result


 Executed result: 93
[EXP] 1150: [success_rate]: True, [output]: def solution():
    roses_initial = 30

    roses_given = 24

    roses_bought = 15

    roses_left = roses_initial - roses_given

    roses_after_bought = roses_left + roses_bought

    result = roses_after_bought

    return result


 Executed result: 21
[EXP] 1151: [success_rate]: True, [output]: def solution():
    miles_initial = 110

    hours_initial = 2

    miles_additional = 140

    hours_additional = 3

    total_miles = miles_initial + miles_additional

    total_hours = hours_initial + hours_additional

    average_speed = total_miles / total_hours

    result = average_speed

    return result


 Executed result: 50.0
[EXP] 1152: [success_rate]: True, [output]: def solution():
    first_ticket_win_chance = 0.20

    second_ticket_win_chance = first_ticket_win_chance * 3

    both_tickets_win_chance = first_ticket_win_chance * second_ticket_win_chance

    result = both_tickets_win_chance * 100

    return result


 Executed result: 12.000000000000002
[EXP] 1153: [success_rate]: False, [output]: def solution():
    jim_seashells = 27

    carrey_seashells = jim_seashells - 5

    carlos_seashells = carrey_seashells * 2

    total_seashells = jim_seashells + carrey_seashells + carlos_seashells

    seashells_per_person = total_seashells / 3

    result = seashells_per_person

    return result


 Executed result: 31.0
[EXP] 1154: [success_rate]: True, [output]: def solution():
    carrots_per_weekday = 4

    weekdays = 5

    carrots_per_weekend = 5

    num_weekend_days = 2

    total_weekdays_carrots = carrots_per_weekday * weekdays

    total_weekend_carrots = carrots_per_weekend * num_weekend_days

    total_carrots = total_weekdays_carrots + total_weekend_carrots

    result = total_carrots

    return result


 Executed result: 30
[EXP] 1155: [success_rate]: False, [output]: def solution():
    song_1_length = 5

    song_2_length_fraction = 0.6

    song_2_length = song_1_length * song_2_length_fraction

    total_length = song_1_length + song_2_length

    result = total_length

    return result


 Executed result: 8.0
[EXP] 1156: [success_rate]: True, [output]: def solution():
    profit_per_device = 2 * 20 - 20

    devices_bought_monday = 2

    devices_bought_tuesday = 4

    total_devices_bought = devices_bought_monday + devices_bought_tuesday

    total_profit = profit_per_device * total_devices_bought

    result = total_profit

    return result


 Executed result: 120
[EXP] 1157: [success_rate]: True, [output]: def solution():
    isabel_height = 7

    ned_height = isabel_height - 2

    carl_height = ned_height + 1

    carl_cane_length = carl_height / 2

    result = carl_cane_length

    return result


 Executed result: 3.0
[EXP] 1158: [success_rate]: False, [output]: def solution():
    juice_per_person = 0.20    

    daily_energy_demand_per_person = 1

    daily_energy_demand = daily_energy_demand_per_person * 2300

    juice_required_per_person = daily_energy_demand / juice_per_person

    total_juice_required = juice_required_per_person * 2300

    juice_produced_per_day = 4200

    juice_to_produce = total_juice_required - juice_produced_per_day

    result = juice_to_produce

    return result


 Executed result: 26445800.0
[EXP] 1159: [success_rate]: True, [output]: def solution():
    total_octuplets = 8

    purple_wearers = 3/4 * total_octuplets

    blue_wearers = 1/4 * total_octuplets

    total_bow_wearers = blue_wearers + 1/3 * purple_wearers

    purple_bow_wearers = 1/3 * purple_wearers

    purple_bow_percentage = (purple_bow_wearers / total_bow_wearers) * 100

    result = purple_bow_percentage

    return result


 Executed result: 50.0
[EXP] 1160: [success_rate]: True, [output]: def solution():
    reports_received_last_week = 5168

    reports_received_monday_tuesday = 1907

    reports_received_thursday_friday = 2136

    reports_received_wednesday = reports_received_last_week - reports_received_monday_tuesday - reports_received_thursday_friday

    result = reports_received_wednesday

    return result


 Executed result: 1125
[EXP] 1161: [success_rate]: False, [output]: def solution():
    land_initial = 80

    half_sold = land_initial / 2

    first_sale_price = 50

    first_sale = half_sold * first_sale_price

    remaining_land = land_initial - half_sold

    quarter_sold = remaining_land / 4

    second_sale_price = 30

    second_sale = quarter_sold * second_sale_price

    remaining_land = remaining_land - quarter_sold

    remaining_sale_price = 3

    remaining_sale = remaining_land * remaining_sale_price

    total_sales = first_sale + second_sale + remaining_sale

    result = total_sales

    return result


 Executed result: 2390.0
[EXP] 1162: [success_rate]: True, [output]: def solution():
    age_haley = 26

    age_geb = (age_haley / 2) - 10

    result = age_geb

    return result


 Executed result: 3.0
[EXP] 1163: [success_rate]: True, [output]: def solution():
    face_masks_per_outing = 2

    outings_per_day = 3

    face_masks_per_day = face_masks_per_outing * outings_per_day

    face_masks_per_2_days = face_masks_per_day * 2

    result = face_masks_per_2_days

    return result


 Executed result: 12
[EXP] 1164: [success_rate]: True, [output]: def solution():
    eggs_hidden = 3 * 12

    eggs_found_lamar = 5

    eggs_found_stacy = eggs_found_lamar * 2

    eggs_found_charlie = eggs_found_stacy - 2

    eggs_found_mei = eggs_found_charlie // 2

    eggs_left = eggs_hidden - (eggs_found_lamar + eggs_found_stacy + eggs_found_charlie + eggs_found_mei)

    result = eggs_left

    return result


 Executed result: 9
[EXP] 1165: [success_rate]: True, [output]: def solution():
    apartments_complex_1 = 200

    apartments_complex_2 = 200

    apartments_complex_3 = apartments_complex_1 + apartments_complex_2 + (0.6 * (apartments_complex_1 + apartments_complex_2))

    collections_per_week = 3

    payment_per_collection = 0.40

    total_collections_per_week = apartments_complex_1 * collections_per_week + apartments_complex_2 * collections_per_week + apartments_complex_3 * collections_per_week

    total_payment_per_week = total_collections_per_week * payment_per_collection

    result = total_payment_per_week

    return result


 Executed result: 1248.0
[EXP] 1166: [success_rate]: False, [output]: def solution():
    initial_fruits = 50

    year_6_fruits = initial_fruits * 3

    year_7_fruits = initial_fruits * 7

    year_8_fruits = 200 - initial_fruits

    year_10_fruits = initial_fruits * 20

    total_fruits = initial_fruits + year_6_fruits + year_7_fruits + year_8_fruits

    total_fruits += year_10_fruits

    result = total_fruits

    return result


 Executed result: 1700
[EXP] 1167: [success_rate]: True, [output]: def solution():
    jack_money_initial = 100

    sophia_money = 100

    sophia_gift = sophia_money / 5

    jack_money_after = jack_money_initial + sophia_gift

    result = jack_money_after

    return result


 Executed result: 120.0
[EXP] 1168: [success_rate]: False, [output]: def solution():
    yellow_rope_length = x

    blue_rope_length = yellow_rope_length - 7

    red_rope_length = blue_rope_length * 4

    total_length = yellow_rope_length + blue_rope_length + red_rope_length

    result = red_rope_length

    return result


 Executed result: Error: return error, fail to execute
[EXP] 1169: [success_rate]: True, [output]: def solution():
    ronnie_money = 5

    rissa_money = ronnie_money * 3

    ronnie_gave = ronnie_money / 2

    rissa_gave = rissa_money / 2

    rissa_left = (rissa_money - rissa_gave) / (rissa_money / 5)

    ronnie_left = ronnie_money - ronnie_gave

    result = ronnie_left

    return result


 Executed result: 2.5
[EXP] 1170: [success_rate]: True, [output]: def solution():
    total_paint = 12

    yellow_paint = total_paint / 2

    non_yellow_paint = total_paint - yellow_paint

    equal_parts = non_yellow_paint / 3

    red_paint = equal_parts

    result = red_paint

    return result


 Executed result: 2.0
[EXP] 1171: [success_rate]: True, [output]: def solution():
    bedrooms = 4

    bedroom_size = 20 * 12

    living_room_area = bedroom_size * 5

    other_area = 1000

    total_area = bedroom_size * bedrooms + living_room_area + other_area

    result = total_area

    return result


 Executed result: 3160
[EXP] 1172: [success_rate]: True, [output]: def solution():
    clouds_monday = 3

    clouds_tuesday = 2 * clouds_monday

    clouds_wednesday = 2 * clouds_tuesday

    clouds_thursday = 2 * clouds_wednesday

    clouds_friday = 2 * clouds_thursday

    total_clouds = clouds_monday + clouds_tuesday + clouds_wednesday + clouds_thursday + clouds_friday

    result = total_clouds

    return result


 Executed result: 93
[EXP] 1173: [success_rate]: True, [output]: def solution():
    cost_per_box = 12

    normal_pods = 100

    new_pods = normal_pods + (normal_pods * 20 / 100)

    cost_per_cycle = cost_per_box / new_pods

    cycles_per_dollar = 1 / cost_per_cycle

    result = cycles_per_dollar

    return result


 Executed result: 10.0
[EXP] 1174: [success_rate]: True, [output]: def solution():
    cash_initial = 1000

    bills_lost = 10

    bills_left = cash_initial // 20 - bills_lost

    bills_left_after_bill = bills_left // 2

    cash_after_bill = bills_left_after_bill * 20

    cash_triple = cash_after_bill * 3

    bills_left_after_triple = cash_triple // 5

    result = bills_left_after_triple

    return result


 Executed result: 240
[EXP] 1175: [success_rate]: False, [output]: def solution():
    goals_team_a_half_one = 4

    goals_team_b_half_one = goals_team_a_half_one - 2

    goals_team_a_half_two = goals_team_b_half_one * 1/4

    goals_team_b_half_two = goals_team_b_half_one * 4

    goals_team_a_total = goals_team_a_half_one + goals_team_a_half_two

    goals_team_b_total = goals_team_b_half_one + goals_team_b_half_two

    total_goals = goals_team_a_total + goals_team_b_total

    result = total_goals

    return result


 Executed result: 14.5
[EXP] 1176: [success_rate]: False, [output]: def solution():
    chalk_initial = 5

    chalk_usage_1 = 0.45 * chalk_initial

    chalk_left = chalk_initial - chalk_usage_1

    while True:

        chalk_usage_2 = 0.2 * chalk_left

        chalk_left = chalk_left - chalk_usage_2

        result += 1

        if chalk_left < 2:

            break

    return result


 Executed result: Error: return error, fail to execute
[EXP] 1177: [success_rate]: True, [output]: def solution():
    boys = 12

    girls = 12

    boys_on_varsity = boys // 4

    girls_on_varsity = girls // 3

    total_on_varsity = boys_on_varsity + girls_on_varsity

    total_students = boys + girls

    students_not_on_varsity = total_students - total_on_varsity

    result = students_not_on_varsity

    return result


 Executed result: 17
[EXP] 1178: [success_rate]: True, [output]: def solution():
    face_masks_mike = 5

    face_masks_johnny = 3 * face_masks_mike + 2

    result = face_masks_johnny

    return result


 Executed result: 17
[EXP] 1179: [success_rate]: False, [output]: def solution():
    teeth_initial = 30

    teeth_drilled = 4

    teeth_cap = 7

    total_fixed = teeth_drilled + teeth_cap

    percentage_fixed = (total_fixed/teeth_initial) * 100

    result = percentage_fixed

    return result


 Executed result: 36.666666666666664
[EXP] 1180: [success_rate]: True, [output]: def solution():
    gallons_sold = 4000

    cost_per_gallon = 3.5

    total_cost = gallons_sold * cost_per_gallon

    sour_milk_percentage = 2 / 5

    sour_milk_gallons = gallons_sold * sour_milk_percentage

    refund_amount = sour_milk_gallons * cost_per_gallon

    result = refund_amount

    return result


 Executed result: 5600.0
[EXP] 1181: [success_rate]: False, [output]: def solution():
    colin_age_in_25_years = 25

    wendy_age_now = colin_age_in_25_years * 3

    colin_age_now = wendy_age_now / 5 - 7

    result = colin_age_now

    return result


 Executed result: 8.0
[EXP] 1182: [success_rate]: True, [output]: def solution():
    total_money = 27000

    books_per_dollar = 100 / 500

    money_per_school = total_money / 3

    books_per_school = money_per_school * books_per_dollar

    result = books_per_school

    return result


 Executed result: 1800.0
[EXP] 1183: [success_rate]: False, [output]: def solution():
    apples_lost = 2

    apples_in_pocket_initial = 1

    apples_thrown_back_initial = 1

    apples_thrown_back_second_time = 6

    apples_in_pocket_final = apples_in_pocket_initial + apples_thrown_back_initial + apples_thrown_back_second_time

    result = apples_in_pocket_final

    return result


 Executed result: 8
[EXP] 1184: [success_rate]: True, [output]: def solution():
    coal_weight = 850

    bag_weight = 50

    cost_per_bag = 18

    total_bags = coal_weight // bag_weight

    leftover = coal_weight % bag_weight

    total_cost = total_bags * cost_per_bag

    if leftover != 0:

        total_cost += cost_per_bag

    result = total_cost

    return result


 Executed result: 306
[EXP] 1185: [success_rate]: False, [output]: def solution():
    cheese_slices = 12

    pepperoni_slices = 8

    friends = 6

    slices_consumed_cheese = friends * 6

    slices_consumed_pepperoni = friends * 4

    slices_needed_cheese = slices_consumed_cheese

    slices_needed_pepperoni = slices_consumed_pepperoni

    result = max(slices_needed_cheese // cheese_slices, slices_needed_pepperoni // pepperoni_slices) + 1

    return result


 Executed result: 4
[EXP] 1186: [success_rate]: True, [output]: def solution():
    monday = 3

    tuesday = 5

    wednesday = 3

    thursday = 5

    friday = 3

    miles_run = monday + tuesday + wednesday + thursday + friday

    result = miles_run

    return result


 Executed result: 19
[EXP] 1187: [success_rate]: False, [output]: def solution():
    snowballs_per_hour = 20

    snowballs_melted_per_15_minutes = 2

    new_snowballs_per_15_minutes = snowballs_per_hour / 4  # because there are 4 15 minutes intervals in an hour

    snowballs_melted = 0

        time += 1

    result = time * 15

    return result


 Executed result: Error: return error, fail to execute
[EXP] 1188: [success_rate]: False, [output]: def solution():
    age_of_john = 28

    age_of_jim_twenty_years_ago = age_of_john / 2

    age_of_jim = age_of_jim_twenty_years_ago + 20

    result = age_of_jim

    return result


 Executed result: 34.0
[EXP] 1189: [success_rate]: True, [output]: def solution():
    total_slices = 8

    doxa_slices = 1

    sister_slices = doxa_slices + 1

    brother_slices = sister_slices + 1

    total_slices_eaten = doxa_slices + sister_slices + brother_slices

    result = total_slices_eaten

    return result


 Executed result: 6
[EXP] 1190: [success_rate]: False, [output]: def solution():
    bandages_initial = 0

    bandages_used_day1 = 38

    bandages_used_day2 = bandages_used_day1 - 10

    bandages_used_day3 = bandages_used_day1 - 10 + 25

    bandages_left = 78

    result = bandages_left + bandages_used_day3

    return result


 Executed result: 131
[EXP] 1191: [success_rate]: True, [output]: def solution():
    cost_color = 40

    initial_length = 10

    final_length = 8

    length_cut = initial_length - final_length

    cost_cut = length_cut * 30

    total_cost = cost_color + cost_cut

    result = total_cost

    return result


 Executed result: 100
[EXP] 1192: [success_rate]: True, [output]: def solution():
    hours_per_day = 7.5

    days_per_week = 6

    weeks_in_april = 4

    days_in_april = days_per_week * weeks_in_april

    total_hours = hours_per_day * days_in_april

    rate = 1.5

    total_salary = total_hours * rate

    attendance_bonus = 10

    total_payment = total_salary + attendance_bonus

    result = total_payment

    return result


 Executed result: 280.0
[EXP] 1193: [success_rate]: True, [output]: def solution():
    earnings_per_laundry = 3.00

    earnings_per_room = 1.50

    earnings_per_trash = 0.75

    earnings_per_dishwasher = 0.50

    laundry_earnings = earnings_per_laundry

    room_earnings = earnings_per_room

    trash_earnings = earnings_per_trash * 2

    dishwasher_earnings = earnings_per_dishwasher * 6

    total_earnings = laundry_earnings + room_earnings + trash_earnings + dishwasher_earnings

    result = total_earnings

    return result


 Executed result: 9.0
[EXP] 1194: [success_rate]: True, [output]: def solution():
    gallons_per_whale = 40

    gallons_per_shark = 3 * gallons_per_whale

    sharks = 10

    total_gallons = sharks * gallons_per_shark

    result = total_gallons

    return result


 Executed result: 1200
[EXP] 1195: [success_rate]: False, [output]: def solution():
    people entered_morning = 50

    people_entered_at_10 = 40

    people_entered_second_batch = people_entered_at_10 * 2

    people_entered_third_batch = people_entered_at_10 * 3

    total_people = entered_morning + people_entered_at_10 + people_entered_second_batch + people_entered_third_batch

    result = total_people

    return result


 Executed result: Error: return error, fail to execute
[EXP] 1196: [success_rate]: True, [output]: def solution():
    red_pens = 5

    black_pens = 2 * red_pens

    pens_per_pack = 5

    total_pens = (red_pens + black_pens) * pens_per_pack

    result = total_pens

    return result


 Executed result: 75
[EXP] 1197: [success_rate]: True, [output]: def solution():
    scotch_bottles = 10

    scotch_cost_per_bottle = 600 / scotch_bottles

    cognac_bottles = scotch_bottles * 2

    cognac_cost_per_bottle = scotch_cost_per_bottle * 1.5

    total_cost_scotch = scotch_bottles * scotch_cost_per_bottle

    total_cost_cognac = cognac_bottles * cognac_cost_per_bottle

    total_cost = total_cost_scotch + total_cost_cognac

    result = total_cost

    return result


 Executed result: 2400.0
[EXP] 1198: [success_rate]: False, [output]: def solution():
    white_oak_trees_first_day = 20

    lodgepole_pine_trees_first_day = 2 * white_oak_trees_first_day

    white_oak_trees_second_day = 10

    lodgepole_pine_trees_second_day = lodgepole_pine_trees_first_day + (lodgepole_pine_trees_first_day // 4)

    white_oak_trees = white_oak_trees_first_day + white_oak_trees_second_day

    lodgepole_pine_trees = lodgepole_pine_trees_first_day + lodgepole_pine_trees_second_day

    total_trees = white_oak_trees + lodgepole_pine_trees

    result = total_trees

    return result


 Executed result: 120
[EXP] 1199: [success_rate]: True, [output]: def solution():
    root_beer_initial = 24

    root_beer_drunk = 4

    root_beer_spilled = 7

    root_beer_taken = 5

    root_beer_left = root_beer_initial - root_beer_drunk - root_beer_spilled - root_beer_taken

    people_attending = 3

    root_beer_per_person = root_beer_left // people_attending

    result = root_beer_per_person

    return result


 Executed result: 2
[EXP] 1200: [success_rate]: False, [output]: def solution():
    mugs = 0

    expression_value = 40

    expression = 4 * mugs + 8

    result = mugs

        else:

    return result


 Executed result: 0
[EXP] 1201: [success_rate]: True, [output]: def solution():
    fish_initial = 66

    fish_with_red_stripes = fish_initial // 3

    fish_left = fish_initial - fish_with_red_stripes

    fish_with_blue_stripes = fish_left * 5 // 11

    result = fish_with_red_stripes + fish_with_blue_stripes

    return result


 Executed result: 42
[EXP] 1202: [success_rate]: False, [output]: def solution():
    palettes_initial = 2

    palette_colors = 4

    total_palette_colors = palettes_initial * palette_colors

    makeup_sets = 3

    makeup_set_colors = 6

    total_makeup_set_colors = makeup_sets * makeup_set_colors

    total_eyeshadow_colors = total_palette_colors + total_makeup_set_colors

    palette_stolen = 1

    total_eyeshadow_colors -= palette_stolen * palette_colors

    makeup_set_colors_used = total_makeup_set_colors / 2

    total_eyeshadow_colors -= makeup_set_colors_used

    result = total_eyeshadow_colors

    return result


 Executed result: 13.0
[EXP] 1203: [success_rate]: True, [output]: def solution():
    mattison_height = 60

    house_height = 7 * mattison_height

    first_floor_height = 3 * mattison_height

    second_floor_height = house_height - first_floor_height

    roof_height = second_floor_height

    result = roof_height

    return result


 Executed result: 240
[EXP] 1204: [success_rate]: True, [output]: def solution():
    total_shells = 700

    alpha_shells = int(total_shells * 0.4)

    remaining_shells = total_shells - alpha_shells

    finders_shells = int(remaining_shells * 0.6)

    gogetters_shells = remaining_shells - finders_shells

    result = gogetters_shells

    return result


 Executed result: 168
[EXP] 1205: [success_rate]: False, [output]: def solution():
    total_miles = 1 + 4 + 3

    total_dogs = 4

    total_average = 3

    miles_last_dog = total_miles - (total_dogs - 1) * total_average

    result = miles_last_dog

    return result


 Executed result: -1
[EXP] 1206: [success_rate]: False, [output]: def solution():
    house_price = 250000

    loan = 0.4 * house_price

    money_spent = 0.6 * loan

    money_left = loan - money_spent

    result = money_left

    return result


 Executed result: 40000.0
[EXP] 1207: [success_rate]: True, [output]: def solution():
    tuna1_weight = 56

    tuna2_weight = 46

    tuna3_weight = 26

    tuna_total_weight = tuna1_weight + tuna2_weight + tuna3_weight

    tuna_cost_per_kg = 0.5

    tuna_total_cost = tuna_total_weight * tuna_cost_per_kg

    result = tuna_total_cost

    return result


 Executed result: 64.0
[EXP] 1208: [success_rate]: True, [output]: def solution():
    magazines_cost = 72

    magazines_price = 11/8 * magazines_cost

    profit = magazines_price - magazines_cost

    result = profit

    return result


 Executed result: 27.0
[EXP] 1209: [success_rate]: True, [output]: def solution():
    water_removed_low = 1

    water_removed_medium = 2 * water_removed_low

    water_removed_high = 2 * water_removed_medium

    water_removed_low_3_days = water_removed_low * 3

    water_removed_medium_3_days = water_removed_medium * 3

    water_removed_high_5_days = water_removed_high * 5

    total_water_removed = water_removed_low_3_days + water_removed_medium_3_days + water_removed_high_5_days

    result = total_water_removed

    return result


 Executed result: 29
[EXP] 1210: [success_rate]: True, [output]: def solution():
    packs = 10

    balloons_per_pack = 30

    total_balloons = packs * balloons_per_pack

    balloons_left = 12

    balloons_thrown = total_balloons - balloons_left

    result = balloons_thrown

    return result


 Executed result: 288
[EXP] 1211: [success_rate]: True, [output]: def solution():
    first_medicine = 14

    second_medicine = 3 * first_medicine

    total_medicine = first_medicine + second_medicine

    total_doses = 8

    total_medicine_in_doses = total_medicine * total_doses

    result = total_medicine_in_doses

    return result


 Executed result: 448
[EXP] 1212: [success_rate]: True, [output]: def solution():
    ali_class_capacity = 120

    john_class1_capacity = ali_class_capacity / 8

    john_class2_capacity = ali_class_capacity / 8

    combined_capacity = ali_class_capacity + john_class1_capacity + john_class2_capacity

    result = combined_capacity

    return result


 Executed result: 150.0
[EXP] 1213: [success_rate]: True, [output]: def solution():
    amount_borrowed = 300

    interest = amount_borrowed * 0.02

    interest_amount = amount_borrowed + interest

    montly_payment = 25

    months = 11

    amount_paid = montly_payment * months

    remaining_amount = interest_amount - amount_paid

    result = remaining_amount

    return result


 Executed result: 31.0
[EXP] 1214: [success_rate]: True, [output]: def solution():
    children = 2

    diaper_changes_per_child = 5

    diaper_changes_per_child_per_day = children * diaper_changes_per_child

    wife_diaper_changes = diaper_changes_per_child_per_day / 2

    jordan_diaper_changes = diaper_changes_per_child_per_day - wife_diaper_changes

    result = jordan_diaper_changes

    return result


 Executed result: 5.0
[EXP] 1215: [success_rate]: False, [output]: def solution():
    base_area = 6 * 6

    volume_jar = base_area * 15

    volume_usable = volume_jar * (80 / 100)

    volume_per_jelly_bean = 0.15

    volume_required = volume_usable / volume_per_jelly_bean

    volume_required_red = volume_required * (30 / 100)

    actual_red_jelly_beans = 900

    absolute_error = abs(actual_red_jelly_beans - volume_required_red)

    relative_error = (absolute_error / actual_red_jelly_beans) * 100

    result = relative_error

    return result


 Executed result: 4.0
[EXP] 1216: [success_rate]: False, [output]: def solution():
    bus_capacity = 200

    initial_passengers = 20

    passengers_entered_first_stop = 40

    initial_passengers += passengers_entered_first_stop

    passengers_entered_second_stop = int(0.75 * passengers_entered_first_stop)

    initial_passengers += passengers_entered_second_stop

    passengers_entered_third_stop = initial_passengers * 2

    initial_passengers += passengers_entered_third_stop

    remaining_spaces = bus_capacity - initial_passengers

    result = remaining_spaces

    return result


 Executed result: -70
[EXP] 1217: [success_rate]: True, [output]: def solution():
    visits_per_year = 3

    cost_per_visit = 2

    years_visited = 5

    years_continued = 3

    total_cost_without_increase = cost_per_visit * visits_per_year * years_visited

    cost_per_visit_after_increase = cost_per_visit * (1 + 150/100)

    total_cost_with_increase = cost_per_visit_after_increase * visits_per_year * years_continued

    total_cost = total_cost_without_increase + total_cost_with_increase

    result = total_cost

    return result


 Executed result: 75.0
[EXP] 1218: [success_rate]: True, [output]: def solution():
    students_per_grade = 10

    total_students = 4 * students_per_grade

    groups_per_year = total_students // 8

    total_minutes = groups_per_year * 45

    result = total_minutes

    return result


 Executed result: 225
[EXP] 1219: [success_rate]: True, [output]: def solution():
    tables = 4

    table_cost = 20

    roof_frames = 2

    roof_frame_cost = 10

    total_cost_tables = tables * table_cost

    total_cost_roof_frames = roof_frames * roof_frame_cost

    total_cost = total_cost_tables + total_cost_roof_frames

    result = total_cost

    return result


 Executed result: 100
[EXP] 1220: [success_rate]: True, [output]: def solution():
    board_length = 40

    shorter_piece = board_length / 5

    longer_piece = shorter_piece * 4

    result = longer_piece

    return result


 Executed result: 32.0
[EXP] 1221: [success_rate]: True, [output]: def solution():
    meatballs_wanted = 80

    meatballs_per_pound = 16

    pounds_of_meat = meatballs_wanted / meatballs_per_pound

    seasoning_per_pound = 2

    total_seasoning = pounds_of_meat * seasoning_per_pound

    result = total_seasoning

    return result


 Executed result: 10.0
[EXP] 1222: [success_rate]: True, [output]: def solution():
    windows = 5

    window_width = 35

    total_window_width = windows * window_width

    fabric_needed = total_window_width * 2

    result = fabric_needed

    return result


 Executed result: 350
[EXP] 1223: [success_rate]: True, [output]: def solution():
    cost_per_minute_initial = 0.25

    cost_per_minute_after_16_minutes = 0.2

    minutes_initial = 16

    minutes_after_initial = 36

    minutes_cost_initial = minutes_initial * cost_per_minute_initial

    minutes_cost_after_initial = (minutes_after_initial - minutes_initial) * cost_per_minute_after_16_minutes

    total_cost = minutes_cost_initial + minutes_cost_after_initial

    result = total_cost

    return result


 Executed result: 8.0
[EXP] 1224: [success_rate]: True, [output]: def solution():
    rain_monday = 2

    rain_tuesday = 2 * rain_monday + 1

    result = rain_tuesday

    return result


 Executed result: 5
[EXP] 1225: [success_rate]: False, [output]: def solution():
    people = 5

    treats_per_person = 2

    total_treats = people * treats_per_person

    brownies = total_treats // 2

    cupcakes = (brownies + 2) // 3

    result = cupcakes

    return result


 Executed result: 2
[EXP] 1226: [success_rate]: True, [output]: def solution():
    manicure = 35

    pedicure = 40

    discount = (manicure + pedicure) * 0.2

    total_without_nail_art = manicure + pedicure - discount

    nail_art_per_nail = 3

    nail_art_total = 10 * nail_art_per_nail  # assuming 10 fingers

    total_with_nail_art = total_without_nail_art + nail_art_total

    result = total_with_nail_art

    return result


 Executed result: 90.0
[EXP] 1227: [success_rate]: True, [output]: def solution():
    magazine1_issues = 12

    magazine2_issues = 6

    magazine3_issues = magazine2_issues * 4

    total_issues = magazine1_issues * 3 + magazine2_issues + magazine3_issues

    result = total_issues

    return result


 Executed result: 66
[EXP] 1228: [success_rate]: True, [output]: def solution():
    samantha_paintings = 27

    shelley_paintings = samantha_paintings + 12

    kim_paintings = shelley_paintings - 8

    result = kim_paintings

    return result


 Executed result: 31
[EXP] 1229: [success_rate]: True, [output]: def solution():
    price_initial = 40

    increase_percent = 80

    increase_amount = price_initial * (increase_percent / 100)

    price_after_increasing = price_initial + increase_amount

    decrease_percent = 50

    decrease_amount = price_after_increasing * (decrease_percent / 100)

    price_after_decreasing = price_after_increasing - decrease_amount

    result = price_after_decreasing

    return result


 Executed result: 36.0
[EXP] 1230: [success_rate]: True, [output]: def solution():
    regular_lessons = 4

    standard_fee = 80

    regular_income = regular_lessons * standard_fee

    veteran_lessons = 2

    veteran_discount = 0.25

    veteran_rate = standard_fee * (1 - veteran_discount)

    veteran_income = veteran_lessons * veteran_rate

    total_income = regular_income + veteran_income

    result = total_income

    return result


 Executed result: 440.0
[EXP] 1231: [success_rate]: True, [output]: def solution():
    quiz_scores = [50, 80, 80, 60, 40, 90, 100, 70, 60]

    total_score = sum(quiz_scores)

    num_quizzes = len(quiz_scores)

    mean_score = total_score / num_quizzes

    result = mean_score

    return result


 Executed result: 70.0
[EXP] 1232: [success_rate]: True, [output]: def solution():
    pomelos_initial = 20

    pomelos_left = pomelos_initial / 4

    pomelos_given = pomelos_initial - pomelos_left

    result = pomelos_given

    return result


 Executed result: 15.0
[EXP] 1233: [success_rate]: True, [output]: def solution():
    apples_initial = 60

    apples_eaten = apples_initial * 2/5

    apples_after_eating = apples_initial - apples_eaten

    apples_given_to_sister = apples_after_eating * 25/100

    apples_left = apples_after_eating - apples_given_to_sister

    money_received = apples_left * 3

    result = money_received

    return result


 Executed result: 81.0
[EXP] 1234: [success_rate]: True, [output]: def solution():
    novels_last_year = 9

    novels_this_year = 4 * novels_last_year / 3

    result = novels_this_year

    return result


 Executed result: 12.0
[EXP] 1235: [success_rate]: False, [output]: def solution():
    speed = 50

    time = 3

    distance_traveled = speed * time

    total_distance = 6000

    percentage_covered = (distance_traveled / total_distance) * 100

    result = percentage_covered

    return result


 Executed result: 2.5
[EXP] 1236: [success_rate]: False, [output]: def solution():
    madeline_grapes = 6

    brother_grapes = 5 * madeline_grapes

    total_grapes_used = madeline_grapes + brother_grapes

    pies = 4

    grapes_per_pie = 12

    grapes_left = total_grapes_used - (pies * grapes_per_pie)

    result = grapes_left

    return result


 Executed result: -12
[EXP] 1237: [success_rate]: True, [output]: def solution():
    teachers_initial = 82

    teachers_sick = 13

    teachers_substitutes = 9

    teachers_at_school = teachers_initial - teachers_sick + teachers_substitutes

    result = teachers_at_school

    return result


 Executed result: 78
[EXP] 1238: [success_rate]: True, [output]: def solution():
    pasta_cost = 1.0

    cheddar_cheese_cost = 3.0

    gruyere_cheese_cost = cheddar_cheese_cost * 2

    total_cost_per_week = pasta_cost + cheddar_cheese_cost + gruyere_cheese_cost

    total_cost_per_year = total_cost_per_week * 52  # 52 weeks in a year

    result = total_cost_per_year

    return result


 Executed result: 520.0
[EXP] 1239: [success_rate]: False, [output]: def solution():
    classrooms = 80

    time_per_classroom = 15

    total_time = time_per_classroom * classrooms

    total_hours_in_a_day = 8

    total_minutes_in_a_day = total_hours_in_a_day * 60

    time_spent_per_day = total_time

    percentage = (time_spent_per_day / total_minutes_in_a_day) * 100

    result = percentage

    return result


 Executed result: 250.0
[EXP] 1240: [success_rate]: False, [output]: def solution():
    middle_books = 10 * 2

    bottom_books = middle_books * 2

            last_total_books -= bottom_books

        else:

        return result


 Executed result: Error: return error, fail to execute
[EXP] 1241: [success_rate]: False, [output]: def solution():
    eggs_per_dozen = 12

    dozen_eggs = 5

    dozen_cost = 2.40

    total_cost = dozen_cost * dozen_eggs

    total_eggs = eggs_per_dozen * dozen_eggs

    profit_per_eggs = 1 / 3

    profit = total_eggs * profit_per_eggs

    total_profit = total_cost - profit

    result = total_profit

    return result


 Executed result: -8.0
[EXP] 1242: [success_rate]: True, [output]: def solution():
    hats_initial = 100

    hats_red = hats_initial / 2

    hats_remaining = hats_initial - hats_red

    hats_blue = hats_remaining * 3 / 5

    hats_white = hats_remaining - hats_blue

    result = hats_white

    return result


 Executed result: 20.0
[EXP] 1243: [success_rate]: True, [output]: def solution():
    cost_per_bag = 18

    discount = 3

    cost_per_bag_after_discount = cost_per_bag - discount

    cost_per_stick = cost_per_bag_after_discount / 30

    cost_per_stick_in_cents = cost_per_stick * 100

    result = cost_per_stick_in_cents

    return result


 Executed result: 50.0
[EXP] 1244: [success_rate]: True, [output]: def solution():
    total_questions_test1 = 70

    correct_answers_test1 = 0.6 * total_questions_test1

    correct_answers_needed = 0.7 * (total_questions_test1 + 40)

    correct_answers_test2 = correct_answers_needed - correct_answers_test1

    result = correct_answers_test2

    return result


 Executed result: 35.0
[EXP] 1245: [success_rate]: False, [output]: def solution():
    strawberry_cubes = 0

    blueberry_cubes = 0

    total_cubes = 116

    strawberry_cubes = total_cubes - blueberry_cubes

    blueberry_cubes = strawberry_cubes * 5 - 4

    result = blueberry_cubes

    return result


 Executed result: 576
[EXP] 1246: [success_rate]: True, [output]: def solution():
    games_per_year = 40

    years = 4

    points_per_game = 21

    total_points = games_per_year * points_per_game * years

    result = total_points

    return result


 Executed result: 3360
[EXP] 1247: [success_rate]: True, [output]: def solution():
    marbles_initial = 10

    marbles_lost = marbles_initial / 2

    marbles_found = 3

    marbles_total = marbles_initial - marbles_lost + marbles_found

    bead_removed = 1

    marbles_left = marbles_total - bead_removed

    result = marbles_left

    return result


 Executed result: 7.0
[EXP] 1248: [success_rate]: True, [output]: def solution():
    cars_to_sell = 15

    customers_per_call = 1/25

    sales_per_customer = 1/2

    total_customers = cars_to_sell / sales_per_customer

    total_calls = total_customers / customers_per_call

    result = total_calls

    return result


 Executed result: 750.0
[EXP] 1249: [success_rate]: True, [output]: def solution():
    rooms = 8

    people = 4

    flashlights_per_person = 1

    flashlights_per_room = 2

    total_flashlights = people * flashlights_per_person + rooms * flashlights_per_room

    small_candles_per_room = 4

    medium_candles_per_room = 5

    small_rooms = rooms // 2

    medium_rooms = rooms - small_rooms

    total_small_candles = small_rooms * small_candles_per_room

    total_medium_candles = medium_rooms * medium_candles_per_room

    total_candles = total_small_candles + total_medium_candles

    result = total_candles + total_flashlights

    return result


 Executed result: 56
[EXP] 1250: [success_rate]: True, [output]: def solution():
    chips_total = 55 * 2

    family_members = 5

    chips_per_person = chips_total // family_members

    result = chips_per_person

    return result


 Executed result: 22
[EXP] 1251: [success_rate]: True, [output]: def solution():
    first_side_time = 5

    second_side_time = 2 * first_side_time

    third_side_time = 2 * first_side_time

    fourth_side_time = first_side_time / 2

    fifth_side_time = first_side_time / 2

    total_time = first_side_time + second_side_time + third_side_time + fourth_side_time + fifth_side_time

    result = total_time

    return result


 Executed result: 30.0
[EXP] 1252: [success_rate]: True, [output]: def solution():
    helmets = 20

    footballs = helmets * 2

    robots = helmets / 2

    total_items = footballs + helmets + robots

    result = total_items

    return result


 Executed result: 70.0
[EXP] 1253: [success_rate]: True, [output]: def solution():
    hours_per_day = 6

    minutes_per_call = 15

    minutes_per_day = hours_per_day * 60

    calls_per_day = minutes_per_day / minutes_per_call

    calls_per_week = calls_per_day * 5

    result = calls_per_week

    return result


 Executed result: 120.0
[EXP] 1254: [success_rate]: True, [output]: def solution():
    time_for_old_varnish = 7 * 6

    time_for_new_varnish = 12 * 6

    difference = time_for_new_varnish - time_for_old_varnish

    result = difference

    return result


 Executed result: 30
[EXP] 1255: [success_rate]: True, [output]: def solution():
    plants = 20

    plants_half_cup = 4

    cups_half_cup = 4 * 0.5

    plants_full_cup = 8

    cups_full_cup = 8 * 1

    plants_quarter_cup = plants - plants_half_cup - plants_full_cup

    cups_quarter_cup = plants_quarter_cup * 0.25

    total_cups = cups_half_cup + cups_full_cup + cups_quarter_cup

    result = total_cups

    return result


 Executed result: 12.0
[EXP] 1256: [success_rate]: True, [output]: def solution():
    distance_to_home = 200

    distance_land = distance_to_home / 2

    distance_water = distance_to_home - distance_land

    time_land = distance_land / 20

    time_water = distance_water / 10

    total_time = time_land + time_water

    result = total_time

    return result


 Executed result: 15.0
[EXP] 1257: [success_rate]: False, [output]: def solution():
    popsicle_sticks_needed = 56

    popsicles_per_box = 8

    cost_per_box = 2

    boxes_needed = (popsicle_sticks_needed // popsicles_per_box) + 1

    total_cost = boxes_needed * cost_per_box

    result = total_cost

    return result


 Executed result: 16
[EXP] 1258: [success_rate]: True, [output]: def solution():
    main_phone_cost = 20

    additional_phone_cost = main_phone_cost / 2

    number_of_additional_phones = 4  # 5 phones in total, one of which is the main phone

    cost_of_additional_phones = additional_phone_cost * number_of_additional_phones

    total_cost = main_phone_cost + cost_of_additional_phones

    result = total_cost

    return result


 Executed result: 60.0
[EXP] 1259: [success_rate]: False, [output]: def solution():
    doughnuts_per_day = 10

    days_in_june = 30

    doughnuts_per_june = doughnuts_per_day * days_in_june

    price_per_doughnut = 2

    total_money = doughnuts_per_june * price_per_doughnut

    result = total_money

    return result


 Executed result: 600
[EXP] 1260: [success_rate]: True, [output]: def solution():
    photos_taken = 210

    photos_per_batch = 7

    batches_per_day = 6

    total_batches = photos_taken // photos_per_batch

    days_needed = total_batches // batches_per_day

    result = days_needed

    return result


 Executed result: 5
[EXP] 1261: [success_rate]: True, [output]: def solution():
    blouses = 5

    blouses_cost = blouses * 5

    pants = 2

    pants_cost = pants * 8

    skirt = 1

    skirt_cost = skirt * 6

    total_cost = blouses_cost + pants_cost + skirt_cost

    five_weeks_cost = total_cost * 5

    result = five_weeks_cost

    return result


 Executed result: 235
[EXP] 1262: [success_rate]: True, [output]: def solution():
    normal_speed = 150

    increased_speed = normal_speed * 2.5

    words_per_minute = increased_speed

    words_per_page = 450

    pages_to_read = 10

    total_words = pages_to_read * words_per_page

    time_taken = total_words / words_per_minute

    result = time_taken

    return result


 Executed result: 12.0
[EXP] 1263: [success_rate]: True, [output]: def solution():
    day1_people = 50

    day2_people = day1_people + 20

    day3_people = 2 * day2_people

    day4_people = 60

    day5_people = 60

    day6_people = 60

    day7_people = 60

    total_people = day1_people + day2_people + day3_people + day4_people + day5_people + day6_people + day7_people

    result = total_people

    return result


 Executed result: 500
[EXP] 1264: [success_rate]: False, [output]: def solution():
    first_half_second = 20

    second_half_second = first_half_second * 3

    third_half_second = second_half_second * 4

    fourth_half_second = third_half_second * (1/2)

    residual_half_second = fourth_half_second * (1/4)

    total_popcorn = first_half_second + second_half_second + third_half_second + fourth_half_second + residual_half_second

    result = total_popcorn

    return result


 Executed result: 470.0
[EXP] 1265: [success_rate]: False, [output]: def solution():
    lemons_per_cup = 6

    cups_per_gallon = 1

    gallons_needed = 5  # 4 for the party and 1 extra for Allen

    cups_needed = gallons_needed * cups_per_gallon

    lemons_needed = cups_needed * lemons_per_cup

    result = lemons_needed

    return result


 Executed result: 30
[EXP] 1266: [success_rate]: True, [output]: def solution():
    german_shepherds = 3

    bulldogs = 2

    german_shepherd_food_per_day = 5

    bulldog_food_per_day = 3

    german_shepherd_food_per_week = german_shepherd_food_per_day * 7

    bulldog_food_per_week = bulldog_food_per_day * 7

    total_food_per_week = german_shepherd_food_per_week * german_shepherds + bulldog_food_per_week * bulldogs

    result = total_food_per_week

    return result


 Executed result: 147
[EXP] 1267: [success_rate]: True, [output]: def solution():
    two_legged_animals = 10

    four_legged_animals = 15

    legs_per_two_legged_animal = 2

    total_legs_two_legged = two_legged_animals * legs_per_two_legged_animal

    legs_per_four_legged_animal = 4

    total_legs_four_legged = four_legged_animals * legs_per_four_legged_animal

    total_legs = total_legs_two_legged + total_legs_four_legged

    pairs_of_legs = total_legs // 2

    result = pairs_of_legs

    return result


 Executed result: 40
[EXP] 1268: [success_rate]: True, [output]: def solution():
    blue_blocks = 4

    yellow_blocks = 2 * blue_blocks

    total_blocks = 32

    red_blocks = total_blocks - blue_blocks - yellow_blocks

    result = red_blocks

    return result


 Executed result: 20
[EXP] 1269: [success_rate]: False, [output]: def solution():
    west_distance = 5 * 18

    east_distance = 8 * 18

    total_distance = west_distance + east_distance

    result = total_distance

    return result


 Executed result: 234
[EXP] 1270: [success_rate]: True, [output]: def solution():
    boat_value_initial = 9000

    boat_value_after_1_year = boat_value_initial * 0.7

    boat_value_after_2_years = boat_value_after_1_year * 0.7

    boat_value_after_3_years = boat_value_after_2_years * 0.8

    result = boat_value_after_3_years

    return result


 Executed result: 3528.0
[EXP] 1271: [success_rate]: True, [output]: def solution():
    total_candies = 232

    red_candies = 54

    orange_candies = 2 * red_candies

    yellow_candies = red_candies // 2

    pink_candies = total_candies - (red_candies + orange_candies + yellow_candies)

    result = pink_candies

    return result


 Executed result: 43
[EXP] 1272: [success_rate]: True, [output]: def solution():
    hotel_cost_per_night = 80

    hotel_nights = 3

    total_hotel_cost = hotel_cost_per_night * hotel_nights

    bus_trips = 7

    bus_cost_per_trip = hotel_cost_per_night / 10

    total_bus_cost = bus_cost_per_trip * bus_trips

    total_cost = total_hotel_cost + total_bus_cost

    result = total_cost

    return result


 Executed result: 296.0
[EXP] 1273: [success_rate]: True, [output]: def solution():
    marbles_initial = 52

    marbles_given = marbles_initial

    marbles_dropped = 4

    marbles_with_dallas = 21

    marbles_with_darla = marbles_given - marbles_with_dallas - marbles_dropped

    result = marbles_with_darla

    return result


 Executed result: 27
[EXP] 1274: [success_rate]: True, [output]: def solution():
    adult_tickets = 2

    child_tickets = 1

    adult_cost = adult_tickets * 12

    child_cost = child_tickets * 8

    total_tickets = adult_cost + child_cost

    popcorns = 2

    popcorn_cost = popcorns * 3

    total_cost = total_tickets + popcorn_cost

    result = total_cost

    return result


 Executed result: 38
[EXP] 1275: [success_rate]: True, [output]: def solution():
    car_weight = 1200

    luggage_weight = 250

    child_weight = 75 * 2

    total_weight = car_weight + luggage_weight + child_weight

    force = 0.01 * total_weight

    result = force

    return result


 Executed result: 16.0
[EXP] 1276: [success_rate]: True, [output]: def solution():
    fence_length = 20

    fence_width = 15

    perimeter = 2 * (fence_length + fence_width)

    result = perimeter

    return result


 Executed result: 70
[EXP] 1277: [success_rate]: True, [output]: def solution():
    emma_age = 40 + 16

    avg_age = (40 + emma_age) / 2

    result = avg_age

    return result


 Executed result: 48.0
[EXP] 1278: [success_rate]: True, [output]: def solution():
    tom_seashells = 214

    nancy_seashells = 432

    benny_seashells = 86

    total_seashells = tom_seashells + nancy_seashells + benny_seashells

    seashells_cracked = 67

    good_seashells = total_seashells - seashells_cracked

    result = good_seashells

    return result


 Executed result: 665
[EXP] 1279: [success_rate]: True, [output]: def solution():
    plates_cost = 6

    bowls_cost = 5

    salad_plates_cost = 4

    total_cost_per_setting = plates_cost + bowls_cost + salad_plates_cost

    total_settings = 12

    total_cost = total_settings * total_cost_per_setting

    result = total_cost

    return result


 Executed result: 180
[EXP] 1280: [success_rate]: False, [output]: def solution():
    steves_time = 10

    annas_time = steves_time + 2 + steves_time / 2

    result = annas_time

    return result


 Executed result: 17.0
[EXP] 1281: [success_rate]: True, [output]: def solution():
    pig_feed_per_day = 4

    feed_per_pig_per_day = pig_feed_per_day * 2

    feed_per_pig_per_week = feed_per_pig_per_day * 7

    total_feed_per_week = feed_per_pig_per_week * 5

    total_feed_ordered = 300

    feed_left = total_feed_ordered - total_feed_per_week

    result = feed_left

    return result


 Executed result: 20
[EXP] 1282: [success_rate]: False, [output]: def solution():
    guest_hot_dogs = 20 * 2

    total_hot_dogs = guest_hot_dogs + 4

    packs_of_hot_dogs = (total_hot_dogs + 5) // 6

    cost = packs_of_hot_dogs * 2

    result = cost

    return result


 Executed result: 16
[EXP] 1283: [success_rate]: True, [output]: def solution():
    cupcakes_sold = 20

    cupcakes_price = 2

    cupcakes_income = cupcakes_sold * cupcakes_price

    cookies_sold = 40

    cookies_price = 1

    cookies_income = cookies_sold * cookies_price

    total_income = cupcakes_income + cookies_income

    trays_bought = 5

    trays_price = 4

    trays_cost = trays_bought * trays_price

    total_cost = trays_cost

    total_profit = total_income - total_cost

    result = total_profit

    return result


 Executed result: 60
[EXP] 1284: [success_rate]: False, [output]: def solution():
    children_initial = 5

    children_joined_second_street = children_initial

    children_joined_third_street = children_initial + children_joined_second_street

    children_left = children_initial

    children_now = children_joined_third_street - children_left

    result = children_now

    return result


 Executed result: 5
[EXP] 1285: [success_rate]: True, [output]: def solution():
    total_meals = 1360

    meals_given_friday = 64

    meals_given_saturday = 30

    meals_given_sunday = 48

    meals_given = meals_given_friday + meals_given_saturday + meals_given_sunday

    meals_left = total_meals - meals_given

    result = meals_left

    return result


 Executed result: 1218
[EXP] 1286: [success_rate]: True, [output]: def solution():
    quarter_value = 25

    nickels_value = 2 * 5

    dimes_value = 7 * 10

    money_in_cents = quarter_value + nickels_value + dimes_value

    result = money_in_cents

    return result


 Executed result: 105
[EXP] 1287: [success_rate]: True, [output]: def solution():
    sisters_age = 16

    sisters = 3

    total_sisters_age = sisters * sisters_age

    younger_brother_age = 12

    older_brother_age = younger_brother_age * 2

    total_brothers_age = older_brother_age + younger_brother_age

    total_siblings_age = total_sisters_age + total_brothers_age

    result = total_siblings_age

    return result


 Executed result: 84
[EXP] 1288: [success_rate]: False, [output]: def solution():
    minutes_per_day = 2 * 15  # 2 times 15 minutes per day

    minutes_per_day_yoga = 60

    days_per_week = 5

    weeks = 4

    minutes_per_week = minutes_per_day + minutes_per_day_yoga * days_per_week

    total_minutes = minutes_per_week * weeks

    result = total_minutes

    return result


 Executed result: 1320
[EXP] 1289: [success_rate]: True, [output]: def solution():
    small_tshirts = 11

    medium_tshirts = 8

    large_tshirts = 6

    small_square_feet = small_tshirts * 3

    medium_square_feet = medium_tshirts * 4

    large_square_feet = large_tshirts * 6

    total_square_feet = small_square_feet + medium_square_feet + large_square_feet

    result = total_square_feet

    return result


 Executed result: 101
[EXP] 1290: [success_rate]: True, [output]: def solution():
    small_sunflower_seeds = 3 * 12

    large_sunflower_seeds = small_sunflower_seeds * 1.5

    total_sunflower_seeds = small_sunflower_seeds + large_sunflower_seeds

    result = total_sunflower_seeds

    return result


 Executed result: 90.0
[EXP] 1291: [success_rate]: True, [output]: def solution():
    george_pens = 18

    timothy_pens = george_pens * 3

    sarah_pens = timothy_pens / 2

    result = sarah_pens

    return result


 Executed result: 27.0
[EXP] 1292: [success_rate]: True, [output]: def solution():
    albert_height = 36

    anne_height = 2 * albert_height

    jackie_height_now = anne_height - 2

    jackie_height_before = jackie_height_now - 3

    result = jackie_height_before

    return result


 Executed result: 67
[EXP] 1293: [success_rate]: True, [output]: def solution():
    bars_per_day = 5000

    bars_per_week = bars_per_day * 7

    bars_in_two_weeks = bars_per_week * 2

    price_per_bar = 2

    total_money = bars_in_two_weeks * price_per_bar

    result = total_money

    return result


 Executed result: 140000
[EXP] 1294: [success_rate]: False, [output]: def solution():
    # Calculate the price of the T-shirts

    t_shirt_price = 8

    t_shirt_discount = 0.5  # 50% off

    t_shirt_price_with_discount = t_shirt_price * (1 - t_shirt_discount)

    t_shirt_total = 2 * t_shirt_price_with_discount

    # Calculate the price of the shoes

    shoes_price = 40

    shoes_discount = 0.4  # 40% off

    shoes_price_with_discount = shoes_price * (1 - shoes_discount)

    # Calculate the total amount of money Jake spends

    total_amount = t_shirt_total + shoes_price_with_discount

    result = total_amount

    return result


 Executed result: 32.0
[EXP] 1295: [success_rate]: False, [output]: def solution():
    ryan_allowance = 6

    weeks_completed = 3

    ryan_money = ryan_allowance * weeks_completed

    ryan_spent = (1.25 * 4) + 1.25  

    ryan_left = ryan_money - ryan_spent

    result = ryan_left // 6.50

    return result


 Executed result: 1.0
[EXP] 1296: [success_rate]: True, [output]: def solution():
    ellen_leggings = 100

    ellen_photo_frame = 5

    ellen_total = ellen_leggings + ellen_photo_frame

    lani_sunglasses = 30

    lani_bathrobes = 2 * 100

    lani_total = lani_sunglasses + lani_bathrobes

    total_spent = ellen_total + lani_total

    result = total_spent

    return result


 Executed result: 335
[EXP] 1297: [success_rate]: True, [output]: def solution():
    passion_fruit_cost = 6

    jackfruit_cost = 8

    honey_cost = 10

    passion_fruit_per_jar = 2

    jackfruit_per_jar = 1.5

    honey_per_jar = 2

    total_cost_per_jar = passion_fruit_per_jar * passion_fruit_cost + jackfruit_per_jar * jackfruit_cost + honey_per_jar * honey_cost

    profit_per_jar = 50 - total_cost_per_jar

    profit = profit_per_jar * 10

    result = profit

    return result


 Executed result: 60.0
[EXP] 1298: [success_rate]: True, [output]: def solution():
    quarters = 32

    dimes = 95

    nickels = 120

    pennies = 750

    quarters_value = quarters * 0.25

    dimes_value = dimes * 0.10

    nickels_value = nickels * 0.05

    pennies_value = pennies * 0.01

    total_value = quarters_value + dimes_value + nickels_value + pennies_value

    result = total_value

    return result


 Executed result: 31.0
[EXP] 1299: [success_rate]: True, [output]: def solution():
    money_initial = 40

    money_spent_on_ice_cream = 3.50

    money_spent_on_movies = 7.50 * 2

    money_spent_on_bracelet = 8.50

    money_spent = money_spent_on_ice_cream + money_spent_on_movies + money_spent_on_bracelet

    money_left = money_initial - money_spent

    result = money_left

    return result


 Executed result: 13.0
[EXP] 1300: [success_rate]: True, [output]: def solution():
    cars_per_day = 3

    days_per_week = 5

    days_per_two_weeks = days_per_week * 2

    cars_per_two_weeks = cars_per_day * days_per_two_weeks

    money_per_car = 4

    money_per_two_weeks = cars_per_two_weeks * money_per_car

    result = money_per_two_weeks

    return result


 Executed result: 120
[EXP] 1301: [success_rate]: False, [output]: def solution():
    oatmeal_cookies = 9 - 3 - 2

    chocolate_chip_cookies = 4

    sugar_cookies = 5 - 1 - 2 + 4

    total_cookies = oatmeal_cookies + chocolate_chip_cookies + sugar_cookies

    result = total_cookies

    return result


 Executed result: 14
[EXP] 1302: [success_rate]: True, [output]: def solution():
    toy_soldiers = 12

    first_half = toy_soldiers // 2

    second_half = toy_soldiers - first_half

    first_half_price = first_half * 5

    second_half_price = second_half * 7

    total_price = first_half_price + second_half_price

    result = total_price

    return result


 Executed result: 72
[EXP] 1303: [success_rate]: False, [output]: def solution():
    holes_dug_per_day = 6

    days_digging = 14

    holes_dug = holes_dug_per_day * days_digging

    holes_per_day_filling = 9

    holes_per_week_filling = holes_per_day_filling * 7

    weeks = 0

    while holes_dug > 0:

        holes_dug -= holes_per_week_filling

        weeks += 1

    result = weeks

    return result


 Executed result: 2
[EXP] 1304: [success_rate]: True, [output]: def solution():
    norman_students = 4000

    butler_students = norman_students * 3 / 4

    difference = norman_students - butler_students

    result = difference

    return result


 Executed result: 1000.0
[EXP] 1305: [success_rate]: True, [output]: def solution():
    total_cookies = 7995

    rainbow_cookies = 2595

    oatmeal_cookies = 3075

    chocolate_chip_cookies = total_cookies - rainbow_cookies - oatmeal_cookies

    result = chocolate_chip_cookies

    return result


 Executed result: 2325
[EXP] 1306: [success_rate]: False, [output]: def solution():
    test_tubes_requested = 16

    beakers_requested = 7

    petri_dishes_requested = 14

    test_tubes_gathered = test_tubes_requested // 2

    petri_dishes_gathered = petri_dishes_requested

    beakers_gathered = beakers_requested

    total_items_gathered = test_tubes_gathered + beakers_gathered + petri_dishes_gathered

    items_lost = 29 - total_items_gathered

    result = items_lost

    return result


 Executed result: 0
[EXP] 1307: [success_rate]: True, [output]: def solution():
    tables = 4

    legs_per_table = 4

    screws_per_leg = 2

    screws_per_table = legs_per_table * screws_per_leg

    total_screws_needed = tables * screws_per_table

    screws_initial = 40

    screws_left = screws_initial - total_screws_needed

    result = screws_left

    return result


 Executed result: 8
[EXP] 1308: [success_rate]: True, [output]: def solution():
    eggs_in_first_basket = 10

    eggs_in_second_basket = eggs_in_first_basket * 2

    total_eggs = eggs_in_first_basket + eggs_in_second_basket

    result = total_eggs

    return result


 Executed result: 30
[EXP] 1309: [success_rate]: False, [output]: def solution():
    alexandra_raised = 430

    kim_raised = alexandra_raised + 320

    maryam_raised = 300 + 400

    total_raised = alexandra_raised + kim_raised + maryam_raised + 300

    result = total_raised

    return result


 Executed result: 2180
[EXP] 1310: [success_rate]: False, [output]: def solution():
    vanessa_distance = 4

    aaron_time = 16

    aaron_distance = vanessa_distance / 2

    vanessa_time = aaron_time * 2

    result = vanessa_time

    return result


 Executed result: 32
[EXP] 1311: [success_rate]: True, [output]: def solution():
    dock_initial = 200

    line_needed_per_dock = 3

    line_already = 6

    line_needed = (dock_initial * line_needed_per_dock) - line_already

    result = line_needed

    return result


 Executed result: 594
[EXP] 1312: [success_rate]: True, [output]: def solution():
    reservations_per_night = 6

    days_open = 2

    meals_cost = 2

    meal_price = 5

    wine_price = 5

    total_per_night = meals_cost * meal_price + wine_price

    total_per_week = total_per_night * reservations_per_night * days_open

    result = total_per_week

    return result


 Executed result: 180
[EXP] 1313: [success_rate]: True, [output]: def solution():
    watermelons = 50

    cost = 80

    profit_rate = 0.25

    profit = cost * profit_rate

    total_sold = cost + profit

    price_per_watermelon = total_sold / watermelons

    result = price_per_watermelon

    return result


 Executed result: 2.0
[EXP] 1314: [success_rate]: False, [output]: def solution():
    john_age_when_james_was_born = 19

    james_age_now = 2 * (12 - 3)

    dora_age_in_3_years = 12

    john_age_now = john_age_when_james_was_born + (32 - 19)

    youngest_son_age_now = john_age_now - 32

    youngest_son_age_in_3_years = youngest_son_age_now + 3

    result = youngest_son_age_in_3_years

    return result


 Executed result: 3
[EXP] 1315: [success_rate]: False, [output]: def solution():
    ana_peeling_speed = 3

    jane_peeling_speed = 4

    hours = 1

    ana_oranges_peeled = ana_peeling_speed * hours

    jane_oranges_peeled = jane_peeling_speed * hours

    difference = ana_oranges_peeled - jane_oranges_peeled

    result = difference

    return result


 Executed result: -1
[EXP] 1316: [success_rate]: False, [output]: def solution():
    original_cost = 400

    discount = 0.8

    discounted_cost = original_cost * discount

    labor_hours = 3

    labor_rate = 50

    labor_cost = labor_hours * labor_rate

    total_cost = discounted_cost + labor_cost

    result = total_cost

    return result


 Executed result: 470.0
[EXP] 1317: [success_rate]: False, [output]: def solution():
    total_animals = 20

    total_legs = 70

    legs_per_chicken = 2

    legs_per_cow = 4

    total_chickens = ((total_legs - (total_animals - total_chickens) * legs_per_cow) / legs_per_chicken)

    result = total_chickens

    return result


 Executed result: Error: return error, fail to execute
[EXP] 1318: [success_rate]: True, [output]: def solution():
    pizzas = 7

    slices_per_pizza = 8

    total_slices = pizzas * slices_per_pizza

    people = 4  # Henry and 3 friends

    slices_per_person = total_slices // people

    result = slices_per_person

    return result


 Executed result: 14
