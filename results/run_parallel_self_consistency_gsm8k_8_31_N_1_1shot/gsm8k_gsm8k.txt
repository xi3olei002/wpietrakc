[EXP] 1: [success_rate]: True, [answer]: 18, [output]: 
def solution():
    eggs_laid = 16
    eggs_eaten = 3
    eggs_baked = 4
    eggs_sold = eggs_laid - (eggs_eaten + eggs_baked)
    money_made = eggs_sold * 2
    return money_made

 Executed result: 18
[EXP] 2: [success_rate]: True, [answer]: 3, [output]: def solution():
    blue_fiber = 2
    white_fiber = blue_fiber / 2
    total_fiber = blue_fiber + white_fiber
    return total_fiber

 Executed result: 3.0
[EXP] 3: [success_rate]: False, [answer]: 70000, [output]: 
def solution():
    house_price = 80000
    repairs = 50000
    new_house_value = house_price + repairs
    new_house_value *= 1.5
    profit = new_house_value - house_price - repairs
    return profit

 Executed result: 65000.0
[EXP] 4: [success_rate]: True, [answer]: 540, [output]: def solution():
    sprints_per_week = 3
    sprints_per_day = 3
    meters_per_sprint = 60
    total_sprints = sprints_per_week * sprints_per_day
    total_meters = total_sprints * meters_per_sprint
    result = total_meters
    return result

 Executed result: 540
[EXP] 5: [success_rate]: False, [answer]: 20, [output]: def solution():
    feed_per_chicken = 3
    morning_feed = 15
    afternoon_feed = 25
    flock_size = 20
    total_feed = morning_feed + afternoon_feed
    feed_needed = total_feed / flock_size
    feed_needed = round(feed_needed)
    result = feed_needed
    return result

 Executed result: 2
[EXP] 6: [success_rate]: True, [answer]: 64, [output]: def solution():
    glass_cost = 5
    second_glass_cost = 0.6 * glass_cost
    total_cost = 0
    for i in range(16):
        if i % 2 == 0:
            total_cost += glass_cost
        else:
            total_cost += second_glass_cost
    return total_cost

 Executed result: 64.0
[EXP] 7: [success_rate]: True, [answer]: 260, [output]: def solution():
    seattle_sheep = 20
    charleston_sheep = seattle_sheep * 4
    toulouse_sheep = charleston_sheep * 2
    total_sheep = seattle_sheep + charleston_sheep + toulouse_sheep
    return total_sheep

 Executed result: 260
[EXP] 8: [success_rate]: False, [answer]: 160, [output]: 
def solution():
    file_size = 200
    download_rate = 2
    restart_time = 20
    download_time = file_size / download_rate
    restart_percentage = 0.4
    restart_time_percentage = restart_time / download_time * restart_percentage
    total_download_time = download_time + restart_time + restart_time_percentage
    return total_download_time

 Executed result: 120.08
[EXP] 9: [success_rate]: False, [answer]: 45, [output]: def solution():
    # Distance traveled on the way to the forgotten item
    distance_to_forget = 60 * 3
    # Distance traveled in standstill traffic
    distance_traffic = 0
    # Distance traveled at 30 mph
    distance_thirty = 30 * 0.5
    # Distance traveled at 80 mph
    distance-eighty = 80 * (4 - 2 - 0.5)
    # Total distance traveled
    distance_total = distance_to_forget + distance_traffic + distance_thirty + distance_eighty
    return distance_total

 Executed result: None
[EXP] 10: [success_rate]: True, [answer]: 460, [output]: 
def solution():
    rate_per_hour = 10
    regular_hours = 40
    overtime_hours = 45 - regular_hours
    overtime_rate = rate_per_hour * 1.2
    regular_earnings = regular_hours * rate_per_hour
    overtime_earnings = overtime_hours * overtime_rate
    total_earnings = regular_earnings + overtime_earnings
    return total_earnings

 Executed result: 460.0
[EXP] 11: [success_rate]: True, [answer]: 366, [output]: 
def solution():
    downloads_first_month = 60
    downloads_second_month = downloads_first_month * 3
    downloads_third_month = downloads_second_month * 0.7
    total_downloads = downloads_first_month + downloads_second_month + downloads_third_month
    return total_downloads

 Executed result: 366.0
[EXP] 12: [success_rate]: True, [answer]: 694, [output]: def solution():
    donuts = 3
    donut_cost = 68
    cupcakes = 2
    cupcake_cost = 80
    cheesecakes = 6
    cheesecake_cost = 55
    total_donuts = donuts * donut_cost
    total_cupcakes = cupcakes * cupcake_cost
    total_cheesecakes = cheesecakes * cheesecake_cost
    total_cost = total_donuts + total_cupcakes + total_cheesecakes
    return total_cost

 Executed result: 694
[EXP] 13: [success_rate]: False, [answer]: 13, [output]: 
def solution():
    tree_cost = 90
    lemons_per_year = 7
    lemon_price = 1.5
    water_and_feed_cost = 3
    total_income = lemons_per_year * lemon_price
    annual_profit = total_income - water_and_feed_cost
    years_to_profit = 0
    profit = 0
    while profit < 0:
        profit += annual_profit
        years_to_profit += 1
    return years_to_profit + 1

 Executed result: 1
[EXP] 14: [success_rate]: False, [answer]: 18, [output]: def solution():
    vacuum_left = 5
    vacuum_sold_at_green = vacuum_left
    vacuum_sold_at_red = 2
    vacuum_sold_at_orange = vacuum_left - vacuum_sold_at_green - vacuum_sold_at_red
    
    total_vacuum_sold = vacuum_sold_at_green + vacuum_sold_at_red + vacuum_sold_at_orange
    vacuum_initial = total_vacuum_sold + vacuum_left
    return vacuum_initial

 Executed result: 10
[EXP] 15: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    students = 20
    students_contemporary = int(students * 0.20)
    students_left = students - students_contemporary
    students_jazz = int(students_left * 0.25)
    students_hiphop = students - students_contemporary - students_jazz
    percentage_hiphop = (students_hiphop / students) * 100
    return percentage_hiphop

 Executed result: 60.0
[EXP] 16: [success_rate]: False, [answer]: 125, [output]: 
def solution():
    jewelry_price = 5000
    electronic_gadgets_price = 8000
    jewelry_increase = 0.025
    electronic_gadgets_increase = 0.012
    
    jewelry_profit = jewelry_price * (1 + jewelry_increase)
    electronic_gadgets_profit = electronic_gadgets_price * (1 + electronic_gadgets_increase)
    
    if jewelry_profit > electronic_gadgets_profit:
        return jewelry_profit - 5000
    else:
        return electronic_gadgets_profit - 8000

 Executed result: 96.0
[EXP] 17: [success_rate]: False, [answer]: 230, [output]: def solution():
    distance_west = 80
    distance_north = 150
    distance_total = distance_west + distance_north
    distance_per_train = distance_total / 2
    return distance_per_train

 Executed result: 115.0
[EXP] 18: [success_rate]: False, [answer]: 57500, [output]: def solution():
    hourly_teacher_pay = 20
    hours_per_week_teacher = 35
    hours_per_week_coach = 15
    weeks_per_year = 50

    weekly_teacher_income = hourly_teacher_pay * hours_per_week_teacher
    weekly_coach_income = hourly_teacher_pay * hours_per_week_coach
    weekly_total_income = weekly_teacher_income + weekly_coach_income
    annual_income = weekly_total_income * weeks_per_year
    return annual_income

 Executed result: 50000
[EXP] 19: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    eggs_per_day = 3
    days_in_week = 7
    weeks = 4
    eggs_per_week = eggs_per_day * days_in_week
    total_eggs = eggs_per_week * weeks
    dozen_eggs = total_eggs // 12
    return dozen_eggs

 Executed result: 7
[EXP] 20: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    distance_traveled = 4 + 2
    time_taken = 1 + 1
    desired_avg_speed = 4
    distance_left = 12 - distance_traveled
    time_left = (distance_left / distance_traveled) * time_taken
    speed_needed = distance_left / time_left
    return speed_needed

 Executed result: 3.0
[EXP] 21: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    orange_drink = 10
    orange_water = orange_drink * 2/3
    pineapple_drink = 15
    pineapple_water = pineapple_drink * 3/5
    total_water = orange_water + pineapple_water
    spilled = 1
    total_drink = orange_drink - spilled + pineapple_drink
    water_in_remaining_drink = (total_water / total_drink) * 24
    result = water_in_remaining_drink
    return result

 Executed result: 15.666666666666668
[EXP] 22: [success_rate]: False, [answer]: 14, [output]: 
def solution():
    samantha_age = 31
    raymond_age_at_samantha_birth = samantha_age - 6
    raymond_son_birth_age = 23
    raymond_son_birth = raymond_age_at_samantha_birth - raymond_son_birth_age
    return raymond_son_birth

 Executed result: 2
[EXP] 23: [success_rate]: True, [answer]: 7, [output]: def solution():
    customers = 8
    first_customers = 3
    second_customers = 2
    last_customers = 3
    first_dvds = first_customers
    second_dvds = second_customers * 2
    total_dvds = first_dvds + second_dvds
    result = total_dvds
    return result

 Executed result: 7
[EXP] 24: [success_rate]: True, [answer]: 8, [output]: def solution():
    hours_burned = 4
    cm_melted_per_hour = 2
    cm_melted = hours_burned * cm_melted_per_hour
    return cm_melted

 Executed result: 8
[EXP] 25: [success_rate]: True, [answer]: 26, [output]: def solution():
    discount = 25
    discount_percentage = discount / 100
    original_price = 19.50 / (1 - discount_percentage)
    return original_price

 Executed result: 26.0
[EXP] 26: [success_rate]: True, [answer]: 2, [output]: def solution():
    total_cost = 50
    meal_cost = 12
    milk_cost = 5 * 3
    apple_cost = 4 * 1.5
    total_cost_without_pizza = meal_cost + milk_cost + apple_cost
    pizza_cost = total_cost - total_cost_without_pizza
    pizza_boxes = pizza_cost / 8.5
    return int(pizza_boxes)

 Executed result: 2
[EXP] 27: [success_rate]: True, [answer]: 243, [output]: def solution():
    shorts = 3
    pants = 3
    shoes = 3
    shorts_cost = 16.5
    pants_cost = 22.5
    shoes_cost = 42
    total_cost = shorts * shorts_cost + pants * pants_cost + shoes * shoes_cost
    return total_cost

 Executed result: 243.0
[EXP] 28: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    servings_per_carton = 15
    servings_per_day = 1
    number_of_days = 60
    cartons = number_of_days // servings_per_carton
    remaining_servings = number_of_days % servings_per_carton
    if remaining_servings > 0:
        cartons += 1
    cartons_cost = cartons * 4
    return cartons_cost

 Executed result: 16
[EXP] 29: [success_rate]: True, [answer]: 25, [output]: def solution():
    total_distance = 60
    first_stop = 20
    second_stop = total_distance - 15
    distance_between_stops = second_stop - first_stop
    return distance_between_stops

 Executed result: 25
[EXP] 30: [success_rate]: True, [answer]: 104, [output]: 
def solution():
    heel1 = 33
    heel2 = heel1 * 2
    total_heels = heel1 + heel2
    boot_cost = total_heels + 5
    return boot_cost

 Executed result: 104
[EXP] 31: [success_rate]: True, [answer]: 109, [output]: 
def solution():
    total_age = 162
    ratio1, ratio2 = 7, 11
    ratio_sum = ratio1 + ratio2
    Allen_age = total_age * ratio2 / ratio_sum
    Allen_age_in_10_years = Allen_age + 10
    return Allen_age_in_10_years

 Executed result: 109.0
[EXP] 32: [success_rate]: False, [answer]: 80, [output]: def solution():
    first_guess = 80
    second_guess = int(first_guess + (first_guess / 2) + 20)
    third_guess = int(first_guess + (first_guess * 0.25))
    total_guess = first_guess + second_guess + third_guess
    average_guess = total_guess / 3
    return average_guess

 Executed result: 106.66666666666667
[EXP] 33: [success_rate]: True, [answer]: 35, [output]: def solution():
    dogs = 10
    hours_per_day = 0.5
    hours_per_week = dogs * hours_per_day * 7
    return hours_per_week

 Executed result: 35.0
[EXP] 34: [success_rate]: True, [answer]: 70, [output]: def solution():
    total_coins = 110
    gold_coins = (total_coins + 30) // 2
    return gold_coins

 Executed result: 70
[EXP] 35: [success_rate]: False, [answer]: 23, [output]: def solution():
    raymond_jewels = 40
    aaron_jewels = (raymond_jewels + 5) * 2
    siobhan_jewels = aaron_jewels - 2
    return siobhan_jewels

 Executed result: 88
[EXP] 36: [success_rate]: True, [answer]: 9, [output]: def solution():
    minutes = 40
    points_first_20 = 4
    points_second_20 = points_first_20 * 1.25
    total_points = points_first_20 + points_second_20
    return total_points

 Executed result: 9.0
[EXP] 37: [success_rate]: False, [answer]: 75, [output]: def solution():
    yogurts_per_day = 2
    yogurts_per_package = 4
    cost_per_package = 5
    total_packages = 30 // yogurts_per_package
    remaining_yogurts = 30 % yogurts_per_package
    cost_per_yogurt = cost_per_package / yogurts_per_package
    total_cost = total_packages * cost_per_package + remaining_yogurts * cost_per_yogurt
    return total_cost

 Executed result: 37.5
[EXP] 38: [success_rate]: True, [answer]: 2, [output]: def solution():
    money_initial = 0
    money_left = 5
    video_games_cost = 8 * 20
    money_spent = video_games_cost
    money_initial = money_left + money_spent
    lego_sets_sold = (money_initial - 5) / 15
    lego_sets_left = 13 - lego_sets_sold
    return lego_sets_left

 Executed result: 2.333333333333334
[EXP] 39: [success_rate]: True, [answer]: 10, [output]: def solution():
    miles_per_week = 60
    days = 3
    hours_per_day = [3, 1.5, 1.5]
    total_hours = 0
    for i in range(days):
        total_hours += hours_per_day[i]
    miles_per_hour = miles_per_week / total_hours
    result = miles_per_hour
    return result

 Executed result: 10.0
[EXP] 40: [success_rate]: True, [answer]: 18, [output]: def solution():
    skip_speed = 3
    run_speed = skip_speed * 2
    walk_speed = run_speed / 4
    time_running = 1/3
    time_walking = 2/3
    running_distance = run_speed * 6 * time_running
    walking_distance = walk_speed * 6 * time_walking
    total_distance = running_distance + walking_distance
    return total_distance

 Executed result: 18.0
[EXP] 41: [success_rate]: True, [answer]: 8, [output]: def solution():
    suzy_phone_age = 1
    ben_phone_age = suzy_phone_age * 2
    brandon_phone_age = ben_phone_age * 4
    return brandon_phone_age

 Executed result: 8
[EXP] 42: [success_rate]: False, [answer]: 200, [output]: def solution():
    distance_without_gemstone = 400
    distance_with_gemstone = distance_without_gemstone * 3
    safe_distance = distance_with_gemstone + 1000
    return safe_distance

 Executed result: 2200
[EXP] 43: [success_rate]: True, [answer]: 26, [output]: def solution():
    pies = 5
    pieces_per_pie = 8
    total_pieces = pies * pieces_per_pie
    pieces_taken = total_pieces - 14
    return pieces_taken

 Executed result: 26
[EXP] 44: [success_rate]: True, [answer]: 48, [output]: 
def solution():
    calorie_per_serving = 250
    serving_per_bag = 5
    daily_target = 2000
    consumed_calories = 1800
    total_calories_in_bag = calorie_per_serving * serving_per_bag
    calories_left = daily_target - consumed_calories
    calories_per_gram = total_calories_in_bag / 300
    grams_to_eat = calories_left / calories_per_gram
    return grams_to_eat

 Executed result: 48.0
[EXP] 45: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    beeswax_cost = 10
    beeswax_per_candle = 1 / 10
    candles_sold = 20
    total_beewax_used = beeswax_per_candle * candles_sold
    total_cost = beeswax_cost + total_beewax_used
    total_revenue = candles_sold * 2
    net_profit = total_revenue - total_cost
    return net_profit

 Executed result: 28.0
[EXP] 46: [success_rate]: True, [answer]: 104, [output]: 
def solution():
    articles_monday = 5
    articles_tuesday = articles_monday + 2/5 * articles_monday
    articles_wednesday = 2 * articles_tuesday
    total_articles = articles_monday + articles_tuesday + articles_wednesday
    hours_per_article = 4
    total_hours = total_articles * hours_per_article
    return total_hours

 Executed result: 104.0
[EXP] 47: [success_rate]: True, [answer]: 163, [output]: 
def solution():
    postits_initial = 80
    postits_left = 23
    postits_used = 220
    postits_in_package = postits_left + postits_used
    package_size = postits_in_package - postits_initial
    return package_size

 Executed result: 163
[EXP] 48: [success_rate]: False, [answer]: 800, [output]: def solution():
    blue_ties = 200 / 40
    red_ties = blue_ties * 2
    blue_cost = blue_ties * 40
    red_cost = blue_cost * 1.5
    total_cost = blue_cost + red_cost
    return total_cost

 Executed result: 500.0
[EXP] 49: [success_rate]: True, [answer]: 8, [output]: def solution():
    wire_length = 4
    piece_length = 6
    piece_in_inches = piece_length
    piece_in_feet = piece_in_inches / 12
    total_pieces = wire_length / piece_in_feet
    result = int(total_pieces)
    return result

 Executed result: 8
[EXP] 50: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    total_units = 15 * 8
    occupied_units = (3/4) * total_units
    unoccupied_units = total_units - occupied_units
    return unoccupied_units

 Executed result: 30.0
[EXP] 51: [success_rate]: True, [answer]: 294, [output]: def solution():
    eggs_per_day = 252
    eggs_per_week = eggs_per_day * 7
    dozen_eggs = eggs_per_week // 12
    money_per_dozen = 2
    money_per_week = dozen_eggs * money_per_dozen
    return money_per_week

 Executed result: 294
[EXP] 52: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    time_sailing_forward = 3  # hours
    speed_forward = 10
    time_sailing_backward = 3  # hours
    speed_backward = 6
    distance = 3 * speed_forward
    time_taken_forward = distance / speed_forward
    time_taken_backward = distance / speed_backward
    total_time = time_taken_forward + time_taken_backward
    return total_time

 Executed result: 8.0
[EXP] 53: [success_rate]: True, [answer]: 15, [output]: def solution():
    comic_books = 30
    comic_book_weight = 1/4
    toys_removed = (15 - comic_books * comic_book_weight) / (1/2)
    return int(toys_removed)

 Executed result: 15
[EXP] 54: [success_rate]: False, [answer]: 40, [output]: 
def solution():
    truck_tires = 6
    truck_rate = 60
    car_tires = 4 + 12
    car_rate = 40
    revenue_thursday = truck_tires * truck_rate + car_tires * car_rate
    revenue_friday = car_tires * car_rate
    revenue_difference = revenue_thursday - revenue_friday
    return revenue_difference

 Executed result: 360
[EXP] 55: [success_rate]: True, [answer]: 40, [output]: def solution():
    adopted_kittens = 7
    patchy_kittens = 3 * adopted_kittens
    trixie_kittens = 12
    total_kittens = adopted_kittens + patchy_kittens + trixie_kittens
    return total_kittens

 Executed result: 40
[EXP] 56: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    lollipops_initial = 30
    lollipops_eaten = 2
    lollipops_left = lollipops_initial - lollipops_eaten
    lollipops_per_bag = 2
    bags = lollipops_left // lollipops_per_bag
    result = bags
    return result

 Executed result: 14
[EXP] 57: [success_rate]: True, [answer]: 3, [output]: def solution():
    money_initial = 42
    ticket_cost = 7
    money_spent = 0
    times = 0
    while money_spent <= money_initial:
        money_spent += ticket_cost * 2
        times += 1
    result = times - 1
    return result

 Executed result: 3
[EXP] 58: [success_rate]: True, [answer]: 83, [output]: 
def solution():
    bridge_weight_limit = 5000
    driver_and_truck_weight = 3755
    box_weight = 15
    total_weight = driver_and_truck_weight
    max_boxes = 0
    while total_weight + box_weight <= bridge_weight_limit:
        total_weight += box_weight
        max_boxes += 1
    result = max_boxes - 1
    return result

 Executed result: 82
[EXP] 59: [success_rate]: True, [answer]: 57, [output]: def solution():
    bill = 40
    fee = bill * 0.25
    delivery_fee = 3
    total = bill + fee + delivery_fee
    tip = 4
    final_price = total + tip
    return final_price

 Executed result: 57.0
[EXP] 60: [success_rate]: True, [answer]: 187, [output]: def solution():
    clusters = 6
    fruits_per_cluster = 20
    individual_fruits = 67
    total_fruits = clusters * fruits_per_cluster + individual_fruits
    return total_fruits

 Executed result: 187
[EXP] 61: [success_rate]: True, [answer]: 17, [output]: def solution():
    oranges = 25
    bad_oranges = 1
    unripe_oranges = int(0.2 * oranges)
    sour_oranges = 2
    good_oranges = oranges - (bad_oranges + unripe_oranges + sour_oranges)
    return good_oranges

 Executed result: 17
[EXP] 62: [success_rate]: True, [answer]: 1430, [output]: 
def solution():
    material_cost = 500
    construction_cost = 800
    total_cost = material_cost + construction_cost
    insurance_cost = total_cost * 0.1
    total_spent = total_cost + insurance_cost
    result = total_spent
    return result

 Executed result: 1430.0
[EXP] 63: [success_rate]: False, [answer]: 25000, [output]: 
def solution():
    years_worked = 30
    annual_pension = 50000
    additional_pension = 0
    years_entitled = years_worked - 20
    additional_pension = annual_pension * years_entitled * 0.05
    total_pension = annual_pension + additional_pension
    return total_pension

 Executed result: 75000.0
[EXP] 64: [success_rate]: True, [answer]: 1596, [output]: def solution():
    monthly_fee = 140
    half_year_fee = 6 * monthly_fee
    second_half_fee = half_year_fee * 0.9
    total_fee = half_year_fee + second_half_fee
    return total_fee

 Executed result: 1596.0
[EXP] 65: [success_rate]: False, [answer]: 300, [output]: 
def solution():
    miles_driven = 100
    gallons_used = 4
    total_gas_capacity = 12
    total_gas_used = 12 - 4
    miles_per_gallon = miles_driven / gallons_used
    miles_per_tank = miles_per_gallon * total_gas_used
    result = miles_per_tank
    return result

 Executed result: 200.0
[EXP] 66: [success_rate]: False, [answer]: 36, [output]: def solution():
    hours_per_week = 2 + 0.5
    hours_per_week_session = hours_per_week * 2
    hours_per_week_total = hours_per_week_session * 3
    hours_in_four_weeks = hours_per_week_total * 4
    return hours_in_four_weeks

 Executed result: 60.0
[EXP] 67: [success_rate]: True, [answer]: 48, [output]: def solution():
    schools = 4
    girls_players = 5
    boys_players = 5
    coaches = 2
    total_players = schools * (girls_players + boys_players)
    total_coaches = schools * coaches
    total_people = total_players + total_coaches
    return total_people

 Executed result: 48
[EXP] 68: [success_rate]: True, [answer]: 595, [output]: def solution():
    diamonds = 175
    rubies = diamonds - 35
    emeralds = rubies * 2
    total_gems = diamonds + rubies + emeralds
    return total_gems

 Executed result: 595
[EXP] 69: [success_rate]: True, [answer]: 36, [output]: def solution():
    boys = 2 * 60
    students_per_teacher = 5
    teachers = boys + 60
    teachers = teachers / students_per_teacher
    return teachers

 Executed result: 36.0
[EXP] 70: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    money_received = 5 * 8
    money_total = 100
    money_initial = money_total - money_received
    result = money_initial
    return result

 Executed result: 60
[EXP] 71: [success_rate]: True, [answer]: 7425, [output]: 
def solution():
    total_classes = 5 * 5 + 8
    students_per_class = 15
    cost_per_student = 15
    total_students = total_classes * students_per_class
    total_cost = total_students * cost_per_student
    return total_cost

 Executed result: 7425
[EXP] 72: [success_rate]: True, [answer]: 60, [output]: def solution():
    recipe1 = 20
    recipe2 = 2 * recipe1
    total_instructions = recipe1 + recipe2
    return total_instructions

 Executed result: 60
[EXP] 73: [success_rate]: True, [answer]: 221, [output]: 
def solution():
    brownie_price = 3
    cheesecake_price = 4
    brownies_sold = 43
    cheesecakes_sold = 23
    total_revenue_from_brownies = brownies_sold * brownie_price
    total_revenue_from_cheesecakes = cheesecakes_sold * cheesecake_price
    total_revenue = total_revenue_from_brownies + total_revenue_from_cheesecakes
    return total_revenue

 Executed result: 221
[EXP] 74: [success_rate]: True, [answer]: 255, [output]: 
def solution():
    phones = 5
    cost_per_phone = 150
    phones_cost = phones * cost_per_phone
    interest = phones_cost * 0.02
    total_cost = phones_cost + interest
    installments = 3
    monthly_installment = total_cost / installments
    return monthly_installment

 Executed result: 255.0
[EXP] 75: [success_rate]: False, [answer]: 88, [output]: def solution():
    marigolds = 12
    petunias = 9
    begonias = 17
    marigold_price = 2.74
    petunia_price = 1.87
    begonia_price = 2.12
    marigold_revenue = round(marigolds * marigold_price)
    petunia_revenue = round(petunias * petunia_price)
    begonia_revenue = round(begonias * begonia_price)
    total_revenue = marigold_revenue + petunia_revenue + begonia_revenue
    return total_revenue

 Executed result: 86
[EXP] 76: [success_rate]: False, [answer]: 60, [output]: def solution():
    top_square_footage = 16
    total_square_footage = 0
    for i in range(1, 5):
        total_square_footage += top_square_footage
        top_square_footage = top_square_footage / 2
    average_square_footage = total_square_footage / 4
    return average_square_footage

 Executed result: 7.5
[EXP] 77: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    total_days = 365
    total_feed_180_days = 180 * 1
    total_feed_after_180_days = (total_days - 180) * 2
    total_feed = total_feed_180_days + total_feed_after_180_days
    total_bags = total_feed // 110
    return total_bags

 Executed result: 5
[EXP] 78: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    sarah_laundry = 400
    david_laundry = sarah_laundry / 4
    raymond_laundry = sarah_laundry / 2
    difference = raymond_laundry - david_laundry
    return difference

 Executed result: 100.0
[EXP] 79: [success_rate]: False, [answer]: 6, [output]: def solution():
    package1 = 2.5
    package2 = 1
    flowers = 18
    package1_saved = (flowers // 3) * package1
    package2_needed = flowers % 3
    package2_cost = package2 * package2_needed
    package1_total = package1_saved
    package2_total = package1_total + package2_cost
    package2_total = round(package2_total, 2)
    package1_total = round(package1 * (flowers // 3), 2)
    difference = package1_total - package2_total
    return difference

 Executed result: 0.0
[EXP] 80: [success_rate]: True, [answer]: 70, [output]: def solution():
    cost = 100
    discount = cost * 0.3
    discount_cost = cost - discount
    return discount_cost

 Executed result: 70.0
[EXP] 81: [success_rate]: True, [answer]: 10, [output]: def solution():
    water_initial = 24
    girl1 = 1/6
    girl2 = 1/6
    boy = 6
    water_spent = girl1 * water_initial + girl2 * water_initial + boy
    water_left = water_initial - water_spent
    return water_left

 Executed result: 10.0
[EXP] 82: [success_rate]: True, [answer]: 17, [output]: def solution():
    stickers_initial = 10
    stickers_bought = 21
    stickers_birthday = 23
    stickers_given_to_sister = 9
    stickers_used_for_card = 28
    stickers_total = stickers_initial + stickers_bought + stickers_birthday
    stickers_left = stickers_total - stickers_given_to_sister - stickers_used_for_card
    result = stickers_left
    return result

 Executed result: 17
[EXP] 83: [success_rate]: True, [answer]: 623, [output]: def solution():
    grace_weight = 125
    alex_weight = 4 * grace_weight - 2
    combined_weight = grace_weight + alex_weight
    return combined_weight

 Executed result: 623
[EXP] 84: [success_rate]: True, [answer]: 600, [output]: def solution():
    rose_bushes = 3
    roses_per_bush = 25
    thorns_per_rose = 8
    total_thorns = rose_bushes * roses_per_bush * thorns_per_rose
    return total_thorns

 Executed result: 600
[EXP] 85: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    games_total = 22
    win_loss_diff = 8
    wins = (games_total + win_loss_diff) // 2
    return wins

 Executed result: 15
[EXP] 86: [success_rate]: False, [answer]: 44, [output]: def solution():
    age = 34
    vacation_per_year = 4
    vacation_blocks_per_year = vacation_per_year
    total_blocks = 0
    for year in range(age - 23 + 1):
        total_blocks += vacation_blocks_per_year
    return total_blocks

 Executed result: 48
[EXP] 87: [success_rate]: True, [answer]: 22, [output]: def solution():
    alarm_rings = 0
    first_alarm = 4
    second_alarm = first_alarm * 3
    third_alarm = second_alarm // 2
    total_rings = first_alarm + second_alarm + third_alarm
    return total_rings

 Executed result: 22
[EXP] 88: [success_rate]: False, [answer]: 9360, [output]: 
def solution():
    initial_salary = 600
    years_of_service = 5
    years_to_add = 3
    annual_increase = 10 / 100
    
    for _ in range(years_to_add):
        initial_salary = initial_salary * (1 + annual_increase)
    
    return initial_salary

 Executed result: 798.6000000000001
[EXP] 89: [success_rate]: False, [answer]: 8000, [output]: def solution():
    harald_sales = x
    marilyn_sales = harald_sales * 10
    total_sales = harald_sales + marilyn_sales
    return harald_sales

 Executed result: None
[EXP] 90: [success_rate]: True, [answer]: 24, [output]: def solution():
    invited_guests = 16
    gift_bags_per_guest = 0.75
    total_gift_bags = invited_guests * gift_bags_per_guest
    gift_bag_cost = 2
    total_cost = total_gift_bags * gift_bag_cost
    return total_cost

 Executed result: 24.0
[EXP] 91: [success_rate]: True, [answer]: 225, [output]: 
def solution():
    adult_eats = 10
    child_eats = adult_eats / 2
    adult_count = 20
    child_count = 5
    total_eats = adult_eats * adult_count + child_eats * child_count
    total_pounds = total_eats
    return total_pounds

 Executed result: 225.0
[EXP] 92: [success_rate]: True, [answer]: 28, [output]: 
def solution():
    cindy_pets = 4
    marcia_pets = cindy_pets + 2
    jan_pets = marcia_pets * 3
    total_pets = cindy_pets + marcia_pets + jan_pets
    return total_pets

 Executed result: 28
[EXP] 93: [success_rate]: True, [answer]: 4, [output]: def solution():
    jackson_age = 10 - 1
    corey_age = 10
    amy_age = corey_age - 2
    jackson_age = amy_age - 5
    result = jackson_age
    return result

 Executed result: 3
[EXP] 94: [success_rate]: False, [answer]: 36, [output]: def solution():
    lee_time = 38
    gerald_improve = 10
    gerald_time = lee_time - 2
    gerald_improve_time = (gerald_time - (gerald_time * gerald_improve / 100)) / 100
    result = round(gerald_improve_time)
    return result

 Executed result: 0
[EXP] 95: [success_rate]: False, [answer]: 348, [output]: 
def solution():
    dogs = 60
    cats = dogs * 2
    rabbits = cats - 12
    total_pets = dogs + cats + rabbits
    return total_pets

 Executed result: 288
[EXP] 96: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    total_students = 200
    boys = total_students * 2 / 5
    girls = total_students - boys
    girls_in_scout = girls * 2 / 3
    girls_not_in_scout = girls - girls_in_scout
    return int(girls_not_in_scout)

 Executed result: 40
[EXP] 97: [success_rate]: True, [answer]: 3, [output]: def solution():
    harrys_sleep = 9
    james_sleep = harrys_sleep * (2/3)
    difference = harrys_sleep - james_sleep
    return difference

 Executed result: 3.0
[EXP] 98: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    can_volume = 16
    can_tomatoes = 3
    total_sauce_volume = 32
    total_tomatoes = (total_sauce_volume * can_tomatoes) * 2
    return total_tomatoes

 Executed result: 192
[EXP] 99: [success_rate]: True, [answer]: 5, [output]: def solution():
    cars_initial = 30
    cars_left = 5
    cars_in_traffic = cars_initial - cars_left
    cars_in_traffic_first_15_minutes = cars_in_traffic - 20
    result = cars_in_traffic_first_15_minutes
    return result

 Executed result: 5
[EXP] 100: [success_rate]: False, [answer]: 58, [output]: 
def solution():
    plants_initial = 18
    plants_on_ledges = 40 * 2
    plants_given = plants_on_ledges
    plants_left = plants_initial + plants_on_ledges - plants_given
    result = plants_left
    return result

 Executed result: 18
[EXP] 101: [success_rate]: False, [answer]: 175, [output]: def solution():
    friend1 = 20
    friend2 = friend1 + 20//4
    friend3 = friend4 + 10
    friend4 = 60
    return friend1 + friend2 + friend3 + friend4

 Executed result: None
[EXP] 102: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    total_pages = 4 + 20 + 7 + 8
    pages_read = 15
    pages_left = total_pages - pages_read
    days_left = 4
    pages_per_day = pages_left // days_left
    return pages_per_day

 Executed result: 6
[EXP] 103: [success_rate]: False, [answer]: 26, [output]: 
def solution():
    water_per_day = 4
    weekdays = 5
    water_per_weekday = water_per_day
    weekend_water = 0
    total_water = (water_per_weekday * weekdays) + weekend_water
    result = total_water
    return result

 Executed result: 20
[EXP] 104: [success_rate]: True, [answer]: 140, [output]: 
def solution():
    distance = 42
    speed = 3
    time = distance / speed
    return time * 10

 Executed result: 140.0
[EXP] 105: [success_rate]: True, [answer]: 500, [output]: 
def solution():
    total_pieces = 1000
    pieces_placed_by_poppy = total_pieces // 4
    remaining_pieces = total_pieces - pieces_placed_by_poppy
    pieces_placed_by_mom = remaining_pieces // 3
    pieces_left = remaining_pieces - pieces_placed_by_mom
    result = pieces_left
    return result

 Executed result: 500
[EXP] 106: [success_rate]: True, [answer]: 20, [output]: def solution():
    amir_cookies = 5
    cody_cookies = amir_cookies * 3
    total_cookies = cody_cookies + amir_cookies
    return total_cookies

 Executed result: 20
[EXP] 107: [success_rate]: True, [answer]: 72, [output]: 
def solution():
    box_length = 5
    box_width = 6
    box_height = 4
    wall_thickness = 1
    box_volume = (box_length - 2*wall_thickness) * (box_width - 2*wall_thickness) * (box_height - 2*wall_thickness)
    total_volume = box_volume * 3
    result = total_volume
    return result

 Executed result: 72
[EXP] 108: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    total_tv_time = 7
    total_regular_episodes = 3
    regular_episode_length = 1
    extra_tv_time = total_tv_time - total_regular_episodes * regular_episode_length
    extra_episodes = extra_tv_time // 0.5
    return extra_episodes

 Executed result: 8.0
[EXP] 109: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    cookies_baked = 110
    cookies_dropped = 5
    cookies_meant_to_bake = cookies_baked + cookies_dropped
    cookies_twice_last_year = cookies_meant_to_bake - 15
    cookies_last_year = cookies_twice_last_year / 2
    return cookies_last_year

 Executed result: 50.0
[EXP] 110: [success_rate]: True, [answer]: 28, [output]: 
def solution():
    gas_cost = 3.00
    cashback = 0.20
    gallons = 10
    total_gas_cost = gas_cost * gallons
    cashback_reward = cashback * gallons
    total_cost_after_cashback = total_gas_cost - cashback_reward
    return total_cost_after_cashback

 Executed result: 28.0
[EXP] 111: [success_rate]: True, [answer]: 45, [output]: def solution():
    marcell_rollups = 3 * 14
    beatrice_rollups = 2 * 24
    total_rollups = marcell_rollups + beatrice_rollups
    average_rollups = total_rollups / 2
    return average_rollups

 Executed result: 45.0
[EXP] 112: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    feet_per_second = 20 / 16
    feet_to_shore = 64
    seconds_to_shore = 64
    water_taken_in = (feet_to_shore * feet_per_second) / 10 * 2
    return water_taken_in

 Executed result: 16.0
[EXP] 113: [success_rate]: True, [answer]: 24, [output]: def solution():
    teachers = 4
    lessons_per_teacher = 2
    lessons_per_day = teachers * lessons_per_teacher
    cleaning_per_lesson = 3
    total_cleanings = lessons_per_day * cleaning_per_lesson
    return total_cleanings

 Executed result: 24
[EXP] 114: [success_rate]: True, [answer]: 25, [output]: 
def solution():
    flowers_per_day = 2
    days = 15
    total_flowers = flowers_per_day * days
    non_growing_flowers = 5
    total_flowers -= non_growing_flowers
    result = total_flowers
    return result

 Executed result: 25
[EXP] 115: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    jamal_photos = 1800
    jamal_ducks = jamal_photos // 6
    brittany_ducks = jamal_ducks // 50
    return brittany_ducks

 Executed result: 6
[EXP] 116: [success_rate]: False, [answer]: 90, [output]: 
def solution():
    leftover_boards = {"2x4x10": 10, "4x4x10": 16}
    cost = sum([leftover_boards[board] for board in leftover_boards])
    markup = cost * 0.5
    cost_with_markup = cost + markup
    revenue = sum([leftover_boards[board] for board in leftover_boards])
    profit = revenue - cost_with_markup
    return profit

 Executed result: -13.0
[EXP] 117: [success_rate]: True, [answer]: 42, [output]: def solution():
    sugar = 7
    water = 13
    total = 120
    ratio = sugar + water
    sugar_used = (sugar / ratio) * total
    return sugar_used

 Executed result: 42.0
[EXP] 118: [success_rate]: True, [answer]: 360, [output]: def solution():
    pairs = 2
    children = 3
    cost_per_pair = 60
    total_pairs = pairs * children
    cost = total_pairs * cost_per_pair
    return cost

 Executed result: 360
[EXP] 119: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    containers_imported_first_day = 2
    vehicles_imported_first_day = 2 * 5
    total_vehicles = 30
    vehicles_imported_second_day = total_vehicles - vehicles_imported_first_day
    containers_imported_second_day = vehicles_imported_second_day // 5
    return containers_imported_second_day

 Executed result: 4
[EXP] 120: [success_rate]: True, [answer]: 95200, [output]: def solution():
    adrien_salary = 40000
    lylah_salary = adrien_salary * 0.7
    adrien_salary_after_4_years = adrien_salary * 1.4
    lylah_salary_after_4_years = lylah_salary * 1.4
    result = adrien_salary_after_4_years + lylah_salary_after_4_years
    return result

 Executed result: 95200.0
[EXP] 121: [success_rate]: True, [answer]: 240, [output]: def solution():
    paper_per_week = 2
    paper_per_pad = 30
    paper_per_month = paper_per_week * 4
    total_paper = paper_per_pad * paper_per_month
    return total_paper

 Executed result: 240
[EXP] 122: [success_rate]: True, [answer]: 27, [output]: def solution():
    morisette_apples = 5
    morisette_oranges = 8
    kael_apples = morisette_apples * 2
    kael_oranges = morisette_oranges // 2
    total_apples = morisette_apples + kael_apples
    total_oranges = morisette_oranges + kael_oranges
    total_fruits = total_apples + total_oranges
    return total_fruits

 Executed result: 27
[EXP] 123: [success_rate]: False, [answer]: 48, [output]: def solution():
    monday = 8
    tuesday = monday - 2
    wednesday = tuesday - 2
    thursday = tuesday
    friday = tuesday + 1
    total_hours = monday + tuesday + wednesday + thursday + friday
    return total_hours

 Executed result: 31
[EXP] 124: [success_rate]: True, [answer]: 50, [output]: def solution():
    speed1 = 10
    speed2 = 5
    hours_running_at_speed1 = 3
    total_hours = 7
    total_distance_at_speed1 = speed1 * hours_running_at_speed1
    time_left = total_hours - hours_running_at_speed1
    distance_at_speed2 = time_left * speed2
    total_distance = total_distance_at_speed1 + distance_at_speed2
    result = total_distance
    return result

 Executed result: 50
[EXP] 125: [success_rate]: False, [answer]: 10, [output]: def solution():
    total_letters = 60
    letters_stamped = 30
    letters_need_stamp = total_letters - letters_stamped
    letters_stamped_third = letters_need_stamp // 3
    letters_stamped_initial = letters_stamped - letters_stamped_third
    return letters_stamped_initial

 Executed result: 20
[EXP] 126: [success_rate]: False, [answer]: 10, [output]: 
def solution():
    total_spoons = 12
    spoons_used = 3
    additional_spoons = 5
    spoons_in_package = total_spoons - spoons_used + additional_spoons
    return spoons_in_package

 Executed result: 14
[EXP] 127: [success_rate]: True, [answer]: 82, [output]: def solution():
    chicken_sausages = 38
    fish_sausages = chicken_sausages + 6
    total_sausages = chicken_sausages + fish_sausages
    return total_sausages

 Executed result: 82
[EXP] 128: [success_rate]: True, [answer]: 120, [output]: def solution():
    lily_friends = 50
    amy_friends = lily_friends + 20
    total_friends = lily_friends + amy_friends
    return total_friends

 Executed result: 120
[EXP] 129: [success_rate]: True, [answer]: 880, [output]: def solution():
    pepper_cost = 15
    watermelon_cost = 3 * pepper_cost
    orange_cost = watermelon_cost - 5
    watermelon_quantity = 4
    pepper_quantity = 20
    orange_quantity = 10
    total_cost = (watermelon_quantity * watermelon_cost) + (pepper_quantity * pepper_cost) + (orange_quantity * orange_cost)
    return total_cost

 Executed result: 880
[EXP] 130: [success_rate]: True, [answer]: 10000, [output]: def solution():
    patients = 500
    minutes_per_patient = 24
    hours_per_patient = minutes_per_patient / 60
    doctor_rate = 150
    patient_rate = 200
    total_hours = patients * hours_per_patient
    doctor_cost = total_hours * doctor_rate
    revenue = total_hours * patient_rate
    profit = revenue - doctor_cost
    return profit

 Executed result: 10000.0
[EXP] 131: [success_rate]: True, [answer]: 30, [output]: def solution():
    elves_initial = 60
    elves_quit = elves_initial // 3
    elves_left = elves_initial - elves_quit
    elves_quit_again = 10
    elves_left = elves_left - elves_quit_again
    result = elves_left
    return result

 Executed result: 30
[EXP] 132: [success_rate]: True, [answer]: 940, [output]: def solution():
    may_expenditure = 500
    june_expenditure = may_expenditure - 60
    total_expenditure = may_expenditure + june_expenditure
    return total_expenditure

 Executed result: 940
[EXP] 133: [success_rate]: False, [answer]: 60, [output]: def solution():
    pam_rides = 2
    fred_rides = 4
    luge_rides = 2
    total_rides = pam_rides + fred_rides
    total_tickets = total_rides * 6
    return total_tickets

 Executed result: 36
[EXP] 134: [success_rate]: True, [answer]: 13, [output]: 
def solution():
    miles_monday = 4
    miles_tuesday = miles_monday * 6
    total_miles = 41
    miles_wednesday = total_miles - miles_monday - miles_tuesday
    return miles_wednesday

 Executed result: 13
[EXP] 135: [success_rate]: True, [answer]: 720, [output]: 
def solution():
    car_washes = 4
    car_wash_cost = 15
    car_wash_cost_per_year = car_washes * 12 * car_wash_cost
    return car_wash_cost_per_year

 Executed result: 720
[EXP] 136: [success_rate]: True, [answer]: 40, [output]: def solution():
    brian_video_games = 20
    lost_games = 5
    brian_video_games -= lost_games
    bobby_video_games = 3 * brian_video_games - 5
    return bobby_video_games

 Executed result: 40
[EXP] 137: [success_rate]: True, [answer]: 6, [output]: def solution():
    unicorns_total = 27
    unicorns_in_highlands = unicorns_total // 3
    female_highland_unicorns = unicorns_in_highlands * 2 // 3
    return female_highland_unicorns

 Executed result: 6
[EXP] 138: [success_rate]: True, [answer]: 29, [output]: 
def solution():
    subs = 2
    subs_cost = 7.50
    total_subs_cost = subs * subs_cost
    chips = 2
    chips_cost = 1.50
    total_chips_cost = chips * chips_cost
    cookies = 2
    cookies_cost = 1.00
    total_cookies_cost = cookies * cookies_cost
    total_cost = total_subs_cost + total_chips_cost + total_cookies_cost
    delivery_fee = total_cost * 0.20
    total_with_fee = total_cost + delivery_fee
    tip = 5.00
    total_with_tip = total_with_fee + tip
    result = total_with_tip
    return result

 Executed result: 29.0
[EXP] 139: [success_rate]: True, [answer]: 105, [output]: def solution():
    questions_test1 = 75
    rate = 5
    hours_test1 = 8
    questions_per_hour = rate
    questions_completed_test1 = questions_per_hour * hours_test1
    questions_left_test1 = questions_test1 - questions_completed_test1
    questions_test2 = 100
    hours_test2 = 6
    questions_completed_test2 = questions_per_hour * hours_test2
    questions_left_test2 = questions_test2 - questions_completed_test2
    return questions_left_test1 + questions_left_test2

 Executed result: 105
[EXP] 140: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    blue_gumballs = 12
    pink_gumballs = 4 * blue_gumballs + 22
    return pink_gumballs

 Executed result: 70
[EXP] 141: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    total_cars = 20
    auto_cars = 12
    manual_cars = 4
    semi_auto_cars = total_cars - auto_cars - manual_cars
    semi_auto_percentage = (semi_auto_cars / total_cars) * 100
    return semi_auto_percentage

 Executed result: 20.0
[EXP] 142: [success_rate]: False, [answer]: 400, [output]: 
def solution():
    bees = 700
    worker_bees = bees * 2 / 3
    return worker_bees

 Executed result: 466.6666666666667
[EXP] 143: [success_rate]: True, [answer]: 140, [output]: def solution():
    hours_played = 2
    hours_worked = 7 * hours_played
    hourly_wage = 10
    money_earned = hours_worked * hourly_wage
    return money_earned

 Executed result: 140
[EXP] 144: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    milk = 2
    eggs = 3
    light_bulbs = 3
    cups = 3
    roach_traps = 4
    tax_rate = 0.1
    
    total_cost = milk + eggs
    non_food_items = light_bulbs + cups + roach_traps
    tax = non_food_items * tax_rate
    total_taxed_cost = non_food_items + tax
    total_cost += total_taxed_cost
    
    result = total_cost
    return result

 Executed result: 16.0
[EXP] 145: [success_rate]: True, [answer]: 20, [output]: def solution():
    income = 92
    bleach_cost = 2
    cloth_cost = 5
    total_clients = 3 + 5
    bleach_needed = total_clients * 2
    cloth_needed = total_clients * 1
    bleach_expenses = bleach_needed * bleach_cost
    cloth_expenses = cloth_needed * cloth_cost
    total_expenses = bleach_expenses + cloth_expenses
    profit = income - total_expenses
    return profit

 Executed result: 20
[EXP] 146: [success_rate]: True, [answer]: 4000, [output]: def solution():
    hectares = 10
    pineapples_per_hectare = 100
    months_per_year = 12
    months_between_harvests = 3
    total_pineapples = hectares * pineapples_per_hectare
    harvests_per_year = months_per_year // months_between_harvests
    total_pineapples_harvested = total_pineapples * harvests_per_year
    result = total_pineapples_harvested
    return result

 Executed result: 4000
[EXP] 147: [success_rate]: False, [answer]: 2,125, [output]: 
def solution():
    lego_set1 = 500
    lego_set2 = lego_set1 * 3
    lego_set3 = lego_set1 // 4
    total_legos = lego_set1 + lego_set2 + lego_set3
    return total_legos

 Executed result: 2125
[EXP] 148: [success_rate]: False, [answer]: 75, [output]: 
def solution():
    bees_left = 30
    bees_returned_first_half = bees_left // 2
    bees_left_half = bees_left - bees_returned_first_half
    bees_left_third_half = 2 * bees_left
    bees_returned_third_half = bees_left_third_half - bees_left_left
    bees_returned_last_half = bees_left - bees_returned_third_half
    result = bees_returned_last_half
    return result

 Executed result: None
[EXP] 149: [success_rate]: False, [answer]: 30, [output]: def solution():
    adult_ticket = 12
    child_ticket = 10
    total_cost = adult_ticket + child_ticket
    change = 8
    money_given = total_cost - change
    return money_given

 Executed result: 14
[EXP] 150: [success_rate]: True, [answer]: 16, [output]: def solution():
    charlie_friends = 12
    dorothy_friends = charlie_friends // 3
    james_friends = dorothy_friends * 4
    return james_friends

 Executed result: 16
[EXP] 151: [success_rate]: True, [answer]: 4, [output]: def solution():
    steve_distance = 5280 * 3  # convert miles to feet
    steve_speed = 440
    steve_time = steve_distance / steve_speed
    tim_distance = 5280 * 2
    tim_speed = 264
    tim_time = tim_distance / tim_speed
    time_diff = tim_time - steve_time
    if time_diff < 0:
        time_diff *= -1
    result = time_diff
    return result

 Executed result: 4.0
[EXP] 152: [success_rate]: True, [answer]: 5, [output]: def solution():
    tire_cost = 0.25
    tires_inflated = 5 * 2 + 3 * 3 + 1
    money_made = tires_inflated * tire_cost
    return money_made

 Executed result: 5.0
[EXP] 153: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    cookies_per_pack = 6
    packs = 10
    cookies = cookies_per_pack * packs
    cost_per_cookie = 0.10
    total_cost = cookies * cost_per_cookie
    bill = 10
    change = bill - total_cost
    return change

 Executed result: 4.0
[EXP] 154: [success_rate]: False, [answer]: 48, [output]: 
def solution():
    fries_initial = 0
    fries_eaten = 14
    seagull_eaten = fries_eaten // 2
    fries_left = fries_eaten - seagull_eaten
    pigeons_eaten = 3 * 3
    fries_left -= pigeons_eaten
    fries_left = fries_left * 2/3
    fries_left -= 1
    result = fries_initial + fries_eaten + seagull_eaten + pigeons_eaten + 5
    return result

 Executed result: 35
[EXP] 155: [success_rate]: False, [answer]: 272, [output]: def solution():
    days_in_a_week = 3  # Mondays, Wednesdays, Fridays
    hours_per_day = 3  # 1-hour classes
    weeks_in_semester = 16
    
    hours_per_day_on_odd_days = days_in_a_week * hours_per_day
    hours_per_day_on_even_days = 2 * 2  # 2-hour classes on Tuesdays and Thursdays
    hours_per_week = hours_per_day_on_odd_days + hours_per_day_on_even_days
    
    total_hours_in_semester = hours_per_week * weeks_in_semester
    return total_hours_in_semester

 Executed result: 208
[EXP] 156: [success_rate]: False, [answer]: 280, [output]: 
def solution():
    rolls = 300
    croissants = 120
    baguettes = 60
    roll_length = 4
    croissant_length = 6
    baguette_length = 2
    total_length = rolls * roll_length + croissants * croissant_length + (baguettes * 2)
    result = total_length
    return result

 Executed result: 2040
[EXP] 157: [success_rate]: False, [answer]: 1400, [output]: def solution():
    apes_needed = 600
    return apes_needed

 Executed result: 600
[EXP] 158: [success_rate]: False, [answer]: 80, [output]: 
def solution():
    blake_distance = 2 * 15 * 100
    kelly_distance = 34 * (40 * 2)
    distance_difference = blake_distance - kelly_distance
    return distance_difference

 Executed result: 280
[EXP] 159: [success_rate]: True, [answer]: 34, [output]: def solution():
    pens = 4
    pen_cost = 1.5
    notebooks = 2
    notebook_cost = 4
    paper_cost = 20
    money_spent = (pens * pen_cost) + (notebooks * notebook_cost) + paper_cost
    return money_spent

 Executed result: 34.0
[EXP] 160: [success_rate]: True, [answer]: 15, [output]: def solution():
    tadpoles_initial = 11
    tadpoles_appeared = 6
    tadpoles_disappeared = 2
    tadpoles_left = tadpoles_initial + tadpoles_appeared - tadpoles_disappeared
    result = tadpoles_left
    return result

 Executed result: 15
[EXP] 161: [success_rate]: True, [answer]: 16, [output]: def solution():
    water_depth_monday = 17
    water_depth_tuesday = water_depth_monday + 7
    water_depth_wednesday = (2/3) * water_depth_tuesday
    return water_depth_wednesday

 Executed result: 16.0
[EXP] 162: [success_rate]: True, [answer]: 32, [output]: 
def solution():
    anakin_starfish = 10
    anakin_sea_horses = 6
    anakin_clownfish = 3
    
    locsin_starfish = anakin_starfish - 5
    locsin_sea_horses = anakin_sea_horses - 3
    locsin_clownfish = anakin_clownfish + 2
    
    total_anakin = anakin_starfish + anakin_sea_horses + anakin_clownfish
    total_locsin = locsin_starfish + locsin_sea_horses + locsin_clownfish
    
    result = total_anakin + total_locsin
    return result

 Executed result: 32
[EXP] 163: [success_rate]: False, [answer]: 92, [output]: 
def solution():
    initial_cost = 20
    months = 36
    increase_rate = 0.20
    cost = initial_cost
    for _ in range(months//2):
        cost += cost * increase_rate
    result = cost
    return result

 Executed result: 532.466665617705
[EXP] 164: [success_rate]: True, [answer]: 50, [output]: def solution():
    red_cars = 5
    action_figures = 3
    doll_cost = 3 * 5
    red_car_cost = 4
    total_cost = (red_cars * red_car_cost) + (action_figures * 5) + doll_cost
    return total_cost

 Executed result: 50
[EXP] 165: [success_rate]: True, [answer]: 15, [output]: def solution():
    money_lost_self = 35
    hours_lost_self = 3
    money_gained_accountant = 90
    money_spent_accountant = 0
    money_saved = 0
    money_saved = money_lost_self * hours_lost_self
    money_saved = money_saved - money_gained_accountant
    return money_saved

 Executed result: 15
[EXP] 166: [success_rate]: True, [answer]: 77, [output]: def solution():
    budget = 1500
    computer_cost = 1090
    scanner_cost = 157
    cd_burner_cost = 74
    printer_cost = 102
    total_cost = computer_cost + scanner_cost + cd_burner_cost + printer_cost
    money_left = budget - total_cost
    return money_left

 Executed result: 77
[EXP] 167: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    eggs_per_babysit = 9
    eggs_per_flan = 3
    flans_to_make = 15
    babysits_needed = (flans_to_make * eggs_per_flan) // eggs_per_babysit
    return babysits_needed

 Executed result: 5
[EXP] 168: [success_rate]: False, [answer]: 16, [output]: def solution():
    brooke_age = 0
    while True:
        sETH_age = 2 * brooke_age
        next_sum = sETH_age + brooke_age + 2
        if next_sum == 28:
            return sETH_age

 Executed result: None
[EXP] 169: [success_rate]: True, [answer]: 18, [output]: def solution():
    ethel_money = 8
    jimmy_money = 2 + ethel_money * 2
    return jimmy_money

 Executed result: 18
[EXP] 170: [success_rate]: True, [answer]: 120, [output]: def solution():
    miles_per_day = 20
    miles_per_weekday = 20
    miles_per_weekend = 10
    total_weekdays = 5
    total_weekends = 2
    total_miles_per_week = (total_weekdays * miles_per_weekday) + (total_weekends * miles_per_weekend)
    result = total_miles_per_week
    return result

 Executed result: 120
[EXP] 171: [success_rate]: True, [answer]: 150, [output]: def solution():
    hat_cost = 25
    jacket_cost = hat_cost * 3
    pants_cost = (hat_cost + jacket_cost) / 2
    total_cost = hat_cost + jacket_cost + pants_cost
    return total_cost

 Executed result: 150.0
[EXP] 172: [success_rate]: True, [answer]: 1210, [output]: def solution():
    spiders = 80
    spider_legs = 8
    insects = 90
    insect_legs = 6
    mutant_legs = 3
    total_legs = (spiders * spider_legs) + (insects * insect_legs) + (mutant_legs * 10)
    return total_legs

 Executed result: 1210
[EXP] 173: [success_rate]: False, [answer]: 51, [output]: def solution():
    sally_four = 8
    granny_red = sally_four * 2
    sally_two = granny_red - 3
    total_age = sally_four + sally_two + granny_red
    return total_age

 Executed result: 37
[EXP] 174: [success_rate]: True, [answer]: 18000, [output]: 
def solution():
    student_loans = 300
    credit_card = 200
    mortgage = 500
    total_minimum = student_loans + credit_card + mortgage
    total_additional = total_minimum * 0.5
    total_payment = total_minimum + total_additional
    total_yearly = total_payment * 12
    return total_yearly

 Executed result: 18000.0
[EXP] 175: [success_rate]: False, [answer]: 95, [output]: 
def solution():
    potatoes = 60
    peeling_time = 90  # in seconds
    cutting_time = 5  # in seconds
    total_time = potatoes * (peeling_time + cutting_time)
    hours = total_time // 3600
    minutes = (total_time % 3600) // 60
    seconds = total_time % 60
    return f"It will take Billy {hours} hours, {minutes} minutes, and {seconds} seconds to finish prepping the potatoes."

 Executed result: It will take Billy 1 hours, 35 minutes, and 0 seconds to finish prepping the potatoes.
[EXP] 176: [success_rate]: False, [answer]: 15, [output]: 
def solution():
    cost_lemons = 3
    cost_sugar = 2
    profit = 25
    total_cost = cost_lemons + cost_sugar
    total_revenue = 20 * 0.5
    total_profit = total_revenue - total_cost
    cost_lemons_spent = total_profit - (total_revenue - profit)
    return cost_lemons_spent

 Executed result: 20.0
[EXP] 177: [success_rate]: True, [answer]: 100, [output]: def solution():
    total_asians = 240
    japanese = 80
    chinese = total_asians - japanese
    chinese_boys = 60
    chinese_girls = chinese - chinese_boys
    return chinese_girls

 Executed result: 100
[EXP] 178: [success_rate]: True, [answer]: 350, [output]: 
def solution():
    salary = 6000
    rent = salary / 4
    fuel = salary / 3
    remaining = salary - rent - fuel
    donate = remaining / 2
    expenses = 200 + 700
    total_expenses = rent + fuel + donate + expenses
    money_left = salary - total_expenses
    return money_left

 Executed result: 350.0
[EXP] 179: [success_rate]: True, [answer]: 122, [output]: def solution():
    bo_crabs = 40
    monic_crabs = bo_crabs - 4
    rani_crabs = monic_crabs + 10
    total_crabs = bo_crabs + monic_crabs + rani_crabs
    return total_crabs

 Executed result: 122
[EXP] 180: [success_rate]: True, [answer]: 130, [output]: def solution():
    hourly_wage = 10
    hours_first_week = 5
    hours_second_week = 8
    earnings_first_week = hourly_wage * hours_first_week
    earnings_second_week = hourly_wage * hours_second_week
    total_earnings = earnings_first_week + earnings_second_week
    return total_earnings

 Executed result: 130
[EXP] 181: [success_rate]: True, [answer]: 20, [output]: def solution():
    votes_winner = 80 * 3 // 4
    votes_loser = 80 - votes_winner
    return votes_loser

 Executed result: 20
[EXP] 182: [success_rate]: False, [answer]: 160, [output]: 
def solution():
    red_roses = 4 * white_carnations
    calla_lilies = 5 * white_carnations
    total_flowers = red_roses + white_carnations + calla_lilies
    return red_roses

 Executed result: None
[EXP] 183: [success_rate]: True, [answer]: 23, [output]: def solution():
    jan_age = 30
    mark_age = jan_age - 5 * 2
    jean_age = mark_age + 2
    return jean_age

 Executed result: 22
[EXP] 184: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    team1_time = 55
    team2_time1 = 60
    team2_time2 = team2_time1 - 3
    team2_time3 = team2_time2 - 3
    team2_time4 = team2_time3 - 3
    total_time1 = team1_time
    total_time2 = team2_time1 + team2_time2 + team2_time3 + team2_time4
    result = total_time2 - total_time1
    return result

 Executed result: 167
[EXP] 185: [success_rate]: False, [answer]: 25, [output]: 
import random
import math

def solution():
    total_outcomes = 6
    favorable_outcomes_greater_than_3 = 3
    favorable_outcomes_even_in_a_row = 1
    probability_greater_than_3 = favorable_outcomes_greater_than_3 / total_outcomes
    probability_even_in_a_row = favorable_outcomes_even_in_a_row / total_outcomes
    difference = probability_greater_than_3 - probability_even_in_a_row
    percentage = (difference / probability_even_in_a_row) * 100
    return percentage

 Executed result: 200.00000000000006
[EXP] 186: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    mom_apples = 20
    jenna_apples = mom_apples / 2
    total_apples = mom_apples + jenna_apples
    result = total_apples
    return result

 Executed result: 30.0
[EXP] 187: [success_rate]: False, [answer]: 5, [output]: def solution():
    straw_spent_on_rats = 160
    straw_spent_on_hamsters = 10 * 5
    straw_spent_on_rabbits = 20
    straw_spent = straw_spent_on_rats + straw_spent_on_hamsters + straw_spent_on_rabbits
    straw_per_rat = straw_spent_on_rats // 3
    return straw_per_rat

 Executed result: 53
[EXP] 188: [success_rate]: True, [answer]: 106, [output]: def solution():
    amount_owed = 100
    interest_rate = 0.02
    months = 3
    total_interest = amount_owed * interest_rate * months
    total_payment = amount_owed + total_interest
    return total_payment

 Executed result: 106.0
[EXP] 189: [success_rate]: True, [answer]: 50, [output]: def solution():
    bag_cost = 20
    transport_cost = 2
    selling_price = 30
    total_profit = 400
    total_revenue = bag_cost + transport_cost
    profit_per_bag = selling_price - total_revenue
    bags_sold = total_profit // profit_per_bag
    return bags_sold

 Executed result: 50
[EXP] 190: [success_rate]: True, [answer]: 34, [output]: 
def solution():
    total_cost_tickets = 20.25
    total_cost_food = total_cost_tickets - 4.50
    total_cost_rides = 2 * 33
    total_cost = total_cost_tickets + total_cost_food + total_cost_rides
    cost_per_person = total_cost / 3
    return cost_per_person

 Executed result: 34.0
[EXP] 191: [success_rate]: True, [answer]: 360, [output]: def solution():
    hours = 3
    peaches_per_minute = 2
    total_peaches = hours * 60  # 60 minutes in an hour
    total_peaches = total_peaches * peaches_per_minute
    result = total_peaches
    return result

 Executed result: 360
[EXP] 192: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    insects_per_duck_per_week = 3.5
    ducks = 10
    insects_per_week = insects_per_duck_per_week * ducks
    insects_per_day = insects_per_week / 7
    result = insects_per_day
    return result

 Executed result: 5.0
[EXP] 193: [success_rate]: True, [answer]: 91, [output]: def solution():
    trees_initial = 50
    trees_planted = 10
    trees_cut = 2
    years = 10
    for _ in range(years):
        trees_initial += trees_planted - trees_cut
    trees_die = int(trees_initial * 0.3)
    trees_left = trees_initial - trees_die
    return trees_left

 Executed result: 91
[EXP] 194: [success_rate]: False, [answer]: 24, [output]: def solution():
    total_flamingos = 18
    flamingos_taken = total_flamingos // 3
    flamingos_left = total_flamingos - flamingos_taken
    flamingos_returned = flamingos_taken

 Executed result: None
[EXP] 195: [success_rate]: True, [answer]: 10, [output]: def solution():
    crayons = 5
    crayon_cost = 2
    money_initial = 20
    money_spent = crayons * crayon_cost
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 10
[EXP] 196: [success_rate]: False, [answer]: 12, [output]: def solution():
    pen_cost = pencil_cost + eraser_cost
    pencil_cost = 1.20
    eraser_cost = 0.30
    number_of_pens = 8
    total_cost = pen_cost * number_of_pens
    return total_cost

 Executed result: None
[EXP] 197: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    carrots_initial = 200
    restaurants = 40
    carrots_per_restaurant = 2
    carrots_used = restaurants * carrots_per_restaurant
    carrots_left = carrots_initial - carrots_used
    return carrots_left

 Executed result: 120
[EXP] 198: [success_rate]: True, [answer]: 6277, [output]: def solution():
    total_population = 23786
    men = 8417
    women = 9092
    total_men_and_women = men + women
    kids = total_population - total_men_and_women
    return kids

 Executed result: 6277
[EXP] 199: [success_rate]: False, [answer]: 320, [output]: def solution():
    pokemon_initial = 20
    month1 = pokemon_initial * 3
    month2 = month1 - 20
    month3 = month1 + month2
    return pokemon_initial + month1 + month2 + month3

 Executed result: 220
[EXP] 200: [success_rate]: True, [answer]: 7500, [output]: def solution():
    sentence_number = 1000
    sentence_rate_a = 5
    sentence_rate_b = sentence_rate_a * 2
    sentences_for_a = sentence_number // 2
    sentences_for_b = sentence_number - sentences_for_a
    money_for_a = sentences_for_a * sentence_rate_a
    money_for_b = sentences_for_b * sentence_rate_b
    money_total = money_for_a + money_for_b
    return money_total

 Executed result: 7500
[EXP] 201: [success_rate]: True, [answer]: 55, [output]: def solution():
    pails_morning = 5
    pails_afternoon = 6
    pails_daily = pails_morning + pails_afternoon
    liters_per_pail = 5
    liters_daily = pails_daily * liters_per_pail
    return liters_daily

 Executed result: 55
[EXP] 202: [success_rate]: False, [answer]: 114,200, [output]: def solution():
    award = 5000
    raise_percentage = 0.05
    weekly_salary = 2000
    weeks_in_year = 52

    new_salary = weekly_salary * (1 + raise_percentage)
    total_salary = new_salary * weeks_in_year

    return total_salary + award

 Executed result: 114200.0
[EXP] 203: [success_rate]: True, [answer]: 100, [output]: def solution():
    acres = 10
    tons_per_acre = 5
    tons_per_year = acres * tons_per_acre
    barrels_per_ton = 2
    barrels_per_year = tons_per_year * barrels_per_ton
    result = barrels_per_year
    return result

 Executed result: 100
[EXP] 204: [success_rate]: True, [answer]: 31, [output]: def solution():
    slices_per_sandwich = 2
    sandwiches = 7
    slices_per_omelet = slices_per_sandwich + 1
    omelets = 3
    slices_in_macaroni = 8
    total_slices = slices_per_sandwich * sandwiches + slices_per_omelet * omelets + slices_in_macaroni
    result = total_slices
    return result

 Executed result: 31
[EXP] 205: [success_rate]: True, [answer]: 98, [output]: 
def solution():
    green_pens = 22
    yellow_pens = 10
    blue_pens_in_bag = 9
    red_pens_in_bag = 6
    blue_pens = 6
    red_pens = 2
    total_blue_pens = blue_pens * blue_pens_in_bag
    total_red_pens = red_pens * red_pens_in_bag
    total_pens = green_pens + yellow_pens + total_blue_pens + total_red_pens
    result = total_pens
    return result

 Executed result: 98
[EXP] 206: [success_rate]: False, [answer]: 98, [output]: 
def solution():
    scores = [89, 71, 92, 100, 86]
    average_target = 93
    total_scores = sum(scores)
    min_score = min(scores)
    total_scores -= min_score
    total_scores += average_target * 6 - total_scores / (6 - 1)
    result = total_scores / 6
    return round(result)

 Executed result: 142
[EXP] 207: [success_rate]: True, [answer]: 860, [output]: def solution():
    total_km = 0
    km_per_week = 0
    for week in range(4):  # 4 weeks
        km_per_week += 5 * 25  # 5 times a week, 25 km each time
    total_km += km_per_week
    km_per_week = 0
    for week in range(3):  # 3 weeks
        km_per_week += 2 * 60  # 2 times a week, 60 km each time
    total_km += km_per_week
    result = total_km
    return result

 Executed result: 860
[EXP] 208: [success_rate]: True, [answer]: 2600, [output]: def solution():
    chocolate_bars = 25
    candied_apples = 80
    chocolate_weight = 40
    apple_weight = chocolate_weight / 2
    
    total_weight_chocolate = chocolate_bars * chocolate_weight
    total_weight_apples = candied_apples * apple_weight
    
    total_weight = total_weight_chocolate + total_weight_apples
    return total_weight

 Executed result: 2600.0
[EXP] 209: [success_rate]: True, [answer]: 76, [output]: def solution():
    cakes_monday = 4
    cakes_tuesday = cakes_monday * 3
    cakes_wednesday = cakes_tuesday * 5
    total_cakes = cakes_monday + cakes_tuesday + cakes_wednesday
    return total_cakes

 Executed result: 76
[EXP] 210: [success_rate]: False, [answer]: 145, [output]: 
def solution():
    plates = 6000
    dozen_plates = plates * 6
    dozen_cups = dozen_plates - 1200
    cups = dozen_cups / 12
    return cups

 Executed result: 2900.0
[EXP] 211: [success_rate]: True, [answer]: 10, [output]: def solution():
    money_initial = 10
    jacket_cost = 30
    shoes_cost = 20
    shoes_count = 2
    money_earned = 5
    money_per_lawncutting = 4
    total_spend = jacket_cost + shoes_cost * shoes_count
    money_needed = total_spend - money_initial
    money_earned_babysitting = money_needed
    money_earned_cutting_lawn = 0
    while money_earned_babysitting > 0:
        money_earned_babysitting -= money_earned
        money_earned_cutting_lawn += 1
    money_earned_cutting_lawn -= 1
    result = money_earned_cutting_lawn
    return result

 Executed result: 11
[EXP] 212: [success_rate]: False, [answer]: 4, [output]: def solution():
    red_chickens = 0
    white_chickens = 0
    red_eggs = 3
    white_eggs = 5
    total_eggs = 42
    total_eggs_per_day = red_eggs * red_chickens + white_eggs * white_chickens
    while total_eggs_per_day < total_eggs:
        red_chickens += 1
        white_chickens += 1
        total_eggs_per_day = red_eggs * red_chickens + white_eggs * white_chickens
    red_chickens -= 1
    white_chickens -= 1
    while white_chickens - red_chickens != 2:
        white_chickens -= 1
        white_eggs_per_day = white_eggs * (white_chickens - 1)
        while white_eggs_per_day < total_eggs - red_eggs * red_chickens:
            red_chickens += 1
            white_eggs_per_day = white_eggs * (white_chickens - 1)
    return red_chickens

 Executed result: None
[EXP] 213: [success_rate]: True, [answer]: 5, [output]: def solution():
    park_length = 1.5
    park_width = 6
    park_perimeter = 2 * (park_length + park_width)
    gary_speed = 3
    hours_spent = park_perimeter / gary_speed
    result = hours_spent
    return result

 Executed result: 5.0
[EXP] 214: [success_rate]: False, [answer]: 250, [output]: def solution():
    customers_first_day = 100
    customers_second_day = customers_first_day + 50
    customers_third_day = 500
    customers_third_day_calculated = customers_first_day + customers_second_day
    customers_third_day_expected = customers_third_day_calculated + (customers_third_day - customers_third_day_calculated)
    return customers_third_day_expected

 Executed result: 500
[EXP] 215: [success_rate]: False, [answer]: 8, [output]: def solution():
    big_pool_rate = 4
    small_pool_rate = 4
    time = 4
    big_pool_water = (big_pool_rate - small_pool_rate) * time
    small_pool_water = big_pool_water / 3
    result = small_pool_water
    return result

 Executed result: 0.0
[EXP] 216: [success_rate]: True, [answer]: 44, [output]: def solution():
    shoes = 320
    belt = 32
    total_cost = shoes + belt
    hourly_wage = 8
    hours_worked = total_cost / hourly_wage
    return hours_worked

 Executed result: 44.0
[EXP] 217: [success_rate]: True, [answer]: 220, [output]: def solution():
    borrowed = 2000
    additional = borrowed * 0.10
    total_to_pay = borrowed + additional
    monthly_payment = 165
    months = 12
    total_paid = monthly_payment * months
    remaining_balance = total_to_pay - total_paid
    return remaining_balance

 Executed result: 220.0
[EXP] 218: [success_rate]: True, [answer]: 15, [output]: def solution():
    roses = 4
    dahlias = roses + 7
    total_flowers = roses + dahlias
    return total_flowers

 Executed result: 15
[EXP] 219: [success_rate]: True, [answer]: 45, [output]: def solution():
    harriet_age = 21
    zack_age = 2 * harriet_age
    adrian_age = 3 * harriet_age
    total_age = zack_age + harriet_age + adrian_age
    future_total_age = total_age + (3 * 3)
    average_age = future_total_age / 3
    return average_age

 Executed result: 45.0
[EXP] 220: [success_rate]: False, [answer]: 54, [output]: 
def solution():
    total_points = 251
    naomi_points = 68
    yuri_points = naomi_points + (naomi_points // 2) + 10
    brianna_points = naomi_points + 17
    jojo_points = total_points - naomi_points - yuri_points - brianna_points
    return jojo_points

 Executed result: -14
[EXP] 221: [success_rate]: True, [answer]: 70, [output]: def solution():
    crossword_minutes = 10
    sudoku_minutes = 5
    crosswords_solved = 3
    sudokus_solved = 8
    time_spent_crosswords = crossword_minutes * crosswords_solved
    time_spent_sudokus = sudoku_minutes * sudokus_solved
    total_time = time_spent_crosswords + time_spent_sudokus
    result = total_time
    return result

 Executed result: 70
[EXP] 222: [success_rate]: True, [answer]: 90, [output]: def solution():
    water_initial = 120
    water_used = 90
    water_left = water_initial - water_used
    rainwater_collected = 2 * water_left
    water_now = water_left + rainwater_collected
    return water_now

 Executed result: 90
[EXP] 223: [success_rate]: True, [answer]: 140, [output]: def solution():
    geraniums = 90
    petunias = geraniums - 40
    total = geraniums + petunias
    return total

 Executed result: 140
[EXP] 224: [success_rate]: True, [answer]: 20000, [output]: 
def solution():
    amount_spent_first_year = 15000
    amount_spent_second_year = amount_spent_first_year / 3
    total_amount_spent = amount_spent_first_year + amount_spent_second_year
    return total_amount_spent

 Executed result: 20000.0
[EXP] 225: [success_rate]: True, [answer]: 180, [output]: def solution():
    canoe_cost = 30
    banana_boat_cost = 18
    canoe_hours = 3
    banana_boat_hours = 5
    canoe_total = canoe_cost * canoe_hours
    banana_boat_total = banana_boat_cost * banana_boat_hours
    total_cost = canoe_total + banana_boat_total
    return total_cost

 Executed result: 180
[EXP] 226: [success_rate]: False, [answer]: 9, [output]: def solution():
    days_to_travel_by_bus = 6
    days_to_travel_by_car = days_to_travel_by_bus / 2
    days_to_travel_to_rochester = days_to_travel_by_bus
    days_to_return_by_car = days_to_travel_by_car

 Executed result: None
[EXP] 227: [success_rate]: True, [answer]: 33, [output]: def solution():
    fire_cards = 30
    grass_cards = 20
    water_cards = 40
    water_cards_lost = 8
    grass_cards_bought = 14
    total_cards = fire_cards + grass_cards + water_cards
    water_cards_after_loss = water_cards - water_cards_lost
    total_cards_after_loss = fire_cards + grass_cards + water_cards_after_loss
    total_cards_after_bought = total_cards_after_loss + grass_cards_bought
    water_cards_after_bought = water_cards_after_loss
    water_chance = (water_cards_after_bought / total_cards_after_bought) * 100
    return round(water_chance)

 Executed result: 33
[EXP] 228: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    base_burrito = 6.50
    extra_meat = 2.00
    extra_cheese = 1.00
    avocado = 1.00
    sauces = 0.25 * 2
    upgrade = 3.00
    gift_card = 5.00
    total_cost = base_burrito + extra_meat + extra_cheese + avocado + sauces + upgrade
    total_cost -= gift_card
    result = total_cost
    return result

 Executed result: 9.0
[EXP] 229: [success_rate]: True, [answer]: 1, [output]: def solution():
    puzzle_pieces = 360
    kalinda_pieces = 4
    mom_pieces = kalinda_pieces / 2
    total_pieces_per_minute = kalinda_pieces + mom_pieces
    time_taken = puzzle_pieces / total_pieces_per_minute
    hours_taken = time_taken / 60
    return hours_taken

 Executed result: 1.0
[EXP] 230: [success_rate]: True, [answer]: 21, [output]: 
def solution():
    baby_watermelons = 120
    harvested_after_two_months = 0.3 * baby_watermelons
    remaining_after_two_months = baby_watermelons - harvested_after_two_months
    harvested_after_two_weeks = 0.75 * remaining_after_two_months
    not_ready_after_two_weeks = remaining_after_two_months - harvested_after_two_weeks
    return not_ready_after_two_weeks

 Executed result: 21.0
[EXP] 231: [success_rate]: False, [answer]: 276,000, [output]: def solution():
    cars = 12
    car_price = 20000
    tax = 0.10
    registration = 1000
    total_cost = cars * car_price + (cars * car_price * tax) + (cars * registration)
    result = total_cost
    return result

 Executed result: 276000.0
[EXP] 232: [success_rate]: True, [answer]: 50, [output]: def solution():
    roberts_shells = 20
    kylie_shells_monday = roberts_shells + 5
    kylie_shells_tuesday = kylie_shells_monday * 2
    result = kylie_shells_tuesday
    return result

 Executed result: 50
[EXP] 233: [success_rate]: True, [answer]: 75, [output]: 
def solution():
    ants = 50
    bugs = ants / 2
    total_insects = ants + bugs
    return total_insects

 Executed result: 75.0
[EXP] 234: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    penguins = 36
    penguins_swimming = penguins // 3
    penguins_eating = penguins // 3
    penguins_left = penguins - penguins_swimming - penguins_eating
    return penguins_left

 Executed result: 12
[EXP] 235: [success_rate]: False, [answer]: 21, [output]: def solution():
    tomatoes_per_day = 6
    tomatoes_per_vine_per_week = 3 * 7
    girlfriend_tomatoes_per_day = tomatoes_per_day / 2
    girlfriend_tomatoes_per_week = girlfriend_tomatoes_per_day * 7
    girlfriend_tomatoes_per_vine_per_week = girlfriend_tomatoes_per_week / 7
    steve_tomatoes_per_vine_per_week = tomatoes_per_vine_per_week
    girlfriend_tomatoes_per_vine_per_week = girlfriend_tomatoes_per_vine_per_week
    total_tomatoes_per_vine_per_week = steve_tomatoes_per_vine_per_week + girlfriend_tomatoes_per_vine_per_week
    vines_needed = total_tomatoes_per_vine_per_week / tomatoes_per_vine_per_week
    return math.ceil(vines_needed)

 Executed result: None
[EXP] 236: [success_rate]: True, [answer]: 10, [output]: def solution():
    friends = 20
    slices_per_friend = 4
    slices_per_pizza = 8
    total_slices_needed = friends * slices_per_friend
    pizzas_needed = total_slices_needed // slices_per_pizza
    return pizzas_needed

 Executed result: 10
[EXP] 237: [success_rate]: False, [answer]: 31, [output]: 
def solution():
    pens_initial = 25
    ink_per_pen = 5
    total_pens = 0
    while pens_initial > 0:
        pens_initial -= 1
        total_pens += 1
        if pens_initial % ink_per_pen == 0:
            pens_initial = pens_initial // ink_per_pen
            total_pens += 1
    result = total_pens
    return result

 Executed result: 11
[EXP] 238: [success_rate]: True, [answer]: 90, [output]: 
def solution():
    allowance = 20
    extra = 10
    total = allowance + extra
    total_after_year = total * 3
    return total_after_year

 Executed result: 90
[EXP] 239: [success_rate]: True, [answer]: 68, [output]: def solution():
    jessa_age = 20
    joan_age = jessa_age + 5
    mary_age = joan_age - 2
    total_age = jessa_age + joan_age + mary_age
    return total_age

 Executed result: 68
[EXP] 240: [success_rate]: True, [answer]: 280, [output]: def solution():
    students_initial = 1000
    students_exit_A = 0.3 * students_initial
    students_remaining = students_initial - students_exit_A
    students_exit_B = 3/5 * students_remaining
    students_exit_C = students_initial - students_exit_A - students_exit_B
    return students_exit_C

 Executed result: 280.0
[EXP] 241: [success_rate]: True, [answer]: 21, [output]: def solution():
    john_candies = 54
    robert_candies = john_candies // 2
    james_candies = robert_candies + 6
    john_has_more = john_candies - james_candies
    return john_has_more

 Executed result: 21
[EXP] 242: [success_rate]: True, [answer]: 6, [output]: def solution():
    dolly_books = 2
    pandora_books = 1
    dolly_reads_pandora_books = pandora_books
    pandora_reads_dolly_books = dolly_books
    total_books_read = dolly_books + pandora_books + dolly_reads_pandora_books + pandora_reads_dolly_books
    result = total_books_read
    return result

 Executed result: 6
[EXP] 243: [success_rate]: False, [answer]: 3, [output]: def solution():
    penpals_initial = 5
    penpals_stopped = 2
    letters_per_week = 2
    pages_per_letter = 5
    responses_per_letter = 1
    pages_per_response = pages_per_letter
    minutes_per_page = 6
    hours_per_week = 0
    
    penpals_left = penpals_initial - penpals_stopped
    letters_sent = penpals_left * letters_per_week
    pages_sent = letters_sent * pages_per_letter
    pages_received = pages_sent * responses_per_letter
    pages_to_write = pages_received * pages_per_response
    minutes_to_write = pages_to_write * minutes_per_page
    hours_to_write = minutes_to_write / 60
    
    result = hours_to_write
    return result

 Executed result: 15.0
[EXP] 244: [success_rate]: True, [answer]: 250, [output]: 
def solution():
    minutes_plan = 1000
    minutes_used_by_boss = 15 * 30
    minutes_extra = 300
    total_minutes_used = minutes_used_by_boss + minutes_extra
    minutes_left = minutes_plan - total_minutes_used
    result = minutes_left
    return result

 Executed result: 250
[EXP] 245: [success_rate]: True, [answer]: 20, [output]: def solution():
    french_fries_initial = 24
    fries_taken_by_kyle = 5
    fries_taken_by_billy = fries_taken_by_kyle * 2
    fries_taken_by_colby = fries_taken_by_kyle - 3
    total_fries_taken = fries_taken_by_kyle + fries_taken_by_billy + fries_taken_by_colby
    french_fries_left = french_fries_initial - total_fries_taken
    french_fries_given_by_ginger = french_fries_left - 27
    return french_fries_given_by_ginger

 Executed result: -20
[EXP] 246: [success_rate]: False, [answer]: 7, [output]: 
def solution():
    snails_aquarium1 = 4
    snails_aquarium2 = 32
    total_snails = snails_aquarium1 + snails_aquarium2
    diff_snails = snails_aquarium2 - snails_aquarium1
    fish = diff_snails // 2
    return fish

 Executed result: 14
[EXP] 247: [success_rate]: True, [answer]: 27000, [output]: 
def solution():
    makeup_artist_rate = 250
    hours_per_day = 6
    days_per_week = 4
    weeks = 5
    total_hours = hours_per_day * days_per_week * weeks
    total_cost = total_hours * makeup_artist_rate
    discount = total_cost * 0.10
    final_cost = total_cost - discount
    return final_cost

 Executed result: 27000.0
[EXP] 248: [success_rate]: True, [answer]: 32, [output]: 
def solution():
    total_cost = 12 + 43 + 15 + 4 + 22
    total_people = 3
    cost_per_person = total_cost / total_people
    result = cost_per_person
    return result

 Executed result: 32.0
[EXP] 249: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    bags = 4
    weight_per_bag = 50
    weight = bags * weight_per_bag
    cost_per_pound = 1.50
    cost = weight * cost_per_pound
    return cost

 Executed result: 300.0
[EXP] 250: [success_rate]: False, [answer]: 5,600, [output]: def solution():
    sister_monday = 5
    sister_tuesday = 13
    sue_monday = sister_monday * 4
    sue_tuesday = sister_tuesday * 2
    sue_total = sue_monday + sue_tuesday
    sister_total = sister_monday + sister_tuesday
    sue_calories = sue_total * 200
    sister_calories = sister_total * 200
    difference = sue_calories - sister_calories
    return difference

 Executed result: 5600
[EXP] 251: [success_rate]: False, [answer]: 17, [output]: 
def solution():
    total_students = 3 * 20
    total_boys = total_students / 2
    total_girls = total_students / 2
    class1_girls = 15
    class2_girls = 12
    class1_girls_all_classes = class1_girls + class2_girls
    total_girls_all_classes = class1_girls_all_classes
    boys_in_third_class = total_boys - (total_girls - total_girls_all_classes)
    result = int(boys_in_third_class)
    return result

 Executed result: 27
[EXP] 252: [success_rate]: True, [answer]: 70, [output]: def solution():
    apps_initial = 61
    apps_deleted = 9
    apps_downloaded = 18
    apps_left = apps_initial - apps_deleted
    apps_now = apps_left + apps_downloaded
    return apps_now

 Executed result: 70
[EXP] 253: [success_rate]: False, [answer]: 73, [output]: 
def solution():
    wolves_previous = 10
    cougars_previous = 15
    wolves_today = wolves_previous + 3 * (cougars_previous - 15)
    cougars_today = cougars_previous - 3
    total_animals = wolves_previous + cougars_previous + wolves_today + cougars_today
    return total_animals

 Executed result: 47
[EXP] 254: [success_rate]: True, [answer]: 18, [output]: def solution():
    starting_floor = 3
    destination_floor = 4 * starting_floor + 6
    return destination_floor

 Executed result: 18
[EXP] 255: [success_rate]: True, [answer]: 84, [output]: def solution():
    mitchel = 30
    anne = mitchel - (mitchel * 0.3)
    robert = anne * 4
    return robert

 Executed result: 84.0
[EXP] 256: [success_rate]: True, [answer]: 192, [output]: 
def solution():
    total_stalls = 10
    cows_per_stall = 20
    new_cows = 40
    total_cows = total_stalls * cows_per_stall + new_cows
    cows_per_stall_after = cows_per_stall + new_cows // total_stalls
    cows_in_eight_stalls = cows_per_stall_after * 8
    return cows_in_eight_stalls

 Executed result: 192
[EXP] 257: [success_rate]: True, [answer]: 45, [output]: def solution():
    pennies = 100
    nickels = 40
    dimes = 20
    dollar_bills = 40
    pennies_value = pennies / 100
    nickels_value = nickels * 0.05
    dimes_value = dimes * 0.1
    dollar_bills_value = dollar_bills
    total_value = pennies_value + nickels_value + dimes_value + dollar_bills_value
    result = total_value
    return result

 Executed result: 45.0
[EXP] 258: [success_rate]: True, [answer]: 5600, [output]: 
def solution():
    sections = 200 // 10
    weight_per_section = 400
    total_weight = sections * weight_per_section
    weight_lost = total_weight * 0.3
    weight_left = total_weight - weight_lost
    return weight_left

 Executed result: 5600.0
[EXP] 259: [success_rate]: True, [answer]: 6, [output]: def solution():
    fine_per_book = 0.5
    num_books = 8
    fine = fine_per_book * num_books
    fee = 2.0
    total_fine = fine + fee
    return total_fine

 Executed result: 6.0
[EXP] 260: [success_rate]: True, [answer]: 168, [output]: 
def solution():
    andrea_apples = 52
    jamal_apples = andrea_apples - 8
    jamal_bananas = jamal_apples + 4
    andrea_bananas = jamal_bananas // 2
    total_fruits = andrea_apples + andrea_bananas + jamal_apples + jamal_bananas
    return total_fruits

 Executed result: 168
[EXP] 261: [success_rate]: False, [answer]: 11, [output]: 
def solution():
    cookies_today = 36
    cookies_tomorrow = 30
    total_cookies = cookies_today + cookies_tomorrow
    cups_of_flour = total_cookies // 12
    return cups_of_flour

 Executed result: 5
[EXP] 262: [success_rate]: True, [answer]: 62, [output]: def solution():
    pennies = 9300
    two_thirds = pennies * 2/3
    total_cents = two_thirds * 1
    total_dollars = total_cents / 100
    return total_dollars

 Executed result: 62.0
[EXP] 263: [success_rate]: True, [answer]: 270, [output]: def solution():
    marbles_initial = 5 * 50
    marbles_received = 20
    marbles_total = marbles_initial + marbles_received
    result = marbles_total
    return result

 Executed result: 270
[EXP] 264: [success_rate]: True, [answer]: 8, [output]: def solution():
    chris_trees = 6
    ferdinand_trees = chris_trees // 2
    harry_trees = 2 * ferdinand_trees + 5
    return harry_trees - ferdinand_trees

 Executed result: 8
[EXP] 265: [success_rate]: True, [answer]: 400, [output]: def solution():
    carmen_money = 100
    samantha_money = carmen_money + 25
    daisy_money = samantha_money + 50
    total_money = carmen_money + samantha_money + daisy_money
    return total_money

 Executed result: 400
[EXP] 266: [success_rate]: True, [answer]: 9500, [output]: def solution():
    selling_price = 350000
    brokerage_fee = selling_price * 0.05
    transfer_fee = selling_price * 0.12
    total_price = selling_price + brokerage_fee + transfer_fee
    over_budget = total_price - 400000
    return over_budget

 Executed result: 9500.0
[EXP] 267: [success_rate]: True, [answer]: 118000, [output]: def solution():
    house_price = 400000
    transfer_fee = house_price * 0.03
    brokerage_fee = house_price * 0.05
    total_fee = transfer_fee + brokerage_fee
    money_left = house_price - total_fee - 250000
    result = money_left
    return result

 Executed result: 118000.0
[EXP] 268: [success_rate]: False, [answer]: 91, [output]: def solution():
    warm_up_time = 20
    target_temp = 400
    desired_temp = 300
    time_to_target = (warm_up_time * 1.4)  # 40% longer than warm up time
    cook_time = time_to_target - 5
    total_time = warm_up_time + time_to_target + cook_time
    return total_time

 Executed result: 71.0
[EXP] 269: [success_rate]: True, [answer]: 1375, [output]: def solution():
    newspaper_cost = 5
    tv_cost = 75
    newspaper_ads = 50
    tv_ads = 15
    total_spent_on_newspaper = newspaper_ads * newspaper_cost
    total_spent_on_tv = tv_ads * tv_cost
    total_spent = total_spent_on_newspaper + total_spent_on_tv
    return total_spent

 Executed result: 1375
[EXP] 270: [success_rate]: True, [answer]: 4, [output]: def solution():
    balls = 16
    golf_balls = balls / 2
    blue_golf_balls = golf_balls / 2
    return blue_golf_balls

 Executed result: 4.0
[EXP] 271: [success_rate]: True, [answer]: 762, [output]: def solution():
    bag1 = 300
    bag2 = bag1 + 12
    bag3 = bag1 // 2
    total_mms = bag1 + bag2 + bag3
    return total_mms

 Executed result: 762
[EXP] 272: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    bedrooms_per_house = 3
    windows_per_bedroom = 2
    additional_windows_per_house = 4
    total_bedrooms = 2 * bedrooms_per_house
    total_windows_per_house = total_bedrooms * windows_per_bedroom + additional_windows_per_house
    total_windows = 2 * total_windows_per_house
    return total_windows

 Executed result: 32
[EXP] 273: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_cost = 4.20 + 9.45 + 1.35
    change = 20 - total_cost
    return change

 Executed result: 5.000000000000002
[EXP] 274: [success_rate]: True, [answer]: 315, [output]: 
def solution():
    body_stitches = 900
    collar_stitches = body_stitches // 10
    rosette_stitches = collar_stitches * 2
    total_stitches = body_stitches + collar_stitches + rosette_stitches
    sleeve_stitches = (total_stitches - 1800) // 2
    return sleeve_stitches

 Executed result: -315
[EXP] 275: [success_rate]: True, [answer]: 3200, [output]: def solution():
    tomato_seeds = 20
    tomato_cost = 40
    celery_seeds = 80
    celery_cost = 30
    total_cost = (tomato_seeds * tomato_cost) + (celery_seeds * celery_cost)
    return total_cost

 Executed result: 3200
[EXP] 276: [success_rate]: True, [answer]: 138, [output]: 
def solution():
    song_lines = 54
    first_scene_lines = 2 * song_lines
    first_scene_his_lines = first_scene_lines // 3
    second_scene_lines = song_lines + 6
    second_scene_his_lines = second_scene_lines * 4 // 5
    lines_to_memo = first_scene_his_lines + second_scene_his_lines + song_lines
    return lines_to_memo

 Executed result: 138
[EXP] 277: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    cards = 80
    cards_with_letter_a = int(2/5 * cards)
    cards_left = cards - cards_with_letter_a
    cards_with_letter_b = int(1/2 * cards_left)
    cards_left = cards_left - cards_with_letter_b
    cards_with_letter_c = int(5/8 * cards_left)
    cards_left = cards_left - cards_with_letter_c
    cards_with_letter_d = cards_left
    result = cards_with_letter_d
    return result

 Executed result: 9
[EXP] 278: [success_rate]: False, [answer]: 4, [output]: def solution():
    small_hole_time = 3
    small_holes = 30
    large_hole_time = 10
    large_holes = 15
    time_sm = small_holes * small_hole_time
    time_lg = large_holes * large_hole_time
    total_time = time_sm + time_lg
    hours = total_time // 60
    minutes = total_time % 60
    result = f"{hours} hours and {minutes} minutes"
    return result

 Executed result: 4 hours and 0 minutes
[EXP] 279: [success_rate]: False, [answer]: 40, [output]: def solution():
    mico_age = 0
    marco_age = 0
    sum_of_ages = 20
    total_age_in_10_years = sum_of_ages
    mico_age += 10
    marco_age += 10
    total_age_in_10_years = mico_age + marco_age
    return total_age_in_10_years

 Executed result: 20
[EXP] 280: [success_rate]: False, [answer]: 6, [output]: def solution():
    ruby_future = 3 * (Sam + 9)
    ruby_current = ruby_future - 9
    Sam = ruby_current / 6
    return int(Sam)

 Executed result: None
[EXP] 281: [success_rate]: True, [answer]: 7, [output]: def solution():
    popsicles = 20
    popsicle_cost = 0.25
    popsicle_total = popsicles * popsicle_cost
    ice_cream = 4
    ice_cream_cost = 0.50
    ice_cream_total = ice_cream * ice_cream_cost
    total_cost = popsicle_total + ice_cream_total
    result = total_cost
    return result

 Executed result: 7.0
[EXP] 282: [success_rate]: True, [answer]: 2450, [output]: def solution():
    cobra_spots = 70
    mamba_spots = cobra_spots // 2
    total_cobras = 40
    total_mambas = 60
    total_spots_cobras = total_cobras * cobra_spots
    total_spots_mambas = total_mambas * mamba_spots
    total_spots = total_spots_cobras + total_spots_mambas
    half_total_spots = total_spots // 2
    return half_total_spots

 Executed result: 2450
[EXP] 283: [success_rate]: False, [answer]: 195, [output]: def solution():
    num_people = 12 + 3
    num_guests = num_people * 2
    total_people = num_people + num_guests
    num_pizzas = -(-total_people // 3)  # Ceiling division
    num_pizzas += 1  # In case total_people is not exactly divisible by 3
    pizza_cost = num_pizzas * 15
    return pizza_cost

 Executed result: 240
[EXP] 284: [success_rate]: False, [answer]: 68, [output]: 
def solution():
    topaz_length = 8
    total_length = 25
    bead_length = 0.25
    total_beads = (total_length - topaz_length) / bead_length
    result = int(topaz_length + total_beads)
    return result

 Executed result: 76
[EXP] 285: [success_rate]: True, [answer]: 360, [output]: 
def solution():
    alani_stories = 20
    braylen_stories = 40
    margot_stories = 60
    
    alani_stories_in_week2 = alani_stories * 2
    braylen_stories_in_week2 = braylen_stories * 2
    margot_stories_in_week2 = margot_stories * 2
    
    total_stories_in_week1 = alani_stories + braylen_stories + margot_stories
    total_stories_in_week2 = alani_stories_in_week2 + braylen_stories_in_week2 + margot_stories_in_week2
    
    total_stories = total_stories_in_week1 + total_stories_in_week2
    return total_stories

 Executed result: 360
[EXP] 286: [success_rate]: True, [answer]: 21, [output]: def solution():
    ann_age = 9
    brother_age = 2 * ann_age
    ann_age_in_3_years = ann_age + 3
    brother_age_in_3_years = brother_age + 3
    result = brother_age_in_3_years
    return result

 Executed result: 21
[EXP] 287: [success_rate]: True, [answer]: 90, [output]: def solution():
    quarters = 5
    dimes = 2
    quarters_to_cents = quarters * 25
    dimes_to_cents = dimes * 10
    total_cents = quarters_to_cents + dimes_to_cents
    pop_cost = 55
    money_left = total_cents - pop_cost
    return money_left

 Executed result: 90
[EXP] 288: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    total_stars = 76
    row1 = 8 * 3
    row2 = 6 * 2
    total_stars_in_rows = row1 + row2
    total_stars_left = total_stars - total_stars_in_rows
    rows_of_five = total_stars_left // 5
    return rows_of_five

 Executed result: 8
[EXP] 289: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    flagstone_weight = 75
    total_weight = 2000
    flagstones = 80
    truck_load = flagstones * flagstone_weight
    trucks_needed = 0
    while truck_load > total_weight:
        truck_load -= total_weight
        trucks_needed += 1
    result = trucks_needed
    return result

 Executed result: 2
[EXP] 290: [success_rate]: False, [answer]: 16, [output]: def solution():
    fast_lane_speed = 60
    slow_lane_speed = fast_lane_speed / 2
    fast_lane_distance = 480
    fast_lane_time = fast_lane_distance / fast_lane_speed
    slow_lane_time = fast_lane_time
    return slow_lane_time

 Executed result: 8.0
[EXP] 291: [success_rate]: True, [answer]: 390, [output]: 
def solution():
    ali_medals = 22
    izzy_medals = ali_medals - 5
    total_medals = ali_medals + izzy_medals
    total_medals_given_out = total_medals * 10
    return total_medals_given_out

 Executed result: 390
[EXP] 292: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    total_packets = 8
    total_chocolate = total_packets * 5
    adult_chocolate = 4 * 6
    remaining_chocolate = total_chocolate - adult_chocolate
    children = 8
    chocolate_per_child = remaining_chocolate // children
    return chocolate_per_child

 Executed result: 2
[EXP] 293: [success_rate]: False, [answer]: 75, [output]: def solution():
    minutes_worked = 210  # 3 hours in minutes
    minutes_paused = 30  # half an hour in minutes
    total_minutes = minutes_worked - minutes_paused
    money_per_minute = 5 / 10
    money_earned = total_minutes * money_per_minute
    return money_earned

 Executed result: 90.0
[EXP] 294: [success_rate]: True, [answer]: 83, [output]: def solution():
    mike = 21
    jim = mike - 3
    tony = mike * 2
    if mike > 20:
        mike += 1
    if jim > 20:
        jim += 1
    if tony > 20:
        tony += 1
    total_points = mike + jim + tony
    return total_points

 Executed result: 83
[EXP] 295: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    oranges = 15
    oldest_son = 8
    youngest_son = oldest_son // 2
    oranges_washed = oldest_son + youngest_son
    oranges_left = oranges - oranges_washed
    return oranges_left

 Executed result: 3
[EXP] 296: [success_rate]: True, [answer]: 370, [output]: def solution():
    pushups_day1 = 100
    pushups_day2 = pushups_day1 + 20
    squats_day1 = 50
    squats_day2 = squats_day1 - 10
    dumbbell_presses_day1 = 20
    dumbbell_presses_day2 = dumbbell_presses_day1 * 2
    total_activities_day1 = pushups_day1 + squats_day1 + dumbbell_presses_day1
    total_activities_day2 = pushups_day2 + squats_day2 + dumbbell_presses_day2
    total_activities = total_activities_day1 + total_activities_day2
    return total_activities

 Executed result: 370
[EXP] 297: [success_rate]: True, [answer]: 3, [output]: def solution():
    rice_per_person_per_day = 0.2
    people_per_meal = 5
    meals_per_day = 2
    rice_per_day = people_per_meal * meals_per_day * rice_per_person_per_day
    total_rice = 42
    days_rice_last = total_rice / rice_per_day
    weeks_rice_last = days_rice_last / 7
    result = weeks_rice_last
    return result

 Executed result: 3.0
[EXP] 298: [success_rate]: False, [answer]: 55, [output]: def solution():
    target = 120
    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    sold = [0, 0, 15, 12, 0, 0, 20]
    total_sold = sum(sold)
    result = target - total_sold
    return result

 Executed result: 73
[EXP] 299: [success_rate]: False, [answer]: 500, [output]: def solution():
    opening_bid = 200
    additional_bid = 50
    people = 3
    total_bids = people + 1
    total_cost = 0
    for i in range(total_bids):
        total_cost += additional_bid
    total_cost += opening_bid
    result = total_cost
    return result

 Executed result: 400
[EXP] 300: [success_rate]: True, [answer]: 31800, [output]: def solution():
    distance = 30 * 2  # distance is the round trip distance
    miles_per_day = distance
    days_per_week = 5
    weeks_per_year = 50
    miles_per_year = miles_per_day * days_per_week * weeks_per_year
    cost_per_mile = 2
    total_cost = miles_per_year * cost_per_mile
    bonus_per_month = 150
    bonus_per_year = bonus_per_month * 12
    total_cost = total_cost + bonus_per_year
    result = total_cost
    return result

 Executed result: 31800
[EXP] 301: [success_rate]: True, [answer]: 78, [output]: def solution():
    minutes_sunday = 23
    minutes_monday = 16
    total_minutes = minutes_sunday + minutes_monday
    minutes_tuesday = total_minutes * 2
    return minutes_tuesday

 Executed result: 78
[EXP] 302: [success_rate]: False, [answer]: 8, [output]: def solution():
    pages = 32
    papers = 0
    while pages > 0:
        papers += 1
        pages -= 2
    result = papers
    return result

 Executed result: 16
[EXP] 303: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    money_initial = 50
    money_spent_food = money_initial / 2
    money_spent_rides = 10
    money_spent_total = money_spent_food + money_spent_rides
    money_left = money_initial - money_spent_total
    result = money_left
    return result

 Executed result: 15.0
[EXP] 304: [success_rate]: False, [answer]: 1300, [output]: def solution():
    books_sold_last_year = 2 * (250 - 50 - 45)
    books_sold_current_year = 45
    books_sold_second_year = books_sold_last_year - books_sold_current_year
    books_sold = books_sold_second_year
    money_earned = books_sold * 20
    result = money_earned
    return result

 Executed result: 5300
[EXP] 305: [success_rate]: True, [answer]: 3200, [output]: def solution():
    hours_per_day = 10
    days_per_week = 5
    hours_per_week = hours_per_day * days_per_week
    weekly_salary = hours_per_week * 10
    weekly_bonus = 300
    total_weekly_income = weekly_salary + weekly_bonus
    weeks_in_april = 4
    total_income = total_weekly_income * weeks_in_april
    return total_income

 Executed result: 3200
[EXP] 306: [success_rate]: True, [answer]: 4, [output]: def solution():
    people_arm_wrestled = 20
    people_beaten = int(0.8 * people_arm_wrestled)
    people_lost = people_arm_wrestled - people_beaten
    result = people_lost
    return result

 Executed result: 4
[EXP] 307: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    loaves_per_day = 60
    loaves_sold_morning = loaves_per_day * 2 / 3
    loaves_left = loaves_per_day - loaves_sold_morning
    loaves_sold_afternoon_evening = loaves_left / 2
    result = loaves_sold_afternoon_evening
    return result

 Executed result: 10.0
[EXP] 308: [success_rate]: False, [answer]: 16, [output]: def solution():
    weight_lost_joey = 8
    weight_lost_sandy = weight_lost_joey
    weeks_joey = 4
    weeks_sandy = weight_lost_joey / (weight_lost_sandy / weeks_joey)
    result = weeks_sandy
    return result

 Executed result: 4.0
[EXP] 309: [success_rate]: True, [answer]: 6, [output]: def solution():
    ice_cream_price = 13
    discounted_ice_cream_price = 11
    discount_per_packet = 0.5
    ice_cream_savings = 2 * (ice_cream_price - discounted_ice_cream_price)
    milk_savings = 4 * discount_per_packet
    total_savings = ice_cream_savings + milk_savings
    return total_savings

 Executed result: 6.0
[EXP] 310: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    extra_arms = 15 // 3
    extra_legs = 15 // 5
    total_limbs = extra_arms + extra_legs
    return total_limbs

 Executed result: 8
[EXP] 311: [success_rate]: False, [answer]: 2050, [output]: def solution():
    total_money = 6000
    suits = 6
    suit_cost = 100
    suitcases = 3
    suitcase_cost = 50
    flight_cost = 5 * suit_cost * 7 + 700
    total_spent = suits * suit_cost + suitcases * suitcase_cost + flight_cost
    money_saved = 2000
    money_left = total_money - total_spent - money_saved
    return money_left

 Executed result: -950
[EXP] 312: [success_rate]: True, [answer]: 91, [output]: def solution():
    family_members = 5
    eggs_per_person = [3, 3, 3, 2, 2]
    total_eggs_per_day = sum(eggs_per_person)
    total_eggs_per_week = total_eggs_per_day * 7
    result = total_eggs_per_week
    return result

 Executed result: 91
[EXP] 313: [success_rate]: True, [answer]: 32, [output]: def solution():
    quinn_age = 30
    jane_age = quinn_age - 3
    trent_age = jane_age + 5
    return trent_age

 Executed result: 32
[EXP] 314: [success_rate]: False, [answer]: 120000, [output]: 
def solution():
    cera_age = 46
    noah_age = cera_age / 2 - 6
    population_six_years_ago = noah_age * 3000
    population_now = population_six_years_ago * 2
    return population_now

 Executed result: 102000.0
[EXP] 315: [success_rate]: False, [answer]: 30, [output]: 
def solution():
    total_members = 105
    offense = defense * 2
    special_teams = defense / 2
    defense = (offense + special_teams) / 3
    return defense

 Executed result: None
[EXP] 316: [success_rate]: True, [answer]: 14, [output]: def solution():
    family_1 = 2
    people_per_family_1 = 6
    family_2 = 3
    people_per_family_2 = 4
    total_people_invited = family_1 * people_per_family_1 + family_2 * people_per_family_2
    people_sick = 8
    people_with_previous_commitments = people_sick // 4
    total_people_sick = people_sick + people_with_previous_commitments
    people_attending = total_people_invited - total_people_sick
    return people_attending

 Executed result: 14
[EXP] 317: [success_rate]: True, [answer]: 156, [output]: 
def solution():
    marbles_initial = 50
    marbles_bought = 20
    marbles_gifted = (marbles_bought * 2) / 5
    total_marbles = marbles_initial + marbles_bought + marbles_gifted
    weight_per_marble = 2
    total_weight = total_marbles * weight_per_marble
    return total_weight

 Executed result: 156.0
[EXP] 318: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    pool_length = 6
    pool_width = 4
    pool_depth = 5
    pool_volume = pool_length * pool_width * pool_depth
    cost_per_cubic_foot = 0.1
    cost = pool_volume * cost_per_cubic_foot
    return cost

 Executed result: 12.0
[EXP] 319: [success_rate]: True, [answer]: 123, [output]: def solution():
    boys = 30
    girls = 3 * boys
    nongendered = boys / 10
    total = boys + girls + nongendered
    return total

 Executed result: 123.0
[EXP] 320: [success_rate]: False, [answer]: 15, [output]: def solution():
    poles_wires_ratio = 1/3
    total_wires = 45
    total_poles = total_wires / poles_wires_ratio
    result = int(total_poles)
    return result

 Executed result: 135
[EXP] 321: [success_rate]: True, [answer]: 8, [output]: def solution():
    total_people = 25 + 15
    total_people_left = total_people - (total_people // 4)
    men_left = 22
    women_left = total_people_left - men_left
    return women_left

 Executed result: 8
[EXP] 322: [success_rate]: True, [answer]: 1, [output]: 
def solution():
    book_price = 4
    magazine_price = book_price / 2
    pen_price = magazine_price - 1
    result = pen_price
    return result

 Executed result: 1.0
[EXP] 323: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    jam_pencils = 26
    jam_boxes = 3
    jam_pencils_per_box = jam_pencils // jam_boxes
    meg_pencils = 46
    total_pencils = jam_pencils + meg_pencils
    total_boxes = -(-total_pencils // jam_pencils_per_box)
    return total_boxes

 Executed result: 9
[EXP] 324: [success_rate]: False, [answer]: 75, [output]: 
def solution():
    initial_strength = 0
    initial_temperature = 0
    temperature_cooled = 65
    cream_added = 15
    strength_weakened_per_degree = 12
    strength_weakened_per_milliliter = 0
    strength_weakened_per_cream_milliliter = 0
    strength_weakened = 0

    initial_temperature = 0
    strength_weakened = initial_strength + strength_weakened
    for i in range(temperature_cooled):
        initial_temperature += 13
        strength_weakened += strength_weakened_per_degree

    strength_weakened_per_milliliter = strength_weakened_per_degree
    strength_weakened_per_cream_milliliter = strength_weakened_per_milliliter
    strength_weakened = strength_weakened + strength_weakened_per_cream_milliliter * cream_added

    return strength_weakened

 Executed result: 960
[EXP] 325: [success_rate]: False, [answer]: 14, [output]: def solution():
    new_records = 7
    old_records_per_new = 2
    old_records = new_records * old_records_per_new
    total_old_records = old_records * 5
    return total_old_records

 Executed result: 70
[EXP] 326: [success_rate]: True, [answer]: 224000, [output]: def solution():
    total_employees = 100
    junior_employees = int(total_employees * 2/5)
    senior_employees = total_employees - junior_employees
    junior_salary = junior_employees * 2000
    senior_salary = senior_employees * (2000 + 400)
    total_salary = junior_salary + senior_salary
    return total_salary

 Executed result: 224000
[EXP] 327: [success_rate]: False, [answer]: 14, [output]: 
def solution():
    total_people = 20
    get_down = 7
    get_in = 8
    total_get_in = total_people - get_down + get_in
    people_at_terminal = total_get_in
    return people_at_terminal

 Executed result: 21
[EXP] 328: [success_rate]: False, [answer]: 31, [output]: 
def solution():
    lollipops_initial = 24
    lollipops_eaten_to_school = 2
    lollipops_passed_to_friends = 14
    lollipops_bought_home = 2 * lollipops_passed_to_friends
    lollipops_eaten_night = 3
    lollipops_eaten_morning = 2
    
    lollipops_spent = lollipops_eaten_to_school + lollipops_passed_to_friends + lollipops_bought_home + lollipops_eaten_night + lollipops_eaten_morning
    lollipops_left = lollipops_initial - lollipops_spent
    result = lollipops_left
    return result

 Executed result: -25
[EXP] 329: [success_rate]: False, [answer]: 2, [output]: def solution():
    charge_rate = 1 / 3
    initial_charge = 0.6
    full_charge = 1
    time = 0
    while initial_charge < full_charge:
        initial_charge += charge_rate
        time += 1
    hours = time / 60
    return hours

 Executed result: 0.03333333333333333
[EXP] 330: [success_rate]: True, [answer]: 14, [output]: def solution():
    lollipops_initial = 7
    lollipops_gift = 10
    lollipops_given = 3
    lollipops_total = lollipops_initial + lollipops_gift
    lollipops_left = lollipops_total - lollipops_given
    result = lollipops_left
    return result

 Executed result: 14
[EXP] 331: [success_rate]: False, [answer]: 31, [output]: def solution():
    money_spent = 43
    rewards = 80 // 20
    rewards_used = rewards
    rewards_applied = rewards * 2
    money_paid = money_spent - rewards_used + rewards_applied
    return money_paid

 Executed result: 47
[EXP] 332: [success_rate]: True, [answer]: 8400, [output]: 
def solution():
    job_a = 2000 * 15
    job_a_tax = job_a * 0.20
    job_a_net = job_a - job_a_tax
    job_b = 42000
    job_b_property_tax = 6000
    job_b_income = job_b - job_b_property_tax
    job_b_tax = job_b_income * 0.10
    job_b_net = job_b_income - job_b_tax
    difference = job_b_net - job_a_net
    return difference

 Executed result: 8400.0
[EXP] 333: [success_rate]: True, [answer]: 44, [output]: def solution():
    castles = 220
    percent_ruins = 0.4
    ruins = castles * percent_ruins
    half_ruins_unmanned = ruins / 2
    result = half_ruins_unmanned
    return result

 Executed result: 44.0
[EXP] 334: [success_rate]: True, [answer]: 100, [output]: def solution():
    advance_payment_furniture_united = 1350
    monthly_installments_furniture_united = 350
    num_monthly_installments_furniture_united = 6
    total_cost_furniture_united = advance_payment_furniture_united + (num_monthly_installments_furniture_united * monthly_installments_furniture_united)

    advance_payment_cozy_homes = 1100
    monthly_installments_cozy_homes = 250
    num_monthly_installments_cozy_homes = 9
    total_cost_cozy_homes = advance_payment_cozy_homes + (num_monthly_installments_cozy_homes * monthly_installments_cozy_homes)

    cost_difference = total_cost_furniture_united - total_cost_cozy_homes

    return cost_difference

 Executed result: 100
[EXP] 335: [success_rate]: False, [answer]: 6, [output]: def solution():
    total_guns = DJ + Nick + RJ + Richard
    total_people = 4
    guns_per_person = total_guns // total_people
    return guns_per_person

 Executed result: None
[EXP] 336: [success_rate]: True, [answer]: 310, [output]: 
def solution():
    sugar_needed_suckers = 30
    sugar_needed_fudge = 70
    batches_suckers = 8
    batches_fudge = 1
    total_sugar_needed_suckers = sugar_needed_suckers * batches_suckers
    total_sugar_needed_fudge = sugar_needed_fudge * batches_fudge
    total_sugar_needed = total_sugar_needed_suckers + total_sugar_needed_fudge
    result = total_sugar_needed
    return result

 Executed result: 310
[EXP] 337: [success_rate]: True, [answer]: 72, [output]: def solution():
    shares = 8
    stock_price = 8
    first_year_increase = stock_price * 0.5
    stock_price += first_year_increase
    second_year_decrease = stock_price * 0.25
    stock_price -= second_year_decrease
    total_value = shares * stock_price
    return total_value

 Executed result: 72.0
[EXP] 338: [success_rate]: True, [answer]: 1, [output]: def solution():
    luke_hotdogs = 2
    thomas_hotdogs = 3 * luke_hotdogs
    john_hotdogs = thomas_hotdogs / 2
    john_than_luke = john_hotdogs - luke_hotdogs
    return john_than_luke

 Executed result: 1.0
[EXP] 339: [success_rate]: False, [answer]: 60, [output]: 
def solution():
    total_students = 200
    total_students_in_two_groups = total_students - 200 % 3
    students_in_smallest_group = total_students_in_two_groups // 2 - 10
    return students_in_smallest_group

 Executed result: 89
[EXP] 340: [success_rate]: False, [answer]: 160, [output]: def solution():
    animals = 60
    chickens = animals // 3
    cows = animals - chickens
    total_legs = 2 * chickens * 2 + cows * 4
    return total_legs

 Executed result: 240
[EXP] 341: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    juggling_balls = 3
    weeks = 4
    for week in range(weeks):
        juggling_balls += 1
    balls_dropped = 3
    balls_caught = 2
    balls_lost = balls_dropped - balls_caught
    balls_left = juggling_balls - balls_lost
    return balls_left

 Executed result: 6
[EXP] 342: [success_rate]: False, [answer]: 260, [output]: 
def solution():
    red_bird = 50 - 20
    blue_beetle = 50
    green_toad = 50
    yellow_snake = 50 + 10
    container_weight = 20
    total_weight = red_bird + blue_beetle + green_toad + yellow_snake + container_weight
    return total_weight

 Executed result: 210
[EXP] 343: [success_rate]: True, [answer]: 87, [output]: def solution():
    outfits_received = 24
    new_outfits = outfits_received * 2
    mom_gift = 15
    total_outfits = outfits_received + new_outfits + mom_gift
    result = total_outfits
    return result

 Executed result: 87
[EXP] 344: [success_rate]: True, [answer]: 180000, [output]: def solution():
    distance_per_day = 5000
    increase = 1/5
    distance_per_day_increased = distance_per_day * (1 + increase)
    days_in_june = 30
    total_distance = distance_per_day_increased * days_in_june
    return total_distance

 Executed result: 180000.0
[EXP] 345: [success_rate]: True, [answer]: 2, [output]: def solution():
    a = 4
    b = a + 5
    c = a + 7
    difference = c - b
    return difference

 Executed result: 2
[EXP] 346: [success_rate]: True, [answer]: 310, [output]: def solution():
    table1 = 40
    legs_per_table1 = 4
    table2 = 50
    legs_per_table2 = 3
    total_legs = table1 * legs_per_table1 + table2 * legs_per_table2
    return total_legs

 Executed result: 310
[EXP] 347: [success_rate]: False, [answer]: 9, [output]: 
def solution():
    cookies_per_bag = 36
    cookies_per_lunch = 4
    days_per_week = 5
    husband_cookies = 7
    cookies_in_lunchbox = cookies_per_bag - (days_per_week * cookies_per_lunch)
    cookies_eaten_by_husband = husband_cookies
    cookies_eaten_by_jenny = cookies_per_bag - cookies_in_lunchbox - cookies_eaten_by_husband
    return cookies_eaten_by_jenny

 Executed result: 13
[EXP] 348: [success_rate]: True, [answer]: 36, [output]: def solution():
    shirt_cost = 30
    discount = 0.4
    price_with_discount = shirt_cost * (1 - discount)
    total_cost = price_with_discount * 2
    return total_cost

 Executed result: 36.0
[EXP] 349: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    tractor_sales_per_day = 10
    tractor_price_per_unit = 100
    silo_sales_per_day = 5
    silo_price_per_unit = 220

    tractor_revenue_per_day = tractor_sales_per_day * tractor_price_per_unit
    silo_revenue_per_day = silo_sales_per_day * silo_price_per_unit

    percentage_increase = ((silo_revenue_per_day - tractor_revenue_per_day) / tractor_revenue_per_day) * 100
    return percentage_increase

 Executed result: 10.0
[EXP] 350: [success_rate]: True, [answer]: 2640, [output]: 
def solution():
    food_cost_week = 25
    food_cost_month = food_cost_week * 4
    treat_cost_month = 20
    medicine_cost_month = 100
    total_cost_month = food_cost_month + treat_cost_month + medicine_cost_month
    total_cost_year = total_cost_month * 12
    return total_cost_year

 Executed result: 2640
[EXP] 351: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    yoga_class = 1
    cooking_class = yoga_class * 3
    cheese_tasting = 0.5
    museum_tour = cooking_class / 2
    errands = 2
    total_hours = yoga_class + cooking_class + cheese_tasting + museum_tour + errands
    return total_hours

 Executed result: 8.0
[EXP] 352: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    pots_needed = 30 + 30 * 2
    pots_initial = 100
    pots_left = pots_initial - pots_needed
    result = pots_left
    return result

 Executed result: 10
[EXP] 353: [success_rate]: True, [answer]: 21, [output]: def solution():
    money_initial = 36
    money_spent_on_sweater = 11
    money_given_to_brother = 4
    money_spent = money_spent_on_sweater + money_given_to_brother
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 21
[EXP] 354: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    boating_time = 6
    swimming_time = boating_time / 2
    show_time = 2 * 3
    total_time = boating_time + swimming_time + show_time
    sightseeing_time = 0.4 * total_time
    return sightseeing_time

 Executed result: 6.0
[EXP] 355: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    phone_cost = 400
    savings = 80
    first_job_earnings = 20 * 10
    second_job_earnings = 15 * 5
    total_earnings = first_job_earnings + second_job_earnings
    money_saved = savings + total_earnings
    money_needed = phone_cost - money_saved
    return money_needed

 Executed result: 45
[EXP] 356: [success_rate]: True, [answer]: 34, [output]: def solution():
    shortest_tree = 6
    second_tree = shortest_tree + 5
    combined_height = shortest_tree + second_tree
    tallest_tree = combined_height * 2
    return tallest_tree

 Executed result: 34
[EXP] 357: [success_rate]: True, [answer]: 21, [output]: def solution():
    money_initial = 28
    toy_cars = 6
    toy_car_cost = 2
    teddy_bears = 5
    teddy_bear_cost = 1
    money_spent_toys = toy_cars * toy_car_cost + teddy_bears * teddy_bear_cost
    money_spent = money_spent_toys
    money_gifted = 10
    money_left = money_initial - money_spent + money_gifted
    result = money_left
    return result

 Executed result: 21
[EXP] 358: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    budget = 90
    mini_golf = 1
    arcade_tokens = 5
    go_karts = 2
    mini_golf_cost = 5
    go_kart_cost = 10
    total_cost = (mini_golf * mini_golf_cost) + arcade_tokens + (go_karts * go_kart_cost)
    friends = budget - total_cost
    return friends

 Executed result: 60
[EXP] 359: [success_rate]: True, [answer]: 20, [output]: def solution():
    pocket_money = 5
    lollipop_cost = 0.25
    lollipops_per_day = 4
    days = 5
    total_savings = 0
    for day in range(days):
        money_saved = pocket_money - (lollipops_per_day * lollipop_cost)
        total_savings += money_saved
    result = total_savings
    return result

 Executed result: 20.0
[EXP] 360: [success_rate]: True, [answer]: 4, [output]: def solution():
    money_initial = 10
    candy_cost = 1.5
    money_spent_candy = candy_cost
    money_left = money_initial - money_spent_candy
    
    money_change = money_left / 2
    gumballs = 40
    gumball_cost = 0.05
    money_spent_gumballs = gumballs * gumball_cost
    money_left_after_gumballs = money_left - money_spent_gumballs
    
    pounds_candy = money_left_after_gumballs / candy_cost
    return pounds_candy

 Executed result: 4.333333333333333
[EXP] 361: [success_rate]: True, [answer]: 25, [output]: def solution():
    carver_age = 45
    son_age = (carver_age + 5) // 2
    return son_age

 Executed result: 25
[EXP] 362: [success_rate]: False, [answer]: 20, [output]: def solution():
    total_distance = 75 + 100 + (100 + 75)  # total distance from third city to the first city is 100 + 75 = 175, then add 75 and 100
    daily_distance = total_distance * 3  # 3 trips per day
    days_between_services = 18000 / daily_distance
    result = int(days_between_services)
    return result

 Executed result: 17
[EXP] 363: [success_rate]: True, [answer]: 23, [output]: 
def solution():
    chihuahua_stuffed = 2
    collie_stuffed = (8 + 2) / 2
    chihuahua_beds = 4
    collie_beds = 3
    total_stuffed = chihuahua_stuffed * chihuahua_beds + collie_stuffed * collie_beds
    return total_stuffed

 Executed result: 23.0
[EXP] 364: [success_rate]: True, [answer]: 6, [output]: def solution():
    distance_to_friend = 200
    speed_to_friend = 70
    detour_distance = 10
    distance_home = 240
    speed_home = 80
    
    time_to_friend = distance_to_friend / speed_to_friend
    time_detour = detour_distance / speed_to_friend
    time_home = distance_home / speed_home
    
    total_time_to_friend = time_to_friend + time_detour
    total_time_home = time_home
    
    total_time = total_time_to_friend + total_time_home
    
    return total_time

 Executed result: 6.0
[EXP] 365: [success_rate]: False, [answer]: 49, [output]: def solution():
    total_students = 96
    girls = 43
    boys = total_students - girls
    absent_students = 4 + 5
    boys_present = boys - absent_students
    return boys_present

 Executed result: 44
[EXP] 366: [success_rate]: True, [answer]: 18, [output]: def solution():
    girls = 6
    boys = girls * 2
    kids = girls + boys
    result = kids
    return result

 Executed result: 18
[EXP] 367: [success_rate]: True, [answer]: 9, [output]: def solution():
    total_points = 42
    test1 = 15
    test2 = 18
    test3 = total_points - (test1 + test2)
    return test3

 Executed result: 9
[EXP] 368: [success_rate]: True, [answer]: 19, [output]: 
def solution():
    customers_kicked_out_for_no_mask = 3
    customers_kicked_out_for_shoplifting = 4 * customers_kicked_out_for_no_mask - 5
    customers_kicked_out_for_physical_violence = 3 * customers_kicked_out_for_shoplifting
    total_people_kicked_out = customers_kicked_out_for_no_mask + customers_kicked_out_for_shoplifting + customers_kicked_out_for_physical_violence
    people_kicked_out_for_other_reasons = 50 - total_people_kicked_out
    return people_kicked_out_for_other_reasons

 Executed result: 19
[EXP] 369: [success_rate]: False, [answer]: 18, [output]: def solution():
    erin_points_after = 14
    sara_points = 8
    erin_points_before = (erin_points_after - (erin_points_after - sara_points * 3)) 
    result = erin_points_before
    return result

 Executed result: 24
[EXP] 370: [success_rate]: True, [answer]: 1198, [output]: 
def solution():
    seniors = 44
    frame_cost = 20
    logo_cost = 0.20
    frame_with_logo_cost = frame_cost + (frame_cost * logo_cost)
    total_frames = seniors
    total_frames_cost = total_frames * frame_with_logo_cost
    pins = 2
    pin_cost = 5
    total_pin_cost = pins * pin_cost
    officers = seniors // 4
    officer_cost = 12
    total_officer_cost = officers * officer_cost
    total_cost = total_frames_cost + total_pin_cost + total_officer_cost
    return total_cost

 Executed result: 1198.0
[EXP] 371: [success_rate]: True, [answer]: 320, [output]: def solution():
    wallpaper_cost = 400
    discount = 0.20
    materials_cost = wallpaper_cost * (1 - discount)
    return materials_cost

 Executed result: 320.0
[EXP] 372: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    pairs_sold_friday = 14
    pairs_sold_saturday = pairs_sold_friday * 2
    pairs_sold_sunday = pairs_sold_saturday // 2 - 6
    total_pairs_sold = pairs_sold_friday + pairs_sold_saturday + pairs_sold_sunday
    return total_pairs_sold

 Executed result: 50
[EXP] 373: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    tuesday_hours = 1
    thursday_hours = 2
    saturday_hours = 2 * tuesday_hours
    total_hours = tuesday_hours + thursday_hours + saturday_hours
    return total_hours

 Executed result: 5
[EXP] 374: [success_rate]: True, [answer]: 240000, [output]: 
def solution():
    total_cost = 400000
    faulty_pieces = 0.4
    money_spent = total_cost * (1 - faulty_pieces)
    return money_spent

 Executed result: 240000.0
[EXP] 375: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    sheep = 30
    milk_first_half = 1
    milk_second_half = 2
    half_sheep = sheep // 2
    milk_from_first_half = half_sheep * milk_first_half
    milk_from_second_half = (sheep - half_sheep) * milk_second_half
    total_milk = milk_from_first_half + milk_from_second_half
    result = total_milk
    return result

 Executed result: 45
[EXP] 376: [success_rate]: True, [answer]: 48, [output]: 
def solution():
    rolls_initial = 12
    rolls_given_to_kids = 6
    rolls_remaining = rolls_initial - rolls_given_to_kids
    pieces_per_roll = 8
    pieces_given_to_chickens = rolls_remaining * pieces_per_roll
    return pieces_given_to_chickens

 Executed result: 48
[EXP] 377: [success_rate]: True, [answer]: 15, [output]: def solution():
    pupils = 40
    half_pupils_like_blue = pupils // 2
    remaining_pupils = pupils - half_pupils_like_blue
    one_fourth_pupils_like_green = remaining_pupils // 4
    pupils_like_yellow = remaining_pupils - one_fourth_pupils_like_green
    return pupils_like_yellow

 Executed result: 15
[EXP] 378: [success_rate]: True, [answer]: 50, [output]: def solution():
    apples_sold_monday = 56 / 4
    apples_sold_tuesday = 12
    apples_sold_wednesday = apples_sold_tuesday * 2
    total_apples = round(apples_sold_monday + apples_sold_tuesday + apples_sold_wednesday)
    return total_apples

 Executed result: 50
[EXP] 379: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    socks_to_wash = 50
    pairs_washed = 10
    loose_socks_washed = 15
    total_socks_washed = pairs_washed * 2 + loose_socks_washed
    socks_missed = socks_to_wash - total_socks_washed
    return socks_missed

 Executed result: 15
[EXP] 380: [success_rate]: True, [answer]: 21, [output]: 
def solution():
    cookies_initial = 23 + 42
    cookies_eaten = 44
    cookies_left = cookies_initial - cookies_eaten
    result = cookies_left
    return result

 Executed result: 21
[EXP] 381: [success_rate]: True, [answer]: 803, [output]: 
def solution():
    borrowed = 3650
    months = 5
    rate = 0.10
    interest = borrowed * rate
    total_amount = borrowed + interest
    monthly_payment = total_amount / months
    return monthly_payment

 Executed result: 803.0
[EXP] 382: [success_rate]: True, [answer]: 67, [output]: def solution():
    cho_speed = 14
    cho_time = 8
    chloe_speed = 9
    chloe_time = 5
    cho_distance = cho_speed * cho_time
    chloe_distance = chloe_speed * chloe_time
    cho_further = cho_distance - chloe_distance
    return cho_further

 Executed result: 67
[EXP] 383: [success_rate]: True, [answer]: 350, [output]: def solution():
    axel_silver = 50
    axel_gold = 80
    anna_silver = 2 * axel_silver
    anna_gold = axel_gold + 40
    total_axel = axel_silver + axel_gold
    total_anna = anna_silver + anna_gold
    total = total_axel + total_anna
    return total

 Executed result: 350
[EXP] 384: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    supplies_cost = 18
    pitchers = 3
    cups_per_pitcher = 12
    cups_total = pitchers * cups_per_pitcher
    cups_sold_per_hour = 4
    profit_per_cup = 1
    profit_per_hour = (cups_sold_per_hour * profit_per_cup) - supplies_cost / cups_total
    return profit_per_hour

 Executed result: 3.5
[EXP] 385: [success_rate]: True, [answer]: 32, [output]: def solution():
    land_left = 12.8
    land_sold = 3/5
    land_initial = land_left / (1 - land_sold)
    result = land_initial
    return result

 Executed result: 32.0
[EXP] 386: [success_rate]: True, [answer]: 16, [output]: def solution():
    total_members = 52
    boys = total_members * 0.5
    girls = total_members - boys
    female_members = girls
    female_members_performing = female_members * 0.5
    female_members_finally = female_members_performing
    teachers = 3
    singers = female_members_finally + teachers
    result = singers
    return result

 Executed result: 16.0
[EXP] 387: [success_rate]: True, [answer]: 80, [output]: def solution():
    test_scores = [65, 94, 81, 86, 74]
    total = sum(test_scores)
    average = total / len(test_scores)
    return average

 Executed result: 80.0
[EXP] 388: [success_rate]: True, [answer]: 36, [output]: def solution():
    eraser_cost = 2
    pencil_cost = 3
    erasers = 6
    pencils = 8
    eraser_total = erasers * eraser_cost
    pencil_total = pencils * pencil_cost
    total_cost = eraser_total + pencil_total
    return total_cost

 Executed result: 36
[EXP] 389: [success_rate]: True, [answer]: 88, [output]: def solution():
    messages_to_ms_thompson = 66
    messages_to_mr_yu = messages_to_ms_thompson // 3
    total_messages = messages_to_ms_thompson + messages_to_mr_yu
    return total_messages

 Executed result: 88
[EXP] 390: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    ride_bracelet_cost = 30
    ride_cost = 2
    ride_tickets_per_ticket = 2
    rides = 9
    david_saves = ride_bracelet_cost - (rides * ride_tickets_per_ticket * ride_cost)
    return david_saves

 Executed result: -6
[EXP] 391: [success_rate]: True, [answer]: 12, [output]: def solution():
    total_gifts = 6 + 4 + 2
    ribbon_for_bow = 144
    ribbon_per_gift = ribbon_for_bow // total_gifts
    return ribbon_per_gift

 Executed result: 12
[EXP] 392: [success_rate]: True, [answer]: 15, [output]: def solution():
    ratio_betty = 5
    ratio_sam = 6
    total_popsicles = 165
    total_betty = total_popsicles * (ratio_betty / (ratio_betty + ratio_sam))
    total_sam = total_popsicles - total_betty
    difference = total_sam - total_betty
    return difference

 Executed result: 15.0
[EXP] 393: [success_rate]: True, [answer]: 34, [output]: 
def solution():
    cable_package = 60
    netflix = 10
    hulu = 10
    disney_plus = 10
    bundle_discount = (hulu + disney_plus) * 0.2
    total_streaming_cost = netflix + hulu + disney_plus - bundle_discount
    savings = cable_package - total_streaming_cost
    return savings

 Executed result: 34.0
[EXP] 394: [success_rate]: True, [answer]: 20, [output]: def solution():
    writing_time = 4
    recording_time = writing_time / 2
    editing_time = 90 / 60
    total_time = writing_time + recording_time + editing_time
    editing_percentage = (editing_time / total_time) * 100
    return editing_percentage

 Executed result: 20.0
[EXP] 395: [success_rate]: True, [answer]: 92, [output]: def solution():
    rows = 6
    columns = 6
    total_books = rows * columns
    double_books = total_books * 2
    add_20 = double_books + 20
    return add_20

 Executed result: 92
[EXP] 396: [success_rate]: True, [answer]: 38, [output]: def solution():
    cards_initial = 20
    boxes = 2
    cards_per_box = 15
    cards_received = 17
    cards_given = 24 + 5
    cards_total = cards_initial + boxes * cards_per_box - cards_given + cards_received
    return cards_total

 Executed result: 38
[EXP] 397: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    slices = 12
    bill_slices = slices // 3
    mark_slices = slices // 4
    jenny_eats = 2
    slices_given = bill_slices + mark_slices
    slices_left = slices - (slices_given + jenny_eats)
    result = slices_left
    return result

 Executed result: 3
[EXP] 398: [success_rate]: True, [answer]: 25, [output]: 
def solution():
    money_initial = 50
    money_target = 300
    money_per_day = 10
    days = 0
    while money_initial < money_target:
        money_initial += money_per_day
        days += 1
    return days

 Executed result: 25
[EXP] 399: [success_rate]: True, [answer]: 168, [output]: 
def solution():
    spiders = 90
    millipedes = spiders // 3
    stink_bugs = 2 * millipedes - 12
    total_bugs = spiders + millipedes + stink_bugs
    return total_bugs

 Executed result: 168
[EXP] 400: [success_rate]: True, [answer]: 12, [output]: def solution():
    erica_age = 30
    beth_age = erica_age + 5
    alice_age = beth_age + 7
    age_difference = alice_age - erica_age
    return age_difference

 Executed result: 12
[EXP] 401: [success_rate]: True, [answer]: 48, [output]: def solution():
    ounces_per_glass = 8
    glasses_drunk = 2
    calories_per_ounce = 3
    calories_per_glass = ounces_per_glass * calories_per_ounce
    total_calories = calories_per_glass * glasses_drunk
    return total_calories

 Executed result: 48
[EXP] 402: [success_rate]: True, [answer]: 14400, [output]: 
def solution():
    days_per_week = 6
    weeks_per_month = 4
    days_per_month = days_per_week * weeks_per_month
    days_per_year = days_per_month * 12
    daily_wage = 50
    annual_income = days_per_year * daily_wage
    return annual_income

 Executed result: 14400
[EXP] 403: [success_rate]: True, [answer]: 4, [output]: def solution():
    flour_per_batch = 3
    milk_per_batch = 1
    normal_flour = flour_per_batch
    normal_milk = milk_per_batch
    quadruple_batch_flour = normal_flour * 4
    quadruple_batch_milk = normal_milk * 4
    flour_needed = quadruple_batch_flour
    milk_needed = quadruple_batch_milk
    bags_of_flour = -(-flour_needed // 2)
    bottles_of_milk = -(-milk_needed // 2)
    difference = bags_of_flour - bottles_of_milk
    return difference

 Executed result: 4
[EXP] 404: [success_rate]: True, [answer]: 81, [output]: def solution():
    watts = 900
    hours_per_day = 8
    hours_reduced = 5
    days = 30
    total_hours_per_day = hours_per_day - hours_reduced
    total_hours = total_hours_per_day * days
    total_watts = watts * total_hours
    total_kilowatts = total_watts / 1000
    result = total_kilowatts
    return result

 Executed result: 81.0
[EXP] 405: [success_rate]: True, [answer]: 22, [output]: def solution():
    total_stripes = 17 * 2 + 36 + (36 / 2)
    average_stripes = total_stripes / 4
    return average_stripes

 Executed result: 22.0
[EXP] 406: [success_rate]: False, [answer]: 50, [output]: def solution():
    people = 20
    meat_per_sandwich = 1
    cheese_per_sandwich = 1
    sandwiches_per_person = 1
    meat_cost = 7
    cheese_cost = 3
    total_sandwiches = people * sandwiches_per_person
    total_meat = total_sandwiches * meat_per_sandwich
    total_cheese = total_sandwiches * cheese_per_sandwich
    total_cost = total_meat * meat_cost + total_cheese * cheese_cost
    return total_cost

 Executed result: 200
[EXP] 407: [success_rate]: False, [answer]: 200, [output]: def solution():
    cannolis = 40
    corn = 2 * cannolis
    new_corn = corn - 40
    new_cannolis = 60
    total_corn = corn + new_corn
    total_cannolis = cannolis + new_cannolis
    total = total_corn + total_cannolis
    return total

 Executed result: 220
[EXP] 408: [success_rate]: False, [answer]: 2000, [output]: 
def solution():
    total_steps = 10000
    steps_walked = total_steps / 2
    extra_steps = 1000
    steps_left = total_steps - steps_walked - extra_steps
    jog_steps = steps_left
    return jog_steps

 Executed result: 4000.0
[EXP] 409: [success_rate]: True, [answer]: 20, [output]: def solution():
    book_pages = 45
    words_per_page = 200
    total_words = book_pages * words_per_page
    words_per_minute = 300
    reading_time = total_words / words_per_minute
    airport_time = 60
    travel_time = 10
    finish_time = reading_time + travel_time
    arrival_time = airport_time - finish_time
    return arrival_time

 Executed result: 20.0
[EXP] 410: [success_rate]: False, [answer]: 168000, [output]: def solution():
    employees_hired = 40
    hourly_wage = 15
    hours_per_week = 40
    weeks_in_may = 4.33  # assuming may has 4 weeks and 3 days
    weeks_in_june = 4  # assuming june has 4 weeks
    employees_left = int(employees_hired * (1 - 0.25))
    total_hours_may = employees_hired * hours_per_week * weeks_in_may
    total_hours_june = employees_left * hours_per_week * weeks_in_june
    total_hours = total_hours_may + total_hours_june
    total_amount_may = total_hours_may * hourly_wage
    total_amount_june = total_hours_june * hourly_wage
    total_amount = total_amount_may + total_amount_june
    return total_amount

 Executed result: 175920.0
[EXP] 411: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    money_initial = 10
    taffy_cost = 2 * 3
    taffy_discount = 1 * (1 / 2) * 3
    taffy_total = taffy_cost - taffy_discount
    shell_cost = 1.5
    magnet_cost = 4 * 0.25
    total_cost = taffy_total + shell_cost + magnet_cost
    money_spent = total_cost
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 3.0
[EXP] 412: [success_rate]: True, [answer]: 1110, [output]: def solution():
    package1 = 400
    package2 = 2 * package1
    total_packages = package1 + package2
    discount = total_packages * 0.2
    total_packages_after_discount = total_packages - discount
    finale_firework = 150
    total_cost = total_packages_after_discount + finale_firework
    return total_cost

 Executed result: 1110.0
[EXP] 413: [success_rate]: True, [answer]: 5, [output]: def solution():
    cookies_per_day = 2
    days = 30
    cookies_needed = cookies_per_day * days
    cookies_per_dozen = 12
    dozens_needed = cookies_needed // cookies_per_dozen
    return dozens_needed

 Executed result: 5
[EXP] 414: [success_rate]: True, [answer]: 25, [output]: 
def solution():
    candles = 50000
    explode_and_smell_like_wet_dog = (candles * 5) / 100 * (1 / 99)
    result = explode_and_smell_like_wet_dog
    return result

 Executed result: 25.252525252525256
[EXP] 415: [success_rate]: True, [answer]: 56, [output]: 
def solution():
    original_price = 20
    discount = 0.3
    discounted_price = original_price * (1 - discount)
    total_cost = 4 * discounted_price
    return total_cost

 Executed result: 56.0
[EXP] 416: [success_rate]: True, [answer]: 350, [output]: 
def solution():
    joanne_tallest = 30
    joanne_shortest = joanne_tallest // 2
    joanne_average = ?  # unknown
    sister_tallest = joanne_tallest * 2
    sister_shortest = joanne_shortest * 3
    total_apples = 500
    joanne_apples = joanne_tallest + joanne_shortest + joanne_average
    sister_apples = sister_tallest + sister_shortest
    total_apples = joanne_apples + sister_apples
    joanne_average = total_apples - joanne_tallest - joanne_shortest - sister_tallest - sister_shortest
    return joanne_average

 Executed result: 350
[EXP] 417: [success_rate]: False, [answer]: 56, [output]: 
def solution():
    camels = 304 - (180 // 2)
    dromedaries = 180 - camels
    return dromedaries

 Executed result: -34
[EXP] 418: [success_rate]: True, [answer]: 3140, [output]: 
def solution():
    distance_first_week = 200 * 4  # distance in the first 4 days
    distance_second_half_week = 0.3 * distance_first_week  # distance in the next 2 days
    distance_last_day = 0  # no distance on the last day
    total_distance_first_week = distance_first_week + distance_second_half_week + distance_last_day
    distance_second_week = 300 * 7  # distance in the second week
    total_distance = total_distance_first_week + distance_second_week
    return total_distance

 Executed result: 3140.0
[EXP] 419: [success_rate]: True, [answer]: 40, [output]: def solution():
    peter_locker = 5
    zack_locker = 4 * peter_locker
    timothy_locker = 2 * zack_locker
    return timothy_locker

 Executed result: 40
[EXP] 420: [success_rate]: True, [answer]: 3000, [output]: 
def solution():
    stanley_elevation = 10000
    comb_elevation = stanley_elevation - 4000
    oliver_elevation = 3000
    distance_to_climb = comb_elevation - oliver_elevation
    return distance_to_climb

 Executed result: 3000
[EXP] 421: [success_rate]: True, [answer]: 17000, [output]: 
def solution():
    initial_capital = 5000
    first_bank = 4000
    second_bank = 2 * first_bank
    total_funding = first_bank + second_bank
    capital_now = initial_capital + total_funding
    return capital_now

 Executed result: 17000
[EXP] 422: [success_rate]: True, [answer]: 12, [output]: def solution():
    cats_initial = 50
    cats_taken = 4 * 5
    cats_left = cats_initial - cats_taken
    cats_after_mouse = cats_left - (cats_left * 3) // 5
    result = cats_after_mouse
    return result

 Executed result: 12
[EXP] 423: [success_rate]: True, [answer]: 284, [output]: 
def solution():
    months_at_intro_price = 6
    months_at_normal_price = 8
    months_at_new_price = 24 - months_at_intro_price - months_at_normal_price
    total_cost = (months_at_intro_price * 8) + (months_at_normal_price * 12) + (months_at_new_price * 14)
    result = total_cost
    return result

 Executed result: 284
[EXP] 424: [success_rate]: False, [answer]: 8, [output]: def solution():
    tattered_jeans = 28
    jogger_jeans = tattered_jeans - 6
    total_savings = 6
    savings_from_tattered = total_savings * 2/3
    savings_from_jogger = total_savings - savings_from_tattered
    difference_in_price = jogger_jeans - tattered_jeans
    return difference_in_price

 Executed result: -6
[EXP] 425: [success_rate]: True, [answer]: 570, [output]: def solution():
    buses = 4
    bus_capacity = 60
    minibusses = 6
    minibus_capacity = 30
    minivans = 10
    minivan_capacity = 15
    total_capacity = buses * bus_capacity + minibusses * minibus_capacity + minivans * minivan_capacity
    return total_capacity

 Executed result: 570
[EXP] 426: [success_rate]: True, [answer]: 150, [output]: 
def solution():
    homemade_feeders = 3
    store_bought_feeders = 3
    homemade_birds = homemade_feeders * (20 + 10)
    total_birds = homemade_birds + store_bought_feeders * 20
    return total_birds

 Executed result: 150
[EXP] 427: [success_rate]: True, [answer]: 11, [output]: def solution():
    bagel_cost = 4
    cake_cost = bagel_cost / 2
    soup_cost = bagel_cost + (bagel_cost * 0.25)
    total_cost = bagel_cost + soup_cost + cake_cost
    return total_cost

 Executed result: 11.0
[EXP] 428: [success_rate]: False, [answer]: 150, [output]: def solution():
    ticket_cost = 100
    spending_cash = 50
    money_saved = ticket_cost - spending_cash
    card_price = 1.5
    card_saved = money_saved / card_price
    card_kept = card_saved / 3
    total_cards = card_saved + card_kept
    return total_cards

 Executed result: 44.44444444444445
[EXP] 429: [success_rate]: False, [answer]: 26, [output]: 
def solution():
    guests = 40
    guests_expected = 36
    guests_with_two_hotdogs = guests_expected // 2
    guests_with_one_hotdog = guests - guests_expected
    guests_without_second_hotdog = guests_with_two_hotdogs
    return guests_without_second_hotdog

 Executed result: 18
[EXP] 430: [success_rate]: True, [answer]: 13, [output]: def solution():
    indras_letters = 6
    sister_letters = (indras_letters // 2) + 4
    total_letters = indras_letters + sister_letters
    return total_letters

 Executed result: 13
[EXP] 431: [success_rate]: True, [answer]: 132, [output]: 
def solution():
    pot_and_pans = 120
    mixing_bowls = 20
    utensils = 5
    utensil_cost = 5
    total_cost = pot_and_pans + mixing_bowls + (utensils * utensil_cost)
    discount = total_cost * 0.20
    discounted_cost = total_cost - discount
    result = discounted_cost
    return result

 Executed result: 132.0
[EXP] 432: [success_rate]: True, [answer]: 1, [output]: 
def solution():
    dora_initial = 2
    mother_give = 16
    total_money = dora_initial + mother_give
    skipping_rope_cost = 6
    board_game_cost = 11
    playground_ball_cost = 2
    total_cost = skipping_rope_cost + board_game_cost + playground_ball_cost
    money_needed = total_cost - total_money
    return money_needed

 Executed result: 1
[EXP] 433: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    prince_thaddeus_dragons = 100
    prince_arthur_dragons = int(prince_thaddeus_dragons * 0.75)
    prince_walter_dragons = prince_arthur_dragons * 2
    prince_bruce_dragons = prince_walter_dragons / 5
    result = prince_bruce_dragons
    return result

 Executed result: 30.0
[EXP] 434: [success_rate]: True, [answer]: 6, [output]: def solution():
    gallons = 15
    containers = 5
    pints_per_container = 8
    pints_per_gallon = 8
    pints_in_a_container = pints_per_container * pints_per_gallon
    total_pints = gallons * pints_per_gallon
    pints_needed = total_pints // containers
    pints_josey_needs = pints_needed * 1/4
    result = pints_josey_needs
    return result

 Executed result: 6.0
[EXP] 435: [success_rate]: False, [answer]: 5, [output]: def solution():
    money_initial = 5
    money_left = 0.01 * money_initial
    money_spent = money_initial - money_left
    candy_bar_cost = 0.75
    total_cost = 0
    for i in range(100):
        total_cost += 0.4
        money_spent -= 0.4
        if money_spent < 0:
            break
    candy_bars = int((money_spent + 0.75) // 0.75)
    return candy_bars

 Executed result: 0
[EXP] 436: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    lollipops_initial = 25
    lollipops_kept = 5
    lollipops_shared = lollipops_initial - lollipops_kept
    friends = 4
    lollipops_per_friend = lollipops_shared // friends
    return lollipops_per_friend

 Executed result: 5
[EXP] 437: [success_rate]: False, [answer]: 15, [output]: 
def solution():
    cake_weight = 20
    pieces = 8
    pieces_eaten = 2
    pieces_left = pieces - pieces_eaten
    remaining_weight = cake_weight - (pieces_left * 2.5)
    return remaining_weight

 Executed result: 5.0
[EXP] 438: [success_rate]: True, [answer]: 7, [output]: def solution():
    oranges_sitti = 34
    oranges_juris = 22
    total_oranges = oranges_sitti + oranges_juris
    friends = 6
    total_friends = friends + 2
    oranges_per_person = total_oranges // total_friends
    return oranges_per_person

 Executed result: 7
[EXP] 439: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    onions = 4  # double the amount
    onion_cost = onions * 2
    people = 6
    stock = 2
    stock_cost = stock * 2
    total_cost = onion_cost + stock_cost
    cost_per_serving = round(total_cost / people)
    return cost_per_serving

 Executed result: 2
[EXP] 440: [success_rate]: False, [answer]: 17, [output]: def solution():
    wayne_drive_time = 4
    bernadette_drive_time = 4 * 4
    bernadette_leaving_time = wayne_drive_time + 5
    return bernadette_leaving_time - wayne_drive_time

 Executed result: 5
[EXP] 441: [success_rate]: True, [answer]: 98, [output]: def solution():
    area = 360
    length = 3 * 3  # converting yards to feet
    width = area / length  # calculating width
    perimeter = 2 * (length + width)
    return perimeter

 Executed result: 98.0
[EXP] 442: [success_rate]: True, [answer]: 80, [output]: def solution():
    elizabeth_red = 1
    elizabeth_clear = 2
    elizabeth_total = (elizabeth_red + elizabeth_clear) * 20
    
    margareth_blue = 3
    margareth_red = 4
    margareth_total = (margareth_blue + margareth_red) * 20
    
    difference = margareth_total - elizabeth_total
    return difference

 Executed result: 80
[EXP] 443: [success_rate]: False, [answer]: 49, [output]: def solution():
    initial_temperature = 40
    hours_baking = 3
    temperature_increased_per_hour = 5
    minutes_window_open = 30
    temperature_decreased_per_10_minutes = 2

    for i in range(hours_baking):
        initial_temperature += temperature_increased_per_hour

    minutes_open = minutes_window_open
    while minutes_open > 0:
        initial_temperature -= temperature_decreased_per_10_minutes / 10
        minutes_open -= 10

    result = initial_temperature
    return result

 Executed result: 54.39999999999999
[EXP] 444: [success_rate]: False, [answer]: 59, [output]: 
def solution():
    swim_jon = 40
    bike_jon = 80
    run_jon = 50
    total_jon = swim_jon + bike_jon + run_jon
    swim_james = swim_jon * 0.9
    bike_james = bike_jon + 5
    total_james = swim_james + bike_james + run_jon
    return run_jon - (total_jon - total_james)

 Executed result: 51.0
[EXP] 445: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    movie_c = 1.25 * 60  # convert hours to minutes
    movie_b = movie_c + 5
    movie_a = movie_b / 4
    result = movie_a
    return result

 Executed result: 20.0
[EXP] 446: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    money_initial = 30 * 5  # 30 minutes at 32 MPH is 1 mile. Each mile costs 3/2 dollars. So 3/2 * 5 = 7.5. But we have 5 dollar bills, so 7.5 - 5*1 = 2.5
    money_spent = 2.5
    money_left = 30 - money_spent
    result = money_left
    return result

 Executed result: 27.5
[EXP] 447: [success_rate]: False, [answer]: 2, [output]: def solution():
    eggs_total = 4 * 12 + 2
    eggs_per_tray = 5
    trays = eggs_total // eggs_per_tray
    return trays

 Executed result: 10
[EXP] 448: [success_rate]: True, [answer]: 5, [output]: def solution():
    joey_points = 214
    joey_score = 26
    joey_points += joey_score
    marcy_points = 225
    marcy_score = 10
    marcy_points += marcy_score
    joey_win = joey_points - marcy_points
    return joey_win

 Executed result: 5
[EXP] 449: [success_rate]: True, [answer]: 539, [output]: def solution():
    sneakers_initial = 48
    sneakers_sold_to_department_store = sneakers_initial - 17
    money_sold_to_department_store = sneakers_sold_to_department_store * 25
    money_sold_at_flash_sale = 17 * 20
    total_money_made = money_sold_at_flash_sale + money_sold_to_department_store
    profit = total_money_made - 576
    return profit

 Executed result: 539
[EXP] 450: [success_rate]: True, [answer]: 112, [output]: def solution():
    packets = 10
    small_packets = 6
    large_packets = packets - small_packets
    small_colors = 8
    large_colors = 16
    total_small_colors = small_packets * small_colors
    total_large_colors = large_packets * large_colors
    total_colors = total_small_colors + total_large_colors
    return total_colors

 Executed result: 112
[EXP] 451: [success_rate]: False, [answer]: 4, [output]: def solution():
    ticket_cost = 20
    extra_cost = 1
    regular_ticket_cost = 12
    regular_soda_cost = 3
    regular_soda_price = 0
    cost_with_ticket = ticket_cost + extra_cost
    cost_without_ticket = regular_ticket_cost + regular_soda_cost
    total_saving = cost_without_ticket - cost_with_ticket
    regular_soda_price = (cost_without_ticket - regular_soda_cost) - total_saving
    return regular_soda_price

 Executed result: 18
[EXP] 452: [success_rate]: True, [answer]: 11050, [output]: 
def solution():
    initial_cost_per_balloon = 900 / 20
    increase_per_balloon = 20
    cost_per_balloon_after_increase = initial_cost_per_balloon + increase_per_balloon
    cost_to_fill_170_balloon = 170 * cost_per_balloon_after_increase
    return cost_to_fill_170_balloon

 Executed result: 11050.0
[EXP] 453: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    speed1 = 60
    hours1 = 2
    speed2 = 30
    hours2 = 1
    total_distance = speed1 * hours1 + speed2 * hours2
    total_time = hours1 + hours2
    average_speed = total_distance / total_time
    return average_speed

 Executed result: 50.0
[EXP] 454: [success_rate]: True, [answer]: 6400, [output]: 
def solution():
    sapphires_initial = 8
    sapphires_traded = 3
    rubies_received = 2
    sapphires_left = sapphires_initial - sapphires_traded
    sapphire_value = 800
    ruby_value = 1200
    sapphire_value_left = sapphire_value * sapphires_left
    ruby_value_received = ruby_value * rubies_received
    total_value = sapphire_value_left + ruby_value_received
    return total_value

 Executed result: 6400
[EXP] 455: [success_rate]: False, [answer]: 150, [output]: def solution():
    marin_apples = 4
    nancy_apples = 4
    total_apples_per_day = marin_apples + nancy_apples
    total_apples_in_30_days = total_apples_per_day * 30
    result = total_apples_in_30_days
    return result

 Executed result: 240
[EXP] 456: [success_rate]: True, [answer]: 1920, [output]: 
def solution():
    beds = 10
    volume_per_bed = 2 * 8 * 2
    volume_needed = beds * volume_per_bed
    volume_per_bag = 2
    cost_per_bag = 12
    bags_needed = volume_needed // volume_per_bag
    money_spent = bags_needed * cost_per_bag
    return money_spent

 Executed result: 1920
[EXP] 457: [success_rate]: True, [answer]: 78, [output]: def solution():
    red_cards = 15
    green_cards = red_cards + (red_cards * 0.6)
    yellow_cards = red_cards + green_cards
    total_cards = red_cards + green_cards + yellow_cards
    return total_cards

 Executed result: 78.0
[EXP] 458: [success_rate]: True, [answer]: 45, [output]: def solution():
    fairies_initial = 50
    fairies_new = fairies_initial // 2
    fairies_total = fairies_initial + fairies_new
    fairies_left = fairies_total - 30
    result = fairies_left
    return result

 Executed result: 45
[EXP] 459: [success_rate]: True, [answer]: 35, [output]: 
def solution():
    total_puppies = 8 + 12
    puppies_with_spots = 3 + 4
    percentage = (puppies_with_spots / total_puppies) * 100
    return percentage

 Executed result: 35.0
[EXP] 460: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    sugar_cubes = 2
    sugar_cubes_weight = 1
    sugar_cubes_total_weight = sugar_cubes * sugar_cubes_weight
    carrots = 4
    carrots_weight = 12
    carrots_total_weight = carrots * carrots_weight
    hay = 42
    hay_weight = 75
    hay_total_weight = hay * hay_weight
    oats = 20
    oats_weight = 65
    oats_total_weight = oats * oats_weight
    total_weight = sugar_cubes_total_weight + carrots_total_weight + hay_total_weight + oats_total_weight
    truck_capacity = 2250
    trips = -(-total_weight // truck_capacity)
    return trips

 Executed result: 2
[EXP] 461: [success_rate]: True, [answer]: 84, [output]: def solution():
    cans = 3
    bottles = 5
    can_value = 2
    bottle_value = 3
    week_earnings = cans * can_value + bottles * bottle_value
    month_earnings = week_earnings * 4
    return month_earnings

 Executed result: 84
[EXP] 462: [success_rate]: True, [answer]: 9, [output]: def solution():
    frederick_plants = 10
    toni_plants = frederick_plants * 1.6  # 60% more than Frederick
    shondra_plants = toni_plants - 7
    return shondra_plants

 Executed result: 9.0
[EXP] 463: [success_rate]: True, [answer]: 71, [output]: def solution():
    ali_money = 21
    leila_money = 100
    leila_gift = leila_money / 2
    ali_money += leila_gift
    result = ali_money
    return result

 Executed result: 71.0
[EXP] 464: [success_rate]: True, [answer]: 18, [output]: 
def solution():
    pizza_cost = 15
    tip = pizza_cost / 5
    total_payment = pizza_cost + tip
    return total_payment

 Executed result: 18.0
[EXP] 465: [success_rate]: False, [answer]: 6, [output]: def solution():
    initial_position = 1
    fell_back = 5
    moved_forward = 2
    fell_back_again = 3
    jumped_forward = 1
    current_position = initial_position - fell_back + moved_forward - fell_back_again + jumped_forward
    result = current_position
    return result

 Executed result: -4
[EXP] 466: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    basketball_cards = 6 * 25
    baseball_cards = 5 * 40
    total_cards = basketball_cards + baseball_cards
    cards_given_to_students = total_cards - 50
    students = cards_given_to_students // 10
    return students

 Executed result: 30
[EXP] 467: [success_rate]: True, [answer]: 1, [output]: def solution():
    becky_cost = 20 * 0.45 - 1
    kelly_cost = 20 * 0.5 - (20 * 0.5 * 0.10)
    difference = kelly_cost - becky_cost
    return difference

 Executed result: 1.0
[EXP] 468: [success_rate]: False, [answer]: 1200, [output]: def solution():
    rooms = 80
    sheets_per_room = 2
    pillowcases_per_room = 2 * sheets_per_room
    towels_per_room = 2 * pillowcases_per_room
    sheets = rooms * sheets_per_room
    pillowcases = rooms * pillowcases_per_room
    towels = rooms * towels_per_room
    total_laundry = sheets + pillowcases + towels
    return total_laundry

 Executed result: 1120
[EXP] 469: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    shoes_initial = 200
    shoes_gained_monday = 5 * 2
    shoes_gained_wednesday = 15 * 2
    shoes_gained_friday = 30 * 2
    shoes_gotten = shoes_gained_monday + shoes_gained_wednesday + shoes_gained_friday
    shoes_total = shoes_initial + shoes_gotten
    shoes_gotten_saturday = 180
    shoes_left = shoes_total - shoes_gotten_saturday
    result = shoes_left
    return result

 Executed result: 120
[EXP] 470: [success_rate]: False, [answer]: 4, [output]: def solution():
    sprinkles = 6
    sprinkles_per_cupcake = 1/8
    cupcakes_per_pan = 12
    cupcakes_needed = sprinkles * sprinkles_per_cupcake
    pans_needed = cupcakes_needed // cupcakes_per_pan
    return pans_needed

 Executed result: 0.0
[EXP] 471: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    pen_cost = 2
    paper_cost = 3 * pen_cost - 1
    total_cost = pen_cost + paper_cost
    change = 10 - total_cost
    return change

 Executed result: 3
[EXP] 472: [success_rate]: False, [answer]: 80, [output]: def solution():
    students = 30
    pencils_per_student = 10
    total_pencils = students * pencils_per_student
    pencils_used = total_pencils * 1/5
    pencils_left = total_pencils - pencils_used
    pencils_left_after = pencils_left * 2/3
    result = int(pencils_left_after)
    return result

 Executed result: 160
[EXP] 473: [success_rate]: True, [answer]: 6, [output]: def solution():
    cookies_wanted = 5
    cookies_per_carrot = 0.5
    extra_cookies = 2
    carrot_sticks = (cookies_wanted - extra_cookies) / cookies_per_carrot
    return int(carrot_sticks)

 Executed result: 6
[EXP] 474: [success_rate]: False, [answer]: 10, [output]: 
def solution():
    shark_length = 10
    remora_length = 2 * 6
    total_remora_length = remora_length
    percentage = (total_remora_length / shark_length) * 100
    return percentage

 Executed result: 120.0
[EXP] 475: [success_rate]: True, [answer]: 80, [output]: def solution():
    students_without_computer = 20
    students_with_computer = 3/4
    total_students = students_without_computer / (1 - students_with_computer)
    result = total_students
    return result

 Executed result: 80.0
[EXP] 476: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    time_total = 240
    time_left = 3 * 7
    time_per_day = time_total / time_left
    return time_per_day

 Executed result: 11.428571428571429
[EXP] 477: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    money_spent = 300
    cost_per_book = 15
    total_books = money_spent / cost_per_book
    books_per_child = total_books / 4
    result = int(books_per_child)
    return result

 Executed result: 5
[EXP] 478: [success_rate]: True, [answer]: 20, [output]: def solution():
    total_students = 32
    dairy_allergic = 9
    peanut_allergic = 6
    both_allergic = 3
    not_allergic_to_dairy = total_students - dairy_allergic
    not_allergic_to_peanuts = total_students - peanut_allergic
    not_allergic_to_both = total_students - both_allergic
    all_allergic = dairy_allergic + peanut_allergic - both_allergic
    not_allergic = total_students - all_allergic
    return not_allergic

 Executed result: 20
[EXP] 479: [success_rate]: True, [answer]: 621, [output]: def solution():
    employees_per_group = 200
    groups = 3
    guides_per_group = 7
    total_employees = employees_per_group * groups
    total_guides = guides_per_group * groups
    total_people = total_employees + total_guides
    result = total_people
    return result

 Executed result: 621
[EXP] 480: [success_rate]: False, [answer]: 15400, [output]: 
def solution():
    plane_tickets = 5000
    hotel_normal_price = 1500
    hotel_weekend_price = hotel_normal_price * 1.2
    hotel_cost = hotel_weekend_price * 3
    total_cost = plane_tickets + hotel_cost
    return total_cost

 Executed result: 10400.0
[EXP] 481: [success_rate]: True, [answer]: 11, [output]: def solution():
    ben_blue = 4
    ben_yellow = 3
    jasper_blue = ben_blue // 2
    jasper_yellow = ben_yellow * 3
    return jasper_blue + jasper_yellow

 Executed result: 11
[EXP] 482: [success_rate]: True, [answer]: 84, [output]: 
def solution():
    weight_1959 = 48
    weight_2010 = 3/4 * weight_1959
    total_weight = weight_1959 + weight_2010
    return total_weight

 Executed result: 84.0
[EXP] 483: [success_rate]: True, [answer]: 26, [output]: def solution():
    total_goal = 200
    keegan_earnings = 83
    tasha_earnings = 91
    total_earnings = keegan_earnings + tasha_earnings
    money_left = total_goal - total_earnings
    return money_left

 Executed result: 26
[EXP] 484: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    gabriel_songs = 20
    luri_songs = 3 * 20
    gabriel_space = 100 - gabriel_songs
    luri_space = 100 - luri_songs
    gabriel_add = gabriel_space
    luri_add = luri_space
    difference = gabriel_add - luri_add
    return difference

 Executed result: 40
[EXP] 485: [success_rate]: True, [answer]: 240, [output]: def solution():
    total_oranges = 60
    oranges_eaten = 2/5 * total_oranges
    money_given_up = oranges_eaten * 10
    return money_given_up

 Executed result: 240.0
[EXP] 486: [success_rate]: True, [answer]: 220, [output]: def solution():
    shoes_cost = 80
    bag_cost = 3 * shoes_cost - 20
    return bag_cost

 Executed result: 220
[EXP] 487: [success_rate]: False, [answer]: 6, [output]: def solution():
    miles_per_day = 12
    days_per_week = 5
    hours_per_mile = 1
    hours_per_week = miles_per_day * hours_per_mile * days_per_week
    return hours_per_week

 Executed result: 60
[EXP] 488: [success_rate]: True, [answer]: 4, [output]: def solution():
    horses = 4
    oats_per_horse_per_meal = 5
    meals_per_day = 2
    days = 5
    total_oats_per_day = horses * oats_per_horse_per_meal * meals_per_day
    total_oats_for_five_days = total_oats_per_day * days
    bags_per_fifty_pounds = 50
    bags_needed = total_oats_for_five_days // bags_per_fifty_pounds
    return bags_needed

 Executed result: 4
[EXP] 489: [success_rate]: True, [answer]: 6, [output]: def solution():
    puppies = 27
    pom_puppies = 2 * puppies // 3
    girl_pom_puppies = pom_puppies // 3
    result = girl_pom_puppies
    return result

 Executed result: 6
[EXP] 490: [success_rate]: True, [answer]: -10, [output]: 
def solution():
    southlandia = -48
    northlandia = 21
    midlandia = -3
    average = (southlandia + northlandia + midlandia) / 3
    return average

 Executed result: -10.0
[EXP] 491: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    toy_cost = 12
    savings = 4
    daily_savings = 2
    remaining_amount = toy_cost - savings
    days_to_save = remaining_amount // daily_savings
    return days_to_save

 Executed result: 4
[EXP] 492: [success_rate]: True, [answer]: 16, [output]: def solution():
    eggs = 64
    trays = 2
    tray_capacity = 24
    total_eggs = trays * tray_capacity
    remaining_eggs = eggs - total_eggs
    return remaining_eggs

 Executed result: 16
[EXP] 493: [success_rate]: True, [answer]: 32, [output]: def solution():
    small_pizza_cost = 8
    family_pizza_cost = 3 * small_pizza_cost
    total_cost = small_pizza_cost + family_pizza_cost
    result = total_cost
    return result

 Executed result: 32
[EXP] 494: [success_rate]: True, [answer]: 25, [output]: 
def solution():
    pack_cost = 4
    discount = 2
    packs = 2
    total_cost = (packs * pack_cost) - (packs // 2 * pack_cost)
    total_cost -= discount
    cost_per_razor = (total_cost * 100) // (packs * 4)
    return cost_per_razor

 Executed result: 25
[EXP] 495: [success_rate]: False, [answer]: 21, [output]: def solution():
    height_64_inches = 64
    height_60_inches = 60
    total_height = (4 * height_64_inches) + (3 * (height_64_inches + 4)) + (2 * (height_64_inches + 4 + 3)) + height_60_inches
    total_height_feet = total_height / 12
    return total_height_feet

 Executed result: 55.166666666666664
[EXP] 496: [success_rate]: True, [answer]: 200, [output]: def solution():
    hours_per_day = 8
    minutes_per_hour = 60
    minutes_per_walk = 5
    days_at_office = 5
    total_minutes_worked = hours_per_day * minutes_per_hour * days_at_office
    total_minutes_walked = total_minutes_worked // minutes_per_hour * minutes_per_walk
    return total_minutes_walked

 Executed result: 200
[EXP] 497: [success_rate]: True, [answer]: 38, [output]: def solution():
    brett_age = 14
    angela_future_age = 3 * brett_age
    angela_age_now = angela_future_age - 4
    result = angela_age_now
    return result

 Executed result: 38
[EXP] 498: [success_rate]: True, [answer]: 112, [output]: def solution():
    morning_rides = 14
    afternoon_rides = 14
    morning_cost = 6
    afternoon_cost = 2
    total_morning_cost = morning_rides * morning_cost
    total_afternoon_cost = afternoon_rides * afternoon_cost
    total_cost = total_morning_cost + total_afternoon_cost
    result = total_cost
    return result

 Executed result: 112
[EXP] 499: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    ashley_oranges = 5 * 10
    brianne_oranges = ashley_oranges + 20
    total_oranges = ashley_oranges + brianne_oranges
    oranges_per_pie = 3
    pies = total_oranges // oranges_per_pie
    return pies

 Executed result: 40
[EXP] 500: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    venue1_cost = 200
    venue2_cost_per_person = 25
    food_cost_per_person = 5
    guests_needed = 0
    while True:
        guests_needed += 1
        venue1_total = venue1_cost + guests_needed * food_cost_per_person
        venue2_total = venue2_cost_per_person * guests_needed
        if abs(venue1_total - venue2_total) < 0.01:
            return guests_needed

 Executed result: 10
[EXP] 501: [success_rate]: False, [answer]: 16, [output]: 
def solution():
    total_insects = 43
    bodhi_insects = 0
    for i in range(1, total_insects + 1):
        if total_insects - i in [j for j in range(1, i + 1)]:
            bodhi_insects = i
            break
    david_insects = bodhi_insects / 2
    lily_insects = david_insects + 7
    result = lily_insects
    return result

 Executed result: 18.0
[EXP] 502: [success_rate]: True, [answer]: 273, [output]: def solution():
    mariah_yarn = 1/4
    grandma_yarn = 1/2
    total_yarn = mariah_yarn + grandma_yarn
    yards_per_skein = 364
    total_yards = total_yarn * yards_per_skein
    return total_yards

 Executed result: 273.0
[EXP] 503: [success_rate]: True, [answer]: 26, [output]: def solution():
    number_of_friends = 5
    gifts_for_two_friends = 2 * 5
    gifts_for_three_friends = 3 * 2
    random_gifts = 10
    total_gifts = gifts_for_two_friends + gifts_for_three_friends + random_gifts
    result = total_gifts
    return result

 Executed result: 26
[EXP] 504: [success_rate]: False, [answer]: 18, [output]: def solution():
    chair_width = 3
    rug_width = chair_width + 5
    couch_width = 2 * rug_width
    couch_length = couch_width
    return couch_length

 Executed result: 16
[EXP] 505: [success_rate]: False, [answer]: 2, [output]: def solution():
    total_cost = 7
    strawberry_gum_cost = 0
    total_strawberry_gum_cost = 0
    for i in range(2):
        strawberry_gum_cost = int(input("Enter the cost of a pack of strawberry gum: "))
        total_strawberry_gum_cost += strawberry_gum_cost
    grape_gum_cost = 2
    green_apple_gum_cost = grape_gum_cost / 2
    total_cost_calculated = strawberry_gum_cost * 2 + grape_gum_cost + green_apple_gum_cost
    if total_cost_calculated == total_cost:
        for i in range(2):
            print(f"The cost of a pack of strawberry gum is ${strawberry_gum_cost}.")
    else:
        print("The total cost does not match the given cost.")

solution()

 Executed result: None
[EXP] 506: [success_rate]: False, [answer]: 1,600, [output]: def solution():
    money_initial = 24
    sticks_from_2x4 = 200
    sticks_from_2x8 = 400
    cost_of_2x4 = 4
    cost_of_2x8 = 6
    max_sticks = 0
    for two_by_four in range(money_initial // cost_of_2x4 + 1):
        for two_by_eight in range((money_initial - two_by_four * cost_of_2x4) // cost_of_2x8 + 1):
            sticks = two_by_four * sticks_from_2x4 + two_by_eight * sticks_from_2x8
            if sticks > max_sticks:
                max_sticks = sticks
    result = max_sticks
    return result

 Executed result: 1600
[EXP] 507: [success_rate]: False, [answer]: 144, [output]: def solution():
    dogs = 6
    legs_per_dog = 4
    snowshoes_per_leg = 1
    cost_per_pair = 12
    snowshoes_needed = legs_per_dog * snowshoes_per_leg * dogs
    cost = snowshoes_needed * cost_per_pair
    return cost

 Executed result: 288
[EXP] 508: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    bus_pass_cost = 20
    daily_bus_fare = 2.20
    daily_bus_trips = 2
    daily_cost = daily_bus_trips * daily_bus_fare
    weekly_cost = daily_cost * 5
    weekly_cost_with_pass = weekly_cost - bus_pass_cost
    result = weekly_cost_with_pass
    return result

 Executed result: 2.0
[EXP] 509: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    farm_cows = 30
    farm_sheep = 20 / 2
    zoo_cows = 30 * 2
    zoo_sheep = 20
    total_farm = farm_cows + farm_sheep
    total_zoo = zoo_cows + zoo_sheep
    total = total_farm + total_zoo
    return total

 Executed result: 120.0
[EXP] 510: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    rose_onions = 12
    rose_potatoes = 4
    rose_total = rose_onions + rose_potatoes
    rose_times_sophia = 4
    sophia_total = rose_total / rose_times_sophia
    return int(sophia_total)

 Executed result: 4
[EXP] 511: [success_rate]: False, [answer]: 525, [output]: 
def solution():
    days = (datetime.datetime(2023, 7, 19) - datetime.datetime(2023, 12, 31)).days + 1
    weight_loss_goal = 30
    calories_per_pound = 3500
    daily_calorie_deficit = (weight_loss_goal * calories_per_pound) / days
    return daily_calorie_deficit

 Executed result: None
[EXP] 512: [success_rate]: True, [answer]: 110, [output]: def solution():
    daily_pay = 30
    days_worked = 7
    daily_expenses = 100
    total_income = daily_pay * days_worked
    total_expenses = daily_expenses
    money_left = total_income - total_expenses
    result = money_left
    return result

 Executed result: 110
[EXP] 513: [success_rate]: True, [answer]: 120, [output]: def solution():
    total_distance = 8 * 0.25
    water_per_km = 60
    water_needed = total_distance * water_per_km
    return water_needed

 Executed result: 120.0
[EXP] 514: [success_rate]: True, [answer]: 300, [output]: def solution():
    money_initial = 500
    money_spent_on_clothes = money_initial * 0.20
    money_left_after_clothes = money_initial - money_spent_on_clothes
    money_spent_on_cds = money_left_after_clothes * 0.25
    money_left_after_cds = money_left_after_clothes - money_spent_on_cds
    result = money_left_after_cds
    return result

 Executed result: 300.0
[EXP] 515: [success_rate]: True, [answer]: 90000, [output]: def solution():
    total_cost = 120000
    house_cost = total_cost * 3 // 4
    return house_cost

 Executed result: 90000
[EXP] 516: [success_rate]: True, [answer]: 160, [output]: 
def solution():
    bags = 8
    bag_cost = 4
    painted_bags = bags * 5
    revenue = painted_bags * 8
    cost = bag_cost * bags * 5
    profit = revenue - cost
    return profit

 Executed result: 160
[EXP] 517: [success_rate]: True, [answer]: 375, [output]: def solution():
    punches_per_minute = 25
    minutes_per_round = 3
    rounds = 5
    total_minutes = minutes_per_round * rounds
    total_punches = punches_per_minute * total_minutes
    result = total_punches
    return result

 Executed result: 375
[EXP] 518: [success_rate]: True, [answer]: 18, [output]: def solution():
    suzanne_cookies = 36
    josh_cookies = suzanne_cookies / 4
    kelsie_cookies = josh_cookies * 2
    return kelsie_cookies

 Executed result: 18.0
[EXP] 519: [success_rate]: True, [answer]: 32, [output]: 
def solution():
    bills = 4 * 10 + 6 * 20
    half = bills / 2
    money_left = bills - half
    money_spent = money_left * 3 / 5
    money_left_after_dinner = money_left - money_spent
    return money_left_after_dinner

 Executed result: 32.0
[EXP] 520: [success_rate]: False, [answer]: 280, [output]: def solution():
    rob_minutes = 2 * 60
    royce_minutes = rob_minutes + 40
    return royce_minutes

 Executed result: 160
[EXP] 521: [success_rate]: False, [answer]: 63, [output]: 
def solution():
    hats = 3
    hat_skeins = 2
    scarves = 3
    scarf_skeins = 4
    sweaters = 3
    sweater_skeins = 12
    mittens = 6
    mitten_skeins = 1
    socks = 6
    sock_skeins = 2
    total_hats = hats * hat_skeins
    total_scarves = scarves * scarf_skeins
    total_sweaters = sweaters * sweater_skeins
    total_mittens = mittens * mitten_skeins
    total_socks = socks * sock_skeins
    total_skeins = total_hats + total_scarves + total_sweaters + total_mittens + total_socks
    result = total_skeins
    return result

 Executed result: 72
[EXP] 522: [success_rate]: True, [answer]: 39, [output]: def solution():
    total_problems = 100
    problems_completed_monday = 12
    problems_completed_tuesday = 3 * problems_completed_monday
    problems_completed_wednesday = (total_problems - problems_completed_monday - problems_completed_tuesday) // 4
    problems_left = total_problems - (problems_completed_monday + problems_completed_tuesday + problems_completed_wednesday)
    return problems_left

 Executed result: 39
[EXP] 523: [success_rate]: True, [answer]: 29, [output]: def solution():
    tony = 6
    bobby = tony - 1
    kathy = 2 * bobby
    ricky = kathy - 2
    total = tony + bobby + kathy + ricky
    return total

 Executed result: 29
[EXP] 524: [success_rate]: False, [answer]: 74, [output]: def solution():
    loaves_baked = 200
    loaves_sold_morning = 93
    loaves_sold_afternoon = 39
    loaves_returned = 6

 Executed result: None
[EXP] 525: [success_rate]: True, [answer]: 9, [output]: def solution():
    red_tulips = 36
    blue_tulips = 24
    red_per_row = 6
    blue_per_row = 8
    rows_red = red_tulips // red_per_row
    rows_blue = blue_tulips // blue_per_row
    total_rows = rows_red + rows_blue
    return total_rows

 Executed result: 9
[EXP] 526: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    cups_of_raisins = 27
    cups_per_batch = 3/4
    batches = cups_of_raisins / cups_per_batch
    return batches

 Executed result: 36.0
[EXP] 527: [success_rate]: True, [answer]: 21, [output]: def solution():
    daily_consumption = 12
    new_device_consumption = 2
    total_consumption_before = daily_consumption
    total_consumption_after = daily_consumption + new_device_consumption
    daily_consumption_cost = 1.50
    total_consumption_cost_before = total_consumption_before * daily_consumption_cost
    total_consumption_cost_after = total_consumption_after * daily_consumption_cost
    weekly_consumption_cost_before = total_consumption_cost_before * 7
    weekly_consumption_cost_after = total_consumption_cost_after * 7
    difference = weekly_consumption_cost_after - weekly_consumption_cost_before
    return difference

 Executed result: 21.0
[EXP] 528: [success_rate]: False, [answer]: 48, [output]: def solution():
    hours_per_day = 5
    days_per_half_house = 5
    days_per_house = 2 * days_per_half_house
    people = 5
    house_hours = hours_per_day * days_per_house
    person_hours = house_hours / people
    return person_hours

 Executed result: 10.0
[EXP] 529: [success_rate]: False, [answer]: 172, [output]: def solution():
    ophelia_sofas = 20
    ophelia_chairs = ophelia_sofas + 2
    jenna_chairs = ophelia_chairs * 3
    jenna_sofas = ophelia_sofas + 2
    ophelia_total = ophelia_chairs + ophelia_sofas
    jenna_total = jenna_chairs + jenna_sofas
    result = ophelia_total + jenna_total
    return result

 Executed result: 130
[EXP] 530: [success_rate]: True, [answer]: 11, [output]: def solution():
    cd_cost = 4
    total_cost = 48
    headphone_cost = total_cost - cd_cost
    more_cds = headphone_cost // cd_cost
    return more_cds

 Executed result: 11
[EXP] 531: [success_rate]: False, [answer]: 36, [output]: def solution():
    hours_per_week = 4
    hours_spent_1 = 5
    hours_spent_2 = 6
    total_hours = 0
    for i in range(8):
        if i == 0 or i == 1:
            total_hours += hours_spent_1 * 2
        elif i == 2:
            total_hours += hours_spent_2
        else:
            total_hours += hours_per_week
    return total_hours

 Executed result: 46
[EXP] 532: [success_rate]: True, [answer]: 66, [output]: def solution():
    total_passengers = 48
    passengers_off_first_stop = 8
    passengers_on_first_stop = passengers_off_first_stop * 5
    total_passengers -= passengers_off_first_stop
    total_passengers += passengers_on_first_stop
    
    passengers_off_second_stop = 21
    passengers_on_second_stop = passengers_off_second_stop // 3
    total_passengers -= passengers_off_second_stop
    total_passengers += passengers_on_second_stop
    
    result = total_passengers
    return result

 Executed result: 66
[EXP] 533: [success_rate]: False, [answer]: 25, [output]: def solution():
    age_jame = 27
    age_in_5_years = age_jame + 5
    age_cousin_in_8_years = 2 * (age_jame + 8) - 5
    age_difference = age_cousin_in_8_years - age_in_5_years
    return age_difference

 Executed result: 33
[EXP] 534: [success_rate]: False, [answer]: 300, [output]: def solution():
    computer_cost = 1100
    printer_cost = computer_cost - 400
    total_cost = computer_cost + printer_cost + 2 * (computer_cost - 100)
    monitor_cost = (total_cost - computer_cost - printer_cost) / 2
    return monitor_cost

 Executed result: 1000.0
[EXP] 535: [success_rate]: False, [answer]: 300, [output]: 
def solution():
    boys = 60
    girls = boys + boys * 4
    shells_per_group = boys
    shells_per_kid = shells_per_group * 2
    shells_per_girl = shells_per_kid
    return shells_per_girl

 Executed result: 120
[EXP] 536: [success_rate]: True, [answer]: 16, [output]: def solution():
    george_candies = 3
    george_initial_candies = george_candies + 5
    nick_candies = george_initial_candies * 2
    result = nick_candies
    return result

 Executed result: 16
[EXP] 537: [success_rate]: True, [answer]: 8, [output]: def solution():
    chenny_age = 10
    alyana_age = chenny_age - 4
    anne_age = alyana_age + 2
    return anne_age

 Executed result: 8
[EXP] 538: [success_rate]: True, [answer]: 188, [output]: 
def solution():
    book1_thickness = 31
    book2_thickness = 50
    book3_thickness = book2_thickness - 5
    book4_thickness = book1_thickness * 2
    total_thickness = book1_thickness + book2_thickness + book3_thickness + book4_thickness
    return total_thickness

 Executed result: 188
[EXP] 539: [success_rate]: True, [answer]: 18, [output]: def solution():
    total_vlogs = 72
    vlogs_uploaded = 18 + 21 + 15
    vlogs_left = total_vlogs - vlogs_uploaded
    result = vlogs_left
    return result

 Executed result: 18
[EXP] 540: [success_rate]: False, [answer]: 35, [output]: 
def solution():
    dinner_bill = 50
    tip = dinner_bill * 0.20
    total_bill = dinner_bill + tip
    share = total_bill / 2
    return total_bill

 Executed result: 60.0
[EXP] 541: [success_rate]: True, [answer]: 39, [output]: 
def solution():
    money_shared = 18
    boys = 3
    money_per_boy = money_shared / boys
    eldest_money = money_per_boy
    eldest_money += 5
    eldest_money += 10
    eldest_money -= 8
    eldest_money *= 3
    result = eldest_money
    return result

 Executed result: 39.0
[EXP] 542: [success_rate]: False, [answer]: 50, [output]: def solution():
    total_target = 1125
    days_in_month = 30
    first_half_days = days_in_month // 2
    second_half_days = days_in_month - first_half_days
    daily_target_first_half = total_target / first_half_days
    daily_target_second_half = total_target / second_half_days
    daily_target_second_half = daily_target_first_half * 2
    return daily_target_second_half

 Executed result: 150.0
[EXP] 543: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    money_given = 20
    apples = 3
    apple_cost = 1.5
    money_spent_apples = apples * apple_cost
    oranges = 5
    orange_cost = 0.8
    money_spent_oranges = oranges * orange_cost
    peaches = 6
    peach_cost = 0.75
    money_spent_peaches = peaches * peach_cost
    total_money_spent = money_spent_apples + money_spent_oranges + money_spent_peaches
    change = money_given - total_money_spent
    result = change
    return result

 Executed result: 7.0
[EXP] 544: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    jairus_tasks = 20
    jenny_tasks = 20
    jairus_earnings = jairus_tasks * 0.8
    jenny_earnings = jenny_tasks * 0.5
    jairus_more = jairus_earnings - jenny_earnings
    return jairus_more

 Executed result: 6.0
[EXP] 545: [success_rate]: False, [answer]: 80, [output]: def solution():
    total_money = 100
    jeff_amount = 0
    brad_amount = 0
    for i in range(1, 101):
        if i * 4 <= total_money:
            jeff_amount = i * 4
            brad_amount = i
        else:
            break
    return jeff_amount

 Executed result: 100
[EXP] 546: [success_rate]: True, [answer]: 30, [output]: def solution():
    work_distance = 3
    work_days = 5
    miles_walked = work_distance * 2 * work_days
    return miles_walked

 Executed result: 30
[EXP] 547: [success_rate]: False, [answer]: 130, [output]: 
def solution():
    alphabet_length = 26
    letters_written = alphabet_length * 2 + alphabet_length // 2 + alphabet_length * 2
    return letters_written

 Executed result: 117
[EXP] 548: [success_rate]: True, [answer]: 81, [output]: def solution():
    families_called = 3
    for i in range(3):
        families_called *= 3
    result = families_called
    return result

 Executed result: 81
[EXP] 549: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    final_weight = 70
    weight_lost = 10
    months = 3
    initial_weight = final_weight + weight_lost * months
    return initial_weight

 Executed result: 100
[EXP] 550: [success_rate]: False, [answer]: 398, [output]: def solution():
    james_toys = 80
    sorted_set_size = 5
    jonathan_toys_needed = (sorted_set_size * james_toys) * 2
    jonathan_toys_current = jonathan_toys_needed - 2
    return jonathan_toys_current

 Executed result: 798
[EXP] 551: [success_rate]: True, [answer]: 27, [output]: 
def solution():
    notebook_price = 1.5
    pen_price = 0.25
    calculator_price = 12
    geometry_set_price = 10
    notebook_cost = 5 * notebook_price
    pen_cost = 2 * pen_price
    calculator_cost = calculator_price
    geometry_set_cost = geometry_set_price
    total_cost = notebook_cost + pen_cost + calculator_cost + geometry_set_cost
    discount = total_cost * 0.1
    total_cost_after_discount = total_cost - discount
    return total_cost_after_discount

 Executed result: 27.0
[EXP] 552: [success_rate]: True, [answer]: 17, [output]: def solution():
    total_cost = 5 * 4 + 10 * 0.3 + 5 * 2
    change = 50 - total_cost
    return change

 Executed result: 17.0
[EXP] 553: [success_rate]: True, [answer]: 450, [output]: 
def solution():
    sales = 2500
    commission_rate = 0.3
    bonus_rate = 0.1
    if sales > 1000:
        commission = (sales - 1000) * bonus_rate + 1000 * commission_rate
    else:
        commission = sales * commission_rate
    result = commission
    return result

 Executed result: 450.0
[EXP] 554: [success_rate]: True, [answer]: 92, [output]: 
def solution():
    cases = 2
    bottles_per_case = 24
    total_bottles = cases * bottles_per_case
    guests = 70
    bottles_per_guest = 2
    bottles_needed = guests * bottles_per_guest
    bottles_left = total_bottles - bottles_needed
    return bottles_left

 Executed result: -92
[EXP] 555: [success_rate]: True, [answer]: 54, [output]: def solution():
    cold_time = 16
    warm_time = 2 * cold_time + 2
    cold_time3 = 3 * cold_time
    warm_time3 = 3 * warm_time
    cold_diff = 0
    warm_diff = 0
    cold_diff = cold_time3 - warm_time3
    warm_diff = warm_time3 - cold_time3
    return warm_diff

 Executed result: 54
[EXP] 556: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    hourly_wage = 2
    hours_worked_per_day = 5
    days_per_week = 4
    days_per_week_to_save = 80 / (hourly_wage * hours_worked_per_day * days_per_week)
    weeks_to_save = days_per_week_to_save / 4
    return weeks_to_save

 Executed result: 0.5
[EXP] 557: [success_rate]: True, [answer]: 160, [output]: def solution():
    lunch_cost = 40
    fish_sub = 40
    cold_cut_combo = fish_sub * 3
    total_cost = fish_sub + cold_cut_combo
    return total_cost

 Executed result: 160
[EXP] 558: [success_rate]: True, [answer]: 70, [output]: def solution():
    total_buttons = 21
    buttons_with_two_holes = 7
    holes_in_buttons_with_two_holes = buttons_with_two_holes * 2
    total_holes = holes_in_buttons_with_two_holes
    buttons_with_four_holes = total_buttons - buttons_with_two_holes
    holes_in_buttons_with_four_holes = buttons_with_four_holes * 4
    total_holes += holes_in_buttons_with_four_holes
    result = total_holes
    return result

 Executed result: 70
[EXP] 559: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    timothy_locker = 24
    zack_locker = timothy_locker / 2
    peter_locker = zack_locker / 4
    result = peter_locker
    return result

 Executed result: 3.0
[EXP] 560: [success_rate]: True, [answer]: 16, [output]: def solution():
    octavia_cups = 4 / 2
    juan_cups = 10 * octavia_cups
    reduction = juan_cups - 4
    return reduction

 Executed result: 16.0
[EXP] 561: [success_rate]: True, [answer]: 45, [output]: def solution():
    hamsters = 3 * 10
    guinea_pigs = 3 * 5
    total = hamsters + guinea_pigs
    return total

 Executed result: 45
[EXP] 562: [success_rate]: True, [answer]: 180, [output]: def solution():
    mark_weight = 150
    susan_weight = mark_weight - 20
    bob_weight = 2 * susan_weight
    total_weight = mark_weight + susan_weight + bob_weight
    average_weight = total_weight / 3
    return average_weight

 Executed result: 180.0
[EXP] 563: [success_rate]: True, [answer]: 82, [output]: def solution():
    initial_angle = 32
    rate = 5
    time = 10
    angle_difference = rate * time
    angle = initial_angle + angle_difference
    return angle

 Executed result: 82
[EXP] 564: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    age1 = 12
    age2 = age1 - 4
    pack_cost = 3
    num_packs = (age1 + age2) // 5
    money_spent = num_packs * pack_cost
    return money_spent

 Executed result: 12
[EXP] 565: [success_rate]: False, [answer]: 240, [output]: def solution():
    pages_read_week1 = 0
    pages_read_week2 = 100
    minutes_per_week1 = 15 * 7
    minutes_per_page = 1.5
    pages_read_week1 = minutes_per_week1 / minutes_per_page
    pages_read_in_two_weeks = pages_read_week1 + pages_read_week2
    result = pages_read_in_two_weeks
    return result

 Executed result: 170.0
[EXP] 566: [success_rate]: True, [answer]: 5, [output]: def solution():
    sandwiches = 12
    cody_eaten = sandwiches // 3
    trevor_eaten = sandwiches // 4
    total_eaten = cody_eaten + trevor_eaten
    sandwiches_left = sandwiches - total_eaten
    return sandwiches_left

 Executed result: 5
[EXP] 567: [success_rate]: True, [answer]: 10, [output]: def solution():
    shiloh_age = 44
    shiloh_age_future = shiloh_age + 7
    nephew_age_future = shiloh_age_future / 3
    nephew_age_today = nephew_age_future - 7
    result = int(nephew_age_today)
    return result

 Executed result: 10
[EXP] 568: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    money_initial = 5
    money_per_tooth = 1
    money_per_tooth_last_two = money_per_tooth / 2
    first_tooth = money_initial
    for i in range(1, 4):
        money_per_tooth *= 1
        first_tooth += money_per_tooth
    for i in range(4, 6):
        money_per_tooth_last_two *= 1
        first_tooth += money_per_tooth_last_two
    result = first_tooth
    return result

 Executed result: 9.0
[EXP] 569: [success_rate]: True, [answer]: 175, [output]: def solution():
    mark = ?
    anna = ?
    richie = 80
    mark = richie - 20
    anna = richie - 45
    total_goals = mark + anna + richie
    return total_goals

 Executed result: 175
[EXP] 570: [success_rate]: True, [answer]: 21, [output]: def solution():
    liam_money = 63
    mitchell_lemonades = 21
    mitchell_price = 4
    mitchell_money = mitchell_lemonades * mitchell_price
    difference = mitchell_money - liam_money
    return difference

 Executed result: 21
[EXP] 571: [success_rate]: False, [answer]: 23, [output]: 
def solution():
    money_initial = 70
    days = 7
    days_spent = 4
    wood_figure_cost = 5
    plastic_figure_cost = 2
    
    money_spent_wood = days_spent * wood_figure_cost
    money_spent_plastic = (days - days_spent) * plastic_figure_cost
    money_spent_total = money_spent_wood + money_spent_plastic
    
    if money_initial - money_spent_total < 0:
        return 0
    else:
        wood_figure_count = money_initial - money_spent_total
        wood_figure_count //= wood_figure_cost
        plastic_figure_count = (days - days_spent) * plastic_figure_cost
        return wood_figure_count + plastic_figure_count

 Executed result: 14
[EXP] 572: [success_rate]: True, [answer]: 308, [output]: def solution():
    spaying_cost = 200
    vaccine_cost = 20
    num_vaccines = 3
    vase_cost = 12
    num_vases = 4
    total_cost = spaying_cost + (num_vaccines * vaccine_cost) + (num_vases * vase_cost)
    return total_cost

 Executed result: 308
[EXP] 573: [success_rate]: True, [answer]: 100, [output]: def solution():
    rose_per_week = 40
    shop1 = 20
    shop2 = 15
    shop3 = 30
    total_roses_per_week = shop1 + shop2 + shop3
    roses_per_month = total_roses_per_week * 4
    roses_lacked_per_week = rose_per_week - total_roses_per_week
    roses_lacked_per_month = roses_lacked_per_week * 4
    return roses_lacked_per_month

 Executed result: -100
[EXP] 574: [success_rate]: True, [answer]: 600, [output]: 
def solution():
    savings_initial = 3000
    monthly_withdrawal = 100
    months = 24
    money_left = savings_initial
    for _ in range(months):
        money_left -= monthly_withdrawal
    result = money_left
    return result

 Executed result: 600
[EXP] 575: [success_rate]: False, [answer]: 37, [output]: 
def solution():
    bread_cost = 3
    sandwiches_per_loaf = 10
    cost_per_sandwich = (bread_cost + 3) / sandwiches_per_loaf
    revenue = 7 * 10
    profit = revenue - cost_per_sandwich * 10
    return profit

 Executed result: 64.0
[EXP] 576: [success_rate]: True, [answer]: 36, [output]: 
def solution():
    crayons = 3 * 64
    crayons_melted = crayons // 8
    muffins = crayons_melted
    money_per_muffin = 1.5
    money_made = muffins * money_per_muffin
    return money_made

 Executed result: 36.0
[EXP] 577: [success_rate]: True, [answer]: 11232, [output]: def solution():
    length = 18
    width = 12
    carpet_cost = length * width * 12
    padding_cost = length * width * 2
    removal_cost = length * width * 4
    installation_cost = length * width * 34
    total_cost = carpet_cost + padding_cost + removal_cost + installation_cost
    result = total_cost
    return result

 Executed result: 11232
[EXP] 578: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    birds_days1_2 = 50
    birds_day3 = 0
    birds_days4_5 = 120
    birds_day6 = 20
    birds_day7 = 90
    total_birds = birds_days1_2 + birds_day3 + birds_days4_5 + birds_day6 + birds_day7
    total_days = 7
    average_birds = total_birds / total_days
    result = average_birds
    return result

 Executed result: 40.0
[EXP] 579: [success_rate]: True, [answer]: 48, [output]: def solution():
    start_value = 20
    half_start_value = start_value / 2
    result = (start_value + half_start_value) / 5 * (start_value - 12)
    return result

 Executed result: 48.0
[EXP] 580: [success_rate]: True, [answer]: 7, [output]: def solution():
    boy_cards = 5
    brother_cards = boy_cards - 3
    total_cards = boy_cards + brother_cards
    return total_cards

 Executed result: 7
[EXP] 581: [success_rate]: True, [answer]: 500, [output]: def solution():
    actual_temp = 468
    target_temp = 520
    percentage_error = (actual_temp - 450) / 450
    correct_temp = target_temp / (1 + percentage_error)
    return correct_temp

 Executed result: 500.0
[EXP] 582: [success_rate]: True, [answer]: 215, [output]: def solution():
    movie1_length = 90  # convert 1 hour and 30 minutes to minutes
    movie2_length = 125  # convert 2 hours and 5 minutes to minutes
    total_minutes = movie1_length + movie2_length
    return total_minutes

 Executed result: 215
[EXP] 583: [success_rate]: True, [answer]: 129200, [output]: def solution():
    herb_house = 76000
    juan_house = herb_house * 0.7
    combined_house = herb_house + juan_house
    return combined_house

 Executed result: 129200.0
[EXP] 584: [success_rate]: False, [answer]: 120, [output]: def solution():
    cups = 12
    dishes = 2 * cups
    total_utensils_judy = cups + dishes
    friend_cups = 40
    friend_dishes = friend_cups + 20
    total_utensils_friend = friend_cups + friend_dishes
    total_utensils = total_utensils_judy + total_utensils_friend
    return total_utensils

 Executed result: 136
[EXP] 585: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    box_cost = 100 * 0.9  # 10% off
    contacts_per_box = 90
    days_per_box = 45
    days_total = 2 * days_per_box
    contacts_total = contacts_per_box * 2
    cost_per_contact = box_cost / contacts_per_box
    cost_per_pair = cost_per_contact / 2
    return cost_per_pair

 Executed result: 0.5
[EXP] 586: [success_rate]: False, [answer]: 40, [output]: def solution():
    john_hours_saturday = 2
    jill_hours_saturday = 2
    john_hours_sunday = 3 * 2
    jill_hours_sunday = 1
    
    john_total_hours = john_hours_saturday + john_hours_sunday
    jill_total_hours = jill_hours_saturday + jill_hours_sunday
    
    john_pay = john_total_hours * 10
    jill_pay = jill_total_hours * 10
    
    john_earn_more = john_pay - jill_pay
    return john_earn_more

 Executed result: 50
[EXP] 587: [success_rate]: True, [answer]: 800, [output]: def solution():
    calories_burnt_aerobics = 500 * 2
    calories_burnt_running = 600 * 1
    total_calories_burnt = calories_burnt_aerobics + calories_burnt_running
    water_needed = total_calories_burnt * 100 / 200
    return water_needed

 Executed result: 800.0
[EXP] 588: [success_rate]: False, [answer]: 30, [output]: def solution():
    total_jelly_beans = 4500
    blue_jelly_beans = total_jelly_beans / 100 * 98
    red_jelly_beans = blue_jelly_beans - blue_jelly_beans / 100
    green_jelly_beans = blue_jelly_beans + blue_jelly_beans / 100
    difference = green_jelly_beans - red_jelly_beans
    return difference

 Executed result: 88.20000000000073
[EXP] 589: [success_rate]: True, [answer]: 52, [output]: 
def solution():
    wpm1 = 47
    wpm2 = 52
    wpm3 = wpm2 + 5
    average = (wpm1 + wpm2 + wpm3) / 3
    return average

 Executed result: 52.0
[EXP] 590: [success_rate]: False, [answer]: 15, [output]: 
def solution():
    loss_per_week = 1.25
    gain_per_week = 1.75
    total_weeks = 5
    loss_for_five_weeks = loss_per_week * total_weeks
    gain_for_five_weeks = gain_per_week * total_weeks
    difference = gain_for_five_weeks - loss_for_five_weeks
    return difference

 Executed result: 2.5
[EXP] 591: [success_rate]: True, [answer]: 319, [output]: def solution():
    initial_guests = 100
    additional_guests_from_emails = initial_guests * 2
    additional_guests_from_calls = 10 + 8
    total_guests = initial_guests + additional_guests_from_emails + additional_guests_from_calls
    return total_guests

 Executed result: 318
[EXP] 592: [success_rate]: True, [answer]: 220, [output]: 
def solution():
    affenpinscher_weight = 10
    dachshund_weight = affenpinscher_weight * 2
    papillon_weight = dachshund_weight / 4
    mastiff_weight = papillon_weight * 44
    return mastiff_weight

 Executed result: 220.0
[EXP] 593: [success_rate]: True, [answer]: 1, [output]: def solution():
    amazon_price = 16
    amazon_shipping = 4
    ebay_price = 13
    ebay_shipping = 2 * amazon_shipping
    ebay_total = ebay_price + ebay_shipping
    amazon_total = amazon_price + amazon_shipping
    difference = ebay_total - amazon_total
    return difference

 Executed result: 1
[EXP] 594: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    window_height = 20
    beanstalk_height = 4
    days = 0
    while beanstalk_height < window_height:
        beanstalk_height *= 2
        days += 1
    return days

 Executed result: 3
[EXP] 595: [success_rate]: True, [answer]: 42, [output]: 
def solution():
    cup_weight = 100
    cup_protein = 3
    daily_consumption = 200
    days_in_week = 7
    total_protein_per_day = cup_protein * (daily_consumption / cup_weight)
    total_protein_per_week = total_protein_per_day * days_in_week
    result = total_protein_per_week
    return result

 Executed result: 42.0
[EXP] 596: [success_rate]: False, [answer]: 13, [output]: def solution():
    jerry_age_5_years_ago = 0
    jerry_age = 0
    jerry_future_age = 0
    jerry_age = jerry_age_5_years_ago * 2
    jerry_future_age = jerry_age + 3
    result = jerry_future_age
    return result

 Executed result: 3
[EXP] 597: [success_rate]: False, [answer]: 260, [output]: def solution():
    base_price = 2 * 2000
    extra_price = 2000
    deposit = 600
    hourly_wage = 15
    total_price = base_price + extra_price
    total_cost = total_price - deposit
    hours_needed = total_cost / hourly_wage
    return hours_needed

 Executed result: 360.0
[EXP] 598: [success_rate]: False, [answer]: 90, [output]: def solution():
    smallest_angle = int(input("Enter the measure of the smallest angle: "))
    second_angle = smallest_angle * 2
    third_angle = smallest_angle * 3
    total_angles = smallest_angle + second_angle + third_angle
    largest_angle = 180 - total_angles
    return largest_angle

 Executed result: None
[EXP] 599: [success_rate]: True, [answer]: 69, [output]: 
def solution():
    total_cents = (8 * 25) + (6 * 10) + (14 * 5) + 15
    gumballs = total_cents // 5
    return gumballs

 Executed result: 69
[EXP] 600: [success_rate]: True, [answer]: 48, [output]: def solution():
    dogs = 5
    cats = 2
    birds = 10
    legs_dogs = dogs * 4
    legs_cats = cats * 4
    legs_birds = birds * 2
    total_legs = legs_dogs + legs_cats + legs_birds
    result = total_legs
    return result

 Executed result: 48
[EXP] 601: [success_rate]: True, [answer]: 10, [output]: def solution():
    weight = 8
    weight_increased = weight * 1.5
    weight_used = weight_increased - 2
    return weight_used

 Executed result: 10.0
[EXP] 602: [success_rate]: False, [answer]: 104, [output]: 
def solution():
    games_initial = 5
    games_per_month = [1, 2, 4]
    months = 36
    games_per_year = [games_per_month[0], games_per_month[0] * 12, games_per_month[0] * 12]
    total_games = games_initial
    for i in range(3):
        total_games += games_per_year[i]
    result = total_games
    return result

 Executed result: 30
[EXP] 603: [success_rate]: True, [answer]: 5, [output]: def solution():
    miles_traveled = 1200
    hours_taken = 3
    miles_per_hour = miles_traveled / hours_taken
    additional_miles = 2000
    additional_hours = additional_miles / miles_per_hour
    result = additional_hours
    return result

 Executed result: 5.0
[EXP] 604: [success_rate]: False, [answer]: 1800, [output]: def solution():
    ruiz_chocolates = 120
    ruiz_hours = 2
    marissa_chocolates = ruiz_chocolates * 3 / 4
    marissa_hours = 12
    ruiz_total_chocolates = ruiz_chocolates * ruiz_hours
    marissa_total_chocolates = marissa_chocolates * marissa_hours
    total_chocolates = ruiz_total_chocolates + marissa_total_chocolates
    return total_chocolates

 Executed result: 1320.0
[EXP] 605: [success_rate]: True, [answer]: 12, [output]: def solution():
    money_initial = 100
    money_spent_monday = 8
    money_spent_tuesday = 2 * money_spent_monday
    money_spent_wednesday = 4 * money_spent_tuesday
    money_spent = money_spent_monday + money_spent_tuesday + money_spent_wednesday
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 12
[EXP] 606: [success_rate]: True, [answer]: 42, [output]: def solution():
    hours = 4
    cups_per_hour = 15
    price_per_cup = 0.5
    money_per_hour = cups_per_hour * price_per_cup
    money_in_first_hours = money_per_hour * hours
    hours_left = 6 - hours
    cups_per_hour_left = 10
    price_per_cup_left = 0.6
    money_per_hour_left = cups_per_hour_left * price_per_cup_left
    money_in_last_hours = money_per_hour_left * hours_left
    total_money = money_in_first_hours + money_in_last_hours
    return total_money

 Executed result: 42.0
[EXP] 607: [success_rate]: False, [answer]: 6, [output]: def solution():
    miles_driven = 400
    rotations_per_mile = 725
    total_rotations = miles_driven * rotations_per_mile
    total_rotations_allowed = 10440000
    years = total_rotations_allowed / total_rotations
    return years

 Executed result: 36.0
[EXP] 608: [success_rate]: True, [answer]: 10, [output]: def solution():
    shampoo_cost = 2400  # 24.00 in cents
    washings = 120
    pumps_per_washing = 2
    total_pumps = washings * pumps_per_washing
    cost_per_pump = shampoo_cost / total_pumps
    return cost_per_pump

 Executed result: 10.0
[EXP] 609: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    money_initial = 50
    shirt_cost = 25
    shorts_cost = 35
    discount = 0.3
    price_with_discount = (1 - discount) * (shirt_cost + shorts_cost)
    money_spent = price_with_discount
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 8.0
[EXP] 610: [success_rate]: False, [answer]: 7, [output]: 
def solution():
    butter_per_dozen = 1 / 4
    croissants_per_day = 4 * 12
    days = 7
    butter_needed = butter_per_dozen * croissants_per_day * days
    return round(butter_needed, 2)

 Executed result: 84.0
[EXP] 611: [success_rate]: False, [answer]: 65,960, [output]: def solution():
    street_length = 490
    cost_per_meter = 194
    cost_of_monica_street = street_length * cost_per_meter
    cost_of_lewis_street = street_length * cost_per_meter
    cost_difference = cost_of_lewis_street - cost_of_monica_street
    return cost_difference

 Executed result: 0
[EXP] 612: [success_rate]: False, [answer]: 1,450,000, [output]: def solution():
    funding_initial = 100000
    months = 5
    funding_per_month = funding_initial / months
    additional_funding = funding_per_month * 1.5
    total_funding = funding_initial
    for i in range(months, 10 * months):
        total_funding += additional_funding
    return total_funding

 Executed result: 1450000.0
[EXP] 613: [success_rate]: True, [answer]: 30, [output]: def solution():
    steak = 6
    beef_tips = 8
    large_steak = 16
    total_meat = steak + beef_tips + large_steak
    return total_meat

 Executed result: 30
[EXP] 614: [success_rate]: True, [answer]: 93000, [output]: 
def solution():
    members = 1000
    posts_per_member = 3
    days_in_march = 31
    total_posts = members * posts_per_member * days_in_march
    return total_posts

 Executed result: 93000
[EXP] 615: [success_rate]: True, [answer]: 312, [output]: 
def solution():
    loads_per_week = 2
    loads_per_year = loads_per_week * 52
    gallons_per_load = 20
    gallons_per_year = loads_per_year * gallons_per_load
    cost_per_gallon = 0.15
    cost_per_year = gallons_per_year * cost_per_gallon
    result = cost_per_year
    return result

 Executed result: 312.0
[EXP] 616: [success_rate]: True, [answer]: 33, [output]: 
def solution():
    aquarium_cost = 10
    rock_cost = 2 * 2.5
    coral_cost = 3 * 2
    fish_cost = 20 * 0.5
    food_cost = 2
    total_cost = aquarium_cost + rock_cost + coral_cost + fish_cost + food_cost
    return total_cost

 Executed result: 33.0
[EXP] 617: [success_rate]: True, [answer]: 10, [output]: def solution():
    beanstalk_height = 3
    beanstalk_height *= 2
    beanstalk_height += 4
    result = beanstalk_height
    return result

 Executed result: 10
[EXP] 618: [success_rate]: True, [answer]: 5, [output]: def solution():
    weight_of_bull = 750
    kg_sold_per_hour = 15
    hours_per_day = 10
    kg_sold_per_day = kg_sold_per_hour * hours_per_day
    days_to_sell = weight_of_bull / kg_sold_per_day
    return days_to_sell

 Executed result: 5.0
[EXP] 619: [success_rate]: True, [answer]: 36, [output]: 
def solution():
    total_seats = 4 * 18
    admin_seats = total_seats // 4
    remaining_seats = total_seats - admin_seats
    occupied_parents = remaining_seats // 3
    student_seats = remaining_seats - occupied_parents
    return student_seats

 Executed result: 36
[EXP] 620: [success_rate]: True, [answer]: 76, [output]: 
def solution():
    poles_at_intersection = 6
    number_of_intersections = 4
    total_poles = poles_at_intersection * number_of_intersections
    total_streetlights = total_poles * 4
    non_functioning_streetlights = 20
    total_functioning_streetlights = total_streetlights - non_functioning_streetlights
    return total_functioning_streetlights

 Executed result: 76
[EXP] 621: [success_rate]: True, [answer]: 1509, [output]: def solution():
    dvd1_played = 1000 - 356
    dvd2_played = 1000 - 135
    total_played = dvd1_played + dvd2_played
    return total_played

 Executed result: 1509
[EXP] 622: [success_rate]: True, [answer]: 3000, [output]: def solution():
    weeks = 6
    sessions_per_week = 2
    hours_per_session = 2
    cost_per_hour = 125
    total_hours = weeks * sessions_per_week * hours_per_session
    total_cost = total_hours * cost_per_hour
    return total_cost

 Executed result: 3000
[EXP] 623: [success_rate]: True, [answer]: 7, [output]: def solution():
    gum_initial = 20
    gum_eaten_at_school = 8 // 2
    gum_eaten_after_school = 2
    gum_given_to_sister = (gum_initial - (gum_eaten_at_school + gum_eaten_after_school)) // 2
    gum_left = gum_initial - (gum_eaten_at_school + gum_eaten_after_school + gum_given_to_sister)
    return gum_left

 Executed result: 7
[EXP] 624: [success_rate]: False, [answer]: 8, [output]: def solution():
    current_age = 16
    years_in_future = 12
    future_age = current_age + years_in_future
    future_age_four_years = future_age + 4
    result = future_age_four_years
    return result

 Executed result: 32
[EXP] 625: [success_rate]: True, [answer]: 85, [output]: 
def solution():
    baseball_coach_balls = 9
    baseball_coach_cost = 3
    baseball_coach_spent = baseball_coach_balls * baseball_coach_cost
    
    basketball_coach_balls = 8
    basketball_coach_cost = 14
    basketball_coach_spent = basketball_coach_balls * basketball_coach_cost
    
    difference = basketball_coach_spent - baseball_coach_spent
    return difference

 Executed result: 85
[EXP] 626: [success_rate]: True, [answer]: 160, [output]: def solution():
    rows = 10
    flowers_per_row = 20
    total_flowers = rows * flowers_per_row
    flowers_bloomed = total_flowers * 4 // 5
    result = flowers_bloomed
    return result

 Executed result: 160
[EXP] 627: [success_rate]: True, [answer]: 72, [output]: 
def solution():
    speed_kb = 20
    speed_mb = speed_kb / 1000
    speed_per_hour = speed_mb * 3600
    return speed_per_hour

 Executed result: 72.0
[EXP] 628: [success_rate]: True, [answer]: 54, [output]: def solution():
    total_days = 7
    cars_per_day = [10, 10, 10]
    for i in range(3, total_days):
        cars_per_day.append(10 - 4)
    total_cars = sum(cars_per_day)
    return total_cars

 Executed result: 54
[EXP] 629: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    height_initial = 40
    height_required = 4 * 12
    height_growth = 2
    years = 0
    while height_initial < height_required:
        height_initial += height_growth
        years += 1
    result = years
    return result

 Executed result: 4
[EXP] 630: [success_rate]: True, [answer]: 17500, [output]: 
def solution():
    cars_sold = 10
    car_cost = 25000
    money_acquired = cars_sold * car_cost * 0.3
    profit = cars_sold * car_cost - money_acquired
    commission = profit * 0.1
    result = commission
    return result

 Executed result: 17500.0
[EXP] 631: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    total_riders = 100
    wave_height = 30
    percentage_riders_staying = 0.25
    percentage_women = 0.6
    
    total_riders_staying = total_riders * percentage_riders_staying
    women_staying = total_riders_staying * percentage_women
    men_staying = total_riders_staying - women_staying
    
    result = men_staying
    return result

 Executed result: 10.0
[EXP] 632: [success_rate]: True, [answer]: 4800, [output]: 
def solution():
    diamond_jewell_price = 2000
    gold_jewell_price = diamond_jewell_price * 4 / 5
    silver_jewell_price = gold_jewell_price - 400
    total_price = diamond_jewell_price + gold_jewell_price + silver_jewell_price
    return total_price

 Executed result: 4800.0
[EXP] 633: [success_rate]: True, [answer]: 45, [output]: def solution():
    snowflake_stamps = 16
    truck_stamps = snowflake_stamps + 3
    rose_stamps = truck_stamps - 9
    total_stamps = snowflake_stamps + truck_stamps + rose_stamps
    return total_stamps

 Executed result: 45
[EXP] 634: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    bob_distance = 75
    bob_speed = 55
    tom_speed = 70
    time_taken = bob_distance / (tom_speed - bob_speed)
    return time_taken

 Executed result: 5.0
[EXP] 635: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    naomi_fish = 17
    darren_fish = naomi_fish - 6
    tommy_fish = darren_fish + 3
    return tommy_fish

 Executed result: 14
[EXP] 636: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    total_cost = 60
    classes_per_month = 10
    cost_per_class = total_cost / classes_per_month
    if cost_per_class > 10:
        max_classes_to_miss = cost_per_class - 10
        return max_classes_to_miss
    else:
        return 0

 Executed result: 0
[EXP] 637: [success_rate]: True, [answer]: 1050, [output]: 
def solution():
    jewel_customers = 50
    julie_speed = 2
    daily_julie_customers = jewel_customers * julie_speed
    weekly_julie_customers = daily_julie_customers * 7
    daily_jewel_customers = jewel_customers
    weekly_jewel_customers = daily_jewel_customers * 7
    total_weekly_customers = weekly_julie_customers + weekly_jewel_customers
    return total_weekly_customers

 Executed result: 1050
[EXP] 638: [success_rate]: False, [answer]: 17, [output]: 
def solution():
    paisley = 4
    reggie = paisley * 5 + 3
    lynn = reggie - 3
    result = lynn
    return result

 Executed result: 20
[EXP] 639: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    apples_cost = 5
    apples_price = 4 * 5.20
    oranges_cost = 5
    oranges_price = 3 * 3.30
    total_cost = apples_price + oranges_price
    return total_cost

 Executed result: 30.7
[EXP] 640: [success_rate]: True, [answer]: 216, [output]: 
def solution():
    length = 6
    width = 4
    depth = 3
    volume = length * width * depth
    time_per_cubic_foot = 3
    time_taken = volume * time_per_cubic_foot
    result = time_taken
    return result

 Executed result: 216
[EXP] 641: [success_rate]: False, [answer]: 43,500, [output]: def solution():
    base_price = 30000
    king_cab = 7500
    leather_seats = king_cab / 3
    running_boards = leather_seats - 500
    exterior_light_package = 1500
    total_cost = base_price + king_cab + leather_seats + running_boards + exterior_light_package
    return total_cost

 Executed result: 43500.0
[EXP] 642: [success_rate]: False, [answer]: 262500, [output]: 
def solution():
    salary = 20000
    raise_percentage = 0.05
    monthly_bonus = salary / 2
    annual_salary = salary * 12
    annual_bonus = monthly_bonus * 12
    annual_raise = annual_salary * raise_percentage
    total_annual_salary = annual_salary + annual_bonus + annual_raise
    return total_annual_salary

 Executed result: 372000.0
[EXP] 643: [success_rate]: False, [answer]: 10,800, [output]: def solution():
    suit_cost = 750
    dress_pant_cost = suit_cost / 5
    dress_shirt_cost = 60
    total_cost = (10 * suit_cost) + (10 * dress_pant_cost) + (10 * 3 * dress_shirt_cost)
    return total_cost

 Executed result: 10800.0
[EXP] 644: [success_rate]: True, [answer]: 840, [output]: def solution():
    political_articles = 20
    weather_articles = 10
    total_articles = (28 * (political_articles + weather_articles))
    return total_articles

 Executed result: 840
[EXP] 645: [success_rate]: True, [answer]: 29, [output]: def solution():
    steve_age = 60
    wife_age = steve_age + 4
    son_age = wife_age / 2
    son_wife_age = son_age - 3
    result = son_wife_age
    return result

 Executed result: 29.0
[EXP] 646: [success_rate]: False, [answer]: 48, [output]: 
def solution():
    portions_per_bag = 8
    portions_per_kg = 2
    portions_per_three_bags = portions_per_bag * 3
    flour_per_portion = 1 / portions_per_kg
    total_flour = portions_per_three_bags * flour_per_portion
    result = total_flour
    return result

 Executed result: 12.0
[EXP] 647: [success_rate]: True, [answer]: 79, [output]: def solution():
    alisa_speed = 12
    alisa_hours = 4.5
    alisa_distance = alisa_speed * alisa_hours
    stanley_speed = 10
    stanley_hours = 2.5
    stanley_distance = stanley_speed * stanley_hours
    total_distance = alisa_distance + stanley_distance
    return total_distance

 Executed result: 79.0
[EXP] 648: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    soil_depth = 24
    clay_depth = 8
    soil_time = soil_depth / 4
    clay_time = clay_depth / (4 / 2)
    total_time = soil_time + clay_time
    return total_time

 Executed result: 10.0
[EXP] 649: [success_rate]: True, [answer]: 54, [output]: def solution():
    students = 25
    howie = 1
    teacher = 1
    total_students = students + howie + teacher
    cupcakes_per_student = 2
    total_cupcakes = total_students * cupcakes_per_student
    return total_cupcakes

 Executed result: 54
[EXP] 650: [success_rate]: True, [answer]: 162000, [output]: 
def solution():
    likes_initial = 2000
    new_likes = 20000
    likes_after_3_weeks = likes_initial * 70
    total_likes = likes_initial + likes_after_3_weeks + new_likes
    result = total_likes
    return result

 Executed result: 162000
[EXP] 651: [success_rate]: False, [answer]: 142, [output]: def solution():
    pomegranates_initial = 20
    pomegranates_cost_initial = 20
    discount_initial = 2
    total_cost_initial = pomegranates_initial * pomegranates_cost_initial - discount_initial
    pomegranates_cost_second = 30
    discount_second = total_cost_second * 0.1
    total_cost_second = pomegranates_second * pomegranates_cost_second - discount_second
    difference = total_cost_second - total_cost_initial
    return difference

 Executed result: None
[EXP] 652: [success_rate]: False, [answer]: 2100, [output]: def solution():
    red_hats = 400
    green_hats = 2 * red_hats
    total_first_month = red_hats + green_hats
    green_hats_second_month = 3 / 4 * total_first_month
    total_second_month = red_hats + green_hats_second_month
    total_two_months = total_first_month + total_second_month
    return total_two_months

 Executed result: 2500.0
[EXP] 653: [success_rate]: True, [answer]: 75, [output]: def solution():
    start_hour = 5
    end_hour = 9
    free_hours = 1
    first_hour_cost = 15
    subsequent_hour_cost = 2 * first_hour_cost
    total_hours = end_hour - start_hour + 1 - free_hours
    paid_hours = total_hours - free_hours
    total_cost = first_hour_cost + (paid_hours - 1) * subsequent_hour_cost
    result = total_cost
    return result

 Executed result: 75
[EXP] 654: [success_rate]: True, [answer]: 80, [output]: def solution():
    money_initial = 200
    money_final = 420
    wage = 300
    money_withheld = money_final - money_initial
    difference = wage - money_withheld
    result = difference
    return result

 Executed result: 80
[EXP] 655: [success_rate]: False, [answer]: 2, [output]: def solution():
    deviled_eggs_per_guest = 3
    guests = 16
    deviled_eggs_total = deviled_eggs_per_guest * guests
    eggs_per_deviled_egg = 2
    eggs_total = deviled_eggs_total * eggs_per_deviled_egg
    eggs_per_dozen = 12
    dozens_needed = (eggs_total + eggs_per_dozen - 1) // eggs_per_dozen
    return dozens_needed

 Executed result: 8
[EXP] 656: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    total_pages = 15
    pages_written = total_pages // 3
    pages_left = total_pages - pages_written
    return pages_left

 Executed result: 10
[EXP] 657: [success_rate]: True, [answer]: 10, [output]: def solution():
    pages = 200
    pages_per_day = 10
    days = pages / pages_per_day
    remaining_days = days - 30
    return remaining_days

 Executed result: -10.0
[EXP] 658: [success_rate]: True, [answer]: 330000, [output]: def solution():
    plane_cost = 150000
    hanger_rent = 5000
    fuel_cost = 2 * hanger_rent
    total_monthly_cost = hanger_rent + fuel_cost
    total_yearly_cost = total_monthly_cost * 12
    total_cost = plane_cost + total_yearly_cost
    return total_cost

 Executed result: 330000
[EXP] 659: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    rice_time = 30
    pork_time = rice_time + 20
    beans_time = (rice_time + pork_time) / 2
    total_time = rice_time + pork_time + beans_time
    return total_time

 Executed result: 120.0
[EXP] 660: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    almonds_cost = 10
    walnuts_cost = 15
    almonds_half_pound = 1/2 * almonds_cost
    walnuts_one_third_pound = 1/3 * walnuts_cost
    cost_half_one_third = almonds_half_pound + walnuts_one_third_pound
    almonds_one_fifth_pound = 1/5 * almonds_cost
    walnuts_one_third_pound_two = 1/3 * walnuts_cost
    cost_one_fifth_one_third = almonds_one_fifth_pound + walnuts_one_third_pound_two
    difference = cost_half_one_third - cost_one_fifth_one_third
    return difference

 Executed result: 3.0
[EXP] 661: [success_rate]: True, [answer]: 15, [output]: def solution():
    total_legs = 70
    total_heads = 20
    sheep_legs = 4
    sheep_heads = 1
    geese_legs = 2
    geese_heads = 1
    sheep = (total_heads - total_legs * geese_heads // geese_legs) // sheep_heads
    return sheep

 Executed result: -15
[EXP] 662: [success_rate]: True, [answer]: 44, [output]: def solution():
    coffee_regular_price = 5
    coffee_expensive_price = coffee_regular_price * 1.2
    coffee_weekly_amount = 7
    coffee_cost = coffee_weekly_amount * coffee_expensive_price
    donut_cost = 2
    total_cost = coffee_cost + donut_cost
    return total_cost

 Executed result: 44.0
[EXP] 663: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    money_initial = 20
    bagels_cost = 2 * 2
    bucket_cost = 8
    soda_cost = 1
    money_spent = bagels_cost + bucket_cost + soda_cost
    money_left = money_initial - money_spent
    return money_left

 Executed result: 7
[EXP] 664: [success_rate]: True, [answer]: 193, [output]: 
def solution():
    total_newspapers = 600
    newspapers_to_A = 198
    newspapers_to_C = 209
    newspapers_to_B = total_newspapers - newspapers_to_A - newspapers_to_C
    return newspapers_to_B

 Executed result: 193
[EXP] 665: [success_rate]: True, [answer]: 32, [output]: def solution():
    hours_per_week = 4 * 2
    weeks = 6
    total_hours = hours_per_week * weeks
    recipes_per_hour = 1.5
    recipes = total_hours / recipes_per_hour
    return int(recipes)

 Executed result: 32
[EXP] 666: [success_rate]: True, [answer]: 360, [output]: 
def solution():
    total_teachers = 150
    history_teachers = total_teachers * 0.6
    math_teachers = total_teachers - history_teachers
    total_sleep_hours = math_teachers * 6
    return total_sleep_hours

 Executed result: 360.0
[EXP] 667: [success_rate]: True, [answer]: 120, [output]: def solution():
    aurelia_money = 120
    kassidy_money = aurelia_money * (3/4)
    rayna_money = kassidy_money + 60
    total_money = aurelia_money + kassidy_money + rayna_money
    equal_parts = total_money / 3
    return equal_parts

 Executed result: 120.0
[EXP] 668: [success_rate]: True, [answer]: 53, [output]: def solution():
    quarters = 4
    quarter_length = 12
    extra_minutes = 5
    total_game_length = quarters * quarter_length + extra_minutes
    return total_game_length

 Executed result: 53
[EXP] 669: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    employees = 50
    management = employees * 0.2
    managers = management * 0.3
    result = int(managers)
    return result

 Executed result: 3
[EXP] 670: [success_rate]: True, [answer]: 132, [output]: def solution():
    flour_per_muffin = 5
    sugar_per_muffin = 3
    salt_per_muffin = 0.25
    muffins = 16
    flour_needed = muffins * flour_per_muffin
    sugar_needed = muffins * sugar_per_muffin
    salt_needed = muffins * salt_per_muffin
    total_dry_ingredients = flour_needed + sugar_needed + salt_needed
    return total_dry_ingredients

 Executed result: 132.0
[EXP] 671: [success_rate]: True, [answer]: 4, [output]: def solution():
    total_candy = 3 + 5 + 4
    people = 3
    candy_per_person = total_candy / people
    return candy_per_person

 Executed result: 4.0
[EXP] 672: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    cost_A = 0.5
    cost_B = 0.75
    candies_A = 7
    candies_B = 10
    cost_total = (candies_A * cost_A) + (candies_B * cost_B)
    change = 15 - cost_total
    return change

 Executed result: 4.0
[EXP] 673: [success_rate]: False, [answer]: 2, [output]: def solution():
    good_days = 12
    bad_days = 8
    neutral_days = 10
    total_days = 30
    total_good_days = good_days + 3
    result = total_good_days
    return result

 Executed result: 15
[EXP] 674: [success_rate]: True, [answer]: 9, [output]: def solution():
    janey_books = 21
    sally_books = (janey_books - 3) // 2
    return sally_books

 Executed result: 9
[EXP] 675: [success_rate]: True, [answer]: 12, [output]: def solution():
    bamboo_height = 20 * 12  # convert feet to inches
    target_height = 600
    days = (target_height - bamboo_height) / 30
    return days

 Executed result: 12.0
[EXP] 676: [success_rate]: True, [answer]: 33, [output]: 
def solution():
    toys_initial = 4
    dogs_initial = 4
    dogs_additional = 8
    dogs_total = dogs_initial + dogs_additional
    toys_needed = dogs_total - toys_initial
    dogs_additional_again = dogs_total * 2
    dogs_total_again = dogs_total + dogs_additional_again
    dogs_gone = dogs_total_again - dogs_total
    toys_needed_again = dogs_gone
    toys_total = toys_needed + toys_needed_again
    return toys_total

 Executed result: 32
[EXP] 677: [success_rate]: True, [answer]: 240, [output]: 
def solution():
    total_amount = 1200
    dylan_investment = 2/5 * total_amount
    remaining_amount = total_amount - dylan_investment
    frances_investment = 2/3 * remaining_amount
    skyler_investment = remaining_amount - frances_investment
    return skyler_investment

 Executed result: 240.0
[EXP] 678: [success_rate]: True, [answer]: 36, [output]: def solution():
    signatures_carol = 20
    signatures_jennifer = 44
    signatures_needed = 100 - (signatures_carol + signatures_jennifer)
    return signatures_needed

 Executed result: 36
[EXP] 679: [success_rate]: True, [answer]: 120, [output]: def solution():
    lorie_earnings_per_hour = 10
    karen_earnings_per_hour = lorie_earnings_per_hour * 2
    karen_earnings_per_day = karen_earnings_per_hour * 3
    karen_total_earnings = karen_earnings_per_day * 2
    return karen_total_earnings

 Executed result: 120
[EXP] 680: [success_rate]: True, [answer]: 576, [output]: 
def solution():
    potatoes = 96
    hash_browns_per_potato = 36 / 6
    hash_browns = potatoes * hash_browns_per_potato
    result = hash_browns
    return result

 Executed result: 576.0
[EXP] 681: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    max_load = 700
    adult_weight = 80
    total_weight = adult_weight * 9
    exceeding_load = total_weight - max_load
    return exceeding_load

 Executed result: 20
[EXP] 682: [success_rate]: False, [answer]: 298, [output]: 
def solution():
    max_cookies = Katarina_cookies = 68
    cookie_monster_cookies = max_cookies - 12
    summer_cookies = max_cookies + 23
    total_cookies = Katarina_cookies + max_cookies + cookie_monster_cookies + summer_cookies
    return total_cookies

 Executed result: 283
[EXP] 683: [success_rate]: True, [answer]: 80, [output]: 
def solution():
    dress_length = 140
    lace_trim = 20
    extended_length = dress_length - lace_trim
    original_length = extended_length / 1.5
    return original_length

 Executed result: 80.0
[EXP] 684: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    turtle_time = 60
    rabbit_time = 40
    half_lawn_time = (turtle_time + rabbit_time) / 2
    return half_lawn_time * 2

 Executed result: 100.0
[EXP] 685: [success_rate]: True, [answer]: 11, [output]: 
def solution():
    time_to_corner = 6
    time_to_fire_station = 13
    time_to_school = time_to_corner + time_to_fire_station
    time_left = 30 - time_to_school
    return time_left

 Executed result: 11
[EXP] 686: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    apples = 1
    apple_cost = 4
    bananas = 2
    banana_cost = 2
    oranges = 2
    orange_cost = 3
    total_cost_apples = apples * apple_cost
    total_cost_bananas = bananas * banana_cost
    total_cost_oranges = oranges * orange_cost
    total_cost = total_cost_apples + total_cost_bananas + total_cost_oranges
    return total_cost

 Executed result: 14
[EXP] 687: [success_rate]: True, [answer]: 80, [output]: 
def solution():
    greta_cookies = 30
    celinda_cookies = 2 * greta_cookies
    total_cookies = greta_cookies + celinda_cookies
    cookies_eaten = 10
    cookies_in_box = total_cookies - cookies_eaten
    result = cookies_in_box
    return result

 Executed result: 80
[EXP] 688: [success_rate]: False, [answer]: 13, [output]: def solution():
    triplet_age = (44 - 14) // 3
    return triplet_age

 Executed result: 10
[EXP] 689: [success_rate]: True, [answer]: 100, [output]: def solution():
    time_before_dinner = 3 * 60
    math_homework = 20
    reading_homework = 40
    history_homework = 20
    total_homework = math_homework + reading_homework + history_homework
    time_left = time_before_dinner - total_homework
    result = time_left
    return result

 Executed result: 100
[EXP] 690: [success_rate]: False, [answer]: 7, [output]: def solution():
    lollipop_cost = 0.40
    candies_cost = 3.20
    lollipops = 5
    candies = 4
    total_lollipop_cost = lollipops * lollipop_cost
    total_candy_cost = candies * candies_cost
    total_cost = total_lollipop_cost + total_candy_cost
    lollipop_cost_for_10 = lollipop_cost * 10
    candy_cost_for_10 = candies_cost * 10
    total_cost_for_10 = lollipop_cost_for_10 + candy_cost_for_10
    return total_cost_for_10

 Executed result: 36.0
[EXP] 691: [success_rate]: False, [answer]: 5760, [output]: 
def solution():
    rong_savings = 20
    neil_savings = rong_savings * 2.4  # 2/5 of 20 is 8, so 20 + 8 = 28
    months_in_year = 12
    years = 10
    total_rong_savings = rong_savings * months_in_year * years
    total_neil_savings = neil_savings * months_in_year * years
    result = total_rong_savings + total_neil_savings
    return result

 Executed result: 8160.0
[EXP] 692: [success_rate]: False, [answer]: 25, [output]: def solution():
    money_initial = 125
    vaccines = 2
    vaccine_cost = 20
    total_bill = vaccines * vaccine_cost
    heartworm_cost = total_bill * 0.6
    total_bill += heartworm_cost
    money_spent = total_bill
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 61.0
[EXP] 693: [success_rate]: True, [answer]: 32, [output]: def solution():
    bananas = 5
    apples = 12
    oranges = 7
    banana_cost = 2 * 0.5
    apple_cost = 0.5
    orange_cost = 3 * banana_cost
    total_cost = bananas * banana_cost + apples * apple_cost + oranges * orange_cost
    return total_cost

 Executed result: 32.0
[EXP] 694: [success_rate]: True, [answer]: 68, [output]: 
def solution():
    red_squares = 14
    blue_squares = red_squares + 4
    green_squares = blue_squares + 6
    white_squares = green_squares - 12
    total_squares = red_squares + blue_squares + green_squares + white_squares
    total_square_feet = total_squares * 1
    return total_square_feet

 Executed result: 68
[EXP] 695: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    adult_count = 42
    baby_count = 15
    high_chairs = 8
    regular_chairs = high_chairs * 5
    total_chairs = regular_chairs + high_chairs
    total_attendees = adult_count + baby_count
    chairs_needed = total_attendees - total_chairs
    return chairs_needed

 Executed result: 9
[EXP] 696: [success_rate]: True, [answer]: 5, [output]: def solution():
    deer = 50
    bucks = deer * 0.5
    eight_point_bucks = bucks * 0.2
    result = eight_point_bucks
    return result

 Executed result: 5.0
[EXP] 697: [success_rate]: True, [answer]: 145, [output]: def solution():
    adam = 50
    betty = adam * 1.3
    tom = betty - 30
    marta = tom * 3
    total = adam + betty + marta + tom
    points_needed = 400 - total
    return points_needed

 Executed result: 145.0
[EXP] 698: [success_rate]: False, [answer]: 27, [output]: def solution():
    great_grandma = 1
    grandchildren = great_grandma * 3
    great_grandbabies = grandchildren * 3
    return great_grandbabies

 Executed result: 9
[EXP] 699: [success_rate]: True, [answer]: 720, [output]: def solution():
    paycheck = 2400.00
    retirement = paycheck * 0.5
    car_payment = paycheck * 0.2
    money_spent = retirement + car_payment
    money_left = paycheck - money_spent
    return money_left

 Executed result: 720.0
[EXP] 700: [success_rate]: False, [answer]: 8, [output]: def solution():

 Executed result: None
[EXP] 701: [success_rate]: True, [answer]: 135, [output]: 
def solution():
    total_fireworks = 15 * 20
    fireworks_seen = total_fireworks * 0.4
    fireworks_set_off = 3 * 5
    fireworks_seen_total = fireworks_seen + fireworks_set_off
    return fireworks_seen_total

 Executed result: 135.0
[EXP] 702: [success_rate]: False, [answer]: 200, [output]: def solution():
    people = 20
    seats = 2  # drinks and snacks per person
    cost = 2
    money_spent = people * seats * cost
    return money_spent

 Executed result: 80
[EXP] 703: [success_rate]: True, [answer]: 2800, [output]: 
def solution():
    gissela_truck = 4000
    gordy_truck = gissela_truck + 800
    gary_truck = 11600 - (gissela_truck + gordy_truck)
    result = gary_truck
    return result

 Executed result: 2800
[EXP] 704: [success_rate]: False, [answer]: 50, [output]: def solution():
    males = 8
    females = 6
    male_dumplings = females + 1
    female_dumplings = 3
    total_dumplings = males * male_dumplings + females * female_dumplings
    return total_dumplings

 Executed result: 74
[EXP] 705: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_money = 100
    ratio_g = 3
    ratio_j = 2
    total_ratio = ratio_g + ratio_j
    gerald_money = (ratio_g / total_ratio) * total_money
    gerald_spent = 10
    gerald_left = gerald_money - gerald_spent
    return gerald_left

 Executed result: 50.0
[EXP] 706: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    cat_speed = 15
    turtle_speed = cat_speed / 5
    seconds = 40
    turtle_crawl = turtle_speed * seconds
    result = turtle_crawl
    return result

 Executed result: 120.0
[EXP] 707: [success_rate]: False, [answer]: 9, [output]: def solution():
    goal = 6300
    current = 2100
    hours = 3
    amount_per_hour = (goal - current) / (goal - 3)
    hours_needed = (goal - current) / amount_per_hour
    result = hours_needed
    return result

 Executed result: 6297.000000000001
[EXP] 708: [success_rate]: True, [answer]: 8, [output]: def solution():
    industrial_usage = 80
    total_usage = 100
    non_industrial_usage = 100 - industrial_usage
    city_usage = 40
    non_industrial_usage_percentage = (city_usage * non_industrial_usage) / 100
    return non_industrial_usage_percentage

 Executed result: 8.0
[EXP] 709: [success_rate]: True, [answer]: 168, [output]: def solution():
    days_in_week = 7
    tutoring_per_day = 12
    tutoring_per_week = days_in_week * tutoring_per_day
    total_tutoring = tutoring_per_week * 2
    return total_tutoring

 Executed result: 168
[EXP] 710: [success_rate]: True, [answer]: 3000, [output]: def solution():
    chocolate_ice_cream_quarts_per_hour = 100 / 2
    vanilla_ice_cream_quarts_per_hour = 50 / 4
    total_quarts_per_hour = chocolate_ice_cream_quarts_per_hour + vanilla_ice_cream_quarts_per_hour
    total_quarts_in_48_hours = total_quarts_per_hour * 48
    return total_quarts_in_48_hours

 Executed result: 3000.0
[EXP] 711: [success_rate]: True, [answer]: 45, [output]: 
def solution():
    croissants = 5
    croissant_cost = 3
    cinnamon_rolls = 4
    cinnamon_roll_cost = 2.5
    mini_quiches = 3
    mini_quiche_cost = 4
    blueberry_muffins = 13
    blueberry_muffin_cost = 1
    total_cost = (croissants * croissant_cost) + (cinnamon_rolls * cinnamon_roll_cost) + (mini_quiches * mini_quiche_cost) + (blueberry_muffins * blueberry_muffin_cost)
    discount = total_cost * 0.1
    total_bill = total_cost - discount
    return total_bill

 Executed result: 45.0
[EXP] 712: [success_rate]: False, [answer]: 6, [output]: 
def solution():
    money_initial = 6.00
    scoop_cost = 1.50
    free_scoops = 2
    total_scoops = free_scoops + 2
    money_spent = total_scoops * scoop_cost
    money_left = money_initial - money_spent
    if money_left < 0:
        return total_scoops - 1
    else:
        return total_scoops

 Executed result: 4
[EXP] 713: [success_rate]: True, [answer]: 14, [output]: def solution():
    ginger_initial = 100
    amy_initial = 100
    ginger_eats = 4
    amy_eats = 3
    days = 14
    ginger_left = ginger_initial - (ginger_eats * days)
    amy_left = amy_initial - (amy_eats * days)
    result = amy_left - ginger_left
    return result

 Executed result: 14
[EXP] 714: [success_rate]: True, [answer]: 576, [output]: def solution():
    area = 36
    area_covered = 2/3 * area
    tiles_per_sqft = 24
    tiles_needed = tiles_per_sqft * area_covered
    return tiles_needed

 Executed result: 576.0
[EXP] 715: [success_rate]: True, [answer]: 10, [output]: def solution():
    cost_picking = 20
    cost_per_pound = 1.5
    pounds_picked = 30
    total_cost_picking = cost_picking + pounds_picked * cost_per_pound
    store_cost = pounds_picked * 2.5
    savings = store_cost - total_cost_picking
    return savings

 Executed result: 10.0
[EXP] 716: [success_rate]: True, [answer]: 385000, [output]: def solution():
    computers = 500
    original_cost = 700
    new_cost = original_cost * 1.1
    total_cost = computers * new_cost
    return total_cost

 Executed result: 385000.00000000006
[EXP] 717: [success_rate]: True, [answer]: 770, [output]: def solution():
    eggs = 6
    cheese = 2
    ham = 2
    egg_calories = eggs * 75
    cheese_calories = cheese * 120
    ham_calories = ham * 40
    total_calories = egg_calories + cheese_calories + ham_calories
    return total_calories

 Executed result: 770
[EXP] 718: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    pencil_cost = 0.5
    eraser_cost = 0.25
    pencils = 6
    erasers = 8
    total_cost = (pencils * pencil_cost) + (erasers * eraser_cost)
    change = 10 - total_cost
    return change

 Executed result: 5.0
[EXP] 719: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    total_people = 100
    people_interviewed = total_people * 0.3
    people_offered_jobs = people_interviewed * 0.2
    people_accepting_jobs = people_offered_jobs / 3
    result = people_accepting_jobs
    return result

 Executed result: 2.0
[EXP] 720: [success_rate]: True, [answer]: 175, [output]: 
def solution():
    sacks_given = 3 + 4
    sacks_initial = 20
    sacks_left = sacks_initial - sacks_given
    kilograms_per_sack = 25
    kilograms_given = sacks_given * kilograms_per_sack
    return kilograms_given

 Executed result: 175
[EXP] 721: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    boxes_bought_this_week = 3 + 5
    boxes_bought_last_week = 4
    difference = boxes_bought_this_week - boxes_bought_last_week
    return difference

 Executed result: 4
[EXP] 722: [success_rate]: False, [answer]: 2450, [output]: def solution():
    total_minutes = 5
    raised_arm_minutes = 2
    total_taps_right_foot = 300 * (total_minutes - raised_arm_minutes)
    total_taps_left_foot = 250 * (total_minutes - raised_arm_minutes)
    total_taps_raised_arm = 200 * raised_arm_minutes
    total_taps = total_taps_right_foot + total_taps_left_foot + total_taps_raised_arm
    return total_taps

 Executed result: 2050
[EXP] 723: [success_rate]: False, [answer]: 255, [output]: 
def solution():
    damage_to_car = 450
    fine = 120
    cost_of_asphalt = 3 * 25
    total_cost = damage_to_car + fine + cost_of_asphalt
    cost_saved = total_cost - fine
    return cost_saved

 Executed result: 525
[EXP] 724: [success_rate]: True, [answer]: 160, [output]: 
def solution():
    normal_chairs = 170
    baby_chairs = 23
    normal_chairs_sent = 20
    baby_chairs_sent = 13
    chairs_left = normal_chairs - normal_chairs_sent + baby_chairs - baby_chairs_sent
    return chairs_left

 Executed result: 160
[EXP] 725: [success_rate]: True, [answer]: 18, [output]: 
def solution():
    pizzas = 5
    slices_per_pizza = 12
    total_slices = pizzas * slices_per_pizza
    slices_eaten_by_bryce_friends = 2 / 3 * 3 * slices_per_pizza
    slices_eaten_by_remaining_friends = 3 / 4 * 2 * slices_per_pizza
    total_slices_eaten = slices_eaten_by_bryce_friends + slices_eaten_by_remaining_friends
    slices_left = total_slices - total_slices_eaten
    return int(slices_left)

 Executed result: 18
[EXP] 726: [success_rate]: False, [answer]: 25, [output]: def solution():
    cat_time = 30
    cat_sausages = 9
    dog_time = cat_time * 2/3
    dog_sausages = cat_sausages
    total_sausages = cat_sausages + dog_sausages
    total_time = cat_time + dog_time
    average_time = total_time / total_sausages
    return average_time

 Executed result: 2.7777777777777777
[EXP] 727: [success_rate]: False, [answer]: 10, [output]: 
def solution():
    topher_shoe_length = 8 * 12 + 4  # convert feet to inches
    topher_shoe_length_in_inches = topher_shoe_length
    bobby_shoe_length = (tober_shoe_length_in_inches - 10) // 9
    result = bobby_shoe_length
    return result

 Executed result: None
[EXP] 728: [success_rate]: False, [answer]: 112, [output]: def solution():
    student_cars = 64
    student_windows = student_cars * 4
    teacher_cars = 32
    teacher_windows = teacher_cars * 2
    total_windows = student_windows + teacher_windows
    windows_smashed_student = total_windows // 4
    windows_smashed_teacher = 3 * teacher_windows // 4
    total_windows_smashed = windows_smashed_student + windows_smashed_teacher
    return total_windows_smashed

 Executed result: 128
[EXP] 729: [success_rate]: True, [answer]: 40, [output]: def solution():
    blue_spools = 45 + 15
    total_spools = 45 + 15 + 40 + 50
    percentage = (blue_spools / total_spools) * 100
    return percentage

 Executed result: 40.0
[EXP] 730: [success_rate]: True, [answer]: 1000, [output]: 
def solution():
    people_initial = 5000
    people_voted_by_midday = 2 / 5 * people_initial
    people_remaining = people_initial - people_voted_by_midday
    people_voted_by_16 = 2 / 3 * people_remaining
    people_not_voted = people_remaining - people_voted_by_16
    return people_not_voted

 Executed result: 1000.0
[EXP] 731: [success_rate]: True, [answer]: 8, [output]: def solution():
    pieces_per_day = 4
    days = 30
    pieces_per_pack = 15
    pieces_needed = pieces_per_day * days
    packs_needed = pieces_needed // pieces_per_pack
    return packs_needed

 Executed result: 8
[EXP] 732: [success_rate]: False, [answer]: 1, [output]: def solution():
    graham_crackers_per_sleeve = 8
    sleeves_per_box = 3
    kids = 9
    kids_smores = 2
    adults = 6
    adults_smores = 1
    
    total_smores = kids * kids_smores + adults * adults_smores
    boxes_needed = (total_smores // graham_crackers_per_sleeve) * sleeves_per_box
    remainders = total_smores % graham_crackers_per_sleeve
    if remainders > 0:
        boxes_needed += 1
    
    return boxes_needed

 Executed result: 9
[EXP] 733: [success_rate]: True, [answer]: 87, [output]: 
def solution():
    dora_age = 15
    father_age = 2 * dora_age + 8
    mother_age = father_age - 4
    total_age = dora_age + father_age + mother_age
    return total_age

 Executed result: 87
[EXP] 734: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_money = 20
    siblings = 3
    money_per_sibling = total_money // siblings
    return money_per_sibling

 Executed result: 6
[EXP] 735: [success_rate]: True, [answer]: 17, [output]: def solution():
    science_book_weight = 2
    math_book_weight = 2
    french_book_weight = 4
    english_book_weight = 3
    history_book_weight = 2 * 3
    total_weight = science_book_weight + math_book_weight + french_book_weight + english_book_weight + history_book_weight
    return total_weight

 Executed result: 17
[EXP] 736: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_votes = 100
    candidate_a_votes = 20 / 100 * total_votes
    candidate_b_votes = candidate_a_votes + 50 / 100 * candidate_a_votes
    candidate_c_votes = total_votes - candidate_a_votes - candidate_b_votes
    return candidate_c_votes

 Executed result: 50.0
[EXP] 737: [success_rate]: True, [answer]: 3, [output]: def solution():
    apples_boris = 100
    apples_beck = apples_boris - 23
    apples_given = 10
    apples_beck_after = apples_beck + apples_given
    apples_boris_after = apples_boris - apples_given
    result = apples_boris_after - apples_beck_after
    return result

 Executed result: 3
[EXP] 738: [success_rate]: True, [answer]: 2, [output]: def solution():
    water_initial = 32
    giant_cubes = 3
    giant_cubes_usage = 4
    water_spent_on_giant_cubes = giant_cubes * giant_cubes_usage
    medium_cubes = 7
    medium_cubes_usage = 2
    water_spent_on_medium_cubes = medium_cubes * medium_cubes_usage
    small_cubes = 8
    small_cubes_usage = 0.5
    water_spent_on_small_cubes = small_cubes * small_cubes_usage
    total_water_spent = water_spent_on_giant_cubes + water_spent_on_medium_cubes + water_spent_on_small_cubes
    water_left = water_initial - total_water_spent
    result = water_left
    return result

 Executed result: 2.0
[EXP] 739: [success_rate]: True, [answer]: 4, [output]: def solution():
    steven_books = 20 / 2
    alice_books = steven_books + 6
    clara_books = 20
    difference = clara_books - alice_books
    return difference

 Executed result: 4.0
[EXP] 740: [success_rate]: True, [answer]: 98, [output]: 
def solution():
    gallon_price = 5
    half_gallon_price = gallon_price - 2
    gallon_jars = 10
    half_gallon_jars = 16
    total_cost_gallon_jars = gallon_jars * gallon_price
    total_cost_half_gallon_jars = half_gallon_jars * half_gallon_price
    total_cost = total_cost_gallon_jars + total_cost_half_gallon_jars
    return total_cost

 Executed result: 98
[EXP] 741: [success_rate]: True, [answer]: 25, [output]: def solution():
    students = 50
    bakers = 10
    basketball_players = 5
    music_players = 2 * basketball_players
    video_game_players = students - bakers - basketball_players - music_players
    return video_game_players

 Executed result: 25
[EXP] 742: [success_rate]: True, [answer]: 28, [output]: 
def solution():
    birds_initial = 12
    birds_scared = int(birds_initial * 1/3)
    birds_left = birds_initial - birds_scared
    birds_joined = 20
    birds_now = birds_left + birds_joined
    return birds_now

 Executed result: 28
[EXP] 743: [success_rate]: True, [answer]: 24, [output]: def solution():
    total_students = 80
    percentage_girls = 40
    percentage_boys = 100 - percentage_girls
    students_per_class = total_students // 2
    girls_per_class = int(students_per_class * (percentage_girls / 100))
    boys_per_class = students_per_class - girls_per_class
    result = boys_per_class
    return result

 Executed result: 24
[EXP] 744: [success_rate]: True, [answer]: 8, [output]: def solution():
    slices_initial = 2
    slices_added = 3
    slices_total = slices_initial + slices_added
    slices_tripled = slices_total * 3
    slices_eaten = slices_tripled - 2
    slices_stolen = slices_eaten - 5
    result = slices_stolen
    return result

 Executed result: 8
[EXP] 745: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    total_animals = 8 + 5 + 3 + 12
    days = 1
    animals_per_day = total_animals // days
    remainder = total_animals % days
    return animals_per_day, remainder

 Executed result: (28, 0)
[EXP] 746: [success_rate]: True, [answer]: 1100, [output]: def solution():
    pack_cost = 1800
    num_packs = 3
    pack_spend = num_packs * pack_cost
    card1_value = 4000
    card2_value = 1000
    other_card_value = 50
    other_card_count = 30
    other_card_total = other_card_count * other_card_value
    total_card_value = card1_value + card2_value + other_card_total
    total_profit = total_card_value - pack_spend
    return total_profit

 Executed result: 1100
[EXP] 747: [success_rate]: True, [answer]: 28, [output]: def solution():
    adult_fee1 = 26
    child_fee1 = 12
    adult_fee2 = 14
    child_fee2 = 10
    adult_count = 2
    child_count = 2
    total_fee1 = (adult_count * adult_fee1) + (child_count * child_fee1)
    total_fee2 = (adult_count * adult_fee2) + (child_count * child_fee2)
    savings = total_fee1 - total_fee2
    return savings

 Executed result: 28
[EXP] 748: [success_rate]: True, [answer]: 350, [output]: 
def solution():
    tomatoes_sold = 500
    old_price = 0.5
    new_price = 0.4
    daily_savings = tomatoes_sold * (old_price - new_price)
    weekly_savings = daily_savings * 7
    return weekly_savings

 Executed result: 349.9999999999999
[EXP] 749: [success_rate]: True, [answer]: 336, [output]: def solution():
    sean_marbles = 56
    cal_marbles = sean_marbles * 2
    carl_marbles = sean_marbles * 4
    total_marbles = carl_marbles + cal_marbles
    return total_marbles

 Executed result: 336
[EXP] 750: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    students = 54
    groups_required = 6
    groups_actual = 12
    extra_groups = groups_actual - groups_required
    return extra_groups

 Executed result: 6
[EXP] 751: [success_rate]: True, [answer]: 4000, [output]: def solution():
    chairs_rented_weekdays = 60 * 5 * 4 * 2  # 5 weekdays, 4 weeks, 2 months
    chairs_rented_weekends = 100 * 2 * 4 * 2  # 2 weekends, 4 weeks, 2 months
    total_chairs_rented = chairs_rented_weekdays + chairs_rented_weekends
    return total_chairs_rented

 Executed result: 4000
[EXP] 752: [success_rate]: True, [answer]: 43, [output]: def solution():
    bananas_initial = 48
    bananas_taken_1 = bananas_initial // 2
    bananas_now = bananas_initial - bananas_taken_1
    bananas_added = 25
    bananas_now += bananas_added
    bananas_taken_2 = 12
    bananas_now -= bananas_taken_2
    bananas_added = 6
    bananas_now += bananas_added
    result = bananas_now
    return result

 Executed result: 43
[EXP] 753: [success_rate]: False, [answer]: 240, [output]: 
def solution():
    roommates = 4
    monthly_bill = 100
    yearly_bill = monthly_bill * 12
    share = yearly_bill / roommates
    result = share
    return result

 Executed result: 300.0
[EXP] 754: [success_rate]: False, [answer]: 128, [output]: def solution():
    glasses_initial = 8 * 12
    plates_initial = 4 * 12
    glasses_lost = 10
    plates_lost = 6
    glasses_left = glasses_initial - glasses_lost
    plates_left = plates_initial - plates_lost
    return glasses_left, plates_left

 Executed result: (86, 42)
[EXP] 755: [success_rate]: False, [answer]: 89, [output]: 
def solution():
    small_stickers = 30
    large_stickers = 40
    small_buttons = 0
    large_buttons = 0
    
    # Trading 90% of small stickers for large buttons
    small_buttons += int(small_stickers * 0.9)
    remaining_small_stickers = int(small_stickers * 0.1)
    
    # Trading 50% of large stickers for large buttons and the rest for small stickers
    large_buttons += int(large_stickers * 0.5)
    small_buttons += int(large_stickers * 0.5) * 3
    
    large_buttons += large_stickers - int(large_stickers * 0.5)
    small_buttons += remaining_small_stickers
    
    result = small_buttons + large_buttons
    return result

 Executed result: 130
[EXP] 756: [success_rate]: True, [answer]: 7, [output]: def solution():
    monday_matches = 2
    friday_matches = 1
    saturday_matches = 2 * monday_matches
    total_matches = monday_matches + friday_matches + saturday_matches
    return total_matches

 Executed result: 7
[EXP] 757: [success_rate]: False, [answer]: 22, [output]: def solution():
    total_votes = 33
    votes_against = x
    votes_for = 2 * votes_against
    return votes_for

 Executed result: None
[EXP] 758: [success_rate]: False, [answer]: 75, [output]: def solution():
    extra_small = 11
    small = 2 * extra_small
    medium = small + 4
    large = medium // 2
    extra_large = large + 6
    total = extra_small + small + medium + large + extra_large
    return total

 Executed result: 91
[EXP] 759: [success_rate]: True, [answer]: 133, [output]: def solution():
    original_price = 140
    discount = 0.05
    discount_amount = original_price * discount
    price_after_discount = original_price - discount_amount
    return price_after_discount

 Executed result: 133.0
[EXP] 760: [success_rate]: True, [answer]: 60000, [output]: 
def solution():
    songs = 300
    playlists = 20
    hours_per_song = 10
    total_hours = (songs * playlists) * hours_per_song
    return total_hours

 Executed result: 60000
[EXP] 761: [success_rate]: True, [answer]: 16, [output]: 
def solution():
    total_people = 50
    people_horse2 = total_people * 0.20
    people_left = total_people - int(people_horse2)
    people_horse7 = people_left * 0.60
    people_horse12 = total_people - int(people_horse2) - int(people_horse7)
    result = people_horse12
    return result

 Executed result: 16
[EXP] 762: [success_rate]: False, [answer]: 27, [output]: def solution():
    pomoranian_girls = 6
    pomoranian_third = 3
    total_puppies = pomoranian_girls * (3 / pomoranian_third)
    return total_puppies

 Executed result: 6.0
[EXP] 763: [success_rate]: True, [answer]: 85, [output]: 
def solution():
    jayden_money = 70
    ava_money = 90
    half_ava_money = int(ava_money / 2)
    jayden_total = jayden_money + half_ava_money
    camera_cost = 200
    money_needed = camera_cost - jayden_total
    return money_needed

 Executed result: 85
[EXP] 764: [success_rate]: False, [answer]: 100, [output]: def solution():
    total_shingles = 250
    first_house_shingles = total_shingles / 2
    second_house_shingles = first_house_shingles * 2
    third_house_shingles = first_house_shingles * 2
    result = third_house_shingles
    return result

 Executed result: 250.0
[EXP] 765: [success_rate]: True, [answer]: 14, [output]: def solution():
    leila_cucumbers = 3
    leila_cucumber_cost = 2
    leila_spent = leila_cucumbers * leila_cucumber_cost
    
    jack_tomatoes = 5
    jack_tomato_cost = 1
    jack_spent = jack_tomatoes * jack_tomato_cost
    
    chase_lettuce = 1
    chase_lettuce_cost = 3
    chase_spent = chase_lettuce * chase_lettuce_cost
    
    total_spent = leila_spent + jack_spent + chase_spent
    return total_spent

 Executed result: 14
[EXP] 766: [success_rate]: True, [answer]: 490, [output]: def solution():
    bananas = 200
    pears = bananas * 1.45
    total_fruits = bananas + pears
    return total_fruits

 Executed result: 490.0
[EXP] 767: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    money_initial = 80
    ball_cost = 20
    money_left = money_initial - ball_cost
    candy_cost = 5
    candy_bars = money_left // candy_cost
    return candy_bars

 Executed result: 12
[EXP] 768: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    oranges_per_liter = 5
    cost_per_kg_oranges = 3
    liters = 4
    oranges_needed = oranges_per_liter * liters
    cost_of_oranges = oranges_needed * cost_per_kg_oranges
    result = cost_of_oranges
    return result

 Executed result: 60
[EXP] 769: [success_rate]: False, [answer]: 675, [output]: def solution():
    ehours = 1
    ebooks = 300
    ahours = 1 / 2
    abooks = ebooks * ahours
    efinal = ebooks + 150
    total = efinal + abooks
    return total

 Executed result: 600.0
[EXP] 770: [success_rate]: False, [answer]: 110, [output]: def solution():
    hourly_rate = 15
    daily_rate = 5
    hours_monday = 5
    classes_monday = 4
    hours_wednesday = 2
    classes_wednesday = 2

    money_monday = hourly_rate * hours_monday + (classes_monday - 3) * daily_rate
    money_wednesday = hourly_rate * hours_wednesday + (classes_wednesday - 3) * daily_rate

    money_total = money_monday + money_wednesday
    result = money_total
    return result

 Executed result: 105
[EXP] 771: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    vanilla_sold = 5
    fruity_sold = 2
    difference = vanilla_sold - fruity_sold
    return difference

 Executed result: 3
[EXP] 772: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    total_amount = 135
    eggplants = 20
    eggplant_price = 3
    eggplant_income = eggplant_price * eggplants
    corns = 25
    remaining_amount = total_amount - eggplant_income
    corn_price = remaining_amount / corns
    return corn_price

 Executed result: 3.0
[EXP] 773: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    hours_sat = 7
    hours_sun = 5
    total_hours = hours_sat + hours_sun
    reading_time = 3
    video_games_time = total_hours - reading_time
    video_games_time = video_games_time * (1/3)
    soccer_time = total_hours - reading_time - video_games_time
    soccer_percentage = (soccer_time / total_hours) * 100
    return soccer_percentage

 Executed result: 50.0
[EXP] 774: [success_rate]: True, [answer]: 10, [output]: def solution():
    pencils_initial = 50
    half_pencils = pencils_initial // 2
    remaining_pencils = pencils_initial - half_pencils
    three_fifth_pencils = remaining_pencils * 3 // 5
    remaining_pencils = remaining_pencils - three_fifth_pencils
    result = remaining_pencils
    return result

 Executed result: 10
[EXP] 775: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    distance = 150
    speed = 75
    time_to_museum = distance / speed
    time_at_museum = 6
    time_total = 2 * time_to_museum + time_at_museum
    return time_total

 Executed result: 10.0
[EXP] 776: [success_rate]: True, [answer]: 276, [output]: def solution():
    cars = 57
    motorcycles = 73
    wheels_per_car = 4
    wheels_per_motorcycle = 2
    total_wheels_needed = (cars * wheels_per_car) + (motorcycles * wheels_per_motorcycle)
    total_wheels = 650
    wheels_left = total_wheels - total_wheels_needed
    return wheels_left

 Executed result: 276
[EXP] 777: [success_rate]: True, [answer]: 800, [output]: def solution():
    laptop_price = 1000
    discount = laptop_price * 0.20
    price_after_discount = laptop_price - discount
    return price_after_discount

 Executed result: 800.0
[EXP] 778: [success_rate]: True, [answer]: 4400, [output]: 
def solution():
    movies = 600
    series_movies = int(movies / 3)
    remaining_movies = movies - series_movies
    older_movies = int(remaining_movies * 0.4)
    normal_movies = remaining_movies - older_movies
    cost_series = series_movies * 6
    cost_older_movies = older_movies * 5
    cost_normal_movies = normal_movies * 10
    total_cost = cost_series + cost_older_movies + cost_normal_movies
    result = total_cost
    return result

 Executed result: 4400
[EXP] 779: [success_rate]: True, [answer]: 38, [output]: 
def solution():
    peach_price = 2
    plum_price = 1
    apricot_price = 3
    peaches = 6
    plums = 8
    apricots = 6
    peach_cost = peaches * peach_price
    plum_cost = plums * plum_price
    apricot_cost = apricots * apricot_price
    total_cost = peach_cost + plum_cost + apricot_cost
    result = total_cost
    return result

 Executed result: 38
[EXP] 780: [success_rate]: True, [answer]: 255, [output]: def solution():
    drive_hours = 6 - 1.5
    drive_speed = 50
    hike_speed = (drive_speed / 2) - 5
    distance_drive = drive_hours * drive_speed
    distance_hike = 1.5 * hike_speed
    distance_total = distance_drive + distance_hike
    return distance_total

 Executed result: 255.0
[EXP] 781: [success_rate]: False, [answer]: 25, [output]: 
def solution():
    a_enemies = 10
    e_enemies = a_enemies - 8
    a_berry = 5
    e_berry = a_berry
    a_time = 30 - 4
    e_time = 30
    a_score = (a_enemies * 10) + (a_berry * 5) + a_time
    e_score = (e_enemies * 10) + (e_berry * 5) + e_time
    score_diff = a_score - e_score
    return score_diff

 Executed result: 76
[EXP] 782: [success_rate]: True, [answer]: 17, [output]: def solution():
    total_cost = 64
    cost_of_two_pizzas = 30
    cost_of_one_pizza = (total_cost - cost_of_two_pizzas) / 2
    return cost_of_one_pizza

 Executed result: 17.0
[EXP] 783: [success_rate]: False, [answer]: 54, [output]: def solution():
    days = 7
    usual_days = 5
    extra_days = 2
    usual_rides = usual_days * 3
    extra_rides = usual_rides * 2
    total_rides = usual_rides + extra_rides
    result = total_rides
    return result

 Executed result: 45
[EXP] 784: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    fish_initial = 7
    orange_fish_initial = 3
    white_fish_initial = 4
    total_fish = fish_initial + 17
    orange_fish_after = orange_fish_initial + (total_fish - fish_initial) // 2
    white_fish_after = total_fish - orange_fish_after
    white_fish_bought = white_fish_after - white_fish_initial
    return white_fish_bought

 Executed result: 9
[EXP] 785: [success_rate]: False, [answer]: 15, [output]: def solution():
    car_efficiency = 10  # MPG
    gas_price = 3  # dollars per gallon
    daily_distance = 5  # miles
    daily_gas_consumption = daily_distance / car_efficiency
    weekly_gas_consumption = daily_gas_consumption * 5  # 5 weekdays
    weekly_gas_cost = weekly_gas_consumption * gas_price
    return weekly_gas_cost

 Executed result: 7.5
[EXP] 786: [success_rate]: False, [answer]: 155, [output]: 
def solution():
    twenties = 10
    quarters = 140
    twenty_dollars = 20
    money_spent = (quarters / 25) + (twenty_dollars * (3/5)) * twenties
    result = money_spent
    return result

 Executed result: 125.6
[EXP] 787: [success_rate]: True, [answer]: 142, [output]: def solution():
    tomato_plants = 5
    eggplant_plants = 8
    tomatoes_per_plant = 22
    eggplants_per_plant = 4
    total_tomatoes = tomato_plants * tomatoes_per_plant
    total_eggplants = eggplant_plants * eggplants_per_plant
    total_fruits = total_tomatoes + total_eggplants
    return total_fruits

 Executed result: 142
[EXP] 788: [success_rate]: True, [answer]: 25, [output]: def solution():
    total_tvs = 40
    smart_tvs = total_tvs // 4
    analog_tvs = total_tvs // 8
    oled_tvs = total_tvs - smart_tvs - analog_tvs
    return oled_tvs

 Executed result: 25
[EXP] 789: [success_rate]: True, [answer]: 100, [output]: def solution():
    money_john = 50
    trip_cost = 300
    school_contribution = trip_cost / 2
    money_missing = trip_cost - school_contribution - money_john
    return money_missing

 Executed result: 100.0
[EXP] 790: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    temperature_day = 45
    temperature_night = temperature_day - 33
    temperature_freeze = 32
    logs_needed = (temperature_freeze - temperature_night) // 5
    return logs_needed

 Executed result: 4
[EXP] 791: [success_rate]: False, [answer]: 108, [output]: def solution():
    people = 90
    group_size = 9
    groups = people // group_size
    seashells_per_group = 2
    total_seashells = groups * seashells_per_group
    return total_seashells

 Executed result: 20
[EXP] 792: [success_rate]: True, [answer]: 100, [output]: def solution():
    people_initial = 172
    people_off_first = 47
    people_on_first = 13
    people_off_second = 38
    people_after_first = people_initial - people_off_first + people_on_first
    people_after_second = people_after_first - people_off_second
    result = people_after_second
    return result

 Executed result: 100
[EXP] 793: [success_rate]: True, [answer]: 75, [output]: def solution():
    bottle_caps_per_day = 10
    days_in_month = 30
    value_per_bottle_cap = 0.25
    total_bottle_caps = bottle_caps_per_day * days_in_month
    total_money = total_bottle_caps * value_per_bottle_cap
    return total_money

 Executed result: 75.0
[EXP] 794: [success_rate]: True, [answer]: 250, [output]: 
def solution():
    regular_hourly_rate = 20
    regular_hours = 8
    overtime_rate = regular_hourly_rate * 1.5
    total_hours = 11
    regular_pay = regular_hours * regular_hourly_rate
    overtime_pay = (total_hours - regular_hours) * overtime_rate
    total_pay = regular_pay + overtime_pay
    return total_pay

 Executed result: 250.0
[EXP] 795: [success_rate]: True, [answer]: 32, [output]: def solution():
    female_lions = 12
    male_lions = female_lions // 2
    lion_cubs = 14
    total_lions = female_lions + male_lions + lion_cubs
    return total_lions

 Executed result: 32
[EXP] 796: [success_rate]: True, [answer]: 20, [output]: def solution():
    original_price = 40
    discount = 0.25
    discount_price = original_price * (1 - discount)
    payment = 50
    change = payment - discount_price
    return change

 Executed result: 20.0
[EXP] 797: [success_rate]: False, [answer]: 2880000, [output]: def solution():
    employees_initial = 200
    employees_hired_per_month = 20
    salary_per_employee = 4000
    months = 3
    total_employees = employees_initial + (employees_hired_per_month * months)
    total_salary = total_employees * salary_per_employee
    return total_salary

 Executed result: 1040000
[EXP] 798: [success_rate]: True, [answer]: 540, [output]: def solution():
    deck_the_halls_time = 150
    jingle_bells_time = 240
    caroling_time = deck_the_halls_time * 2 + jingle_bells_time
    return caroling_time

 Executed result: 540
[EXP] 799: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    billy_rate1 = 10
    billy_rate2 = billy_rate1 + 0.5
    billy_rate3 = billy_rate2 + 1.0
    billy_salary = billy_rate3 * 20
    
    sally_rate = billy_rate1 + 0.5
    sally_salary = sally_rate * 20
    
    difference = billy_salary - sally_salary
    return difference

 Executed result: 20.0
[EXP] 800: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    bread_cost = 2
    bagel_cost = 1
    bread_cost_total = bread_cost * 3
    bagel_cost_total = bagel_cost * 2
    difference = bread_cost_total - bagel_cost_total
    return difference

 Executed result: 4
[EXP] 801: [success_rate]: True, [answer]: 428, [output]: def solution():
    pierson_points = 278
    half_pierson_points = pierson_points // 2
    nikita_points = half_pierson_points + 11
    total_points = pierson_points + nikita_points
    return total_points

 Executed result: 428
[EXP] 802: [success_rate]: True, [answer]: 1240, [output]: def solution():
    classes = 40
    students_per_class = 25
    teachers_per_class = 3
    total_students = classes * students_per_class
    total_teachers = classes * teachers_per_class
    total_trees_students = total_students
    total_trees_teachers = total_teachers * 2
    total_trees = total_trees_students + total_trees_teachers
    return total_trees

 Executed result: 1240
[EXP] 803: [success_rate]: False, [answer]: 6, [output]: def solution():
    puppies = 3
    koalas = 5
    zebras = 2
    frogs = 4
    total_animals = puppies + koalas + zebras + frogs
    desired_percentage = 30
    desired_percentage_animals = (total_animals * desired_percentage) / 100
    total_animals_needed = round(desired_percentage_animals)
    return total_animals_needed

 Executed result: 4
[EXP] 804: [success_rate]: True, [answer]: 9, [output]: def solution():
    hours_per_day_half = 0.5
    days_half_week = 7
    hours_half_week = hours_per_day_half * days_half_week
    days_full_week = 7
    hours_full_week = 2 * days_full_week

    total_hours_played = hours_half_week * 2 + hours_full_week
    hours_needed = 30
    hours_left = hours_needed - total_hours_played
    return hours_left

 Executed result: 9.0
[EXP] 805: [success_rate]: True, [answer]: 20, [output]: def solution():
    car1_speed = 60
    car2_speed = 70
    time = 2
    distance_car1 = car1_speed * time
    distance_car2 = car2_speed * time
    difference = distance_car2 - distance_car1
    result = difference
    return result

 Executed result: 20
[EXP] 806: [success_rate]: True, [answer]: 1170, [output]: def solution():
    diamond_cost = 600
    gold_cost = 300
    premium = (diamond_cost + gold_cost) * 0.3
    total_cost = diamond_cost + gold_cost + premium
    return total_cost

 Executed result: 1170.0
[EXP] 807: [success_rate]: False, [answer]: 70, [output]: 
def solution():
    third_grade_pass = 340
    third_grade_total = 500
    fourth_grade_pass = 40
    fourth_grade_total = 100
    fifth_grade_pass = 2 * fourth_grade_pass
    fifth_grade_total = 400
    total_students = third_grade_total + fourth_grade_total + fifth_grade_total
    total_passed = third_grade_pass + fourth_grade_pass + fifth_grade_pass
    overall_pass_rate = (total_passed / total_students) * 100
    return round(overall_pass_rate, 2)

 Executed result: 46.0
[EXP] 808: [success_rate]: True, [answer]: 4, [output]: def solution():
    chips_per_square = 12
    chips_per_bag = 72
    bags = 2
    height = 3
    total_chips = chips_per_bag * bags
    squares = total_chips // chips_per_square
    length = squares // height
    return length

 Executed result: 4
[EXP] 809: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    tea_initial = 10
    student1 = 4
    student2 = 16
    student1_drunk = student1 * 1.5
    student2_drunk = student2 * 2
    total_drunk = student1_drunk + student2_drunk
    tea_left = tea_initial - total_drunk
    tea_left_gallons = tea_left / 4
    result = tea_left_gallons
    return result

 Executed result: -7.0
[EXP] 810: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    total_candies = 100
    sold_candies = 150
    new_candies = 100
    total_sold = sold_candies + new_candies
    candies_left = total_candies - total_sold
    return candies_left

 Executed result: -150
[EXP] 811: [success_rate]: True, [answer]: 310, [output]: def solution():
    students_initial = 10
    months = 5
    students_additional = (2 ** months - 1) * students_initial
    return students_additional

 Executed result: 310
[EXP] 812: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    total_money = 105
    daily_money = total_money / 7
    branches_per_day = daily_money / 0.25
    return branches_per_day

 Executed result: 60.0
[EXP] 813: [success_rate]: False, [answer]: 79, [output]: def solution():
    petals = (3 * 5) + (4 * 6) + (5 * 4) + (6 * 7)
    lost_petals = 1 + 1 + 1 + 1
    total_petals = petals - lost_petals
    return total_petals

 Executed result: 97
[EXP] 814: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    marshmallows_initial = 35
    john_smores = 9
    desean_smores = 9
    dropped_marshmallows = 3
    total_smores = john_smores + desean_smores
    total_dropped = dropped_marshmallows
    total_marshmallows_consumed = total_smores + total_dropped
    marshmallows_left = marshmallows_initial - total_marshmallows_consumed
    total_smores_left = marshmallows_left
    smores_per_kid = total_smores_left // 2
    return smores_per_kid

 Executed result: 7
[EXP] 815: [success_rate]: True, [answer]: 11, [output]: 
def solution():
    quarters_per_hour = 4
    jack_time = 20
    friend1_time = jack_time / 2
    friend2_time = jack_time / 2
    friend3_time = jack_time * 1.5
    total_minutes = jack_time + friend1_time + friend1_time + friend3_time
    total_quarters = total_minutes / 20
    total_quarters = int(total_quarters)
    result = total_quarters * quarters_per_hour
    return result

 Executed result: 12
[EXP] 816: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    citrus_zest = sugar = salt = fragrance = oil = 0
    total_ounces = 10

    oil = salt * 2
    salt = zest = sugar
    zest = fragrance

    return oil

 Executed result: 0
[EXP] 817: [success_rate]: True, [answer]: 4500, [output]: 
def solution():
    goats = 3
    goat_cost = 500
    cows = 2
    cow_cost = 1500
    total_cost_goats = goats * goat_cost
    total_cost_cows = cows * cow_cost
    total_cost = total_cost_goats + total_cost_cows
    return total_cost

 Executed result: 4500
[EXP] 818: [success_rate]: False, [answer]: 15, [output]: def solution():

 Executed result: None
[EXP] 819: [success_rate]: True, [answer]: 16, [output]: def solution():
    robert_cars = 20
    joe_cars = robert_cars * 2
    joe_sold = 0.2 * joe_cars
    joe_gifted = joe_sold * 2
    joe_sold_to_mother = joe_sold + joe_gifted
    joe_cars_left = joe_cars - joe_sold_to_mother
    result = joe_cars_left
    return result

 Executed result: 16.0
[EXP] 820: [success_rate]: False, [answer]: 6,250, [output]: 
def solution():
    total_money = 175000
    organization_donation = 50000
    student_donation = total_money - organization_donation
    students = 20
    money_per_student = student_donation / students
    return money_per_student

 Executed result: 6250.0
[EXP] 821: [success_rate]: True, [answer]: 720, [output]: def solution():
    day1_hours = 8
    day2_hours = day1_hours / 2
    total_hours = day1_hours + day2_hours
    total_minutes = total_hours * 60
    return total_minutes

 Executed result: 720.0
[EXP] 822: [success_rate]: True, [answer]: 35, [output]: def solution():
    cars_initial = 50
    cars_arrived = 20
    cars_departed = cars_initial + cars_arrived
    cars_departed_half = cars_departed // 2
    cars_departed_final = cars_departed - cars_departed_half
    return cars_departed_final

 Executed result: 35
[EXP] 823: [success_rate]: True, [answer]: 1260, [output]: def solution():
    cycles_per_day = 30
    tasks_per_cycle = 5
    task_wage = 1.20
    daily_income = cycles_per_day * tasks_per_cycle * task_wage
    weekly_income = daily_income * 7
    return weekly_income

 Executed result: 1260.0
[EXP] 824: [success_rate]: False, [answer]: 14, [output]: def solution():
    sasha_points_first = 14
    julie_points_first = sasha_points_first - 4
    sasha_points_second = julie_points_first - 6
    total_sasha_points = sasha_points_first + sasha_points_second
    return total_sasha_points

 Executed result: 18
[EXP] 825: [success_rate]: True, [answer]: 52, [output]: def solution():
    cat_food_packages = 8
    cat_tins_per_package = 11
    dog_food_packages = 6
    dog_tins_per_package = 6
    total_cat_tins = cat_food_packages * cat_tins_per_package
    total_dog_tins = dog_food_packages * dog_tins_per_package
    difference = total_cat_tins - total_dog_tins
    return difference

 Executed result: 52
[EXP] 826: [success_rate]: False, [answer]: 153, [output]: def solution():
    total_cards = 341
    smendrick_cards = total_cards / 4
    pj_cards = total_cards / 7
    becca_cards = smendrick_cards + 12
    return becca_cards

 Executed result: 97.25
[EXP] 827: [success_rate]: True, [answer]: 27, [output]: 
def solution():
    green_eggs = 5
    blue_eggs = green_eggs * 2
    pink_eggs = blue_eggs - 1
    yellow_eggs = pink_eggs // 3
    total_eggs = green_eggs + blue_eggs + pink_eggs + yellow_eggs
    return total_eggs

 Executed result: 27
[EXP] 828: [success_rate]: True, [answer]: 11, [output]: def solution():
    book_weight = 4
    book_cost = 32
    shipping_miles = 20
    shipping_cost_per_pound = 0.35
    shipping_cost_per_mile = 0.08
    shipping_cost = book_weight * shipping_cost_per_pound + shipping_miles * shipping_cost_per_mile
    refund_percentage = 0.75
    refund = book_cost * refund_percentage
    loss = book_cost - refund + shipping_cost
    result = loss
    return result

 Executed result: 11.0
[EXP] 829: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    money_initial = 40
    gift = 100
    money_total = money_initial + gift
    jeans_cost = 30 * 2
    bag_cost = 20
    money_spent = jeans_cost + bag_cost
    money_left = money_total - money_spent
    result = money_left
    return result

 Executed result: 60
[EXP] 830: [success_rate]: False, [answer]: 14,000, [output]: def solution():
    total_bars = 50000
    week1 = 8000
    week2 = 8000 / 2
    week3 = week1 * 3
    week4 = total_bars - (week1 + week2 + week3)
    return week4

 Executed result: 14000.0
[EXP] 831: [success_rate]: False, [answer]: 1128, [output]: 
def solution():
    videos_per_week = 18
    hours_per_video = 1/15
    hours_per_song = 2
    hours_per_makeup = 1/4
    total_weekly_hours = videos_per_week * hours_per_video + hours_per_song + 6 * hours_per_makeup
    total_monthly_hours = total_weekly_hours * 4
    return total_monthly_hours

 Executed result: 18.8
[EXP] 832: [success_rate]: False, [answer]: 324, [output]: 
def solution():
    base_cost = 129
    base_items = 4 + 2 + 1 + 10
    base_price = base_items * 15
    extra_mirrors = 6 - 4
    extra_chandeliers = 2 - 1
    extra_pictures = 20 - 10
    extra_items = extra_mirrors + extra_chandeliers + extra_pictures
    total_cost = base_price + extra_items * 15
    result = base_cost + total_cost
    return result

 Executed result: 579
[EXP] 833: [success_rate]: True, [answer]: 42, [output]: 
def solution():
    eva_savings = 20
    anthony_savings = eva_savings + 10
    roy_savings = anthony_savings + (anthony_savings * 0.4)
    return roy_savings

 Executed result: 42.0
[EXP] 834: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    p = 1
    s = p * 12
    k = s * 4
    n = k * 10
    result = n
    return result / 12

 Executed result: 40.0
[EXP] 835: [success_rate]: True, [answer]: 80, [output]: def solution():
    speed = 8
    hours_first_part = 4
    hours_second_part = 6
    distance_first_part = speed * hours_first_part
    distance_second_part = speed * hours_second_part
    total_distance = distance_first_part + distance_second_part
    return total_distance

 Executed result: 80
[EXP] 836: [success_rate]: False, [answer]: 48, [output]: def solution():
    kangaroo_speed = 18 / 3
    turtle_speed = kangaroo_speed / 2
    distance = 18
    turtle_time = distance / turtle_speed
    result = turtle_time
    return result

 Executed result: 6.0
[EXP] 837: [success_rate]: True, [answer]: 140, [output]: def solution():
    kora_dishes = 20
    rory_dishes = kora_dishes + 20
    jada_dishes = 2 * rory_dishes
    total_dishes = kora_dishes + rory_dishes + jada_dishes
    return total_dishes

 Executed result: 140
[EXP] 838: [success_rate]: True, [answer]: 120, [output]: def solution():
    laptop_cost = 600
    discount = 200
    laptop_cost_after_discount = laptop_cost - discount
    savings = 0
    cash_from_job = 150
    help_from_mom = 80
    total_money = savings + cash_from_job + help_from_mom
    money_needed = laptop_cost_after_discount - 50
    money_in_purse = total_money - money_needed
    return money_in_purse

 Executed result: -120
[EXP] 839: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    large_apples = 3
    small_apples = 5
    large_slices = large_apples * 5
    small_slices = small_apples * 3
    total_slices = large_slices + small_slices
    slices_eaten = 15
    slices_left = total_slices - slices_eaten
    return slices_left

 Executed result: 15
[EXP] 840: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    milk_per_day = 25
    milk_per_cow = 5
    cows = 3
    milk_needed = milk_per_day - (cows * milk_per_cow)
    cows_needed = milk_needed // milk_per_cow
    return cows_needed

 Executed result: 2
[EXP] 841: [success_rate]: True, [answer]: 16, [output]: def solution():
    glue_stick1 = 1/6
    glue_stick2 = 2/3
    glue_stick3 = 1/2
    glue_stick_length = 12
    glue_stick1_left = glue_stick_length * glue_stick1
    glue_stick2_left = glue_stick_length * glue_stick2
    glue_stick3_left = glue_stick_length * glue_stick3
    glue_stick_not_used = glue_stick1_left + glue_stick2_left + glue_stick3_left
    return glue_stick_not_used

 Executed result: 16.0
[EXP] 842: [success_rate]: True, [answer]: 5600, [output]: def solution():
    money_gabriel = 5000
    gift_from_brother = 200
    total_money = money_gabriel + gift_from_brother
    car_cost = 10000
    phone_cost = 800
    total_cost = car_cost + phone_cost
    money_needed = total_cost - total_money
    return money_needed

 Executed result: 5600
[EXP] 843: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    hat_cost = 70
    bill1 = 20
    bill2 = 20
    bill3 = 20
    bill4 = 20
    total_bills = bill1 + bill2 + bill3 + bill4
    change = total_bills - hat_cost
    return change

 Executed result: 10
[EXP] 844: [success_rate]: True, [answer]: 19, [output]: def solution():
    money_initial = 2 * 20
    squirt_guns = 6
    squirt_gun_cost = 2
    water_balloon_packs = 3
    water_balloon_pack_cost = 3
    money_spent_on_squirt_guns = squirt_guns * squirt_gun_cost
    money_spent_on_water_balloon_packs = water_balloon_packs * water_balloon_pack_cost
    money_spent = money_spent_on_squirt_guns + money_spent_on_water_balloon_packs
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 19
[EXP] 845: [success_rate]: False, [answer]: 180, [output]: 
def solution():
    jack_dishes = 60
    jack_socks = jack_dishes // 2
    peter_socks = jack_socks * 2
    peter_dishes = jack_dishes
    total_socks = jack_socks + peter_socks
    total_dishes = jack_dishes + peter_dishes
    return total_socks, total_dishes

 Executed result: (90, 120)
[EXP] 846: [success_rate]: True, [answer]: 12, [output]: def solution():
    total_students = 20
    good_at_math_only = 5
    good_at_english_only = 8
    good_at_both = total_students - (good_at_math_only + good_at_english_only)
    good_at_math = good_at_math_only + good_at_both
    return good_at_math

 Executed result: 12
[EXP] 847: [success_rate]: False, [answer]: 11, [output]: def solution():
    total_time = 2 * 60  # 2 hours in minutes
    total_time += 10  # adding 10 minutes intermission
    group_time = 2 + 6 + 2  # time for each group
    group_time_minutes = group_time * 60  # convert to minutes
    groups = total_time // group_time_minutes  # number of groups
    return groups

 Executed result: 0
[EXP] 848: [success_rate]: True, [answer]: 975, [output]: 
def solution():
    initial_investment = 300
    interest_rate = 0.75
    years = 3
    initial_interest = initial_investment * interest_rate
    total_interest = initial_interest * years
    total_amount = initial_investment + total_interest
    result = total_amount
    return result

 Executed result: 975.0
[EXP] 849: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    white_shirts = 40
    floral_shirts = 50
    white_shirts_with_collars = white_shirts / 2
    floral_shirts_with_buttons = 20
    floral_shirts_without_buttons = floral_shirts - floral_shirts_with_buttons
    white_shirts_without_collars = white_shirts - white_shirts_with_collars
    difference = floral_shirts_without_buttons - white_shirts_without_collars
    return difference

 Executed result: 10.0
[EXP] 850: [success_rate]: True, [answer]: 75, [output]: def solution():
    eggs = 900
    tray_capacity = 30
    trays = eggs // tray_capacity
    total_earnings = trays * 2.5
    return total_earnings

 Executed result: 75.0
[EXP] 851: [success_rate]: True, [answer]: 70, [output]: def solution():
    goats_x = 55
    goats_y = 45
    goats_sold_x = 10
    goats_sold_y = 2 * goats_sold_x
    goats_left_x = goats_x - goats_sold_x
    goats_left_y = goats_y - goats_sold_y
    total_goats = goats_left_x + goats_left_y
    return total_goats

 Executed result: 70
[EXP] 852: [success_rate]: True, [answer]: 110, [output]: def solution():
    shoes_bought = 2
    shoes_cost = 2640
    year = 12
    shoes_cost_per_year = shoes_cost
    shoes_cost_per_pair = shoes_cost_per_year / (shoes_bought * year)
    result = shoes_cost_per_pair
    return result

 Executed result: 110.0
[EXP] 853: [success_rate]: True, [answer]: 123, [output]: def solution():
    green_food = 25
    red_food = 18
    baskets_green = 3
    baskets_red = 3
    discount = 2
    total_green = green_food * baskets_green
    total_red = red_food * baskets_red
    total_discount = discount * baskets_red
    total_cost = total_green + total_red - total_discount
    result = total_cost
    return result

 Executed result: 123
[EXP] 854: [success_rate]: True, [answer]: 15, [output]: def solution():
    rooms = 90
    rooms_half = rooms // 2
    time_per_room = 20
    time_half_rooms = rooms_half * time_per_room
    hours_half_rooms = time_half_rooms // 60
    return hours_half_rooms

 Executed result: 15
[EXP] 855: [success_rate]: False, [answer]: 144, [output]: def solution():
    homes_in_first_year = 12
    homes_in_second_year = homes_in_first_year * 3
    homes_in_third_year = homes_in_first_year + homes_in_second_year
    total_homes = homes_in_third_year * 2
    return total_homes

 Executed result: 96
[EXP] 856: [success_rate]: False, [answer]: 13, [output]: def solution():
    bro_age = 0
    sis_age = 0
    mom_age = 0
    my_age = 0
    
    while True:
        my_age = bro_age - 3
        sis_age = my_age - 2
        mom_age = 3 * bro_age - 1
        if my_age + sis_age + mom_age == 87:
            break
        bro_age += 1
    
    return my_age

 Executed result: None
[EXP] 857: [success_rate]: False, [answer]: 7, [output]: def solution():
    students = 27
    glue_per_student = 2
    glue_per_pack = 8
    glue_total = students * glue_per_student
    packs_needed = glue_total // glue_per_pack
    packs_left_over = glue_total % glue_per_pack
    return packs_needed, packs_left_over

 Executed result: (6, 6)
[EXP] 858: [success_rate]: True, [answer]: 14000, [output]: def solution():
    water_initial = 4000
    water_after_rain = water_initial * 2
    water_after_third_day = water_after_rain + 6000
    result = water_after_third_day
    return result

 Executed result: 14000
[EXP] 859: [success_rate]: True, [answer]: 3430, [output]: def solution():
    infected_people = 10
    infected_per_day = 6
    days = 3
    infected_after_three_days = infected_people * (1 + infected_per_day) ** days
    return infected_after_three_days

 Executed result: 3430
[EXP] 860: [success_rate]: True, [answer]: 1520, [output]: def solution():
    rafaela_tips = 40 * 20
    julieta_tips = rafaela_tips * 0.9
    total_tips = rafaela_tips + julieta_tips
    return total_tips

 Executed result: 1520.0
[EXP] 861: [success_rate]: True, [answer]: 3, [output]: def solution():
    oranges_initial = 12
    oranges_given_to_daughters = 2 * 3
    oranges_given_to_boy = 3
    oranges_given = oranges_given_to_daughters + oranges_given_to_boy
    oranges_left = oranges_initial - oranges_given
    result = oranges_left
    return result

 Executed result: 3
[EXP] 862: [success_rate]: False, [answer]: 30, [output]: def solution():
    badges_c = 1
    badges_a = 2 * badges_c
    badges_w = 3 * badges_c
    badges_a_yr = badges_a * 12
    badges_w_yr = badges_w * 12
    difference = badges_w_yr - badges_a_yr
    return difference

 Executed result: 12
[EXP] 863: [success_rate]: True, [answer]: 40, [output]: 
def solution():
    baking_hours = 5
    slices_per_hour = 2 * 8
    slices_total = baking_hours * slices_per_hour
    price_per_slice = 0.50
    money_raised = slices_total * price_per_slice
    return money_raised

 Executed result: 40.0
[EXP] 864: [success_rate]: True, [answer]: 110, [output]: 
def solution():
    gold_coins = 70
    silver_coins = gold_coins - 30
    total_coins = gold_coins + silver_coins
    return total_coins

 Executed result: 110
[EXP] 865: [success_rate]: True, [answer]: 80, [output]: def solution():
    burritos_initial = 600
    students = 50
    burritos_per_student = 10
    burritos_mr_george = 20
    burritos_given = students * burritos_per_student
    burritos_eaten = burritos_given + burritos_mr_george
    burritos_left = burritos_initial - burritos_eaten
    result = burritos_left
    return result

 Executed result: 80
[EXP] 866: [success_rate]: True, [answer]: 23, [output]: def solution():
    red_cars = 12
    green_cars = red_cars - 2
    blue_cars = green_cars * 3
    total_cars = red_cars + green_cars + blue_cars
    yellow_cars = 75 - total_cars
    return yellow_cars

 Executed result: 23
[EXP] 867: [success_rate]: False, [answer]: 28, [output]: def solution():
    total_books = 85
    sofie_books = x
    anne_books = x - 12
    fawn_books = anne_books + 12
    sofie_books = anne_books + 25
    return fawn_books

 Executed result: None
[EXP] 868: [success_rate]: True, [answer]: 7, [output]: def solution():
    potatoes = 5
    sweet_potatoes = potatoes * 2
    carrots = sweet_potatoes - 3
    result = carrots
    return result

 Executed result: 7
[EXP] 869: [success_rate]: False, [answer]: 15, [output]: 
def solution():
    jello_boxes = 30 // 4  # 30 kids, each get 4 jello cups
    jello_cups_needed = jello_boxes * 10  # 10 cups per box
    jello_cost = jello_cups_needed / 96 * 1.25  # 96 cups per dollar, 1.25 per cup
    return round(jello_cost, 2)

 Executed result: 0.91
[EXP] 870: [success_rate]: True, [answer]: 500, [output]: 
def solution():
    phones = 5
    phone_cost = 700
    total_cost = phones * phone_cost
    total_given = 4000
    change = total_given - total_cost
    return change

 Executed result: 500
[EXP] 871: [success_rate]: False, [answer]: 40, [output]: def solution():
    total_cost = 400
    madeline_share = 0.6
    keenan_share = 1 - madeline_share
    monthly_cost_per_person = total_cost / (1 / madeline_share + 1 / keenan_share)
    weekly_cost_per_person = monthly_cost_per_person / 4
    keenan_weekly_cost = weekly_cost_per_person * keenan_share
    result = keenan_weekly_cost
    return result

 Executed result: 9.600000000000001
[EXP] 872: [success_rate]: True, [answer]: 48, [output]: def solution():
    pizza_pieces = 60
    eaten_pieces = 0
    eaten_pieces += int(pizza_pieces * 2/5)
    eaten_pieces += 10
    remaining_pieces = pizza_pieces - eaten_pieces
    eaten_pieces += int(remaining_pieces * 7/13)
    result = eaten_pieces
    return result

 Executed result: 48
[EXP] 873: [success_rate]: True, [answer]: 13, [output]: 
def solution():
    soda_cost = 21 / 7
    water_cost = 8 / 4
    soda_price = soda_cost * 3
    water_price = water_cost * 2
    total_cost = soda_price + water_price
    return total_cost

 Executed result: 13.0
[EXP] 874: [success_rate]: True, [answer]: 12, [output]: def solution():
    money_initial = 12.48
    bolts = 16
    bolt_cost = 0.03
    money_spent = bolts * bolt_cost
    money_left = money_initial - money_spent
    return money_left

 Executed result: 12.0
[EXP] 875: [success_rate]: True, [answer]: 132, [output]: def solution():
    hours_initial = 3
    hours_additional = 12
    rate = 33 / hours_initial
    money_earned = rate * hours_additional
    result = money_earned
    return result

 Executed result: 132.0
[EXP] 876: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    marbles_initial = 52
    marbles_received = 28
    marbles_total = marbles_initial + marbles_received
    marbles_lost = marbles_total // 4
    marbles_left = marbles_total - marbles_lost
    return marbles_left

 Executed result: 60
[EXP] 877: [success_rate]: True, [answer]: 41, [output]: def solution():
    multiple_choice_questions = 10
    true_false_questions = 20
    long_answer_questions = 5
    multiple_choice_points = multiple_choice_questions
    true_false_points = true_false_questions
    long_answer_points = long_answer_questions
    multiple_choice_correct = int(multiple_choice_questions * 0.8)
    true_false_correct = int(true_false_questions * 0.9)
    long_answer_correct = int(long_answer_questions * 0.6)
    multiple_choice_score = multiple_choice_correct
    true_false_score = true_false_correct
    long_answer_score = long_answer_correct * 5
    total_score = multiple_choice_score + true_false_score + long_answer_score
    return total_score

 Executed result: 41
[EXP] 878: [success_rate]: False, [answer]: 7000, [output]: def solution():
    chickens = 300
    sell_chickens = int(chickens * 3/5)
    sell_price = 50
    cost = sell_chickens * sell_price
    return cost

 Executed result: 9000
[EXP] 879: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_glasses = 32
    julie_glasses = 14
    micah_glasses = (total_glasses - julie_glasses) / 2
    result = julie_glasses - micah_glasses
    return result

 Executed result: 5.0
[EXP] 880: [success_rate]: False, [answer]: 575, [output]: def solution():
    hair_cost = 400
    manicure_cost = hair_cost / 4
    pedicure_cost = manicure_cost * 3
    total_cost = hair_cost + manicure_cost + pedicure_cost
    return total_cost

 Executed result: 800.0
[EXP] 881: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    money_initial = 20 * 2
    rope_length = 20
    cost_per_meter = 1.5
    money_spent = rope_length * cost_per_meter
    money_left = money_initial - money_spent
    return money_left

 Executed result: 10.0
[EXP] 882: [success_rate]: False, [answer]: 16, [output]: def solution():
    age_now = 8
    future_age = 18
    years_in_future = future_age - age_now
    triple_age = 3 * age_now
    triple_age_future = triple_age + age_now
    triple_age_years = triple_age_future - age_now
    return triple_age_years

 Executed result: 24
[EXP] 883: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    bacon_cost = 10
    chicken_cost = bacon_cost * 2 * 6
    strawberries_cost = 4 * 3
    apples_cost = strawberries_cost / 2 * 7
    total_cost = bacon_cost + chicken_cost + strawberries_cost + apples_cost
    budget = 65
    money_left = budget - total_cost
    return money_left

 Executed result: -119.0
[EXP] 884: [success_rate]: True, [answer]: 25, [output]: def solution():
    total_concert_time = 65
    encore_time = 15
    total_time_without_encore = total_concert_time - encore_time
    usual_concert_time = total_time_without_encore / 2
    return usual_concert_time

 Executed result: 25.0
[EXP] 885: [success_rate]: True, [answer]: 50, [output]: def solution():
    toys_initial = 200
    toys_given_to_alyssa = 40
    toys_given_to_bonnie = 80
    toys_given_to_nicky = 30
    toys_given = toys_given_to_alyssa + toys_given_to_bonnie + toys_given_to_nicky
    toys_left = toys_initial - toys_given
    result = toys_left
    return result

 Executed result: 50
[EXP] 886: [success_rate]: True, [answer]: 500, [output]: 
def solution():
    chimichangas_tuesday = 125
    chimichangas_wednesday = 125
    chimichangas_friday = 2 * chimichangas_tuesday
    total_chimichangas = chimichangas_tuesday + chimichangas_wednesday + chimichangas_friday
    result = total_chimichangas
    return result

 Executed result: 500
[EXP] 887: [success_rate]: True, [answer]: 20, [output]: def solution():
    microphones = 50
    microphones_arranged = microphones - (microphones * 0.2)
    pairs = microphones_arranged // 2
    return pairs

 Executed result: 20.0
[EXP] 888: [success_rate]: True, [answer]: 34, [output]: def solution():
    birds_nesting = 6
    birds_flying = int((2/3) * birds_nesting)
    birds_feeding = 3 * 8
    total_birds = birds_nesting + birds_flying + birds_feeding
    return total_birds

 Executed result: 34
[EXP] 889: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    cookies = 55
    cookies_eaten = 5
    cookies_left = cookies - cookies_eaten
    cookies_per_jar = cookies_left // 5
    return cookies_per_jar

 Executed result: 10
[EXP] 890: [success_rate]: True, [answer]: 15, [output]: def solution():
    orchids = 5
    daisies = 4
    orchid_petals = 5
    daisy_petals = 10
    total_orchid_petals = orchids * orchid_petals
    total_daisy_petals = daisies * daisy_petals
    difference = total_daisy_petals - total_orchid_petals
    return difference

 Executed result: 15
[EXP] 891: [success_rate]: True, [answer]: 25, [output]: def solution():
    plants_total = 100
    plants_indoor = plants_total // 4
    plants_remaining = plants_total - plants_indoor
    plants_outdoor = plants_remaining * 2 // 3
    plants_flowering = plants_remaining - plants_outdoor
    percentage_flowering = (plants_flowering / plants_total) * 100
    return percentage_flowering

 Executed result: 25.0
[EXP] 892: [success_rate]: True, [answer]: 55, [output]: def solution():
    whirligig_speed = 5 * (121 / 11)
    return whirligig_speed

 Executed result: 55.0
[EXP] 893: [success_rate]: True, [answer]: 1, [output]: def solution():
    carrot_price = 0
    salad_price = 6
    yogurt_price = salad_price / 2
    total_price = salad_price + yogurt_price
    carrot_price = (total_price - 11) / 2
    return carrot_price

 Executed result: -1.0
[EXP] 894: [success_rate]: True, [answer]: 480, [output]: 
def solution():
    hours_per_day = 8
    days_per_week = 5
    initial_hourly_wage = 10
    raise_per_hour = 2
    new_hourly_wage = initial_hourly_wage + raise_per_hour
    total_hours_per_week = hours_per_day * days_per_week
    weekly_income = total_hours_per_week * new_hourly_wage
    return weekly_income

 Executed result: 480
[EXP] 895: [success_rate]: False, [answer]: 26, [output]: 
def solution():
    money_total = 80
    joe = 6
    mowed_joe = joe
    mowed_kamala = mowed_joe * 3
    mowed_alba = mowed_joe * 5
    total_mowed = mowed_joe + mowed_kamala + mowed_alba
    money_mowed = total_mowed * 6
    money_lemonade = money_total - money_mowed
    result = money_lemonade
    return result

 Executed result: -244
[EXP] 896: [success_rate]: True, [answer]: 74, [output]: def solution():
    martin_weight = 55
    carl_weight = martin_weight + 16
    christians_weight = carl_weight + 8
    harrys_weight = christians_weight - 5
    return harrys_weight

 Executed result: 74
[EXP] 897: [success_rate]: True, [answer]: 250, [output]: 
def solution():
    hours_rented = 10
    hours_per_rental = 3
    total_hours_rented = hours_rented * hours_per_rental
    profit_per_hour = 25
    total_profit = total_hours_rented * profit_per_hour
    car_payment = 500
    total_profit -= car_payment
    result = total_profit
    return result

 Executed result: 250
[EXP] 898: [success_rate]: False, [answer]: 1, [output]: def solution():
    joseph_notebooks = 3
    martha_notebooks = 2
    martha_notebooks += 5
    difference = martha_notebooks - joseph_notebooks
    return difference

 Executed result: 4
[EXP] 899: [success_rate]: True, [answer]: 110, [output]: 
def solution():
    dijana_distance = 50
    anis_distance = dijana_distance * (1 + 1/5)
    total_distance = dijana_distance + anis_distance
    return total_distance

 Executed result: 110.0
[EXP] 900: [success_rate]: True, [answer]: 16, [output]: def solution():
    cookies_initial = 100
    cookies_taken_by_husband = 4
    cookies_left = cookies_initial - cookies_taken_by_husband
    cookies_per_nephew = cookies_left // 6
    return cookies_per_nephew

 Executed result: 16
[EXP] 901: [success_rate]: False, [answer]: 15, [output]: def solution():
    denise_yesterday = 10
    daniel_yesterday = 13
    denise_today = denise_yesterday + daniel_yesterday
    daniel_today = 0
    denise_total = denise_yesterday + denise_today
    daniel_total = daniel_yesterday
    difference = denise_total - daniel_total
    return difference

 Executed result: 20
[EXP] 902: [success_rate]: True, [answer]: 1, [output]: def solution():
    adult_bowls = 4
    child_bowls = 8
    total_adults = 3
    total_child = 2
    total_bowls = adult_bowls * total_adults
    remaining_bowls = total_bowls + total_child
    child_lunch = remaining_bowls // child_bowls
    return child_lunch

 Executed result: 1
[EXP] 903: [success_rate]: True, [answer]: 8, [output]: def solution():
    notebook_cost = 1.5
    ballpen_cost = 0.5
    notebooks = 5
    ballpen = 1
    total_cost = (notebooks * notebook_cost) + (ballpen * ballpen_cost)
    return total_cost

 Executed result: 8.0
[EXP] 904: [success_rate]: False, [answer]: 16, [output]: 
def solution():
    small_masks_per_yard = 4
    large_masks_per_yard = 3 / 2.25
    total_small_masks = 20
    total_large_masks = 8
    total_masks = total_small_masks + total_large_masks
    total_yards = total_masks / (small_masks_per_yard + large_masks_per_yard)
    return total_yards

 Executed result: 5.25
[EXP] 905: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    movies = 9
    times_per_movie = 3
    total_tickets = movies * times_per_movie
    total_cost = 216
    price_per_ticket = total_cost / total_tickets
    return price_per_ticket

 Executed result: 8.0
[EXP] 906: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    sleep_hours = 10
    work_hours = sleep_hours - 2
    walk_hours = 1
    free_time = 24 - sleep_hours - work_hours - walk_hours
    return free_time

 Executed result: 5
[EXP] 907: [success_rate]: False, [answer]: 10, [output]: def solution():
    blue_shoe_boxes = 7
    blue_shoe_boxes_used = 3
    blue_shoe_boxes_left = blue_shoe_boxes - blue_shoe_boxes_used
    
    red_shoe_boxes = 9
    red_shoe_boxes_used = int(red_shoe_boxes * 1/3)
    red_shoe_boxes_left = red_shoe_boxes - red_shoe_boxes_used
    
    return blue_shoe_boxes_left, red_shoe_boxes_left

 Executed result: (4, 6)
[EXP] 908: [success_rate]: True, [answer]: 16, [output]: def solution():
    sarah_books = 9
    joseph_books = 2 * sarah_books
    joseph_lost = 2
    joseph_books -= joseph_lost
    result = joseph_books
    return result

 Executed result: 16
[EXP] 909: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    marbles_initial = 30
    marbles_given_to_jamie = marbles_initial // 5
    marbles_given_to_donald = 10
    marbles_left = marbles_initial - marbles_given_to_jamie - marbles_given_to_donald
    result = marbles_left
    return result

 Executed result: 14
[EXP] 910: [success_rate]: True, [answer]: 38, [output]: def solution():
    duncan_age = 60
    duncan_age_8_years_ago = duncan_age - 8
    adams_age_4_years_ago = duncan_age_8_years_ago / 2
    adams_age_now = adams_age_4_years_ago + 4
    adams_age_in_8_years = adams_age_now + 8
    return adams_age_in_8_years

 Executed result: 38.0
[EXP] 911: [success_rate]: True, [answer]: 700, [output]: 
def solution():
    farm_brown = 200
    farm_smith = 2 * farm_brown + 100
    total_acres = farm_brown + farm_smith
    return total_acres

 Executed result: 700
[EXP] 912: [success_rate]: True, [answer]: 64, [output]: def solution():
    packages_per_hour = 50 - 10
    packages_per_day = packages_per_hour * 8
    earnings_per_package = 0.20
    total_earnings = packages_per_day * earnings_per_package
    return total_earnings

 Executed result: 64.0
[EXP] 913: [success_rate]: False, [answer]: 6, [output]: def solution():
    water_consumption = 1  # John drinks a bottle of water every half hour
    normal_sudoku_time = 45  # minutes
    extreme_sudoku_time = 4 * normal_sudoku_time  # minutes
    total_time = normal_sudoku_time + extreme_sudoku_time  # minutes
    total_bottles = total_time / 30  # convert minutes to half hours
    water_consumption_per_half_hour = total_bottles
    return water_consumption_per_half_hour

 Executed result: 7.5
[EXP] 914: [success_rate]: True, [answer]: 6, [output]: def solution():
    total_bologna = 58
    red_balloons = 20
    bologna_per_red_balloon = 2
    bologna_per_yellow_balloon = 3
    bologna_used_on_red = red_balloons * bologna_per_red_balloon
    bologna_used = total_bologna - bologna_used_on_red
    yellow_balloons = bologna_used // bologna_per_yellow_balloon
    return yellow_balloons

 Executed result: 6
[EXP] 915: [success_rate]: True, [answer]: 3, [output]: def solution():
    miles_per_day = 100
    days_in_month = 30
    total_miles = miles_per_day * days_in_month
    tune_ups = total_miles // 1000
    return tune_ups

 Executed result: 3
[EXP] 916: [success_rate]: True, [answer]: 23, [output]: def solution():
    hours_tuesday = 5
    hours_wednesday = hours_tuesday * 2
    hours_thursday = hours_wednesday - 2
    total_hours = hours_tuesday + hours_wednesday + hours_thursday
    return total_hours

 Executed result: 23
[EXP] 917: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    total_allowance = 0
    cake_cost = 11
    balloon_cost = 0
    balloon_price = 0.5
    num_balloon = 12
    num_balloon_per_package = 2
    ice_cream_cost = 7
    num_ice_cream = 2
    
    total_allowance = cake_cost + (balloon_cost + balloon_price) * (num_balloon // num_balloon_per_package) + ice_cream_cost * num_ice_cream
    
    allowance_per_person = total_allowance / 2
    
    return allowance_per_person

 Executed result: 14.0
[EXP] 918: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    apples = 3
    bananas = 5
    oranges = 6
    total_fruit = apples + bananas + oranges
    fruit_eaten = 2
    fruit_left = total_fruit - fruit_eaten
    return fruit_left

 Executed result: 12
[EXP] 919: [success_rate]: True, [answer]: 56, [output]: def solution():
    students_playing_tennis = 6
    students_playing_volleyball = 2 * students_playing_tennis
    students_playing_soccer = 16 + 22
    total_students = students_playing_tennis + students_playing_volleyball + students_playing_soccer
    return total_students

 Executed result: 56
[EXP] 920: [success_rate]: True, [answer]: 90, [output]: 
def solution():
    students = 30
    lollipops_sold_per_student = 10
    lollipops_sold = students * lollipops_sold_per_student
    cost_per_lollipop = 0.5
    revenue_per_lollipop = 0.8
    cost = lollipops_sold * cost_per_lollipop
    revenue = lollipops_sold * revenue_per_lollipop
    profit = revenue - cost
    return profit

 Executed result: 90.0
[EXP] 921: [success_rate]: True, [answer]: 47, [output]: def solution():
    cats = 3
    dogs = cats * 3
    rabbits = dogs - 2
    fish = rabbits * 3
    gerbils = int(fish / 3)
    total_pets = cats + dogs + rabbits + fish + gerbils
    return total_pets

 Executed result: 47
[EXP] 922: [success_rate]: True, [answer]: 4, [output]: 
def solution():
    slices_per_loaf = 24
    slices_per_day_abby = 2
    slices_per_day_josh = slices_per_day_abby * 2
    total_slices_per_day = slices_per_day_abby + slices_per_day_josh
    days = slices_per_loaf // total_slices_per_day
    return days

 Executed result: 4
[EXP] 923: [success_rate]: False, [answer]: 60, [output]: def solution():
    age = 10
    shells_per_month = 1
    shells_collected = (age - 5) * shells_per_month
    return shells_collected

 Executed result: 5
[EXP] 924: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    cups = 27
    rows = 3
    mint_cups = cups - 15
    mint_per_row = mint_cups // rows
    return mint_per_row

 Executed result: 4
[EXP] 925: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    total_berries = 24
    total_hours = 8
    hours_per_trip = 4
    trips = total_hours // hours_per_trip
    berries_per_trip = total_berries // trips
    return berries_per_trip

 Executed result: 12
[EXP] 926: [success_rate]: True, [answer]: 2000, [output]: 
def solution():
    water_initial = 10000
    tank_capacity = water_initial / 2
    water_left = tank_capacity
    water_consumed_per_day = 500
    days = 6
    for i in range(days):
        water_left -= water_consumed_per_day
    result = water_left
    return result

 Executed result: 2000.0
[EXP] 927: [success_rate]: False, [answer]: 1, [output]: 
def solution():
    movie_budget = 150
    friday_or_saturday_tickets = 5
    other_day_tickets = 8
    popcorn_cost = 8
    candy_cost = 2
    popcorn_consumed = 2
    candy_consumed = 4
    total_movie_cost = (friday_or_saturday_tickets + other_day_tickets) * 10 + (movie_budget - (friday_or_saturday_tickets * 10 + other_day_tickets * 7 + popcorn_consumed * popcorn_cost + candy_consumed * candy_cost))
    return total_movie_cost // 7

 Executed result: 21
[EXP] 928: [success_rate]: True, [answer]: 85000, [output]: 
def solution():
    cinnamon_rolls = 200
    blueberry_muffins = 300
    cinnamon_rolls_calories = 600
    blueberry_muffins_calories = 450
    mini_cinnamon_rolls_calories = cinnamon_rolls_calories / 3
    mini_blueberry_muffins_calories = blueberry_muffins_calories / 3
    total_calories = (cinnamon_rolls * mini_cinnamon_rolls_calories) + (blueberry_muffins * mini_blueberry_muffins_calories)
    return total_calories

 Executed result: 85000.0
[EXP] 929: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    junebugs_removed_monday = 39
    junebugs_removed_tuesday = 2 * junebugs_removed_monday
    junebugs_removed_wednesday = 2 * junebugs_removed_monday
    junebugs_removed_thursday = 48
    junebugs_removed_friday = 57
    total_junebugs_removed = junebugs_removed_monday + junebugs_removed_tuesday + junebugs_removed_wednesday + junebugs_removed_thursday + junebugs_removed_friday
    average_junebugs_removed_per_day = total_junebugs_removed / 5
    return average_junebugs_removed_per_day

 Executed result: 60.0
[EXP] 930: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    bus_speed = 60
    bus_time = 5
    bus_distance = bus_speed * bus_time
    
    car_speed = 30
    car_time = 8
    car_distance = car_speed * car_time
    
    bus_further_than_car = bus_distance - car_distance
    return bus_further_than_car

 Executed result: 60
[EXP] 931: [success_rate]: True, [answer]: 14, [output]: def solution():
    blocks = 31
    stuffed_animals = 8
    stacking_rings = 9
    total_toys = 62
    bouncy_balls = total_toys - (blocks + stuffed_animals + stacking_rings)
    return bouncy_balls

 Executed result: 14
[EXP] 932: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    john_age = 0
    paul_age = 0
    peter_age = 0
    total_age = 100
    paul_age = john_age + 10
    peter_age = paul_age + john_age
    return peter_age

 Executed result: 10
[EXP] 933: [success_rate]: False, [answer]: 24, [output]: def solution():
    friends = 4
    balloons_per_friend = 2
    maria_balloons = 1
    total_friends_balloons = friends * balloons_per_friend
    maria_total_balloons = total_friends_balloons + maria_balloons
    mom_balloons = maria_total_balloons + friends * 3
    return mom_balloons

 Executed result: 21
[EXP] 934: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    boxes_donated = 10
    boxes_already_owned = 10
    boxes_per_table = 2
    tables_owned = 15
    total_boxes = boxes_donated * 5 + boxes_already_owned
    tables_needed = -(-total_boxes // boxes_per_table)
    tables_needed -= tables_owned
    result = tables_needed
    return result

 Executed result: 15
[EXP] 935: [success_rate]: False, [answer]: 410, [output]: def solution():
    zoey_seeds = 40
    zoey_distance = 10
    zoey_total_distance = zoey_seeds * zoey_distance
    sydney_seeds = 35
    sydney_distance = 12
    sydney_total_distance = sydney_seeds * sydney_distance
    total_distance = zoey_total_distance + sydney_total_distance
    average_distance = total_distance / (zoey_seeds + sydney_seeds)
    return average_distance

 Executed result: 10.933333333333334
[EXP] 936: [success_rate]: True, [answer]: 64800, [output]: 
def solution():
    widgeteer_widgets = 60
    widgetmaster_widgets = 45
    widget_price = 6
    widgeteer_daily_widgets = widgeteer_widgets * 24
    widgeteer_monthly_widgets = widgeteer_daily_widgets * 30
    widgeteer_monthly_income = widgeteer_monthly_widgets * widget_price
    widgetmaster_daily_widgets = widgetmaster_widgets * 24
    widgetmaster_monthly_widgets = widgetmaster_daily_widgets * 30
    widgetmaster_monthly_income = widgetmaster_monthly_widgets * widget_price
    widgeteer_profit = widgeteer_monthly_income - widgetmaster_monthly_income
    return widgeteer_profit

 Executed result: 64800
[EXP] 937: [success_rate]: False, [answer]: 250, [output]: 
def solution():
    hours_at_night = 5 + 16 - 12  # 5 pm to 10 am is 17 hours, but 12 hours are free
    stay_cost = 1000 + hours_at_night * 70
    stay_cost_24 = 1600
    saving = stay_cost_24 - stay_cost
    result = saving
    return result

 Executed result: -30
[EXP] 938: [success_rate]: False, [answer]: 159, [output]: def solution():
    goat_hay = 15 * 5
    sheep_hay = 15 * 2 - 3
    sheep_hay = sheep_hay * 12
    total_hay = goat_hay + sheep_hay
    return total_hay

 Executed result: 399
[EXP] 939: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    hourly_wage = 50
    hours_worked = 6
    total_earned = hourly_wage * hours_worked
    gas_cost = 50
    total_spent = total_earned - gas_cost
    bank_deposit = total_spent - 100
    pen_cost = 25
    pencil_cost = 10
    pencils_bought = 5
    total_pencils_cost = pencil_cost * pencils_bought
    total_spent += total_pencils_cost
    pens_bought = bank_deposit // pen_cost
    return pens_bought

 Executed result: 6
[EXP] 940: [success_rate]: True, [answer]: 650, [output]: 
def solution():
    craig_letters = 15 * 20
    brother_letters = craig_letters + 50
    total_letters = craig_letters + brother_letters
    return total_letters

 Executed result: 650
[EXP] 941: [success_rate]: True, [answer]: 280, [output]: def solution():
    children_per_row = 8
    rows_per_school = 7
    schools = 5
    total_children = children_per_row * rows_per_school * schools
    return total_children

 Executed result: 280
[EXP] 942: [success_rate]: True, [answer]: 842, [output]: def solution():
    pupils = 29
    coupons = 9
    bottles_per_coupon = 100
    bottles_per_pupil = 2
    total_bottles_given = pupils * bottles_per_pupil
    total_bottles_redeemed = coupons * bottles_per_coupon
    total_bottles_left = total_bottles_redeemed - total_bottles_given
    return total_bottles_left

 Executed result: 842
[EXP] 943: [success_rate]: False, [answer]: 205, [output]: def solution():
    base_charge = 40
    labor_hours = 2.25
    labor_rate = 35
    parts_cost = 60
    total_labor_cost = labor_hours * labor_rate
    total_cost = base_charge + total_labor_cost + parts_cost
    return total_cost

 Executed result: 178.75
[EXP] 944: [success_rate]: False, [answer]: 50, [output]: def solution():
    cd_cost = 15
    discount = 0.4
    new_cd = 10
    total_cost = new_cd * cd_cost
    discounted_cost = total_cost * (1 - discount)
    sold_cd = 5
    sold_cost = sold_cd * 40
    profit = sold_cost - (discounted_cost - sold_cd * cd_cost)
    result = profit
    return result

 Executed result: 185.0
[EXP] 945: [success_rate]: True, [answer]: 34, [output]: def solution():
    yams = 6
    yam_price = 1.5
    yam_income = yams * yam_price
    sweet_potatoes = 10
    sweet_potato_price = 2
    sweet_potato_income = sweet_potatoes * sweet_potato_price
    carrots = 4
    carrot_price = 1.25
    carrot_income = carrots * carrot_price
    total_income = yam_income + sweet_potato_income + carrot_income
    return total_income

 Executed result: 34.0
[EXP] 946: [success_rate]: True, [answer]: 17, [output]: 
def solution():
    lake_distance = 20
    swimming_speed = 2
    distance_swum = 60/100 * lake_distance
    swimming_time = distance_swum / swimming_speed
    rest_time = swimming_time / 2
    remaining_distance = lake_distance - distance_swum
    remaining_swimming_speed = swimming_speed / 2
    remaining_swimming_time = remaining_distance / remaining_swimming_speed
    total_time = swimming_time + rest_time + remaining_swimming_time
    result = total_time
    return result

 Executed result: 17.0
[EXP] 947: [success_rate]: True, [answer]: 450, [output]: def solution():
    sam_bread = 70
    bakery_bread = 7 * sam_bread - 40
    return bakery_bread

 Executed result: 450
[EXP] 948: [success_rate]: True, [answer]: 13, [output]: def solution():
    stickers_initial = 0  # Jasmine started with 0 stickers
    stickers_received = 15  # Jasmine received 15 stickers for participating
    stickers_lost = 7  # Jasmine lost 7 stickers during playtime
    stickers_gained = 5  # Jasmine gained 5 stickers for helping classmates
    stickers = stickers_initial + stickers_received - stickers_lost + stickers_gained
    return stickers

 Executed result: 13
[EXP] 949: [success_rate]: True, [answer]: 15, [output]: def solution():
    ny_times = 6
    ws_journal = 10
    ny_times_price = 5
    ws_journal_price = 15
    ny_times_commission = ny_times * ny_times_price * 0.1
    ws_journal_commission = ws_journal * ws_journal_price * 0.08
    total_commission = ny_times_commission + ws_journal_commission
    return total_commission

 Executed result: 15.0
[EXP] 950: [success_rate]: False, [answer]: 42, [output]: def solution():
    deanna_age = 26
    leo_age = deanna_age + 5 + deanna_age / 2
    result = leo_age
    return result

 Executed result: 44.0
[EXP] 951: [success_rate]: True, [answer]: 5, [output]: def solution():
    points_total = 45
    bahati_score = points_total - (points_total - (points_total - 20))
    return bahati_score - 20

 Executed result: 5
[EXP] 952: [success_rate]: True, [answer]: 300, [output]: def solution():
    pages_per_inch = 100
    pages_per_paper = 2
    book_thickness = 1.5
    pages_in_book = pages_per_inch * book_thickness * pages_per_paper
    return pages_in_book

 Executed result: 300.0
[EXP] 953: [success_rate]: False, [answer]: 360, [output]: 
def solution():
    reports_per_minute = 30
    minutes_per_hour = 60
    hours = (23 - 8) * minutes_per_hour
    reports_stapled = reports_per_minute * hours
    return reports_stapled

 Executed result: 27000
[EXP] 954: [success_rate]: False, [answer]: 452, [output]: def solution():
    sleep_start = 22
    sleep_end = 6
    sleepwalker_start = 2
    sleepwalker_end = 2
    wake_up = sleep_start * 60 + 60
    wake_up_early = wake_up - 5
    sleep_time = wake_up_early - (sleepwalker_start * 60 + sleepwalker_end)
    return sleep_time

 Executed result: 1253
[EXP] 955: [success_rate]: False, [answer]: 34, [output]: 
def solution():
    cups = 2 * 12  # 2 dozen cups = 24 cups
    spoons = int(cups * (2/3))
    spoons_given = 6
    total_spoons = spoons - spoons_given
    return total_spoons

 Executed result: 10
[EXP] 956: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    capacity = 1000
    occupied = capacity / 5
    total_occupied = occupied + (50 * 14)
    unoccupied = capacity - total_occupied
    result = unoccupied
    return result

 Executed result: 100.0
[EXP] 957: [success_rate]: True, [answer]: 1, [output]: def solution():
    emails_per_day = 16
    work_emails = 7
    family_emails = int((emails_per_day - work_emails) * 2 / 3)
    boyfriend_emails = int((emails_per_day - work_emails - family_emails) / 3)
    return boyfriend_emails

 Executed result: 1
[EXP] 958: [success_rate]: True, [answer]: 45, [output]: def solution():
    aliya_age = 3
    shawna_age = aliya_age * 3
    father_age = shawna_age * 5
    result = father_age
    return result

 Executed result: 45
[EXP] 959: [success_rate]: False, [answer]: 40, [output]: def solution():
    audience_reported = 48
    percentage_error = 20
    percentage_error_in_decimal = percentage_error / 100
    actual_audience = audience_reported / (1 - percentage_error_in_decimal)
    result = int(actual_audience)
    return result

 Executed result: 60
[EXP] 960: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    jason_balls = 2
    jeffrey_balls = jason_balls / 2
    jordan_balls = 2 * jason_balls
    total_balls = jeffrey_balls + jason_balls + jordan_balls
    return total_balls

 Executed result: 7.0
[EXP] 961: [success_rate]: False, [answer]: 11, [output]: def solution():
    holes_first_day = 10
    holes_second_day = 13
    holes_third_day = 8 - 2  # subtract 2 holes filled in
    total_holes_third_day = holes_first_day + holes_second_day + holes_third_day
    holes_fourth_day = 4 * total_holes_third_day - total_holes_third_day
    return holes_fourth_day

 Executed result: 87
[EXP] 962: [success_rate]: False, [answer]: 225, [output]: def solution():
    chips_amora = 70
    chips_lainey = 70
    chips_collins = chips_amora + chips_lainey + 15
    total_chips = chips_amora + chips_lainey + chips_collins
    return total_chips

 Executed result: 295
[EXP] 963: [success_rate]: True, [answer]: 1000, [output]: def solution():
    supplies = 400
    travel_tickets = supplies * 1.5
    total_cost = supplies + travel_tickets
    return total_cost

 Executed result: 1000.0
[EXP] 964: [success_rate]: False, [answer]: 147, [output]: def solution():
    total = 339
    adelwolfe = total // 4
    stan = adelwolfe * 4 - 13
    alex = stan + 5
    return stan + 5

 Executed result: 328
[EXP] 965: [success_rate]: True, [answer]: 200, [output]: def solution():
    minutes_per_episode = 20
    total_episodes = minutes_per_episode // 2
    minutes_spent = total_episodes * minutes_per_episode
    return minutes_spent

 Executed result: 200
[EXP] 966: [success_rate]: True, [answer]: 374, [output]: def solution():
    distance_south = 10 * 30
    distance_north = 2 * 18
    distance_south_again = 5 * 22
    total_distance = distance_south - distance_north + distance_south_again
    return total_distance

 Executed result: 374
[EXP] 967: [success_rate]: True, [answer]: 48, [output]: 
def solution():
    batch_brownies = 12
    office_brownies = 6
    surprise_brownies = 12 * 4
    eaten_brownies = 1.5 * 12
    total_brownies = batch_brownies + office_brownies + surprise_brownies
    brownies_eaten = eaten_brownies
    brownies_left = total_brownies - brownies_eaten
    result = brownies_left
    return result

 Executed result: 48.0
[EXP] 968: [success_rate]: True, [answer]: 30, [output]: def solution():
    nani_age = 8
    brother_age = nani_age * 2
    sister_age = nani_age - (nani_age * 25 / 100)
    total_age = nani_age + brother_age + sister_age
    return total_age

 Executed result: 30.0
[EXP] 969: [success_rate]: True, [answer]: 227, [output]: 
def solution():
    synthetic_gut = 3
    polyester = 5
    hybrid = 4
    time_synthetic = synthetic_gut * 15
    time_poly = polyester * 22
    time_hybrid = hybrid * 18
    total_time = time_synthetic + time_poly + time_hybrid
    return total_time

 Executed result: 227
[EXP] 970: [success_rate]: False, [answer]: 1800, [output]: def solution():
    phone_price = 600
    initial_phones = 2
    phone_cost = 0
    for i in range(initial_phones, 5):
        if i > initial_phones:
            phone_cost += phone_price / 2
        else:
            phone_cost += phone_price
    result = phone_cost
    return result

 Executed result: 1200.0
[EXP] 971: [success_rate]: True, [answer]: 33, [output]: def solution():
    carlton_team = 13
    zeke_team = carlton_team + 7
    total_players = carlton_team + zeke_team
    return total_players

 Executed result: 33
[EXP] 972: [success_rate]: True, [answer]: 100, [output]: def solution():
    length = 15
    width = 10
    perimeter = 2 * (length + width)
    slats_needed = perimeter * 2
    return slats_needed

 Executed result: 100
[EXP] 973: [success_rate]: True, [answer]: 120, [output]: def solution():
    oranges_initial = 12 * 20
    oranges_given = 2 * 2 * 20
    oranges_kept = int(oranges_initial - oranges_given) // 4
    oranges_sold = oranges_initial - oranges_given - oranges_kept
    return oranges_sold

 Executed result: 120
[EXP] 974: [success_rate]: False, [answer]: 79, [output]: 
def solution():
    usa_states = 50
    india_states = (usa_states * 2) / 2 + 4
    total_states = usa_states + int(india_states)
    result = total_states
    return result

 Executed result: 104
[EXP] 975: [success_rate]: True, [answer]: 5, [output]: def solution():
    books_cost = 18 + 13 + 8
    money_saved = 14
    money_needed = books_cost - money_saved
    hours_worked = money_needed / 5
    return int(hours_worked)

 Executed result: 5
[EXP] 976: [success_rate]: True, [answer]: 20, [output]: def solution():
    total_cherries = 60
    robert_cherries = 30
    richard_cherries = robert_cherries - 10
    jerry_cherries = total_cherries - (robert_cherries + richard_cherries)
    result = robert_cherries - jerry_cherries
    return result

 Executed result: 20
[EXP] 977: [success_rate]: False, [answer]: 540, [output]: 
def solution():
    gingerbread_cost = 6
    apple_pie_cost = 15
    
    saturday_gingerbread = 10
    saturday_apple_pie = 10
    sunday_gingerbread = saturday_gingerbread + 5
    sunday_apple_pie = saturday_apple_pie + 4
    
    saturday_total = saturday_gingerbread * gingerbread_cost + saturday_apple_pie * apple_pie_cost
    sunday_total = sunday_gingerbread * gingerbread_cost + sunday_apple_pie * apple_pie_cost
    
    total_earned = saturday_total + sunday_total
    return total_earned

 Executed result: 510
[EXP] 978: [success_rate]: True, [answer]: 4, [output]: def solution():
    hours_outside = 4
    days = 8
    ounces_per_day = hours_outside * 1
    total_ounces = ounces_per_day * days
    bottles_needed = total_ounces // 8
    return bottles_needed

 Executed result: 4
[EXP] 979: [success_rate]: True, [answer]: 160, [output]: def solution():
    blue_car_price = 100
    discount = 0.4
    red_car_price = blue_car_price - (blue_car_price * discount)
    total_price = blue_car_price + red_car_price
    return total_price

 Executed result: 160.0
[EXP] 980: [success_rate]: False, [answer]: 50, [output]: def solution():
    current_age_emil = 19
    age_emil_at_24 = 24
    age_emil_at_24_in_years_left = age_emil_at_24 - current_age_emil
    age_father = 2 * (age_emil_at_24_in_years_left * 2)
    age_brother = age_emil_at_24_in_years_left
    sum_of_ages = age_father + age_brother
    return sum_of_ages

 Executed result: 25
[EXP] 981: [success_rate]: True, [answer]: 90, [output]: def solution():
    mom_beads = 20
    sister_beads = mom_beads + 10
    friend_beads = 2 * mom_beads
    total_beads = mom_beads + sister_beads + friend_beads
    return total_beads

 Executed result: 90
[EXP] 982: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    crawfish_catched_on_thursday = 3
    crawfish_catched_on_friday = crawfish_catched_on_thursday * 4
    crawfish_catched_on_saturday = crawfish_catched_on_friday / 2
    total_crawfish = crawfish_catched_on_thursday + crawfish_catched_on_friday + crawfish_catched_on_saturday
    servings = total_crawfish // 3
    return servings

 Executed result: 7.0
[EXP] 983: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    students = 30
    football_players = (20 / 100) * students
    remaining_students = students - football_players
    cheerleaders_band = (25 / 100) * remaining_students
    total_students_leaving = football_players + cheerleaders_band
    result = int(total_students_leaving)
    return result

 Executed result: 12
[EXP] 984: [success_rate]: True, [answer]: 15, [output]: def solution():
    sophie_size = 5
    charlie_size = sophie_size * 5
    average_size = (sophie_size + charlie_size) / 2
    return average_size

 Executed result: 15.0
[EXP] 985: [success_rate]: False, [answer]: 342, [output]: 
def solution():
    flower_bed_length = 111
    flower_width = 12
    gap_width = 18
    flowers_owned = 17
    total_plants = int((flower_bed_length * 12) / (flower_width + gap_width))
    total_flowers = flowers_owned + total_plants
    cost_per_plant = 6
    total_cost = total_flowers * cost_per_plant
    return total_cost

 Executed result: 366
[EXP] 986: [success_rate]: True, [answer]: 63, [output]: def solution():
    pretzels_edgar_eats_daily = 18
    brother_eats_half = 0.5
    brother_eats_daily = pretzels_edgar_eats_daily * brother_eats_half
    brother_eats_in_a_week = brother_eats_daily * 7
    return brother_eats_in_a_week

 Executed result: 63.0
[EXP] 987: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    baskets = 5
    petunias_per_basket = 3
    sweet_potato_vines_per_basket = 2
    petunia_cost = 3
    sweet_potato_vine_cost = 2.5
    total_petunias = baskets * petunias_per_basket
    total_vines = baskets * sweet_potato_vines_per_basket
    total_cost_petunias = total_petunias * petunia_cost
    total_cost_vines = total_vines * sweet_potato_vine_cost
    total_cost = total_cost_petunias + total_cost_vines
    result = total_cost
    return result

 Executed result: 70.0
[EXP] 988: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    soil = 30
    sunflowers = 4
    carnations = 10
    sunflower_weight = sunflowers * 3
    carnation_weight = carnations * 1.5
    total_weight = sunflower_weight + carnation_weight
    roses = soil - total_weight
    return int(roses)

 Executed result: 3
[EXP] 989: [success_rate]: True, [answer]: 6, [output]: 
def solution():
    monthly_income = 2000
    percentage_saved = 0.25
    shoes_cost = 1000
    monthly_savings = monthly_income * percentage_saved
    annual_savings = monthly_savings * 12
    shoes_bought = int(annual_savings // shoes_cost)
    return shoes_bought

 Executed result: 6
[EXP] 990: [success_rate]: False, [answer]: 45, [output]: def solution():
    shrimp_per_minute_peeling = 6
    shrimp_per_minute_cooking = 30 / 10
    total_shrimp = 90
    total_minutes_peeling = total_shrimp / shrimp_per_minute_peeling
    total_minutes_cooking = total_shrimp / shrimp_per_minute_cooking
    total_minutes = max(total_minutes_peeling, total_minutes_cooking)
    return total_minutes

 Executed result: 30.0
[EXP] 991: [success_rate]: False, [answer]: 14, [output]: 
def solution():
    initial_temp = 0
    low_cooling = 2
    high_cooling = 3
    no_ac_warm = 2
    low_hours = 3
    high_hours = 4
    off_hours = 2
    temp_change = low_cooling * low_hours - no_ac_warm
    temp_change += (high_cooling - low_cooling) * (high_hours - low_hours)
    temp_change -= no_ac_warm * off_hours
    final_temp = initial_temp - temp_change
    return final_temp

 Executed result: -1
[EXP] 992: [success_rate]: True, [answer]: 15, [output]: def solution():
    comet_time = 75
    bill_dad_age = 30
    bill_age_second_sighting = 3 * bill_dad_age
    bill_age_first_sighting = bill_age_second_sighting / 3
    bill_age_first_sighting_years_ago = comet_time - bill_age_first_sighting
    result = bill_dad_age - bill_age_first_sighting_years_ago
    return result

 Executed result: -15.0
[EXP] 993: [success_rate]: True, [answer]: 52, [output]: def solution():
    checks_per_month = 1 + 1 + 2
    checks_per_quarter = 1
    total_checks_per_year = (checks_per_month * 12) + (checks_per_quarter * 3)
    return total_checks_per_year

 Executed result: 51
[EXP] 994: [success_rate]: False, [answer]: 11, [output]: 
def solution():
    plane1_flights = 4 * 3  # 3/4 of flights to Greece and 1/4 to France and Germany
    plane2_flights = 44
    plane1_flights_to_france = plane1_flights // 2
    return plane1_flights_to_france

 Executed result: 6
[EXP] 995: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    tobias_howl = 20
    chikote_howl = 2 * tobias_howl
    igneous_howl = tobias_howl + chikote_howl
    total_howl = igneous_howl
    return total_howl / 60

 Executed result: 1.0
[EXP] 996: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    trousers_cost = 30
    mother_gift = 6
    father_gift = 2 * mother_gift
    total_gifts = mother_gift + father_gift
    money_contributed = trousers_cost - total_gifts
    return money_contributed

 Executed result: 12
[EXP] 997: [success_rate]: True, [answer]: 3, [output]: def solution():
    akbar_age = 3
    alessandro_age = 4
    total_age = 20
    helene_age = 2 * ((total_age - akbar_age - alessandro_age) / 2) + alessandro_age
    wilfred_age = total_age - akbar_age - alessandro_age - helene_age
    result = wilfred_age
    return result

 Executed result: -4.0
[EXP] 998: [success_rate]: False, [answer]: 6,600, [output]: 
def solution():
    total_donated = 500 + 1500
    lawyer_donation = 3 * total_donated
    return lawyer_donation

 Executed result: 6000
[EXP] 999: [success_rate]: True, [answer]: 50, [output]: def solution():
    cookies_total = 100 * 15
    cookies_given = cookies_total // 2
    cookies_per_person = 15
    people_in_church = cookies_given // cookies_per_person
    return people_in_church

 Executed result: 50
[EXP] 1000: [success_rate]: False, [answer]: 25, [output]: def solution():
    adults = 2
    kids = 4
    adult_slices = 2 * kids
    total_slices = adults + adult_slices
    adult_percentage = (adults * 2) / total_slices * 100
    return adult_percentage

 Executed result: 40.0
[EXP] 1001: [success_rate]: True, [answer]: 1, [output]: 
def solution():
    hours_worked = 9
    inpatients = 9
    inpatient_time = inpatients * 0.25
    appointments = 10
    appointment_time = appointments * 0.5
    time_taken = inpatient_time + appointment_time
    time_left = hours_worked - time_taken
    result = time_left
    return result

 Executed result: 1.75
[EXP] 1002: [success_rate]: False, [answer]: 2, [output]: def solution():
    cake_time = 20 + 30 + 120 + 10
    start_time = 300 - cake_time
    return start_time

 Executed result: 120
[EXP] 1003: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    total_chocolate_bars = 64
    lisa_sold = 3.5
    peter_sold = 4.5
    total_sold = lisa_sold + peter_sold
    boxes_sold = total_sold
    chocolate_bars_per_box = total_chocolate_bars / boxes_sold
    result = chocolate_bars_per_box
    return result

 Executed result: 8.0
[EXP] 1004: [success_rate]: False, [answer]: 480, [output]: def solution():
    studio_rent = 25
    student_cost = 1.5
    students = 10
    days_per_week = 3
    weeks_in_a_month = 4
    total_students_per_week = students * days_per_week
    total_students_per_month = total_students_per_week * weeks_in_a_month
    total_cost_per_week = studio_rent + (total_students_per_week * student_cost)
    total_cost_per_month = total_cost_per_week * weeks_in_a_month
    earnings = total_cost_per_month
    return earnings

 Executed result: 280.0
[EXP] 1005: [success_rate]: False, [answer]: 8, [output]: def solution():
    p_total = 64
    m_total = 56
    p_boxes = p_total // 4
    m_boxes = m_total // 7
    p_per_box = p_total // p_boxes
    m_per_box = m_total // m_boxes
    diff = p_per_box - m_per_box
    return diff

 Executed result: -3
[EXP] 1006: [success_rate]: True, [answer]: 1490, [output]: 
def solution():
    porcupines = 50
    female_porcupines = int(3/5 * porcupines)
    babies_per_female = 4
    babies_per_month = female_porcupines * babies_per_female
    months_in_a_year = 12
    total_babies = babies_per_month * months_in_a_year
    total_porcupines = porcupines + total_babies
    return total_porcupines

 Executed result: 1490
[EXP] 1007: [success_rate]: True, [answer]: 826, [output]: def solution():
    pool_width = 14
    pool_length = 25
    pool_depth = 4
    pool_volume = pool_width * pool_length * pool_depth
    gallons_needed = pool_volume * 5.9
    cost = gallons_needed * 0.1
    return cost

 Executed result: 826.0
[EXP] 1008: [success_rate]: True, [answer]: 34, [output]: def solution():
    red_sticks = 9
    blue_sticks = red_sticks + 5
    yellow_sticks = blue_sticks - 3
    total_sticks = red_sticks + blue_sticks + yellow_sticks
    return total_sticks

 Executed result: 34
[EXP] 1009: [success_rate]: True, [answer]: 230, [output]: def solution():
    matteo_distance = 55 * 4
    shandy_distance = 45 * 10
    difference = shandy_distance - matteo_distance
    return difference

 Executed result: 230
[EXP] 1010: [success_rate]: False, [answer]: 1,875, [output]: 
def solution():
    students = 3000
    students_over16 = students // 2
    male_over16 = students_over16 // 4
    students_under16 = students - students_over16
    male_under16 = students_under16 // 2
    total_male = male_over16 + male_under16
    total_female = students - total_male
    result = total_female
    return result

 Executed result: 1875
[EXP] 1011: [success_rate]: True, [answer]: 5, [output]: def solution():
    laps_bethany = 10
    laps_trey = laps_bethany + 4
    laps_shaelyn = laps_trey // 2
    laps_quinn = laps_shaelyn - 2
    difference = laps_bethany - laps_quinn
    return difference

 Executed result: 5
[EXP] 1012: [success_rate]: True, [answer]: 6000, [output]: 
def solution():
    tank_capacity = 18000
    pump1 = 1/4 * tank_capacity
    pump2 = 3/4 * pump1
    total_pumped1 = pump1 + pump2
    pump3 = 2/3 * pump1
    pump4 = 1/3 * pump2
    total_pumped2 = pump3 + pump4
    total_pumped = total_pumped1 + total_pumped2
    gallons_left = tank_capacity - total_pumped
    return gallons_left

 Executed result: 6000.0
[EXP] 1013: [success_rate]: False, [answer]: 94, [output]: 
def solution():
    charge_initial = 100  # Assuming the power bank has a full capacity of 100%
    hours_1 = 5
    hours_2 = 3
    discharge_rate_1 = 9
    discharge_rate_2 = 7
    charge_left_after_1st_hours = 100 - (100 * (discharge_rate_1 / 100)) * hours_1
    charge_left_after_2nd_hours = charge_left_after_1st_hours - (100 * (discharge_rate_2 / 100)) * hours_2
    charge_left = charge_left_after_2nd_hours
    charge_left_percentage = (charge_left / 100)
    charge_left_initial = 100 * charge_left_percentage
    
    return charge_left_initial

 Executed result: 34.0
[EXP] 1014: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    wages_per_hour = 10
    tips_per_hour = 15
    total_per_hour = wages_per_hour + tips_per_hour
    weekly_hours = 40
    weekly_income = total_per_hour * weekly_hours
    total_needed = 0.8 * 10000  # 20% of 10000
    weeks_needed = total_needed / weekly_income
    return int(weeks_needed)

 Executed result: 8
[EXP] 1015: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    money_initial = 10
    peaches = 3
    peaches_cost = 0.5
    pears = 4
    pears_cost = 0.5
    kiwis = 2
    kiwi_cost = 1
    apples = 5
    apple_cost = 0.75
    total_cost = (peaches * peaches_cost) + (pears * pears_cost) + (kiwis * kiwi_cost) + (apples * apple_cost)
    money_left = money_initial - total_cost
    plum_cost = 0.25
    plums = int(money_left // plum_cost)
    return plums

 Executed result: 3
[EXP] 1016: [success_rate]: True, [answer]: 78, [output]: def solution():
    total_pieces = 60 * 15
    given_to_friends = total_pieces - 2 * 60
    friends = 10
    pieces_per_friend = given_to_friends // friends
    return pieces_per_friend

 Executed result: 78
[EXP] 1017: [success_rate]: True, [answer]: 138, [output]: def solution():
    price = 120
    price_after_1_year = price * 1.05
    price_after_2_years = price_after_1_year * 1.05
    price_after_3_years = price_after_2_years * 1.05
    result = round(price_after_3_years)
    return result

 Executed result: 139
[EXP] 1018: [success_rate]: False, [answer]: 45, [output]: 
def solution():
    total_pics = 72
    albums = 8
    selfies = 3
    portraits = 2
    selfies_per_album = total_pics // albums
    portraits_per_album = total_pics // albums
    selfies_total = selfies * selfies_per_album
    portraits_total = portraits * portraits_per_album
    return selfies_total, portraits_total

 Executed result: (27, 18)
[EXP] 1019: [success_rate]: False, [answer]: 60, [output]: def solution():
    pages_per_minute = 3
    pages_read = 18
    minutes = pages_read // pages_per_minute
    minutes += 10
    result = minutes
    return result

 Executed result: 16
[EXP] 1020: [success_rate]: True, [answer]: 98, [output]: 
def solution():
    guests_initial = 100
    guests_checked_out_early = 24
    guests_checked_out_late = 15
    guests_arrived_afternoon = 2 * guests_checked_out_late
    guests_arrived_after_dinner = 7
    guests_left = guests_initial - guests_checked_out_early - guests_checked_out_late
    guests_arrived = guests_arrived_afternoon + guests_arrived_after_dinner
    guests_now = guests_left + guests_arrived
    return guests_now

 Executed result: 98
[EXP] 1021: [success_rate]: True, [answer]: 22, [output]: def solution():
    bananas_wednesday = 4
    bananas_thursday = 6
    bananas_friday = bananas_wednesday * 3
    bananas_total = bananas_wednesday + bananas_thursday + bananas_friday
    result = bananas_total
    return result

 Executed result: 22
[EXP] 1022: [success_rate]: True, [answer]: 36, [output]: def solution():
    easy_questions = 40 / 100 * 60
    average_questions = (1 - 40 / 100) / 2 * 60
    difficult_questions = average_questions
    easy_points = easy_questions * 0.75
    average_points = average_questions * 0.5
    difficult_points = difficult_questions * 0.5
    total_points = easy_points + average_points + average_points
    return total_points

 Executed result: 36.0
[EXP] 1023: [success_rate]: False, [answer]: 12, [output]: 
def solution():
    large_animals = x
    small_animals = 2 * large_animals
    small_price = 4
    large_price = 3 * small_price
    total_earned = large_price * large_animals + small_price * small_animals
    total_earned = 120
    small_animals = (total_earned - large_price * large_animals) / small_price
    result = int(small_animals)
    return result

 Executed result: None
[EXP] 1024: [success_rate]: True, [answer]: 77, [output]: 
def solution():
    man_sandwiches = 5
    wife_sandwiches = 4
    son_sandwiches = 2
    days_in_week = 7
    
    man_sandwiches_per_week = man_sandwiches * days_in_week
    wife_sandwiches_per_week = wife_sandwiches * days_in_week
    son_sandwiches_per_week = son_sandwiches * days_in_week
    
    total_sandwiches_per_week = man_sandwiches_per_week + wife_sandwiches_per_week + son_sandwiches_per_week
    
    return total_sandwiches_per_week

 Executed result: 77
[EXP] 1025: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    cookies = 80
    cookie_price = 1
    cookies_earned = cookies * cookie_price
    cupcakes = 60
    cupcake_price = 4
    cupcakes_earned = cupcakes * cupcake_price
    total_earned = cookies_earned + cupcakes_earned
    sisters_gift = 10 * 2
    money_left = total_earned - sisters_gift
    return money_left

 Executed result: 300
[EXP] 1026: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    total_eggs = 100
    smith_eggs = 30 * 2
    other_eggs = total_eggs - smith_eggs - 10
    return other_eggs

 Executed result: 30
[EXP] 1027: [success_rate]: True, [answer]: 43200, [output]: def solution():
    pounds_per_day = 12
    pounds_with_iron = pounds_per_day * 2
    pounds_with_steel = pounds_with_iron * 1.5
    pounds_per_dwarf_per_day = pounds_with_steel
    pounds_per_dwarf_per_month = pounds_per_dwarf_per_day * 30
    pounds_per_40_dwarves_per_month = pounds_per_dwarf_per_month * 40
    return pounds_per_40_dwarves_per_month

 Executed result: 43200.0
[EXP] 1028: [success_rate]: True, [answer]: 12, [output]: def solution():
    sandwich1 = 2
    cost1 = 3
    sandwich2 = 4
    cost2 = 6
    price_ratio = cost2 / sandwich2
    sandwich3 = 8
    cost3 = sandwich3 * price_ratio
    result = cost3
    return result

 Executed result: 12.0
[EXP] 1029: [success_rate]: True, [answer]: 200, [output]: 
def solution():
    bedroom_set_cost = 3000
    old_bedroom_sold = 1000
    money_paid = old_bedroom_sold
    money_left = bedroom_set_cost - money_paid
    monthly_interest = (money_left * 0.1)
    return monthly_interest

 Executed result: 200.0
[EXP] 1030: [success_rate]: False, [answer]: 34, [output]: 
def solution():
    red_balloons = 25
    green_balloons = 7
    yellow_balloons = 12
    blue_balloons = 8

    red_balloons_burst = int(red_balloons * 0.4)
    red_balloons_left = red_balloons - red_balloons_burst

    yellow_balloons_released = int(yellow_balloons / 2)
    yellow_balloons_left = yellow_balloons - yellow_balloons_released

    blue_balloons_added = int(blue_balloons * 0.75)
    total_balloons = red_balloons_left + green_balloons + yellow_balloons_left + blue_balloons + blue_balloons_added
    return total_balloons

 Executed result: 42
[EXP] 1031: [success_rate]: False, [answer]: 24, [output]: 
def solution():
    no_substitute = 0.5
    no_extension = 0.6
    no_extension_dog_eats = 0.8
    chance_to_turn_in_homework = no_substitute * no_extension * (1 - no_extension_dog_eats)
    return (1 - chance_to_turn_in_homework) * 100

 Executed result: 94.0
[EXP] 1032: [success_rate]: False, [answer]: 5, [output]: def solution():
    capacity = 6000
    reserved_seats = 950 + 300
    available_seats = capacity - reserved_seats
    tickets_per_person = available_seats
    return tickets_per_person

 Executed result: 4750
[EXP] 1033: [success_rate]: True, [answer]: 450, [output]: def solution():
    large_beans = 75
    medium_beans = large_beans * 2
    small_beans = medium_beans * 3
    result = small_beans
    return result

 Executed result: 450
[EXP] 1034: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    hours_per_day = 6
    days = 3
    daily_pay = 15
    daily_expense = 3
    total_hours = hours_per_day * days
    total_pay = daily_pay * days
    total_expense = daily_expense * days
    net_pay_per_hour = (total_pay - total_expense) / total_hours
    return net_pay_per_hour

 Executed result: 2.0
[EXP] 1035: [success_rate]: True, [answer]: 66, [output]: def solution():
    money_initial = 200
    book_cost = 16
    book_number = 3
    book_spent = book_number * book_cost
    pencil_cost = 6
    pencil_number = 3
    pencil_spent = pencil_number * pencil_cost
    total_spent = book_spent + pencil_spent
    money_left = money_initial - total_spent
    result = total_spent
    return result

 Executed result: 66
[EXP] 1036: [success_rate]: False, [answer]: 35, [output]: 
def solution():
    width = 24
    distance_between_bottles = 3
    seconds_per_bottle = 5
    total_bottles = width // distance_between_bottles
    time_taken = total_bottles * seconds_per_bottle
    return time_taken

 Executed result: 40
[EXP] 1037: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    apples_per_box = 40
    boxes = 2
    apples_total = apples_per_box * boxes
    apples_per_pack = 8
    packs = apples_total // apples_per_pack
    return packs

 Executed result: 10
[EXP] 1038: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    parmesan_cost = 11
    mozzarella_cost = 6
    parmesan_pounds = 2
    mozzarella_pounds = 3
    total_cost = (parmesan_pounds * parmesan_cost) + (mozzarella_pounds * mozzarella_cost)
    money_initial = 50
    money_spent = total_cost
    money_left = money_initial - money_spent
    result = money_left
    return result

 Executed result: 10
[EXP] 1039: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    money_lost = 4 * 50000
    yearly_income_before = 25000
    yearly_income_after = 25000 * 3
    total_income = 0
    years = 0
    while total_income < money_lost:
        total_income += yearly_income_before
        years += 1
    years_after = 0
    total_income = 0
    while total_income < money_lost:
        total_income += yearly_income_after
        years_after += 1
    result = years + years_after
    return result

 Executed result: 11
[EXP] 1040: [success_rate]: False, [answer]: 160, [output]: def solution():
    bed_length = 6
    bed_width = 8
    fabric_length = bed_length + 2
    fabric_width = bed_width + 2
    fabric_area = fabric_length * fabric_width
    return fabric_area

 Executed result: 80
[EXP] 1041: [success_rate]: True, [answer]: 736, [output]: 
def solution():
    letters_monday = 425
    letters_tuesday = (letters_monday // 5) + 17
    letters_wednesday = 2 * letters_tuesday + 5
    result = letters_monday + letters_tuesday + letters_wednesday
    return result

 Executed result: 736
[EXP] 1042: [success_rate]: True, [answer]: 101, [output]: def solution():
    people = 16
    chicken_people = 10
    pasta_people = 6
    chicken_cost = chicken_people * 6.50
    pasta_cost = pasta_people * 6
    total_cost = chicken_cost + pasta_cost
    return total_cost

 Executed result: 101.0
[EXP] 1043: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    money_lost = -5
    money_won = 2 * money_lost + 1
    money_lost_again = money_won * 1.5
    total_loss = money_lost + money_lost_again
    average_loss = total_loss / 3
    return average_loss

 Executed result: -6.166666666666667
[EXP] 1044: [success_rate]: True, [answer]: 130000, [output]: def solution():
    countries = 26
    cities = 5
    population_per_city = 1000
    total_population = countries * cities * population_per_city
    return total_population

 Executed result: 130000
[EXP] 1045: [success_rate]: False, [answer]: 1, [output]: def solution():
    xavier_initial_height = 4
    xavier_growth = 3
    xavier_new_height = xavier_initial_height + xavier_growth / 12
    cole_initial_height = 50
    cole_growth = 2
    cole_new_height = cole_initial_height + cole_growth
    difference = abs(cole_new_height - xavier_new_height)
    return difference

 Executed result: 47.75
[EXP] 1046: [success_rate]: False, [answer]: 420, [output]: 
def solution():
    total = 1920
    second = total - 80
    third = 2 * second
    first = total - second - third
    return first

 Executed result: -3600
[EXP] 1047: [success_rate]: False, [answer]: 189, [output]: def solution():
    painters = 4
    days = 3
    hours_per_day = 3/8
    hours_per_week = hours_per_day * 24
    hours_worked = hours_per_week * days
    hours_per_painter = hours_worked / painters
    return hours_per_painter

 Executed result: 6.75
[EXP] 1048: [success_rate]: False, [answer]: 10, [output]: def solution():
    total_balls = 19
    second_set_balls = x
    first_set_balls = second_set_balls + 4
    third_set_balls = second_set_balls // 2
    return first_set_balls

 Executed result: None
[EXP] 1049: [success_rate]: False, [answer]: 7400, [output]: 
def solution():
    car_price = 20000
    depreciation_rate = 0.21
    years = 2010 - 2007
    for _ in range(years):
        car_price *= (1 - depreciation_rate)
    return car_price

 Executed result: 9860.78
[EXP] 1050: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    total_books = 50
    english_books = total_books // 2
    german_books = total_books // 10
    spanish_books = total_books - english_books - german_books
    return spanish_books

 Executed result: 20
[EXP] 1051: [success_rate]: True, [answer]: 655, [output]: 
def solution():
    distance_total = 1955
    distance_driven = 325 * 4
    distance_left = distance_total - distance_driven
    result = distance_left
    return result

 Executed result: 655
[EXP] 1052: [success_rate]: True, [answer]: 15, [output]: def solution():
    cups_per_day = 8
    days = 30
    cups_in_gallon = 16
    cups_in_30_days = cups_per_day * days
    gallons_in_30_days = cups_in_30_days // cups_in_gallon
    return gallons_in_30_days

 Executed result: 15
[EXP] 1053: [success_rate]: True, [answer]: 110, [output]: def solution():
    people_initial = 120
    people_boarded1 = 20
    people_boarded2 = 50 * 2
    people_left1 = 50
    people_left2 = 80
    people_on_train = people_initial + people_boarded1 + people_boarded2 - people_left1 - people_left2
    return people_on_train

 Executed result: 110
[EXP] 1054: [success_rate]: True, [answer]: 55, [output]: 
def solution():
    tank_top = 10
    running_shorts = tank_top + 5
    tennis_shoes = 48 / 2
    athletic_socks = 8 - 2
    total_cost = tank_top + running_shorts + tennis_shoes + athletic_socks
    return total_cost

 Executed result: 55.0
[EXP] 1055: [success_rate]: True, [answer]: 2400, [output]: 
def solution():
    floor_area = 200
    tile_cost = 12
    tile_area = 1 * 1  # since each tile side is 1ft
    tiles_needed = floor_area // tile_area  # integer division to find the number of tiles
    if floor_area % tile_area != 0:
        tiles_needed += 1  # if there's a remainder, add 1 to account for the extra tile
    cost = tiles_needed * tile_cost
    return cost

 Executed result: 2400
[EXP] 1056: [success_rate]: True, [answer]: 2304, [output]: def solution():
    normal_cost = 120
    accident_cost = normal_cost * 1.6
    annual_cost = accident_cost * 12
    return annual_cost

 Executed result: 2304.0
[EXP] 1057: [success_rate]: True, [answer]: 156, [output]: def solution():
    twin_beds = 4
    king_bed = 1
    total_sheets = twin_beds * 2 + king_bed
    loads_per_week = total_sheets // 3
    loads_per_year = loads_per_week * 52
    return loads_per_year

 Executed result: 156
[EXP] 1058: [success_rate]: True, [answer]: 24, [output]: def solution():
    movies_per_weekend = 4
    movies_per_sunday = movies_per_weekend // 2
    movies_per_week = movies_per_weekend + movies_per_sunday
    movies_per_four_weeks = movies_per_week * 4
    result = movies_per_four_weeks
    return result

 Executed result: 24
[EXP] 1059: [success_rate]: True, [answer]: 250, [output]: 
def solution():
    stickers_initial = 100
    stickers_collected_last_year = 50
    stickers_collected_this_year = 2 * stickers_collected_last_year
    total_stickers = stickers_initial + stickers_collected_last_year + stickers_collected_this_year
    result = total_stickers
    return result

 Executed result: 250
[EXP] 1060: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    cat_food = 720
    daily_cat_food = 60
    days = cat_food // daily_cat_food
    return days

 Executed result: 12
[EXP] 1061: [success_rate]: False, [answer]: 31, [output]: def solution():
    slices_per_pizza = 8
    total_pizzas = 4
    total_slices = slices_per_pizza * total_pizzas
    jake_slices = (becky_slices - 3)
    silvia_slices = 2 * jake_slices
    total_eaten = becky_slices + jake_slices + silvia_slices
    result = total_eaten
    return result

 Executed result: None
[EXP] 1062: [success_rate]: False, [answer]: 58, [output]: def solution():
    total_time = 98
    donovan_time = total_time - (total_time // 2 + 18)
    result = donovan_time
    return result

 Executed result: 31
[EXP] 1063: [success_rate]: False, [answer]: 482, [output]: def solution():
    cast = 200
    doctor_visit = 300 / 2 * 0.5  # 30 minutes is half an hour
    painkillers = 30 * 4
    parking = 6 * 2  # 2 hours
    total_cost = cast + doctor_visit + painkillers + parking
    return total_cost

 Executed result: 407.0
[EXP] 1064: [success_rate]: False, [answer]: 320, [output]: def solution():
    emails_per_day = 80
    emails_without_response = int(emails_per_day * 0.2)
    emails_to_response = emails_per_day - emails_without_response
    emails_per_week = emails_per_day * 5
    emails_to_response_per_week = emails_per_week - (int(emails_per_week * 0.2) * 5)
    return emails_to_response_per_week

 Executed result: 0
[EXP] 1065: [success_rate]: True, [answer]: 247, [output]: def solution():
    classes_monday = 32
    classes_tuesday = classes_monday * 2
    classes_wednesday = classes_monday * 3
    classes_thursday = 30
    classes_friday = 25
    total_classes = classes_monday + classes_tuesday + classes_wednesday + classes_thursday + classes_friday
    return total_classes

 Executed result: 247
[EXP] 1066: [success_rate]: True, [answer]: 95, [output]: def solution():
    scores = [100, 100, 100, 80]
    average = sum(scores) / len(scores)
    return average

 Executed result: 95.0
[EXP] 1067: [success_rate]: True, [answer]: 14, [output]: 
def solution():
    pizzas_glee = 20
    pizzas_football = 2 * pizzas_glee
    pizzas_eaten_glee = int(pizzas_glee * 0.7)
    pizzas_eaten_football = int(pizzas_football * 0.8)
    pizzas_left_glee = pizzas_glee - pizzas_eaten_glee
    pizzas_left_football = pizzas_football - pizzas_eaten_football
    pizzas_left = pizzas_left_glee + pizzas_left_football
    return pizzas_left

 Executed result: 14
[EXP] 1068: [success_rate]: True, [answer]: 245, [output]: def solution():
    small_coupons = 700
    big_coupons = 2 * small_coupons
    total_coupons = small_coupons + big_coupons
    small_postage = small_coupons * 0.05
    big_postage = big_coupons * 0.15
    total_postage = small_postage + big_postage
    result = total_postage
    return result

 Executed result: 245.0
[EXP] 1069: [success_rate]: True, [answer]: 24, [output]: def solution():
    meatballs_per_sub = 4
    subs_ordered = 10 - 3
    subs_eaten = 4
    subs_added = 3
    total_subs = subs_ordered - subs_eaten + subs_added
    total_meatballs = meatballs_per_sub * total_subs
    return total_meatballs

 Executed result: 24
[EXP] 1070: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    trucks = 20
    tons_per_truck = 20
    failed_trucks = trucks // 4
    tons_not_delivered = failed_trucks * tons_per_truck
    tons_delivered = trucks * tons_per_truck - tons_not_delivered
    result = tons_delivered
    return result

 Executed result: 300
[EXP] 1071: [success_rate]: False, [answer]: 18, [output]: def solution():
    butter_cost = 4.00
    butter_needed = 6
    discount = 0.5
    cost_with_discount = butter_cost * butter_needed
    discounted_cost = cost_with_discount - (cost_with_discount * discount)
    result = discounted_cost
    return result

 Executed result: 12.0
[EXP] 1072: [success_rate]: True, [answer]: 251, [output]: 
def solution():
    party_fee = 125
    initial_guests = 20
    additional_guest_fees = 6
    total_guests = 25 + 7 + 13 - 4
    total_cost = party_fee + (total_guests - initial_guests) * additional_guest_fees
    return total_cost

 Executed result: 251
[EXP] 1073: [success_rate]: True, [answer]: 85, [output]: def solution():
    maggie_money = 60
    riza_money = 60
    maggie_left = maggie_money
    riza_left = riza_money

    maggie_spent = maggie_money / 4
    riza_spent = riza_money / 3

    maggie_left -= maggie_spent
    riza_left -= riza_spent

    total_left = maggie_left + riza_left
    return total_left

 Executed result: 85.0
[EXP] 1074: [success_rate]: True, [answer]: 21, [output]: 
def solution():
    total_bananas = 315
    total_days = 7
    monkey1_bananas = 10
    monkey2_bananas = monkey1_bananas + 4
    total_monkey1_bananas = monkey1_bananas * total_days
    total_monkey2_bananas = monkey2_bananas * total_days
    total_monkey3_bananas = total_bananas - (total_monkey1_bananas + total_monkey2_bananas)
    monkey3_bananas_per_day = total_monkey3_bananas // total_days
    return monkey3_bananas_per_day

 Executed result: 21
[EXP] 1075: [success_rate]: False, [answer]: 750, [output]: def solution():
    puzzle_pieces = 2 * 500
    return puzzle_pieces

 Executed result: 1000
[EXP] 1076: [success_rate]: False, [answer]: 16, [output]: 
def solution():
    flowers_cost = 15 * 2
    total_cost = flowers_cost
    initial_money = 5 * 5
    change = initial_money - total_cost
    quarters = change // 0.25
    return quarters

 Executed result: -20.0
[EXP] 1077: [success_rate]: True, [answer]: 162, [output]: def solution():
    milkshakes = 6
    milkshake_price = 5.50
    milkshake_total = milkshakes * milkshake_price
    burger_platters = 9
    burger_platter_price = 11
    burger_platter_total = burger_platters * burger_platter_price
    sodas = 20
    soda_price = 1.50
    soda_total = sodas * soda_price
    total_income = milkshake_total + burger_platter_total + soda_total
    return total_income

 Executed result: 162.0
[EXP] 1078: [success_rate]: False, [answer]: 145, [output]: 
def solution():
    train1_arrival = 10
    train1_stay = 20
    train2_arrival = train1_arrival + 20
    train2_stay = train1_stay // 4
    train3_arrival = train2_arrival + 60
    train4_arrival = train3_arrival + 20
    total_wait = train4_arrival
    return total_wait

 Executed result: 110
[EXP] 1079: [success_rate]: True, [answer]: 8, [output]: def solution():
    toothpicks_needed = 200
    toothpicks_saved_per_week = 10
    total_toothpicks_saved = 10 * 12
    weeks_left = (toothpicks_needed - total_toothpicks_saved) // toothpicks_saved_per_week
    return weeks_left

 Executed result: 8
[EXP] 1080: [success_rate]: True, [answer]: 10, [output]: def solution():
    original_price = 2000
    price_bought = (original_price * 0.75)
    price_sold = (price_bought * 1.2)
    discount = (original_price - price_sold) / original_price * 100
    return discount

 Executed result: 10.0
[EXP] 1081: [success_rate]: False, [answer]: 72000, [output]: 
def solution():
    jellyfish_per_second = 1
    springs = 5
    time_in_hours = 4
    time_in_seconds = time_in_hours * 60 * 60
    jellyfish_per_minute = jellyfish_per_second
    jellyfish_per_hour = jellyfish_per_minute * 60
    jellyfish_total = jellyfish_per_hour * time_in_hours
    jellyfish_per_spring = jellyfish_total / springs
    return jellyfish_per_spring

 Executed result: 48.0
[EXP] 1082: [success_rate]: True, [answer]: 195, [output]: def solution():
    binkie_score = 90
    frankie_score = 2 * binkie_score + 15
    return frankie_score

 Executed result: 195
[EXP] 1083: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    home_to_store = 4
    store_to_home = 4
    total_distance = home_to_store + store_to_home
    speed = 4
    time_taken = total_distance / speed
    return time_taken

 Executed result: 2.0
[EXP] 1084: [success_rate]: True, [answer]: 2, [output]: def solution():
    bananas_per_bunch = 4
    bananas_in_bunches = 10
    bananas_total = bananas_in_bunches * bananas_per_bunch
    cost_per_banana_individual = 0.8
    cost_per_banana_bunch = 3
    cost_individual = bananas_total * cost_per_banana_individual
    cost_bunch = bananas_in_bunches * cost_per_banana_bunch
    cost_saved = cost_individual - cost_bunch
    return cost_saved

 Executed result: 2.0
[EXP] 1085: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    total_fence = 100
    sam_fence = (total_fence // 2) - (60 // 2)
    sam_fence = sam_fence * 2
    leftover_fence = total_fence - sam_fence
    result = leftover_fence
    return result

 Executed result: 60
[EXP] 1086: [success_rate]: True, [answer]: 26, [output]: def solution():
    growth_rate = 8
    years = 4
    growth_per_year = growth_rate / years
    total_growth = growth_per_year * 13
    return total_growth

 Executed result: 26.0
[EXP] 1087: [success_rate]: True, [answer]: 131250, [output]: 
def solution():
    mtb_price = 500
    bmx_price = mtb_price / 2
    trekking_price = 450
    mtb_sold = 300 * (1 - 0.5 - 0.15)
    bmx_sold = 300 * 0.15
    trekking_sold = 300 * 0.5
    mtb_revenue = mtb_sold * mtb_price
    bmx_revenue = bmx_sold * bmx_price
    trekking_revenue = trekking_sold * trekking_price
    total_revenue = mtb_revenue + bmx_revenue + trekking_revenue
    return total_revenue

 Executed result: 131250.0
[EXP] 1088: [success_rate]: False, [answer]: 12, [output]: def solution():
    bales_per_hour = 5
    truck_bales_per_hour = 3
    hours_worked = 6
    total_bales_made = bales_per_hour * hours_worked
    total_bales_picked = truck_bales_per_hour * hours_worked
    total_bales_made_and_picked = total_bales_made + total_bales_picked
    bales_left = 0
    return bales_left

 Executed result: 0
[EXP] 1089: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    minutes_per_period = 40
    periods_per_day = 6 + 2
    minutes_per_day = minutes_per_period * periods_per_day
    days_per_week = 5
    total_minutes_per_week = minutes_per_day * days_per_week
    extra_minutes_per_week = total_minutes_per_week
    for day in ['Saturday', 'Sunday']:
        extra_minutes_per_week += total_minutes_per_week // 16
    total_hours_per_week = extra_minutes_per_week // 60
    return total_hours_per_week

 Executed result: 30
[EXP] 1090: [success_rate]: False, [answer]: 32, [output]: def solution():
    initial_height = 72  # 3 stories * 24 feet per story
    bounce_height = 2 / 3
    second_bounce_height = initial_height * bounce_height
    return second_bounce_height

 Executed result: 48.0
[EXP] 1091: [success_rate]: True, [answer]: 72, [output]: 
def solution():
    child1_height = 6
    child2_height = child1_height * 12 + 2
    child3_height = child2_height - 5
    child4_height = child3_height + 3
    return child4_height

 Executed result: 72
[EXP] 1092: [success_rate]: True, [answer]: 1000, [output]: def solution():
    apples_sold = 2000
    apples_per_bag = 10
    bags_sold = apples_sold // apples_per_bag
    revenue_per_bag = 5
    revenue = bags_sold * revenue_per_bag
    return revenue

 Executed result: 1000
[EXP] 1093: [success_rate]: False, [answer]: 1080, [output]: def solution():
    meat_left_for_raptors = 270
    meat_eaten_by_allosaurs = meat_left_for_raptors
    meat_left_for_raptors = meat_left_for_raptors / 2
    meat_left_for_raptors = meat_left_for_raptors / 2
    initial_meat = meat_left_for_raptors + meat_eaten_by_allosaurs + meat_eaten_by_allosaurs
    return initial_meat

 Executed result: 607.5
[EXP] 1094: [success_rate]: True, [answer]: 144, [output]: def solution():
    north_south_walls = 2 * 10 * 8
    east_west_walls = 2 * 5 * 8
    total_area = north_south_walls + east_west_walls
    gallons_needed = total_area / 20
    cost = gallons_needed * 12
    return cost

 Executed result: 144.0
[EXP] 1095: [success_rate]: True, [answer]: 25, [output]: 
def solution():
    sodas = 12
    shaken_sodas = 3
    unshaken_sodas = sodas - shaken_sodas - 1
    unshaken_taken = 2
    unshaken_left = unshaken_sodas - unshaken_taken
    shaken_sodas_taken = shaken_sodas - 1
    total_sodas_left = unshaken_left + shaken_sodas_taken
    total_sodas = sodas - unshaken_taken - shaken_sodas_taken
    probability = (shaken_sodas_taken / total_sodas) * 100
    return probability

 Executed result: 25.0
[EXP] 1096: [success_rate]: True, [answer]: 270, [output]: def solution():
    speed1 = 60
    speed2 = speed1 / 2
    time = 3
    distance1 = speed1 * time
    distance2 = speed2 * time
    total_distance = distance1 + distance2
    return total_distance

 Executed result: 270.0
[EXP] 1097: [success_rate]: True, [answer]: 240, [output]: 
def solution():
    total_days = 31 + 19  # Total days in March and April
    days_off = int(total_days * 0.2)  # Calculate days off
    total_hours = (total_days - days_off) * 3  # Calculate total hours volunteered
    people_per_hour = 2
    people_helped = total_hours * people_per_hour
    return people_helped

 Executed result: 240
[EXP] 1098: [success_rate]: True, [answer]: 480, [output]: def solution():
    private_cars = 20
    buses = 12
    people_per_bus = 35
    people_per_car = 3
    total_people_in_cars = private_cars * people_per_car
    total_people_in_buses = buses * people_per_bus
    total_people = total_people_in_cars + total_people_in_buses
    return total_people

 Executed result: 480
[EXP] 1099: [success_rate]: False, [answer]: 30, [output]: def solution():
    martha_age = Mike_age - 4
    jeff_age = martha_age + 10
    return jeff_age

 Executed result: None
[EXP] 1100: [success_rate]: True, [answer]: 2, [output]: def solution():
    slide1_length = 300
    slide1_speed = 60
    slide2_length = 240
    slide2_speed = 80
    
    time_taken_slide1 = slide1_length / slide1_speed
    time_taken_slide2 = slide2_length / slide2_speed
    
    difference_in_time = time_taken_slide1 - time_taken_slide2
    
    return difference_in_time

 Executed result: 2.0
[EXP] 1101: [success_rate]: True, [answer]: 5, [output]: def solution():
    lunch_time = 30
    break_time = 15
    total_breaks = 2
    total_days = 5
    
    total_break_time = break_time * total_breaks
    total_break_time_in_hours = total_break_time / 60
    
    total_lunch_time_in_hours = lunch_time / 60
    
    total_time_in_hours = total_lunch_time_in_hours + total_break_time_in_hours
    
    total_time_in_hours_for_five_days = total_time_in_hours * total_days
    
    result = total_time_in_hours_for_five_days
    
    return result

 Executed result: 5.0
[EXP] 1102: [success_rate]: True, [answer]: 16, [output]: def solution():
    total_miles = 52
    amber_miles = 8
    micah_miles = 3.5 * amber_miles
    ahito_miles = total_miles - amber_miles - micah_miles
    return ahito_miles

 Executed result: 16.0
[EXP] 1103: [success_rate]: True, [answer]: 113, [output]: 
def solution():
    initial_charge = 85.00
    returned_item = 15.00
    item1_price = 20.00
    discount1 = 0.20
    item2_price = 30.00
    discount2 = 0.10
    
    new_balance = initial_charge - returned_item
    new_balance += item1_price * (1 - discount1)
    new_balance += item2_price * (1 - discount2)
    
    return round(new_balance, 2)

 Executed result: 113.0
[EXP] 1104: [success_rate]: False, [answer]: 90, [output]: 
def solution():
    large_jellyfish = 1/5
    large_jellyfish_change_color = 1/3
    jellyfish_change_color = 6
    jellyfish = (jellyfish_change_color / (large_jellyfish * large_jellyfish_change_color)) * 1000
    return int(jellyfish)

 Executed result: 90000
[EXP] 1105: [success_rate]: True, [answer]: 24, [output]: def solution():
    chris_age = 4
    ben_age = chris_age * 2
    caroline_age = ben_age * 3
    return caroline_age

 Executed result: 24
[EXP] 1106: [success_rate]: False, [answer]: 40, [output]: 
def solution():
    salary = 100000
    retirement_period = 20
    living_cost = 0.4
    savings_rate = 0.2
    years_saved = 0
    while True:
        years_saved += 1
        savings = salary * savings_rate
        if savings >= (salary * living_cost * retirement_period):
            break
    return years_saved

 Executed result: None
[EXP] 1107: [success_rate]: True, [answer]: 5, [output]: def solution():
    ribbon_length = 100
    cuts = 4
    parts_per_cut = 5
    total_parts = cuts * parts_per_cut
    length_per_part = ribbon_length / total_parts
    return length_per_part

 Executed result: 5.0
[EXP] 1108: [success_rate]: True, [answer]: 360, [output]: def solution():
    boys = 240
    total_students = boys / 0.4
    girls = total_students - boys
    return int(girls)

 Executed result: 360
[EXP] 1109: [success_rate]: True, [answer]: 38, [output]: def solution():
    pots = 19
    soil = 26
    discount = 7
    total_cost = pots + soil
    total_cost -= discount
    result = total_cost
    return result

 Executed result: 38
[EXP] 1110: [success_rate]: True, [answer]: 3, [output]: 
def solution():
    high_heels = 3
    low_heels = 3
    high_height = 4
    low_height = 2
    total_height = high_heels * high_height + low_heels * low_height
    average_height = total_height / (high_heels + low_heels)
    return average_height

 Executed result: 3.0
[EXP] 1111: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    miles_to_hike = 9300
    days_in_june = 30
    miles_per_day = 125 * 2
    miles_left = miles_to_hike - (days_in_june * miles_per_day)
    miles_per_day_left = miles_left / days_in_june
    return miles_per_day_left

 Executed result: 60.0
[EXP] 1112: [success_rate]: True, [answer]: 157, [output]: def solution():
    red_balls = 3
    blue_balls = 11
    green_balls = 25
    red_ball_cost = 9
    blue_ball_cost = 5
    green_ball_cost = 3
    money_received = (red_balls * red_ball_cost) + (blue_balls * blue_ball_cost) + (green_balls * green_ball_cost)
    return money_received

 Executed result: 157
[EXP] 1113: [success_rate]: True, [answer]: 5, [output]: def solution():
    total_apples = 12
    peter_apples = total_apples // 4
    paul_apples = total_apples // 3
    james_apples = total_apples - peter_apples - paul_apples
    return james_apples

 Executed result: 5
[EXP] 1114: [success_rate]: True, [answer]: -3, [output]: def solution():
    initial_temperature = 2
    temperature_dropped = 8
    temperature_increased = 3
    temperature_morning = initial_temperature - temperature_dropped + temperature_increased
    return temperature_morning

 Executed result: -3
[EXP] 1115: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    money_initial = 21
    money_saved = 11
    money_spent_on_comic_book = 5
    money_spent_on_puzzle = 19
    money_spent = money_spent_on_comic_book + money_spent_on_puzzle
    money_left = money_initial + money_saved - money_spent
    result = money_left
    return result

 Executed result: 8
[EXP] 1116: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    budget = 16
    spent = 4
    remaining_budget = budget - spent
    books = 2
    money_per_book = remaining_budget / books
    return money_per_book

 Executed result: 6.0
[EXP] 1117: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    students_last_year = 50
    percentage_increase = 20
    percentage_increase = percentage_increase / 100
    students_this_year = students_last_year * (1 + percentage_increase)
    result = students_this_year
    return result

 Executed result: 60.0
[EXP] 1118: [success_rate]: False, [answer]: 9, [output]: def solution():
    total_blinks = 459
    blinks_per_minute = 255
    time_taken = total_blinks / blinks_per_minute
    return time_taken

 Executed result: 1.8
[EXP] 1119: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    initial_male_guppies = 4
    initial_female_guppies = 7
    initial_male_goldfish = 3
    initial_female_goldfish = 5

    new_male_guppies = 2
    new_female_guppies = 1
    new_male_goldfish = 2
    new_female_goldfish = 3

    total_male_guppies = initial_male_guppies + new_male_guppies
    total_female_guppies = initial_female_guppies + new_female_guppies
    total_male_goldfish = initial_male_goldfish + new_male_goldfish
    total_female_goldfish = initial_female_goldfish + new_female_goldfish

    total_male = total_male_guppies + total_male_goldfish
    total_female = total_female_guppies + total_female_goldfish

    difference = total_female - total_male
    return difference

 Executed result: 5
[EXP] 1120: [success_rate]: True, [answer]: 18, [output]: 
def solution():
    amalia_time = 4
    megan_time = amalia_time + 2
    dior_time = amalia_time + 4
    total_time = amalia_time + megan_time + dior_time
    return total_time

 Executed result: 18
[EXP] 1121: [success_rate]: True, [answer]: 560, [output]: def solution():
    trips_per_month = 2
    drive_time = 2
    speed = 70
    distance_one_way = speed * drive_time
    distance_round_trip = 2 * distance_one_way
    distance_per_month = distance_round_trip * trips_per_month
    return distance_per_month

 Executed result: 560
[EXP] 1122: [success_rate]: True, [answer]: 35, [output]: def solution():
    sofie_miles = 10
    days = 7
    sofie_total = sofie_miles * days
    brian_miles = sofie_total / 2
    return brian_miles

 Executed result: 35.0
[EXP] 1123: [success_rate]: False, [answer]: 18, [output]: 
def solution():
    toys_ordered = 400
    toys_produced = (2 * 6 + 2 * 4) * 10
    toys_left = toys_ordered - toys_produced
    toys_per_hour_fifth_worker = (toys_left * 60) / (10 * 5)
    return toys_per_hour_fifth_worker

 Executed result: 240.0
[EXP] 1124: [success_rate]: True, [answer]: 105, [output]: def solution():
    korys_dog = 60
    elijahs_first_dog = korys_dog / 4
    elijahs_second_dog = korys_dog / 2
    total_weight = elijahs_first_dog + elijahs_second_dog + korys_dog
    return total_weight

 Executed result: 105.0
[EXP] 1125: [success_rate]: False, [answer]: 64, [output]: def solution():
    stickers_set = 0
    stickers_gave = stickers_set // 2
    stickers_luis = stickers_gave // 2
    stickers_kris = stickers_luis - 7
    return stickers_set

 Executed result: 0
[EXP] 1126: [success_rate]: True, [answer]: 90, [output]: def solution():
    large_bag_weight = 10
    large_bag_count = 3
    total_large_bag_weight = large_bag_weight * large_bag_count
    mms_per_ounce = 30
    small_bag_capacity = 10
    total_mms = total_large_bag_weight * mms_per_ounce
    small_bag_count = total_mms // small_bag_capacity
    result = small_bag_count
    return result

 Executed result: 90
[EXP] 1127: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    distance_alfie_flies = 400
    distance_around_earth = 40000
    half_distance_around_earth = distance_around_earth / 2
    days_to_travel_half_distance = half_distance_around_earth / distance_alfie_flies
    result = days_to_travel_half_distance
    return result

 Executed result: 50.0
[EXP] 1128: [success_rate]: True, [answer]: 750, [output]: def solution():
    average_speed = 120
    second_fastest_speed = average_speed * 5
    fastest_speed = second_fastest_speed * 1.25
    return fastest_speed

 Executed result: 750.0
[EXP] 1129: [success_rate]: False, [answer]: 9, [output]: def solution():
    liam_age = 16
    vince_age = (liam_age - 2) / 2
    return vince_age

 Executed result: 7.0
[EXP] 1130: [success_rate]: False, [answer]: 8, [output]: def solution():
    total_eggs = 56
    arnold_madeline_eggs = total_eggs / 2
    camden_sarah_eggs = 30
    camden_eggs = camden_sarah_eggs
    sarah_eggs = camden_sarah_eggs - 12
    camden_eggs_after_subtract = camden_eggs - arnold_madeline_eggs
    result = camden_eggs_after_subtract
    return result

 Executed result: 2.0
[EXP] 1131: [success_rate]: False, [answer]: 25, [output]: def solution():
    crayons = 200
    crayons_per_box = 8
    total_boxes = crayons // crayons_per_box
    total_weight_crayons = crayons
    total_weight_boxes = total_boxes
    total_weight_crayons += total_boxes
    total_weight = total_weight_crayons * 0.125
    return total_weight

 Executed result: 28.125
[EXP] 1132: [success_rate]: False, [answer]: 96, [output]: 
def solution():
    tree_length = 80
    usable_length = int(0.8 * tree_length)
    log_length = 4
    plank_length = 5
    planks_per_log = usable_length // log_length
    total_planks = planks_per_log * usable_length // log_length
    price_per_plank = 1.2
    total_money = total_planks * price_per_plank
    return total_money

 Executed result: 307.2
[EXP] 1133: [success_rate]: False, [answer]: 45000, [output]: 
def solution():
    valerie_salary = 5000
    brother_salary = 2 * valerie_salary
    mother_salary = valerie_salary + brother_salary
    total_salary = 2 * mother_salary
    return total_salary

 Executed result: 30000
[EXP] 1134: [success_rate]: False, [answer]: 50, [output]: 
def solution():
    beach_time = 40
    beach_distance = 2
    sidewalk_distance = 1
    total_distance = beach_distance + sidewalk_distance
    total_time = (beach_time / 60) / beach_distance * beach_distance + (beach_time / 60) * sidewalk_distance / sidewalk_distance
    result = int(total_time)
    return result

 Executed result: 1
[EXP] 1135: [success_rate]: True, [answer]: 7, [output]: 
def solution():
    money_saved = 4
    weeks_saved = 8
    total_money = 60
    money_left = total_money - (money_saved * weeks_saved)
    weeks_needed = money_left / money_saved
    return int(weeks_needed) + 1

 Executed result: 8
[EXP] 1136: [success_rate]: True, [answer]: 32, [output]: def solution():
    tree1 = 3 * 7
    tree2 = 2 * 4
    tree3 = 1 * 3
    total_birds = tree1 + tree2 + tree3
    result = total_birds
    return result

 Executed result: 32
[EXP] 1137: [success_rate]: False, [answer]: 26, [output]: def solution():
    marbles_initial = 0
    marbles_received = 2 * 12
    marbles_after_receipt = marbles_initial + marbles_received
    marbles_lost = 10
    marbles_left = marbles_after_receipt - marbles_lost
    result = marbles_left
    return result

 Executed result: 14
[EXP] 1138: [success_rate]: False, [answer]: 68, [output]: def solution():
    unknown_mug_degrees = 0
    for unknown_degrees in range(40, 100):
        water_transferred = 4
        unknown_water_transferred = 1
        total_degrees = unknown_degrees - water_transferred + unknown_mug_degrees + unknown_water_transferred
        if total_degrees >= 40:
            unknown_mug_degrees = total_degrees
            break
    return unknown_mug_degrees

 Executed result: 40
[EXP] 1139: [success_rate]: True, [answer]: 700, [output]: 
def solution():
    cows_initial = 50
    chickens_initial = 20
    cows_daily = 20
    chickens_daily = 10
    days = 3 * 7
    cows_after_three_weeks = cows_initial + (cows_daily * days)
    chickens_after_three_weeks = chickens_initial + (chickens_daily * days)
    total_animals = cows_after_three_weeks + chickens_after_three_weeks
    return total_animals

 Executed result: 700
[EXP] 1140: [success_rate]: True, [answer]: 1, [output]: 
def solution():
    bagel_cost_per_pack = 10
    bagels_per_pack = 9
    packs_ordered = 4
    discount = 10 / 100
    discount_amount = bagel_cost_per_pack * packs_ordered * discount
    total_cost = bagel_cost_per_pack * packs_ordered - discount_amount
    cost_per_bagel = total_cost / (packs_ordered * bagels_per_pack)
    return cost_per_bagel

 Executed result: 1.0
[EXP] 1141: [success_rate]: False, [answer]: 27, [output]: def solution():
    scoops = 23
    potatoes_per_scoop = 6 - 3
    potatoes_per_scoop_per_scoops = potatoes_per_scoop - 1
    total_potatoes = (scoops - 5) * potatoes_per_scoop_per_scoops
    return total_potatoes

 Executed result: 36
[EXP] 1142: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    eggs_per_day = 0
    total_eggs = 0
    for i in range(30):
        eggs_per_day = 3
        total_eggs += eggs_per_day
    for i in range(30):
        eggs_per_day = 5
        total_eggs += eggs_per_day
    total_eggs_per_dozen = 12
    total_dozen = total_eggs // total_eggs_per_dozen
    return total_dozen

 Executed result: 20
[EXP] 1143: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    green_jellybeans = 17
    red_jellybeans = 2 * green_jellybeans
    total_jellybeans = 60
    blue_jellybeans = total_jellybeans - green_jellybeans - red_jellybeans
    return blue_jellybeans

 Executed result: 9
[EXP] 1144: [success_rate]: True, [answer]: 300, [output]: 
def solution():
    trees = 5
    lemons_per_tree_per_year = 6
    years = 10
    lemons_per_year = trees * lemons_per_tree_per_year
    lemons_in_a_decade = lemons_per_year * years
    result = lemons_in_a_decade
    return result

 Executed result: 300
[EXP] 1145: [success_rate]: False, [answer]: 34, [output]: def solution():
    total_passengers = 84
    ratio_men_to_women = 5/9
    women_on_bus = total_passengers * ratio_men_to_women
    women_left = women_on_bus - 20
    return women_left

 Executed result: 26.66666666666667
[EXP] 1146: [success_rate]: False, [answer]: 291, [output]: 
def solution():
    sunflower_price = 2
    bouquet_price = 8
    bouquet_sunflowers = 12
    daily_sunflowers_sold = (26 + 56) / (sunflower_price + bouquet_price * 1.0)
    total_sunflowers_sold = daily_sunflowers_sold * 3
    result = int(total_sunflowers_sold)
    return result

 Executed result: 24
[EXP] 1147: [success_rate]: True, [answer]: 16, [output]: def solution():
    money_initial = 100
    rocks = money_initial // 5
    money_spent = rocks * 5
    money_made = rocks * 0.6 * 7
    money_lost = money_spent - money_made
    return money_lost

 Executed result: 16.0
[EXP] 1148: [success_rate]: False, [answer]: 22, [output]: def solution():
    large_scenes = 45
    medium_scenes = 36
    small_scenes = 49
    large_per_day = 5
    medium_per_day = 6
    small_per_day = 7

    large_days = large_scenes // large_per_day
    medium_days = medium_scenes // medium_per_day
    small_days = small_scenes // small_per_day

    max_days = max(large_days, medium_days, small_days)
    return max_days

 Executed result: 9
[EXP] 1149: [success_rate]: True, [answer]: 9, [output]: 
def solution():
    eggs_total = 3 * 12
    children = 4
    eggs_per_child = eggs_total // children
    return eggs_per_child

 Executed result: 9
[EXP] 1150: [success_rate]: True, [answer]: 93, [output]: 
def solution():
    fish = 3
    food_cost_per_day = 1
    days_in_may = 31
    total_cost = fish * days_in_may * food_cost_per_day
    return total_cost

 Executed result: 93
[EXP] 1151: [success_rate]: True, [answer]: 21, [output]: def solution():
    roses_initial = 30
    roses_given = 24
    roses_bought = 15
    roses_now = roses_initial - roses_given + roses_bought
    result = roses_now
    return result

 Executed result: 21
[EXP] 1152: [success_rate]: True, [answer]: 50, [output]: def solution():
    total_distance = 110 + 140
    total_hours = 2 + 3
    average_speed = total_distance / total_hours
    return average_speed

 Executed result: 50.0
[EXP] 1153: [success_rate]: True, [answer]: 12, [output]: def solution():
    winning_ticket1 = 0.20
    winning_ticket2 = 0.20 * 3
    winning_tickets = winning_ticket1 * winning_ticket2
    percentage = winning_tickets * 100
    return percentage

 Executed result: 12.000000000000002
[EXP] 1154: [success_rate]: False, [answer]: 20, [output]: def solution():
    carrey_seashells = 0
    carlos_seashells = 0
    jim_seashells = 0
    total_seashells = 0
    equal_division = 0

    carrey_seashells = int(input("How many seashells did Carrey collect? "))
    carlos_seashells = carrey_seashells * 2
    jim_seashells = carlos_seashells + 5

    total_seashells = carrey_seashells + carlos_seashells + jim_seashells
    equal_division = total_seashells // 3

    return equal_division

 Executed result: 1
[EXP] 1155: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    weekdays_carrots = 4
    weekend_carrots = 5
    weekdays = 5
    total_carrots = weekdays * weekdays_carrots + weekend_carrots * 2
    result = total_carrots
    return result

 Executed result: 30
[EXP] 1156: [success_rate]: True, [answer]: 13, [output]: 
def solution():
    song1 = 5
    song2 = 5 + (0.6 * 5)
    total_time = song1 + song2
    return total_time

 Executed result: 13.0
[EXP] 1157: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    device_cost = 20
    profit_per_device = 2 * device_cost - device_cost
    devices_bought = 2 + 4
    total_profit = devices_bought * profit_per_device
    return total_profit

 Executed result: 120
[EXP] 1158: [success_rate]: True, [answer]: 3, [output]: def solution():
    isabel_height = 7
    ned_height = isabel_height - 2
    carl_height = ned_height + 1
    cane_length = carl_height / 2
    return cane_length

 Executed result: 3.0
[EXP] 1159: [success_rate]: False, [answer]: 7300, [output]: 
def solution():
    daily_energy_demand = 2300
    daily_energy_per_person = 1
    daily_energy_needed = daily_energy_demand * daily_energy_per_person
    energy_covered = daily_energy_needed * 0.20
    bottles_per_person = energy_covered / 0.20
    total_bottles_needed = bottles_per_person * daily_energy_demand
    bottles_already_produced = 4200
    bottles_left_to_produce = total_bottles_needed - bottles_already_produced
    return bottles_left_to_produce

 Executed result: 5285800.0
[EXP] 1160: [success_rate]: True, [answer]: 50, [output]: def solution():
    purple_wearers = 3/4 * 8
    blue_wearers = 1/4 * 8
    purple_wearers_with_bow = 1/3 * purple_wearers
    blue_wearers_with_bow = blue_wearers
    total_with_bow = purple_wearers_with_bow + blue_wearers_with_bow
    purple_with_bow = purple_wearers_with_bow
    percentage = (purple_with_bow / total_with_bow) * 100
    return percentage

 Executed result: 50.0
[EXP] 1161: [success_rate]: True, [answer]: 1125, [output]: 
def solution():
    total_reports = 5168
    monday_tuesday_reports = 1907
    thursday_friday_reports = 2136
    wednesday_reports = total_reports - (monday_tuesday_reports + thursday_friday_reports)
    return wednesday_reports

 Executed result: 1125
[EXP] 1162: [success_rate]: False, [answer]: 170, [output]: def solution():
    land_initial = 80
    half_land = land_initial // 2
    money_from_half_land = half_land * 50
    remaining_land = land_initial - half_land
    quarter_land = remaining_land // 4
    money_from_quarter_land = quarter_land * 30
    remaining_land = remaining_land - quarter_land
    money_from_remaining_land = remaining_land * 3
    total_money = money_from_half_land + money_from_quarter_land + money_from_remaining_land
    return total_money

 Executed result: 2390
[EXP] 1163: [success_rate]: True, [answer]: 3, [output]: def solution():
    haley_age = 26
    geb_age = haley_age // 2 - 10
    return geb_age

 Executed result: 3
[EXP] 1164: [success_rate]: False, [answer]: 12, [output]: def solution():
    face_masks_used_per_day = 2
    days = 2
    face_masks_used_in_two_days = face_masks_used_per_day * days
    return face_masks_used_in_two_days

 Executed result: 4
[EXP] 1165: [success_rate]: False, [answer]: 9, [output]: 
def solution():
    eggs_hidden = 3 * 12
    eggs_found = 5 + 2 * 5 + (2 * 5 - 2) + (2 * (2 * 5 - 2)) / 2
    eggs_left = eggs_hidden - eggs_found
    result = eggs_left
    return result

 Executed result: 5.0
[EXP] 1166: [success_rate]: True, [answer]: 1248, [output]: def solution():
    apartments_1 = 200
    apartments_2 = 200
    apartments_3 = (apartments_1 + apartments_2) * 1.6
    total_apartments = apartments_1 + apartments_2 + apartments_3
    collections_per_week = 3
    payment_per_collection = 0.4
    total_money_per_week = total_apartments * collections_per_week * payment_per_collection
    return total_money_per_week

 Executed result: 1248.0
[EXP] 1167: [success_rate]: False, [answer]: 2350, [output]: def solution():
    total_fruits = 0
    total_fruits += 50  # 5-year-old tree
    total_fruits += 50 * 3  # 6-year-old tree
    total_fruits += 50 * 7  # 7-year-old tree
    total_fruits += 200 + 50 * 10  # 8-year-old tree and 10-year-old tree
    return total_fruits

 Executed result: 1250
[EXP] 1168: [success_rate]: True, [answer]: 120, [output]: def solution():
    jack_money = 100
    sophia_money = 100
    given_money = sophia_money / 5
    jack_money += given_money
    result = jack_money
    return result

 Executed result: 120.0
[EXP] 1169: [success_rate]: False, [answer]: 20, [output]: def solution():
    yellow_rope = 37
    blue_rope = yellow_rope + 7
    red_rope = blue_rope * 4
    return red_rope

 Executed result: 176
[EXP] 1170: [success_rate]: True, [answer]: 2, [output]: def solution():
    Ronnie_money = 5
    Rissa_money = 3 * 5
    Ronnie_gives = Ronnie_money / 2
    Rissa_gives = Rissa_money / 2
    Ronnie_left = Ronnie_money - Ronnie_gives
    Rissa_left = Rissa_money - Rissa_gives
    Rissa_left = Rissa_left * 4 / 5
    return Ronnie_left

 Executed result: 2.5
[EXP] 1171: [success_rate]: True, [answer]: 2, [output]: def solution():
    total_paint = 12
    half_yellow = total_paint // 2
    red_white_purple = total_paint - half_yellow
    red = red_white_purple // 3
    return red

 Executed result: 2
[EXP] 1172: [success_rate]: True, [answer]: 3160, [output]: def solution():
    bedrooms = 4
    bedroom_area = 20 * 12
    living_room_area = bedroom_area * 5
    rest_area = 1000
    total_area = bedroom_area * bedrooms + living_room_area + rest_area
    return total_area

 Executed result: 3160
[EXP] 1173: [success_rate]: False, [answer]: 93, [output]: def solution():
    clouds = 3
    for day in range(1, 6):
        clouds *= 2
    return clouds

 Executed result: 96
[EXP] 1174: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    regular_box = 100
    new_box = regular_box * 1.2  # 20% more pods
    cost = 12
    cycles_per_dollar = regular_box / cost
    cycles_per_new_box = new_box / cost
    return cycles_per_new_box

 Executed result: 10.0
[EXP] 1175: [success_rate]: False, [answer]: 240, [output]: 
def solution():
    bills_initial = 1000 / 20
    bills_lost = 10
    bills_remaining = bills_initial - bills_lost
    bills_paid = bills_remaining / 2
    bills_left = bills_remaining - bills_paid
    bills_tripled = bills_left * 3
    bills_five = bills_tripled / 5
    result = int(bills_five)
    return result

 Executed result: 12
[EXP] 1176: [success_rate]: True, [answer]: 16, [output]: def solution():
    team_a_first_half = 4
    team_b_first_half = team_a_first_half - 2
    team_b_second_half = 4 * team_b_first_half
    team_a_second_half = team_b_second_half // 4
    total_a = team_a_first_half + team_a_second_half
    total_b = team_b_first_half + team_b_second_half
    return total_a + total_b

 Executed result: 16
[EXP] 1177: [success_rate]: False, [answer]: 2, [output]: 
def solution():
    chalk_initial = 5
    chalk_used = 0.45 * chalk_initial
    chalk_left = chalk_initial - chalk_used
    while chalk_left > 2:
        chalk_left *= 0.8
        chalk_used = 0.2 * chalk_initial
        chalk_initial = chalk_left - chalk_used
    return chalk_initial // 0.02

 Executed result: 76.0
[EXP] 1178: [success_rate]: True, [answer]: 17, [output]: 
def solution():
    boys = 12
    girls = 12
    boys_on_varsity = boys // 4
    girls_on_varsity = girls // 3
    total_students = boys + girls
    total_on_varsity = boys_on_varsity + girls_on_varsity
    result = total_students - total_on_varsity
    return result

 Executed result: 17
[EXP] 1179: [success_rate]: True, [answer]: 17, [output]: def solution():
    mike_masks = 5
    johnny_masks = 3 * mike_masks + 2
    result = johnny_masks
    return result

 Executed result: 17
[EXP] 1180: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    teeth = 30
    drilled = 4
    capped = drilled + 7
    total_fixed = drilled + capped
    percentage = (total_fixed / teeth) * 100
    return percentage

 Executed result: 50.0
[EXP] 1181: [success_rate]: True, [answer]: 5600, [output]: 
def solution():
    gallons_sold = 4000
    cost_per_gallon = 3.5
    total_cost = gallons_sold * cost_per_gallon
    expired_gallons = int(gallons_sold * 2/5)
    refund = expired_gallons * cost_per_gallon
    return refund

 Executed result: 5600.0
[EXP] 1182: [success_rate]: False, [answer]: 20, [output]: 
def solution():
    wendy_age = 0
    colin_age = 0
    for i in range(1000):
        wendy_age += 1
        colin_age += 1
        if wendy_age == 5 * (colin_age + 7):
            break
    colin_age -= 25
    wendy_age -= 25
    colin_age *= 3
    return colin_age

 Executed result: 2925
[EXP] 1183: [success_rate]: False, [answer]: 1800, [output]: 
def solution():
    total_money = 27000
    money_per_school = total_money // 3
    books_per_school = money_per_school // 500
    return books_per_school

 Executed result: 18
[EXP] 1184: [success_rate]: True, [answer]: 11, [output]: def solution():
    apples_initial = 0
    apples_fell = 2
    apples_picked = 1
    apples_put_back = 5
    apples_picked_again = apples_picked + apples_put_back
    apples_thrown = 1
    apples_fell_again = 6
    apples_picked_again = apples_picked_again + apples_fell_again
    apples_brought_home = apples_picked_again
    result = apples_brought_home
    return result

 Executed result: 12
[EXP] 1185: [success_rate]: True, [answer]: 306, [output]: 
def solution():
    coal_kg = 850
    bag_kg = 50
    cost_per_bag = 18
    num_bags = coal_kg // bag_kg
    remaining_kg = coal_kg % bag_kg
    if remaining_kg > 0:
        num_bags += 1
    cost = num_bags * cost_per_bag
    return cost

 Executed result: 306
[EXP] 1186: [success_rate]: False, [answer]: 6, [output]: def solution():
    cheese_slices = 12
    pepperoni_slices = 8
    friends = 6
    cheese_slices_eaten = friends * 6
    pepperoni_slices_eaten = friends * 4
    cheese_pies = -(-cheese_slices // cheese_slices_eaten)
    pepperoni_pies = -(-pepperoni_slices // pepperoni_slices_eaten)
    total_pies = max(cheese_pies, pepperoni_pies)
    return total_pies

 Executed result: 1
[EXP] 1187: [success_rate]: True, [answer]: 19, [output]: def solution():
    monday = 3
    wednesday = 3
    friday = 3
    tuesday = 5
    thursday = 5
    total = monday + wednesday + friday + tuesday + thursday
    return total

 Executed result: 19
[EXP] 1188: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    snowballs_per_hour = 20
    snowballs_melted_per_15_minutes = 2
    total_snowballs = 0
    time_taken = 0
    while total_snowballs < 60:
        total_snowballs += snowballs_per_hour
        time_taken += 1
        total_snowballs -= snowballs_melted_per_15_minutes
    return time_taken

 Executed result: 4
[EXP] 1189: [success_rate]: True, [answer]: 24, [output]: def solution():
    john_age = 28
    john_age_at_debut = john_age - 20
    jim_age_at_debut = john_age_at_debut // 2
    jim_age = jim_age_at_debut + 20
    result = jim_age
    return result

 Executed result: 24
[EXP] 1190: [success_rate]: True, [answer]: 6, [output]: def solution():
    slices_total = 8
    doxa_slices = 1
    sister_slices = doxa_slices + 1
    brother_slices = sister_slices + 1
    total_slices_eaten = doxa_slices + sister_slices + brother_slices
    result = total_slices_eaten
    return result

 Executed result: 6
[EXP] 1191: [success_rate]: False, [answer]: 19, [output]: def solution():
    bandages_left = 78
    bandages_used_third_day = 50 / 2
    bandages_used_second_day = bandages_used_third_day - 10 + 50
    bandages_used_first_day = bandages_used_second_day - 50 + 38
    result = bandages_left + bandages_used_third_day + bandages_used_second_day + bandages_used_first_day
    return result

 Executed result: 221.0
[EXP] 1192: [success_rate]: True, [answer]: 100, [output]: def solution():
    color_cost = 40
    haircut_cost_per_inch = 30
    original_length = 10
    new_length = 8
    haircut_length = original_length - new_length
    haircut_cost = haircut_length * haircut_cost_per_inch
    total_cost = color_cost + haircut_cost
    result = total_cost
    return result

 Executed result: 100
[EXP] 1193: [success_rate]: True, [answer]: 280, [output]: 
def solution():
    hours_per_day = 7.5
    days_per_week = 6
    weeks_in_april = 4
    hourly_rate = 1.5
    attendance_bonus = 10
    total_hours = hours_per_day * days_per_week * weeks_in_april
    total_earned = total_hours * hourly_rate
    total_earned += attendance_bonus
    return total_earned

 Executed result: 280.0
[EXP] 1194: [success_rate]: True, [answer]: 9, [output]: def solution():
    laundry = 3
    cleaning_room = 1.5
    trash = 0.75
    dishwasher = 0.5
    laundry_amount = laundry
    cleaning_room_amount = cleaning_room
    trash_amount = trash * 2
    dishwasher_amount = dishwasher * 6
    total_earned = laundry_amount + cleaning_room_amount + trash_amount + dishwasher_amount
    result = total_earned
    return result

 Executed result: 9.0
[EXP] 1195: [success_rate]: True, [answer]: 1200, [output]: def solution():
    whale_blood = 40
    shark_blood = whale_blood * 3
    ten_sharks = 10
    total_shark_blood = shark_blood * ten_sharks
    return total_shark_blood

 Executed result: 1200
[EXP] 1196: [success_rate]: True, [answer]: 320, [output]: def solution():
    morning_people = 50
    lunch_people = 40
    more_people = 2 * lunch_people
    evening_people = 3 * morning_people
    total_people = morning_people + lunch_people + more_people + evening_people
    return total_people

 Executed result: 320
[EXP] 1197: [success_rate]: True, [answer]: 75, [output]: def solution():
    red_pens = 5
    black_pens = 2 * red_pens
    total_pens = red_pens + black_pens
    pens_per_pack = 5
    total_packs = red_pens + black_pens
    total_pens = total_packs * pens_per_pack
    return total_pens

 Executed result: 75
[EXP] 1198: [success_rate]: True, [answer]: 2400, [output]: def solution():
    scotch_bottles = 10
    scotch_cost = 600
    scotch_price = scotch_cost / scotch_bottles
    cognac_bottles = 2 * scotch_bottles
    cognac_price = scotch_price * 1.5
    total_scotch_cost = scotch_bottles * scotch_price
    total_cognac_cost = cognac_bottles * cognac_price
    total_cost = total_scotch_cost + total_cognac_cost
    return total_cost

 Executed result: 2400.0
[EXP] 1199: [success_rate]: True, [answer]: 140, [output]: def solution():
    white_oak_trees = 20
    lodgepole_pine_trees = 2 * white_oak_trees
    lodgepole_pine_trees_second_day = lodgepole_pine_trees + lodgepole_pine_trees // 4
    white_oak_trees_second_day = white_oak_trees + 10
    total_trees = white_oak_trees + lodgepole_pine_trees + white_oak_trees_second_day + lodgepole_pine_trees_second_day
    return total_trees

 Executed result: 140
[EXP] 1200: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    root_beer_initial = 24
    root_beer_drunk = 4
    root_beer_spilled = 7
    root_beer_taken = 5
    root_beer_left = root_beer_initial - root_beer_drunk - root_beer_spilled - root_beer_taken
    people = 3
    root_beer_per_person = root_beer_left // people
    return root_beer_per_person

 Executed result: 2
[EXP] 1201: [success_rate]: True, [answer]: 8, [output]: def solution():
    coffee_mugs = 0
    equation = 40
    equation -= 8
    equation /= 4
    coffee_mugs = equation
    return coffee_mugs

 Executed result: 8.0
[EXP] 1202: [success_rate]: True, [answer]: 42, [output]: 
def solution():
    fish_initial = 66
    fish_with_red_stripes = fish_initial // 3
    remaining_fish = fish_initial - fish_with_red_stripes
    fish_with_blue_stripes = remaining_fish * 5 // 11
    total_fish_with_stripes = fish_with_red_stripes + fish_with_blue_stripes
    return total_fish_with_stripes

 Executed result: 42
[EXP] 1203: [success_rate]: True, [answer]: 19, [output]: def solution():
    eyeshadow_palettes = 2
    colors_per_palette = 4
    makeup_sets = 3
    colors_per_set = 6
    total_colors = eyeshadow_palettes * colors_per_palette + makeup_sets * colors_per_set
    palette_stolen = 1
    colors_used = colors_per_set // 2
    total_colors -= palette_stolen * colors_per_palette
    total_colors -= colors_used
    result = total_colors
    return result

 Executed result: 19
[EXP] 1204: [success_rate]: True, [answer]: 240, [output]: def solution():
    mattison_height = 60
    house_height = mattison_height * 7
    first_floor_height = mattison_height * 3
    second_floor_height = house_height - first_floor_height
    roof_height = second_floor_height
    return roof_height

 Executed result: 240
[EXP] 1205: [success_rate]: True, [answer]: 168, [output]: 
def solution():
    total_shells = 700
    shells_by_alphas = 0.4 * total_shells
    shells_by_finders = 0.6 * (total_shells - shells_by_alphas)
    shells_by_gogetters = total_shells - shells_by_alphas - shells_by_finders
    return shells_by_gogetters

 Executed result: 168.0
[EXP] 1206: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    total_miles = 1 + 4 + 3
    average_miles = 3
    total_dogs = 4
    miles_left = total_miles - (total_dogs - 1) * average_miles
    return miles_left

 Executed result: -1
[EXP] 1207: [success_rate]: False, [answer]: 40,000, [output]: def solution():
    house_value = 250000
    loan = house_value * 0.4
    amount_used = loan * 0.6
    money_left = loan - amount_used
    return money_left

 Executed result: 40000.0
[EXP] 1208: [success_rate]: True, [answer]: 64, [output]: def solution():
    tunas = 3
    tuna1 = 56
    tuna2 = 46
    tuna3 = 26
    total_weight = tuna1 + tuna2 + tuna3
    total_cost_per_kg = 0.50
    total_earn = total_weight * total_cost_per_kg
    return total_earn

 Executed result: 64.0
[EXP] 1209: [success_rate]: True, [answer]: 27, [output]: def solution():
    magazines_cost = 72
    selling_price = 11/8 * magazines_cost
    profit = selling_price - magazines_cost
    return profit

 Executed result: 27.0
[EXP] 1210: [success_rate]: True, [answer]: 29, [output]: def solution():
    low_setting = 1
    medium_setting = 2 * low_setting
    high_setting = 2 * medium_setting
    days_low = 3
    days_medium = 3
    days_high = 5
    water_removed_low = low_setting * days_low
    water_removed_medium = medium_setting * days_medium
    water_removed_high = high_setting * days_high
    total_water_removed = water_removed_low + water_removed_medium + water_removed_high
    return total_water_removed

 Executed result: 29
[EXP] 1211: [success_rate]: True, [answer]: 288, [output]: def solution():
    packs = 10
    balloons_per_pack = 30
    initial_balloons = packs * balloons_per_pack
    balloons_left = 12
    balloons_thrown = initial_balloons - balloons_left
    return balloons_thrown

 Executed result: 288
[EXP] 1212: [success_rate]: True, [answer]: 448, [output]: def solution():
    medicine1 = 14
    medicine2 = 3 * medicine1
    total_medicine1 = medicine1
    total_medicine2 = medicine2
    for i in range(7):
        total_medicine1 += medicine1
        total_medicine2 += medicine2
    total_medicine = total_medicine1 + total_medicine2
    return total_medicine

 Executed result: 448
[EXP] 1213: [success_rate]: True, [answer]: 150, [output]: def solution():
    capacity_alis_class = 120
    capacity_johns_classes = 2 * (capacity_alis_class / 8)
    combined_capacity = capacity_alis_class + capacity_johns_classes
    return combined_capacity

 Executed result: 150.0
[EXP] 1214: [success_rate]: False, [answer]: 31, [output]: def solution():
    initial_debt = 300
    interest_rate = 2
    interest = (initial_debt * interest_rate) / 100
    total_debt = initial_debt + interest
    monthly_payment = 25
    months = 11
    total_paid = months * monthly_payment
    remaining_debt = total_debt - total_paid
    final_payment = remaining_debt + interest
    return final_payment

 Executed result: 37.0
[EXP] 1215: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    children = 2
    diaper_changes_per_child = 5
    wife_changes_half = 1 / 2
    total_diaper_changes = children * diaper_changes_per_child
    jordan_changes = total_diaper_changes - total_diaper_changes * wife_changes_half
    result = jordan_changes
    return int(result)

 Executed result: 5
[EXP] 1216: [success_rate]: False, [answer]: 36, [output]: 
def solution():
    jar_length = 15
    jar_width = 6
    jar_height = 6
    jelly_bean_size = 0.15
    efficiency = 0.8
    red_jelly_bean_ratio = 0.3
    true_red_jelly_bean_count = 900
    
    jar_volume = jar_length * jar_width * jar_height
    jelly_bean_volume = jar_volume * efficiency
    total_jelly_bean_count = jelly_bean_volume / jelly_bean_size
    true_red_jelly_bean_count_actual = total_jelly_bean_count * red_jelly_bean_ratio
    
    tim_guess = (true_red_jelly_bean_count / red_jelly_bean_ratio)
    distance_from_true = abs(tim_guess - true_red_jelly_bean_count)
    
    return distance_from_true

 Executed result: 2100.0
[EXP] 1217: [success_rate]: True, [answer]: 20, [output]: def solution():
    bus_capacity = 200
    initial_passengers = 20
    first_stop_passengers = 40
    second_stop_passengers = int(3/4 * 40)
    total_passengers = initial_passengers + first_stop_passengers + second_stop_passengers
    total_passengers *= 2
    remaining_spaces = bus_capacity - total_passengers
    return remaining_spaces

 Executed result: 20
[EXP] 1218: [success_rate]: False, [answer]: 75, [output]: def solution():
    visits_per_year = 3
    years = 5 + 3
    initial_visit_cost = 2
    increased_visit_cost = initial_visit_cost * 2.5  # 150% increase
    total_visits = visits_per_year * years
    cost_per_visit = total_visits * initial_visit_cost
    cost_per_visit_after_increase = total_visits * increased_visit_cost
    total_cost = cost_per_visit + cost_per_visit_after_increase
    return total_cost

 Executed result: 168.0
[EXP] 1219: [success_rate]: False, [answer]: 225, [output]: 
def solution():
    students_per_grade = 10
    students_in_total = 7 * students_per_grade
    groups = 8
    minutes_per_group = 45
    total_minutes = 0
    for i in range(students_in_total // groups):
        total_minutes += minutes_per_group
    if students_in_total % groups != 0:
        total_minutes += minutes_per_group
    return total_minutes

 Executed result: 405
[EXP] 1220: [success_rate]: True, [answer]: 100, [output]: 
def solution():
    tables = 4
    table_cost = 20
    frames = 2
    frame_cost = 10
    total_cost = (tables * table_cost) + (frames * frame_cost)
    return total_cost

 Executed result: 100
[EXP] 1221: [success_rate]: False, [answer]: 32, [output]: def solution():
    board_length = 40
    cut_length = board_length / 2
    longer_piece = cut_length * 4
    shorter_piece = cut_length
    return longer_piece

 Executed result: 80.0
[EXP] 1222: [success_rate]: True, [answer]: 10, [output]: 
def solution():
    meatballs_needed = 80
    meatballs_per_pound = 16
    pounds_of_meat = meatballs_needed / meatballs_per_pound
    seasoning_per_pound = 2
    total_seasoning = pounds_of_meat * seasoning_per_pound
    return total_seasoning

 Executed result: 10.0
[EXP] 1223: [success_rate]: True, [answer]: 350, [output]: 
def solution():
    windows = 5
    window_width = 35
    total_width = windows * window_width
    fabric_needed = total_width * 2
    return fabric_needed

 Executed result: 350
[EXP] 1224: [success_rate]: True, [answer]: 8, [output]: def solution():
    minutes = 16
    minutes_after_change = 36 - minutes
    rate1 = 0.25
    rate2 = 0.2
    cost = rate1 * minutes + rate2 * minutes_after_change
    return cost

 Executed result: 8.0
[EXP] 1225: [success_rate]: True, [answer]: 5, [output]: 
def solution():
    rain_monday = 2
    rain_tuesday = 2 * rain_monday + 1
    return rain_tuesday

 Executed result: 5
[EXP] 1226: [success_rate]: False, [answer]: 3, [output]: 
def solution():
    cupcakes = 0
    brownies = 3 * cupcakes - 2
    total_treats = cupcakes + brownies
    treats_per_person = 2
    people = 5
    treats_needed = treats_per_person * people
    if total_treats >= treats_needed:
        return cupcakes
    else:
        return "Not enough treats"

 Executed result: Not enough treats
[EXP] 1227: [success_rate]: True, [answer]: 90, [output]: def solution():
    manicure = 35
    pedicure = 40
    discount = (manicure + pedicure) * 0.2
    total_cost = manicure + pedicure - discount
    nail_art = 3 * 10  # 10 nails
    total_cost += nail_art
    result = total_cost
    return result

 Executed result: 90.0
[EXP] 1228: [success_rate]: True, [answer]: 66, [output]: def solution():
    magazine1 = 3
    magazine2 = 1
    magazine3 = 1
    issues_per_year = magazine1 * 12 + magazine2 * 6 + magazine3 * (6 * 4)
    return issues_per_year

 Executed result: 66
[EXP] 1229: [success_rate]: True, [answer]: 31, [output]: def solution():
    samantha_paintings = 27
    shelley_paintings = samantha_paintings + 12
    kim_paintings = shelley_paintings - 8
    result = kim_paintings
    return result

 Executed result: 31
[EXP] 1230: [success_rate]: True, [answer]: 36, [output]: def solution():
    initial_price = 40
    increase = initial_price * 0.8
    price_after_increase = initial_price + increase
    decrease = price_after_increase * 0.5
    price_after_decrease = price_after_increase - decrease
    return price_after_decrease

 Executed result: 36.0
[EXP] 1231: [success_rate]: True, [answer]: 440, [output]: def solution():
    standard_rate = 80
    reduced_rate = standard_rate * (1 - 0.25)
    standard_lessons = 4
    reduced_lessons = 2
    total_standard_earnings = standard_lessons * standard_rate
    total_reduced_earnings = reduced_lessons * reduced_rate
    total_earnings = total_standard_earnings + total_reduced_earnings
    return total_earnings

 Executed result: 440.0
[EXP] 1232: [success_rate]: True, [answer]: 70, [output]: 
def solution():
    scores = [50, 80, 80, 60, 40, 90, 100, 70, 60]
    mean = sum(scores) / len(scores)
    return mean

 Executed result: 70.0
[EXP] 1233: [success_rate]: True, [answer]: 15, [output]: def solution():
    pomelos_initial = 20
    pomelos_left = pomelos_initial / 4
    pomelos_given = pomelos_initial - pomelos_left
    return pomelos_given

 Executed result: 15.0
[EXP] 1234: [success_rate]: True, [answer]: 81, [output]: 
def solution():
    apples = 60
    eaten_apples = int(apples * 2/5)
    remaining_apples = apples - eaten_apples
    given_apples = int(remaining_apples * 0.25)
    remaining_apples = remaining_apples - given_apples
    money_received = remaining_apples * 3
    return money_received

 Executed result: 81
[EXP] 1235: [success_rate]: True, [answer]: 12, [output]: def solution():
    novels_last_year = 9
    novels_this_year = novels_last_year * 4 / 3
    result = int(novels_this_year)
    return result

 Executed result: 12
[EXP] 1236: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    distance_alaska_texas = 6000
    speed = 50
    time = 3 * 24 * 60 * 60  # 3 days, 24 hours, 60 minutes, 60 seconds
    distance_covered = speed * time / 3600  # convert speed from km/hr to km/s
    percentage_covered = (distance_covered / distance_alaska_texas) * 100
    return percentage_covered

 Executed result: 60.0
[EXP] 1237: [success_rate]: False, [answer]: 84, [output]: 
def solution():
    grapes_madeline = 6
    grapes_brother = 5 * grapes_madeline
    grapes_total = grapes_madeline + grapes_brother
    pies = (grapes_total - grapes_madeline - grapes_brother) // 12
    grapes_initial = grapes_madeline + grapes_brother + pies * 12
    return grapes_initial

 Executed result: 36
[EXP] 1238: [success_rate]: True, [answer]: 78, [output]: def solution():
    teachers_total = 82
    teachers_sick = 13
    substitute_teachers = 9
    teachers_at_school = teachers_total - teachers_sick + substitute_teachers
    return teachers_at_school

 Executed result: 78
[EXP] 1239: [success_rate]: True, [answer]: 520, [output]: def solution():
    pasta_cost = 1
    cheddar_cost = 3
    gruyere_cost = 2 * cheddar_cost
    total_cost_per_week = pasta_cost + cheddar_cost + gruyere_cost
    total_cost_per_year = total_cost_per_week * 52
    return total_cost_per_year

 Executed result: 520
[EXP] 1240: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    classrooms = 80
    days = 5
    minutes_per_classroom = 15
    minutes_per_day = 8 * 60
    total_minutes = minutes_per_classroom * classrooms
    total_minutes_per_day = total_minutes / days
    percentage = (total_minutes_per_day / minutes_per_day) * 100
    return percentage

 Executed result: 50.0
[EXP] 1241: [success_rate]: True, [answer]: 2, [output]: def solution():
    books = 110
    bottom_shelf = 10 * 2
    middle_shelf = 10
    top_shelf = bottom_shelf - 5
    total_shelf_capacity = bottom_shelf + middle_shelf * 2 + top_shelf
    bookcases_needed = -(-books // total_shelf_capacity)  # This is equivalent to math.ceil(books / total_shelf_capacity)
    return bookcases_needed

 Executed result: 2
[EXP] 1242: [success_rate]: False, [answer]: 8, [output]: def solution():
    eggs_bought = 5 * 12  # 5 dozens of eggs = 60 eggs
    cost = eggs_bought * 2.4
    eggs_sold = 60 // 3  # 60 eggs / 3 eggs per dollar = 20 dollars
    revenue = eggs_sold * 1
    profit = revenue - cost
    return profit

 Executed result: -124.0
[EXP] 1243: [success_rate]: True, [answer]: 20, [output]: 
def solution():
    total_hats = 100
    red_hats = total_hats // 2
    remaining_hats = total_hats - red_hats
    blue_hats = remaining_hats * 3 // 5
    white_hats = remaining_hats - blue_hats
    result = white_hats
    return result

 Executed result: 20
[EXP] 1244: [success_rate]: True, [answer]: 50, [output]: 
def solution():
    bag_cost = 18
    discount = 3
    bag_price = bag_cost - discount
    sticks_per_bag = 30
    cost_per_stick = (bag_price / sticks_per_bag) * 100
    return cost_per_stick

 Executed result: 50.0
[EXP] 1245: [success_rate]: False, [answer]: 35, [output]: def solution():
    test1 = 70
    test1_correct = test1 * 0.6
    test2 = 40
    total_needed = test1 * 0.7
    total_correct = test1_correct
    needed_on_test2 = total_needed - total_correct
    return needed_on_test2

 Executed result: 7.0
[EXP] 1246: [success_rate]: False, [answer]: 96, [output]: 
def solution():
    strawberry_cubes = 0
    blueberry_cubes = 0
    total_cubes = 116
    strawberry_cubes = (total_cubes - blueberry_cubes) // (5 - 4)
    blueberry_cubes = 5 * strawberry_cubes - 4
    return blueberry_cubes

 Executed result: 576
[EXP] 1247: [success_rate]: True, [answer]: 3360, [output]: def solution():
    games_per_year = 40
    years = 4
    points_per_game = 21
    total_points = games_per_year * years * points_per_game
    return total_points

 Executed result: 3360
[EXP] 1248: [success_rate]: True, [answer]: 7, [output]: def solution():
    marbles_initial = 10
    marbles_lost = marbles_initial // 2
    marbles_found = 3
    marbles_found_after_inspection = marbles_found - 1
    result = marbles_initial - marbles_lost + marbles_found_after_inspection
    return result

 Executed result: 7
[EXP] 1249: [success_rate]: True, [answer]: 750, [output]: 
def solution():
    cars_to_sell = 15
    customers_per_calls = 1
    customers_to_buy = 1/2
    calls_needed = cars_to_sell / (customers_per_calls * customers_to_buy)
    return int(calls_needed * 25)

 Executed result: 750
[EXP] 1250: [success_rate]: False, [answer]: 56, [output]: 
def solution():
    rooms = 8
    people = 4
    flashlights_per_person = 1
    flashlights_per_room = 2
    small_candles_per_room = 4
    medium_candles_per_room = 5
    half_rooms = rooms // 2
    total_candles = (half_rooms * small_candles_per_room) + (rooms - half_rooms * 2) * medium_candles_per_room
    total_flashlights = people * flashlights_per_person + rooms * flashlights_per_room
    result = total_candles + total_flashlights
    return result

 Executed result: 36
[EXP] 1251: [success_rate]: True, [answer]: 22, [output]: def solution():
    chips_initial = 55 * 2
    family_members = 5
    chips_per_person = chips_initial / family_members
    result = chips_per_person
    return result

 Executed result: 22.0
[EXP] 1252: [success_rate]: True, [answer]: 30, [output]: def solution():
    time_first_side = 5
    time_second_third = 2 * time_first_side
    time_last_two = time_first_side / 2
    total_time = time_first_side + time_second_third + time_second_third + time_last_two + time_last_two
    return total_time

 Executed result: 30.0
[EXP] 1253: [success_rate]: True, [answer]: 70, [output]: def solution():
    helmets = 20
    footballs = 2 * helmets
    robots = helmets / 2
    total_items = helmets + footballs + robots
    return total_items

 Executed result: 70.0
[EXP] 1254: [success_rate]: True, [answer]: 120, [output]: def solution():
    time_per_call = 15
    time_per_day = 6 * 60
    calls_per_day = time_per_day / time_per_call
    calls_per_week = calls_per_day * 5
    result = int(calls_per_week)
    return result

 Executed result: 120
[EXP] 1255: [success_rate]: True, [answer]: 30, [output]: 
def solution():
    old_time = 7
    new_time = 12
    paintings = 6
    old_total_time = old_time * paintings
    new_total_time = new_time * paintings
    difference = new_total_time - old_total_time
    return difference

 Executed result: 30
[EXP] 1256: [success_rate]: True, [answer]: 12, [output]: 
def solution():
    plants = 20
    plants_half_cup = 4
    plants_one_cup = 8
    plants_quarter_cup = plants - plants_half_cup - plants_one_cup
    total_cups_half_cup = plants_half_cup * 0.5
    total_cups_one_cup = plants_one_cup
    total_cups_quarter_cup = plants_quarter_cup * 0.25
    total_cups = total_cups_half_cup + total_cups_one_cup + total_cups_quarter_cup
    return total_cups

 Executed result: 12.0
[EXP] 1257: [success_rate]: True, [answer]: 15, [output]: 
def solution():
    distance = 200
    land_distance = distance / 2
    water_distance = distance - land_distance
    land_time = land_distance / 20
    water_time = water_distance / 10
    total_time = land_time + water_time
    return total_time

 Executed result: 15.0
[EXP] 1258: [success_rate]: True, [answer]: 14, [output]: def solution():
    popsicle_sticks_needed = 56
    popsicles_per_box = 8
    cost_per_box = 2
    boxes_needed = popsicle_sticks_needed // popsicles_per_box
    extra_sticks = popsicle_sticks_needed % popsicles_per_box
    if extra_sticks > 0:
        boxes_needed += 1
    total_cost = boxes_needed * cost_per_box
    return total_cost

 Executed result: 14
[EXP] 1259: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    main_phone = 20
    additional_phone = main_phone / 2
    total_cost = main_phone + (5 - 1) * additional_phone
    return total_cost

 Executed result: 60.0
[EXP] 1260: [success_rate]: False, [answer]: 7200, [output]: def solution():
    doughnuts_per_day = 12
    days_in_june = 30
    doughnuts_per_june = doughnuts_per_day * days_in_june
    doughnuts_sold_per_june = doughnuts_per_june
    price_per_doughnut = 2
    total_revenue = doughnuts_sold_per_june * price_per_doughnut
    return total_revenue

 Executed result: 720
[EXP] 1261: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    photos_uploaded_per_batch = 7
    photos_uploaded_per_day = 6
    total_photos = 210
    days_needed = total_photos // photos_uploaded_per_day
    remaining_photos = total_photos % photos_uploaded_per_day
    if remaining_photos > 0:
        days_needed += 1
    return days_needed

 Executed result: 35
[EXP] 1262: [success_rate]: True, [answer]: 235, [output]: 
def solution():
    blouses = 5
    blouse_cost = 5
    pants = 2
    pant_cost = 8
    skirt = 1
    skirt_cost = 6
    total_cost = (blouses * blouse_cost) + (pants * pant_cost) + (skirt * skirt_cost)
    five_weeks_cost = total_cost * 5
    return five_weeks_cost

 Executed result: 235
[EXP] 1263: [success_rate]: True, [answer]: 12, [output]: def solution():
    words_per_minute = 150
    speed_up = 2.5
    words_per_minute_after_training = words_per_minute * speed_up
    words_per_page = 450
    pages = 10
    total_words = pages * words_per_page
    time_minutes = total_words / words_per_minute_after_training
    return time_minutes

 Executed result: 12.0
[EXP] 1264: [success_rate]: True, [answer]: 500, [output]: def solution():
    people_on_first_day = 50
    people_on_second_day = people_on_first_day + 20
    people_on_third_day = people_on_second_day * 2
    people_rest_of_week = 60 * 4
    total_people = people_on_first_day + people_on_second_day + people_on_third_day + people_rest_of_week
    return total_people

 Executed result: 500
[EXP] 1265: [success_rate]: True, [answer]: 210, [output]: def solution():
    total_popped = 0
    popped_in_first_30 = 20
    total_popped += popped_in_first_30
    popped_in_next_30 = popped_in_first_30 * 3
    total_popped += popped_in_next_30
    popped_in_next_30 = popped_in_first_30 * 4
    total_popped += popped_in_next_30
    popped_in_final_30 = popped_in_next_30 * 0.5
    total_popped += popped_in_final_30
    popped_from_residual_heat = popped_in_final_30 * 0.25
    total_popped += popped_from_residual_heat
    result = total_popped
    return result

 Executed result: 210.0
[EXP] 1266: [success_rate]: False, [answer]: 36, [output]: 
def solution():
    juice_per_lemon = 1 / 6
    gallons = 5
    juice_per_gallon = 1
    juice_per_tart_gallon = 2
    total_juice = (gallons * juice_per_gallon) + (1 * juice_per_tart_gallon)
    total_juice_needed = total_juice * 1
    lemons_needed = int(total_juice_needed / juice_per_lemon)
    return lemons_needed

 Executed result: 42
[EXP] 1267: [success_rate]: True, [answer]: 147, [output]: def solution():
    german_shepherds = 3
    bulldogs = 2
    german_shepherd_consumption = 5
    bulldog_consumption = 3
    total_consumption = german_shepherds * german_shepherd_consumption + bulldogs * bulldog_consumption
    days = 7
    total_food_needed = total_consumption * days
    return total_food_needed

 Executed result: 147
[EXP] 1268: [success_rate]: False, [answer]: 40, [output]: def solution():
    two_legged_animals = 10
    four_legged_animals = 15
    total_legs_two_legged = two_legged_animals * 2
    total_legs_four_legged = four_legged_animals * 4
    total_legs = total_leggs_two_legged + total_leggs_four_legged
    return total_legs

 Executed result: None
[EXP] 1269: [success_rate]: True, [answer]: 20, [output]: def solution():
    blue_blocks = 4
    yellow_blocks = blue_blocks * 2
    total_blocks = blue_blocks + yellow_blocks
    red_blocks = 32 - total_blocks
    return red_blocks

 Executed result: 20
[EXP] 1270: [success_rate]: False, [answer]: 54, [output]: def solution():
    distance_west = 5 * 18
    distance_east = 8 * 18
    total_distance = distance_west + distance_east
    return total_distance

 Executed result: 234
[EXP] 1271: [success_rate]: True, [answer]: 3528, [output]: def solution():
    boat_price = 9000
    boat_price_after_first_year = boat_price - (boat_price * 0.3)
    boat_price_after_second_year = boat_price_after_first_year - (boat_price_after_first_year * 0.3)
    boat_price_after_third_year = boat_price_after_second_year - (boat_price_after_second_year * 0.2)
    result = boat_price_after_third_year
    return result

 Executed result: 3528.0
[EXP] 1272: [success_rate]: True, [answer]: 43, [output]: def solution():
    total_candies = 232
    red_candies = 54
    orange_candies = red_candies * 2
    yellow_candies = red_candies // 2
    pink_candies = total_candies - red_candies - orange_candies - yellow_candies
    return pink_candies

 Executed result: 43
[EXP] 1273: [success_rate]: True, [answer]: 296, [output]: 
def solution():
    hotel_cost = 80
    bus_cost = hotel_cost * 0.10
    hotel_nights = 3
    bus_trips = 7
    total_hotel_cost = hotel_cost * hotel_nights
    total_bus_cost = bus_cost * bus_trips
    total_cost = total_hotel_cost + total_bus_cost
    return total_cost

 Executed result: 296.0
[EXP] 1274: [success_rate]: True, [answer]: 27, [output]: 
def solution():
    total_marbles = 52
    marbles_given = total_marbles
    marbles_dallas = 21 + 4
    marbles_darla = marbles_given - marbles_dallas
    return marbles_darla

 Executed result: 27
[EXP] 1275: [success_rate]: True, [answer]: 38, [output]: 
def solution():
    adult_ticket = 12
    child_ticket = 8
    total_tickets = adult_ticket * 2 + child_ticket
    popcorn_cost = 2 * 3
    total_cost = total_tickets + popcorn_cost
    result = total_cost
    return result

 Executed result: 38
[EXP] 1276: [success_rate]: True, [answer]: 16, [output]: def solution():
    car_weight = 1200
    luggage_weight = 250
    children_weight = 2 * 75
    total_weight = car_weight + luggage_weight + children_weight
    total_force = 0.01 * total_weight
    return total_force

 Executed result: 16.0
[EXP] 1277: [success_rate]: True, [answer]: 70, [output]: def solution():
    length = 20
    width = 15
    perimeter = 2 * (length + width)
    result = perimeter
    return result

 Executed result: 70
[EXP] 1278: [success_rate]: True, [answer]: 48, [output]: def solution():
    mia_age = 40
    emma_age = mia_age + 16
    average_age = (mia_age + emma_age) / 2
    return average_age

 Executed result: 48.0
[EXP] 1279: [success_rate]: True, [answer]: 665, [output]: def solution():
    seashells_tom = 214
    seashells_nancy = 432
    seashells_benny = 86
    total_seashells = seashells_tom + seashells_nancy + seashells_benny
    cracked_seashells = 67
    good_seashells = total_seashells - cracked_seashells
    return good_seashells

 Executed result: 665
[EXP] 1280: [success_rate]: True, [answer]: 180, [output]: 
def solution():
    dinner_plates = 12
    dinner_plate_cost = 6
    bowl_cost = 5
    salad_plate_cost = 4
    total_cost = dinner_plates * dinner_plate_cost + dinner_plates * bowl_cost + dinner_plates * salad_plate_cost
    result = total_cost
    return result

 Executed result: 180
[EXP] 1281: [success_rate]: False, [answer]: 7, [output]: def solution():
    steve_time = 10
    anna_time = steve_time + 2 + steve_time//2
    return anna_time

 Executed result: 17
[EXP] 1282: [success_rate]: True, [answer]: 20, [output]: def solution():
    feed_ordered = 300
    pigs = 5
    feed_per_pig_per_day = 4
    feed_per_pig_per_day_times_two = 2 * feed_per_pig_per_day
    feed_per_pig_per_week = feed_per_pig_per_day_times_two * 7
    total_feed_per_week = pigs * feed_per_pig_per_week
    feed_left = feed_ordered - total_feed_per_week
    return feed_left

 Executed result: 20
[EXP] 1283: [success_rate]: False, [answer]: 12, [output]: def solution():
    guests = 20
    hot_dogs_per_guest = 2
    hot_dogs_initial = 4
    total_hot_dogs_needed = guests * hot_dogs_per_guest
    total_hot_dogs_needed = total_hot_dogs_needed + hot_dogs_initial
    hot_dogs_per_pack = 6
    number_of_packs = -(-total_hot_dogs_needed // hot_dogs_per_pack)  # ceiling division
    cost_per_pack = 2
    total_cost = number_of_packs * cost_per_pack
    return total_cost

 Executed result: 16
[EXP] 1284: [success_rate]: True, [answer]: 60, [output]: def solution():
    money_initial = 0  # initialize with an initial amount of money
    cupcakes_sold = 20
    cupcakes_price = 2
    money_cupcakes = cupcakes_sold * cupcakes_price
    cookies_sold = 40
    cookies_price = 1
    money_cookies = cookies_sold * cookies_price
    total_money = money_cupcakes + money_cookies
    trays_bought = 5
    trays_cost = 4
    money_spent = trays_cost * trays_bought
    money_left = total_money - money_spent
    return money_left

 Executed result: 60
[EXP] 1285: [success_rate]: True, [answer]: 25, [output]: def solution():
    children = 5
    children += children
    children += 2 * children
    children -= 5
    return children

 Executed result: 25
[EXP] 1286: [success_rate]: True, [answer]: 1218, [output]: 
def solution():
    meals_initial = 1360
    meals_given = 64 + 30 + 48
    meals_left = meals_initial - meals_given
    result = meals_left
    return result

 Executed result: 1218
[EXP] 1287: [success_rate]: True, [answer]: 105, [output]: def solution():
    quarter = 25
    nickels = 2
    dime = 7
    quarter_cents = quarter
    nickels_cents = nickels * 5
    dime_cents = dime * 10
    total_cents = quarter_cents + nickels_cents + dime_cents
    result = total_cents
    return result

 Executed result: 105
[EXP] 1288: [success_rate]: True, [answer]: 84, [output]: def solution():
    total_age = 0
    sisters_age = 16 * 3
    younger_brother_age = 12
    older_brother_age = younger_brother_age * 2
    total_age = sisters_age + younger_brother_age + older_brother_age
    return total_age

 Executed result: 84
[EXP] 1289: [success_rate]: False, [answer]: 34, [output]: 
def solution():
    meditation_per_day = 2 * 15
    yoga_per_day = 60
    days_per_week = 5
    weeks = 4
    total_days = weeks * days_per_week
    total_meditation = meditation_per_day * total_days
    total_yoga = yoga_per_day * days_per_week * weeks
    total_practice = total_meditation + total_yoga
    result = total_practice
    return result

 Executed result: 1800
[EXP] 1290: [success_rate]: True, [answer]: 101, [output]: 
def solution():
    small_tshirts = 11
    medium_tshirts = 8
    large_tshirts = 6
    small_square_feet = small_tshirts * 3
    medium_square_feet = medium_tshirts * 4
    large_square_feet = large_tshirts * 6
    total_square_feet = small_square_feet + medium_square_feet + large_square_feet
    result = total_square_feet
    return result

 Executed result: 101
[EXP] 1291: [success_rate]: True, [answer]: 90, [output]: 
def solution():
    small_sunflower_seeds = 3 * 12
    large_sunflower_seeds = small_sunflower_seeds + (small_sunflower_seeds * 0.5)
    total_seeds = small_sunflower_seeds + large_sunflower_seeds
    return total_seeds

 Executed result: 90.0
[EXP] 1292: [success_rate]: True, [answer]: 27, [output]: def solution():
    george_pens = 18
    timothy_pens = george_pens * 3
    sarah_pens = timothy_pens // 2
    result = sarah_pens
    return result

 Executed result: 27
[EXP] 1293: [success_rate]: True, [answer]: 67, [output]: def solution():
    albert_height = 36
    anne_height = albert_height * 2
    jackie_height_after_summer = anne_height - 2
    jackie_height_before_summer = jackie_height_after_summer - 3
    result = jackie_height_before_summer
    return result

 Executed result: 67
[EXP] 1294: [success_rate]: True, [answer]: 140000, [output]: def solution():
    bars_per_day = 5000
    days_per_week = 7
    weeks = 2
    total_bars = bars_per_day * days_per_week * weeks
    price_per_bar = 2
    total_money = total_bars * price_per_bar
    return total_money

 Executed result: 140000
[EXP] 1295: [success_rate]: False, [answer]: 36, [output]: def solution():
    t_shirt_price = 8
    discount = 0.5
    t_shirts = 2
    discounted_price = t_shirt_price * (1 - discount)
    t_shirt_cost = discounted_price * t_shirts
    shoe_price = 40
    discount_shoe = 0.6
    shoe_cost = shoe_price * discount_shoe
    total_cost = t_shirt_cost + shoe_cost
    return total_cost

 Executed result: 32.0
[EXP] 1296: [success_rate]: True, [answer]: 2, [output]: 
def solution():
    allowance = 6
    weeks = 3
    allowance_total = allowance * weeks
    ice_cream_cost = 1.25 * 4
    movie_ticket_cost = 6.50
    total_spend = allowance_total + ice_cream_cost
    remaining_allowance = allowance_total - ice_cream_cost
    movie_tickets = remaining_allowance // movie_ticket_cost
    return movie_tickets

 Executed result: 2.0
[EXP] 1297: [success_rate]: True, [answer]: 335, [output]: def solution():
    ellen_leggings = 100
    ellen_photo_frame = 5
    ellen_total = ellen_leggings + ellen_photo_frame
    lani_sunglasses = 30
    lani_bathrobes = 2 * 100
    lani_total = lani_sunglasses + lani_bathrobes
    total_spent = ellen_total + lani_total
    return total_spent

 Executed result: 335
[EXP] 1298: [success_rate]: True, [answer]: 60, [output]: 
def solution():
    passion_fruit_price = 6
    jackfruit_price = 8
    honey_price = 10
    passion_fruit_per_jar = 2
    jackfruit_per_jar = 1.5
    honey_per_jar = 2
    cost_per_jar = passion_fruit_price * passion_fruit_per_jar + jackfruit_price * jackfruit_per_jar + honey_price * honey_per_jar
    profit_per_jar = 50 - cost_per_jar
    total_profit = profit_per_jar * 10
    return total_profit

 Executed result: 60.0
[EXP] 1299: [success_rate]: True, [answer]: 31, [output]: def solution():
    quarters = 32
    dimes = 95
    nickels = 120
    pennies = 750
    
    quarter_value = quarters * 0.25
    dime_value = dimes * 0.10
    nickel_value = nickels * 0.05
    penny_value = pennies * 0.01
    
    total_value = quarter_value + dime_value + nickel_value + penny_value
    return total_value

 Executed result: 31.0
[EXP] 1300: [success_rate]: True, [answer]: 13, [output]: def solution():
    money_initial = 40
    ice_cream_cost = 3.50
    ticket_cost = 7.50
    bracelet_cost = 8.50
    money_spent = ice_cream_cost + (ticket_cost * 2) + bracelet_cost
    money_left = money_initial - money_spent
    result = round(money_left, 2)
    return result

 Executed result: 13.0
[EXP] 1301: [success_rate]: True, [answer]: 120, [output]: 
def solution():
    cars_per_day = 3
    days_open = 5
    days_in_week = 7
    days_in_two_weeks = 14
    daily_income = cars_per_day * 4
    total_income = daily_income * days_open * 2
    return total_income

 Executed result: 120
[EXP] 1302: [success_rate]: True, [answer]: 23, [output]: 
def solution():
    oatmeal_cookies = 9
    chocolate_cookies = 4
    sugar_cookies = 5
    oatmeal_cookies_eaten = 3
    oatmeal_cookies_eaten_for_lunch = 2
    sugar_cookies_given = 2
    cookies_baked = 4
    cookies_baked_per_flavor = 4
    oatmeal_cookies_left = oatmeal_cookies - oatmeal_cookies_eaten - oatmeal_cookies_eaten_for_lunch
    sugar_cookies_left = sugar_cookies - sugar_cookies_given
    chocolate_cookies_left = chocolate_cookies
    total_cookies_left = oatmeal_cookies_left + sugar_cookies_left + chocolate_cookies_left
    for _ in range(cookies_baked):
        total_cookies_left += cookies_baked_per_flavor
    for flavor in range(cookies_baked_per_flavor):
        oatmeal_cookies_left += 1
        sugar_cookies_left += 1
        chocolate_cookies_left += 1
    result = oatmeal_cookies_left + sugar_cookies_left + chocolate_cookies_left
    return result

 Executed result: 23
[EXP] 1303: [success_rate]: True, [answer]: 72, [output]: def solution():
    toy_soldiers = 12
    half_soldiers = toy_soldiers // 2
    half_soldiers_earnings = half_soldiers * 5
    remaining_soldiers = toy_soldiers - half_soldiers
    remaining_soldiers_earnings = remaining_soldiers * 7
    total_earnings = half_soldiers_earnings + remaining_soldiers_earnings
    return total_earnings

 Executed result: 72
[EXP] 1304: [success_rate]: False, [answer]: 4, [output]: 
def solution():
    holes_dug = 6 * 14
    holes_filled = 0
    weeks = 0
    while holes_filled < holes_dug:
        if holes_filled + 9 <= holes_dug:
            holes_filled += 9
        else:
            holes_filled += holes_dug - holes_filled
        weeks += 1
    return weeks

 Executed result: 10
[EXP] 1305: [success_rate]: True, [answer]: 1000, [output]: def solution():
    norman_students = 4000
    butler_students = norman_students * 3/4
    difference = norman_students - butler_students
    return difference

 Executed result: 1000.0
[EXP] 1306: [success_rate]: True, [answer]: 2325, [output]: 
def solution():
    total_cookies = 7995
    rainbow_cookies = 2595
    oatmeal_cookies = 3075
    chocolate_chip_cookies = total_cookies - rainbow_cookies - oatmeal_cookies
    return chocolate_chip_cookies

 Executed result: 2325
[EXP] 1307: [success_rate]: False, [answer]: 2, [output]: def solution():
    test_tubes = 16
    beakers = 7
    petri_dishes = 14
    actual_test_tubes = test_tubes // 2
    actual_petri_dishes = petri_dishes + 2
    total_items = actual_test_tubes + beakers + actual_petri_dishes
    lost_beakers = beakers - (total_items - 29)
    return lost_beakers

 Executed result: 5
[EXP] 1308: [success_rate]: True, [answer]: 8, [output]: 
def solution():
    tables = 4
    legs_per_table = 4
    legs = tables * legs_per_table
    screws_per_leg = 2
    total_screws_needed = legs * screws_per_leg
    total_screws = 40
    screws_left = total_screws - total_screws_needed
    return screws_left

 Executed result: 8
[EXP] 1309: [success_rate]: True, [answer]: 30, [output]: def solution():
    eggs_in_first_basket = 10
    eggs_in_second_basket = 2 * eggs_in_first_basket
    total_eggs = eggs_in_first_basket + eggs_in_second_basket
    return total_eggs

 Executed result: 30
[EXP] 1310: [success_rate]: False, [answer]: 2280, [output]: def solution():
    alexandra = 430
    kim = alexandra + 320
    maryam = 300 + 400
    sarah = 300
    total = alexandra + kim + maryam + sarah
    return total

 Executed result: 2180
[EXP] 1311: [success_rate]: True, [answer]: 64, [output]: 
def solution():
    vanessa_distance = 4
    aaron_distance = vanessa_distance / 2
    aaron_time = 16
    vanessa_time = aaron_time * 2 * 2
    return vanessa_time

 Executed result: 64
[EXP] 1312: [success_rate]: True, [answer]: 594, [output]: def solution():
    dock_length = 200
    line_per_foot = 3
    line_already_have = 6
    line_needed = (dock_length * line_per_foot) - line_already_have
    return line_needed

 Executed result: 594
[EXP] 1313: [success_rate]: False, [answer]: 180, [output]: def solution():
    reservations = 6
    nights = 2
    weeks = 1
    meals = reservations * nights
    cost_per_meal = 5
    wine = 5
    total_cost_per_night = (meals * cost_per_meal) + wine
    total_cost_per_week = total_cost_per_night * weeks
    return total_cost_per_week

 Executed result: 65
[EXP] 1314: [success_rate]: True, [answer]: 2, [output]: def solution():
    cost = 80
    profit = 0.25
    total_sales = cost / (1 - profit)
    each_sales = total_sales / 50
    return each_sales

 Executed result: 2.1333333333333333
[EXP] 1315: [success_rate]: False, [answer]: 8, [output]: def solution():
    john_age_at_james_birth = 19
    james_age = 2022 - john_age_at_james_birth
    dora_age = 12 - 3
    john_youngest_age = 2022 - 32
    youngest_age_in_3_years = john_youngest_age + 3
    return youngest_age_in_3_years

 Executed result: 1993
[EXP] 1316: [success_rate]: True, [answer]: 5, [output]: def solution():
    ana_minutes_per_orange = 3
    jane_minutes_per_orange = 4
    total_minutes = 60
    ana_oranges = total_minutes // ana_minutes_per_orange
    jane_oranges = total_minutes // jane_minutes_per_orange
    ana_more = ana_oranges - jane_oranges
    return ana_more

 Executed result: 5
[EXP] 1317: [success_rate]: False, [answer]: 230, [output]: def solution():
    radiator_cost = 400
    discount = 0.2
    discount_cost = radiator_cost * discount
    final_cost = radiator_cost - discount_cost
    labor_cost = 3 * 50
    total_cost = final_cost + labor_cost
    return total_cost

 Executed result: 470.0
[EXP] 1318: [success_rate]: False, [answer]: 5, [output]: 
def solution():
    total_animals = 20
    total_legs = 70
    chicken_legs = total_legs - 4 * (total_animals - (total_legs // 4))
    chicken_animals = total_animals - (total_legs // 4)
    return chicken_animals

 Executed result: 3
[EXP] 1319: [success_rate]: True, [answer]: 14, [output]: def solution():
    pizzas = 7
    slices_per_pizza = 8
    total_slices = pizzas * slices_per_pizza
    friends = 4
    slices_per_friend = total_slices // friends
    remainder = total_slices % friends
    if remainder != 0:
        slices_per_friend += 1
    result = slices_per_friend
    return result

 Executed result: 14
